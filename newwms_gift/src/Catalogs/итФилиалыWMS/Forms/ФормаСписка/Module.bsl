
&НаСервере
Процедура СинхронизацияНаСервере()
ТаблицаФилиалов=Справочники.итФилиалыWMS.СобратьДанныеПоФилиалам();
ЗапроситьДанныеНаСервере(ТаблицаФилиалов);
для Каждого стр из ТаблицаФилиалов цикл
	Если стр.Ссылка.Код="" и  стр.Ссылка.Наименование=""  тогда
		НовыйУИД=стр.Ссылка.УникальныйИдентификатор();	
		НовыйЭлемент=Справочники.итФилиалыWMS.СоздатьЭлемент();
		СсылкаНового=Справочники.итФилиалыWMS.ПолучитьСсылку(НовыйУИД);
		НовыйЭлемент.УстановитьСсылкуНового(СсылкаНового);
		НовыйЭлемент.Наименование=стр.Наименование;
		НовыйЭлемент.Записать();
	КонецЕсли;	
КонецЦикла;

КонецПроцедуры
&НаСервере
Процедура ЗапроситьДанныеНаСервере(ТаблицаФилиалов)
	ПараметрыПрокиСервера=СформироватьПараметрыПроксиСервера();
	Если  WMSОповещениеОТиповыхОшибках(ПараметрыПрокиСервера) тогда
		Возврат;
	КонецЕсли;
	СтрокаПодключения=СформироватьСтрокуПодключения();
	Если СтрокаПодключения="" тогда
		Возврат
	КонецЕсли;	
	Данные=СериализаторДанных(новый Структура("КодСправочника,ТаблицаФилиалов","000000004",ТаблицаФилиалов));
	Определение=новый WSОпределения(СтрокаПодключения ,"webserv","111");
	Прокси = новый WSПрокси(Определение,ПараметрыПрокиСервера.URLПространствоИменСервиса,ПараметрыПрокиСервера.ИмяСервиса,ПараметрыПрокиСервера.ИмяТочкиПодключения);
	Прокси.Пользователь="webserv";
	Прокси.Пароль="111";
	Ответ=ДесериализаторДанных(Прокси.universal(Данные));
	Если  WMSОповещениеОТиповыхОшибках(Ответ) Тогда 
		Возврат;
	КонецЕсли;
	ТаблицаФилиалов=Ответ.ТаблицаФилиалов;
	///// описание обработчки данных
    

КонецПроцедуры

&НаКлиенте
Процедура Синхронизация(Команда)
	СинхронизацияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизации(Команда)
	ОткрытьФорму("Справочник.итФилиалыWMS.Форма.Настроки");
КонецПроцедуры


#Область СлужебныеФункцииИзОбщегоМодуляWMS
/// данные функции имеются в общем модуле итWMSСлужебныеПроцедурыИФункции  , однако для автономности данного справочника код вынесен сюда. 
Функция СформироватьПараметрыПроксиСервера()  
    Значение=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам("URLПространствоВебСервиса");
	//ХранилищеОбщихНастроек.Загрузить("WMSНастройки","WMSНастройки",,"WMSНастройки");
	Если не ТипЗнч(Значение)=Тип("Структура") тогда
		Возврат новый Структура("Статус,ОписаниеОшибки",404,"Произведите настройку подключения для получения данных");
	КонецЕсли;	
	Если не Значение.Свойство("URLПространствоВебСервиса") тогда
		Возврат  новый Структура("Статус,ОписаниеОшибки",404,"нет ключевого поля <<URLПространствоВебСервиса>>");
	КонецЕсли;	

URLПространствоВебСервиса=Значение.URLПространствоВебСервиса;
Структура=новый Структура;
Структура.Вставить("URLПространствоИменСервиса",СокрЛП(URLПространствоВебСервиса));
Структура.Вставить("ИмяСервиса",СокрЛП(URLПространствоВебСервиса));
Структура.Вставить("ИмяТочкиПодключения",СокрЛП(URLПространствоВебСервиса)+"Soap");

Возврат Структура
КонецФункции
Функция СформироватьСтрокуПодключения()  
	ПараметрыПодключения=СформироватьПараметрыПодключения();
	Если WMSОповещениеОТиповыхОшибках(ПараметрыПодключения) тогда
		Возврат ""
	КонецЕсли;	
	IPАдресСервера=ПараметрыПодключения.IPАдресСервера;
	ИмяПубликацииБазы=ПараметрыПодключения.ИмяПубликацииБазы;
	URLПространствоВебСервиса=ПараметрыПодключения.URLПространствоВебСервиса;
	
	СтрокаWSОпределения = "http://"+СокрЛП(IPАдресСервера)+"/"+СокрЛП(ИмяПубликацииБазы)+"/ws/"+СокрЛП(URLПространствоВебСервиса)+".1cws?wsdl";
	Возврат СтрокаWSОпределения;
КонецФункции
Функция СформироватьПараметрыПодключения() 
Значение=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам("IPАдресСервера,ИмяПубликацииБазы,URLПространствоВебСервиса");
Если не ТипЗнч(Значение)=Тип("Структура") тогда
Возврат новый Структура("Статус,ОписаниеОшибки",404,"Произведите настройку подключения для получения данных");
КонецЕсли;	
Если ТиповойОбработчикВыявленияОшибок(Значение,"IPАдресСервера") или ТиповойОбработчикВыявленияОшибок(Значение,"ИмяПубликацииБазы") или ТиповойОбработчикВыявленияОшибок(Значение,"URLПространствоВебСервиса") Тогда 
	Возврат Значение;
КонецЕсли;	
IPАдресСервера=СокрЛП(Значение.IPАдресСервера);
ИмяПубликацииБазы=СокрЛП(Значение.ИмяПубликацииБазы);
URLПространствоВебСервиса=СокрЛП(Значение.URLПространствоВебСервиса);
Структура=новый Структура("IPАдресСервера,ИмяПубликацииБазы,URLПространствоВебСервиса",IPАдресСервера,ИмяПубликацииБазы,URLПространствоВебСервиса);
Возврат Структура
КонецФункции
Функция ТиповойОбработчикВыявленияОшибок(СтруктураДанных,Свойство="") Экспорт 
	Ошибка = ложь;
	Если ТипЗнч(СтруктураДанных)<> тип("Структура") тогда
		СтруктураДанных=новый Структура;
		СтруктураДанных.Вставить("Статус",404);
		СтруктураДанных.Вставить("ОписаниеОшибки","Не верный формат данных----нужен тип <<Структура>>");
		Ошибка=Истина;
		Возврат Ошибка;
	КонецЕсли;
	////////////////////////
	Если Свойство="" тогда
		Возврат Ошибка;
	КонецЕсли;
	///////////////////
	Если не СтруктураДанных.Свойство(Свойство) тогда
		СтруктураДанных=новый Структура;
		СтруктураДанных.Вставить("Статус",404);
		СтруктураДанных.Вставить("ОписаниеОшибки","отсутсвует ключевое свойство <<"+Свойство+">> ");
		Ошибка=Истина;
		Возврат Ошибка;
	КонецЕсли;	
	Возврат Ошибка;	
КонецФункции
Функция WMSОповещениеОТиповыхОшибках(СтруктураДанных) Экспорт
	Ошибка = ложь;
	Если СтруктураДанных.Свойство("Статус") тогда
		Если СтруктураДанных.Статус=404 и СтруктураДанных.Свойство("ОписаниеОшибки") тогда
			Сообщить(СтруктураДанных.ОписаниеОшибки);
			Ошибка = Истина;
		ИначеЕсли  СтруктураДанных.Статус=404  тогда
			Сообщить("Ошибка обработчки данных");
			ошибка=Истина;
		КонецЕсли;	
	КонецЕсли;	
Возврат Ошибка;
КонецФункции
#Область КонвертацияДанных
Функция ДесериализаторДанных(Данные)Экспорт 
	ЧтениеданныхXML=новый ЧтениеXML;
	ЧтениеданныхXML.УстановитьСтроку(Данные);
	Данные= СериализаторXDTO.ПрочитатьXML(ЧтениеданныхXML);
    ЧтениеданныхXML.Закрыть();
	Возврат Данные;
КонецФункции
Функция  СериализаторДанных(Данные)Экспорт
	ДеревоДанныхXDTO=СериализаторXDTO.ЗаписатьXDTO(Данные);
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,ДеревоДанныхXDTO);
	Возврат ЗаписьXML.Закрыть();
КонецФункции
#КонецОбласти

#КонецОбласти