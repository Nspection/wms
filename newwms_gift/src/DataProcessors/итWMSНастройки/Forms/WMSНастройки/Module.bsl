
&НаСервере
Процедура СохранитьНаСервере()
	СписокРеквизитов=ПолучитьРеквизиты();
	СтруктураХраненияДанных=новый Структура;
	для Каждого Рекв из СписокРеквизитов цикл
		Если Рекв.Имя="Объект" тогда
			Продолжить;
		КонецЕсли;	
		Если ТипЗнч(ЭтаФорма[Рекв.Имя])=Тип("ДанныеФормыКоллекция") тогда
			СтруктураХраненияДанных.Вставить(Рекв.Имя,ЭтаФорма[Рекв.Имя].Выгрузить());
		иначе
			СтруктураХраненияДанных.Вставить(Рекв.Имя,ЭтаФорма[Рекв.Имя]);
		КонецЕсли;
	КонецЦикла;
	итWMSПривилегированныйМодуль.СохранитьНастройкиВХранилище(СтруктураХраненияДанных);
	//ХранилищеОбщихНастроек.Сохранить("WMSНастройки","WMSНастройки",СтруктураХраненияДанных,,"WMSНастройки");
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Значение=ХранилищеОбщихНастроек.Загрузить("WMSНастройки","WMSНастройки",,"WMSНастройки");
	Значение=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если ТипЗнч(Значение)=Тип("Структура") тогда
		СписокРеквизитов=ПолучитьРеквизиты();
		для Каждого Рекв из СписокРеквизитов цикл
				
			Если Значение.Свойство(Рекв.Имя) тогда
				Если ТипЗнч(Значение[Рекв.Имя])=тип("ТаблицаЗначений") тогда
					ЭтаФорма[Рекв.Имя].Загрузить(Значение[Рекв.Имя]);
				иначе
					ЭтаФорма[Рекв.Имя]=Значение[Рекв.Имя];
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		//ЗаполнитьЗначенияСвойств(ЭтаФорма,Значение);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаВнешнихWMSОтчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры
&НаКлиенте
Процедура ПодтянутьДанныеСоответствиеФилиаловИКа()Экспорт
	ПодтянутьДанныеСоответствиеФилиаловИКаНаСервере();
КонецПроцедуры
&НаКлиенте
Процедура ПодтянутьДанныеАдресовДоставкиПеремещение() Экспорт 
	ПодтянутьДанныеАдресовДоставкиПеремещениеСервер();
	КонецПроцедуры
&НаКлиенте	
Процедура ПодтянутьДанныеСписокаСкладовДляПеремещенияВСток() Экспорт 
ПодтянутьДанныеСписокаСкладовДляПеремещенияВСтокСервер();	
КонецПроцедуры
&НаКлиенте	
Процедура ПодтянутьДанныеЯчейкиИсключенияАвтоматическогоРазмещения() Экспорт 
	ПодтянутьДанныеЯчейкиИсключенияАвтоматическогоРазмещенияСервер();
КонецПроцедуры
&НаКлиенте	
Процедура ПодтянутьДанныеПричинОтменыКИнвентаризации() Экспорт 
	ПодтянутьДанныеПричинОтменыКИнвентаризацииСервер();
	КонецПроцедуры

&НаСервере
Процедура   ПодтянутьДанныеСоответствиеФилиаловИКаНаСервере()
	Значение=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если ТипЗнч(Значение)=Тип("Структура") тогда
		Если Значение.Свойство("СоответствиеФилиаловИКа") тогда
			СоответствиеФилиаловИКа.Очистить();
			СоответствиеФилиаловИКа.Загрузить(Значение.СоответствиеФилиаловИКа);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Процедура ПодтянутьДанныеАдресовДоставкиПеремещениеСервер()
	Значение=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если ТипЗнч(Значение)=Тип("Структура") тогда
		Если Значение.Свойство("АдресаДоставкиПеремещение") тогда
			АдресаДоставкиПеремещение.Очистить();
			АдресаДоставкиПеремещение.Загрузить(Значение.АдресаДоставкиПеремещение);
		КонецЕсли;
	КонецЕсли;	

	КонецПроцедуры
&НаСервере	
Процедура ПодтянутьДанныеСписокаСкладовДляПеремещенияВСтокСервер()
	Значение=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если ТипЗнч(Значение)=Тип("Структура") тогда
		Если Значение.Свойство("СписокСкладовДляПеремещенияВСток") тогда
			СписокСкладовДляПеремещенияВСток.Очистить();
			СписокСкладовДляПеремещенияВСток.Загрузить(Значение.СписокСкладовДляПеремещенияВСток);
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры
&НаСервере
Процедура ПодтянутьДанныеЯчейкиИсключенияАвтоматическогоРазмещенияСервер()
	Значение=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если ТипЗнч(Значение)=Тип("Структура") тогда
		Если Значение.Свойство("ЯчейкиИсключенияАвтоматическогоРазмещения") тогда
			ЯчейкиИсключенияАвтоматическогоРазмещения.Очистить();
			ЯчейкиИсключенияАвтоматическогоРазмещения.Загрузить(Значение.ЯчейкиИсключенияАвтоматическогоРазмещения);
		КонецЕсли;
	КонецЕсли;	

	КонецПроцедуры
&НаСервере	
Процедура ПодтянутьДанныеПричинОтменыКИнвентаризацииСервер()
	Значение=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если ТипЗнч(Значение)=Тип("Структура") тогда
		Если Значение.Свойство("СписокПричинОтменыКИнвентаризации") тогда
			СписокПричинОтменыКИнвентаризации.Очистить();
			СписокПричинОтменыКИнвентаризации.Загрузить(Значение.СписокПричинОтменыКИнвентаризации);
		КонецЕсли;
	КонецЕсли;	

		КонецПроцедуры
&НаКлиенте
Процедура НастроитьСоответствияФилиаловИКа(Команда)
	ОткрытьФорму("Обработка.итWMSНастройки.Форма.ФормаНастрокиСоотвФилиаловИКонтрагентов",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура БлокироватьПридвиженииНеКратноУпаковкиПриИзменении(Элемент)
	Если БлокироватьПридвиженииНеКратноУпаковкиПеремещение Тогда 
		ВыдаватьПредупрежденияПриДвиженииНеКратноУпаковкиПеремещение=Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыдаватьПредупрежденияПриДвиженииНеКратноУпаковкиПриИзменении(Элемент)
	Если БлокироватьПридвиженииНеКратноУпаковкиПеремещение Тогда 
		ВыдаватьПредупрежденияПриДвиженииНеКратноУпаковкиПеремещение=Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура АдресаДоставки(Команда)
	ОткрытьФорму("Обработка.итWMSНастройки.Форма.СписокАдресовДоставкиПеремещения",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СписокСкладовДляПеремещенияВСток(Команда)
	ОткрытьФорму("Обработка.итWMSНастройки.Форма.ФормаСпискаСкладовСтока",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкиИсключенияАвтоРазмещения(Команда)
	ОткрытьФорму("Обработка.итWMSНастройки.Форма.ФормаСпискаЯчеекИсключенияАвтоРазмещения",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПричиныОтменыКИнвентаризации(Команда)
	ОткрытьФорму("Обработка.итWMSНастройки.Форма.ФормаСпискаПричинОтменыКИнвентаризации",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
Элементы.ТипУстановкиБлокировок.СписокВыбора.Добавить("Режим совместимости 8.2.13");
Элементы.ТипУстановкиБлокировок.СписокВыбора.Добавить("Режим совместимости 8.3.+");
Элементы.ТипУстановкиБлокировок.ВыделенныйТекст=ТипУстановкиБлокировок;
ВидимостьДоступностьЭлементов();
КонецПроцедуры
&НаКлиенте
Процедура ВидимостьДоступностьЭлементов()  
	Если ИспользоватьВнешниеSQLТаблицы Тогда 
		Элементы.SQL_Настройки.Видимость=Истина;
	иначе
		Элементы.SQL_Настройки.Видимость=Ложь;
	КонецЕсли;
	КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнешнииSQLТаблицыПриИзменении(Элемент)
		ВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура НайстрокиРассчетаРасстоянияМеждуЯчейками(Команда)
	ОткрытьФорму("Обработка.итWMSНастройки.Форма.НастройкиРассчетаРасстоянияМеждуЯчейками",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУчётаТоваровВПути(Команда)
	ОткрытьФорму("Обработка.итWMSНастройки.Форма.ФормаНастроекТоварыВПути",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаБуферизацииЗадач(Команда)
	ОткрытьФорму("Обработка.итWMSНастройки.Форма.УнивирсальнаяФормаНастройкаЗапускаЗадания",новый Структура("ИмяПредопределенногоЗадания","ит_WMS_ЗаписьКорзиныЗадачWMS"),ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУдаленияМарокИзБазы(Команда)
	ОткрытьФорму("Обработка.итWMSНастройки.Форма.ФормаНастроекУдаленияМарок",,ЭтаФорма);
КонецПроцедуры




&НаКлиенте
Процедура НастройкаЗаданияЗаписиМарок(Команда)
	ОткрытьФорму("Обработка.итWMSНастройки.Форма.УнивирсальнаяФормаНастройкаЗапускаЗадания",новый Структура("ИмяПредопределенногоЗадания","итWMS_SQLЗаписьМарки"),ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура НастройкаЗаданияПолученияДанныхТранзита(Команда)
	ОткрытьФорму("Обработка.итWMSНастройки.Форма.УнивирсальнаяФормаНастройкаЗапускаЗадания",новый Структура("ИмяПредопределенногоЗадания","ИтWMSПолучениеДанныхТранзита"),ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура НастройкаЗаданияЗаписиДанныхТранзита(Команда)
ОткрытьФорму("Обработка.итWMSНастройки.Форма.УнивирсальнаяФормаНастройкаЗапускаЗадания",новый Структура("ИмяПредопределенногоЗадания","итWMSЗаписьДанныхТранзита"),ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура НастройкаСервисныхЗаданий(Команда)
	ОткрытьФорму("Обработка.итWMSНастройки.Форма.НастройкаСервесныхЗаданий",,ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура НастройкаЗаданияОчисткиКОА(Команда)
ОткрытьФорму("Обработка.итWMSНастройки.Форма.УнивирсальнаяФормаНастройкаЗапускаЗадания",новый Структура("ИмяПредопределенногоЗадания","итWMS_ОчискаКОА_ПоИстечениюСрока"),ЭтаФорма);
КонецПроцедуры

