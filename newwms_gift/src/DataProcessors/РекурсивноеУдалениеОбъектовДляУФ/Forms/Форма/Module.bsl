
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВыводитьКоличествоПодчиненныхЭлементов = Ложь;
	ВыводитьКоличествоУдаляемыхЭлементов = Истина;
	РежимВыводаДерева = "Все";
	СУчетомИерархииНеПомеченных = Ложь;
	
	вр_ДеревоМетаданных = РеквизитФормыВЗначение("ДеревоМетаданных");
	АдресДереваМетаданных = ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор);
	ЗаполнитьДеревоМетаданных(вр_ДеревоМетаданных,,,АдресДереваМетаданных);
	ЗначениеВРеквизитФормы(вр_ДеревоМетаданных,"ДеревоМетаданных");
	
	ОбрОбъект = РеквизитФормыВЗначение("Объект");
	АдресСхемы_Шаблона = ПоместитьВоВременноеХранилище(ОбрОбъект.ПолучитьМакет("Макет"),УникальныйИдентификатор);
	
	//Элементы.КоманднаяПанельДеревоОбъектов.Кнопки.Настройки.Кнопки.ВыводитьКоличествоУдаляемыхЭлементов.Пометка = ВыводитьКоличествоУдаляемыхЭлементов;
	//Элементы.КоманднаяПанельДеревоОбъектов.Кнопки.Настройки.Кнопки.ВыводитьКоличествоПодчиненныхЭлементов.Пометка = ВыводитьКоличествоПодчиненныхЭлементов;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиДереваМетаданных(Команда)
	УстановитьЗначениеФлажкаВДереве("ДеревоМетаданных", Истина);	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиДереваМетаданных(Команда)
	УстановитьЗначениеФлажкаВДереве("ДеревоМетаданных", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеФлажкаВДереве(НаименованиеДерева, ЗначениеФлажка)
	
	НаименованиеПоляСФлажком = ?(НаименованиеДерева = "ДеревоМетаданных", "Проверять", "Удалить");
	
	Для Каждого Строка Из ЭтаФорма[НаименованиеДерева].ПолучитьЭлементы() Цикл
		
		Строка[НаименованиеПоляСФлажком] = ЗначениеФлажка;
		УстановитьЗначениеФлажковПодчиненныхЭлементов(Строка.ПолучитьЭлементы(), НаименованиеПоляСФлажком, ЗначениеФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеФлажковПодчиненныхЭлементов(Строки, Поле, Значение)
	
	Для Каждого Строка Из Строки Цикл
		Строка[Поле] = Значение;
		УстановитьЗначениеФлажковПодчиненныхЭлементов(Строка.ПолучитьЭлементы(), Поле, Значение)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхПроверятьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.Проверять И ТекущиеДанные.ЕстьОтбор Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчисткаЗавершение",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,"Настройки отбора для текущего элемента будут очищены. Продолжить?",РежимДиалогаВопрос.ДаНет,,,"Очистка настроек отбора");
	Иначе
		УстановитьЗначениеФлажковПодчиненныхЭлементов(ТекущиеДанные.ПолучитьЭлементы(), "Проверять", ТекущиеДанные.Проверять);	
		ОбновитьНастройкиОтбора();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчисткаЗавершение(Результат,ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
		ТекущиеДанные.НастройкиОтбора.Элементы.Очистить();
		
		Значение = ТекущиеДанные.Проверять;
		УстановитьЗначениеФлажковПодчиненныхЭлементов(ТекущиеДанные.ПолучитьЭлементы(), "Проверять", Значение);
	
		ОбновитьНастройкиОтбора();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
		ТекущиеДанные.Проверять = НЕ ТекущиеДанные.Проверять;	
	КонецЕсли;	
Конецпроцедуры

&НаКлиенте
Процедура КомандаНайтиПомеченныеНаУдаление(Команда)
	ОбновитьДеревоОбъектов();
	ОбновитьНастройкиОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоОбъектов()
	
	ДеревоОбъектов.ПолучитьЭлементы().Очистить();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимПоискаСсылок",ПолучитьРежимПоискаСсылок());
	УстановитьСостояние("Поиск помеченных на удаление");
	ЗаполнитьДЗПомеченнымиНаУдаление(СтруктураПараметров, СУчетомИерархииНеПомеченных);
	ВывестиДеревоОбъектов();	
	//ОформитьДеревоОбъектов();
	
	УстановитьПредупреждение(Ложь);

КонецПроцедуры

&НаКЛиенте
Процедура УстановитьПредупреждение(ВыводитьПредупреждение)
	
	Если ВыводитьПредупреждение Тогда
		ТекстПредупреждения = "Внимание! Параметры детализации дерева объектов изменились. Требуется повторный поиск помеченных на удаление объектов.";
		ТекстКнопки = "Найти помеченные на удаление (!)";
	Иначе
		ТекстПредупреждения = "";
		ТекстКнопки = "Найти помеченные на удаление";
	КонецЕсли;
	
	//ЭлементыФормы.НадписьИнформация.Заголовок = ТекстПредупреждения;
	//ЭлементыФормы.КоманднаяПанельДеревоОбъектов.Кнопки.НайтиПомеченныеНаУдаление.Текст = ТекстКнопки;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДеревоОбъектов()
	
	Если ПустаяСтрока(АдресДереваОбъектов) Тогда 
		Возврат;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ПолучитьИзВременногоХранилища(АдресДереваОбъектов),"ДеревоОбъектов");
	
	Если РежимВыводаДерева = "Все" Тогда
		Возврат;
	ИначеЕсли РежимВыводаДерева = "Удаляемые" Тогда
		СкрытьСтроки(ДеревоОбъектов.ПолучитьЭлементы(), Ложь);
	ИначеЕсли РежимВыводаДерева = "Неудаляемые" Тогда
		СкрытьСтроки(ДеревоОбъектов.ПолучитьЭлементы(), Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СкрытьСтроки(Строки, ВозможноУдалить)
	
	КоличествоСтрок = Строки.Количество()-1;
	Для индекс = -КоличествоСтрок По 0 Цикл
		СкрытьСтроки(Строки[-индекс].ПолучитьЭлементы(), ВозможноУдалить);
		Если Строки[-индекс].ВозможноУдалить = ВозможноУдалить
			И Строки[-индекс].ПолучитьЭлементы().Количество() = 0 Тогда
			Строки.Удалить(Строки[-индекс]);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОтмеченныеОбъекты(Строки, РежимУдаления) Экспорт
	
	ТаблицаКлючей = ПолучитьИзВременногоХранилища(АдресТаблицыКлючейРегистров);
	
	Для Каждого Строка Из Строки Цикл
		Если Строка.Удалить Тогда
			Если РежимУдаления = "УдалитьОбъекты" Тогда
				Если ЭтоЗаписьРС(Строка.Данные) Тогда
					УдалитьЗаписьРС(Строка,ТаблицаКлючей);
				ИначеЕсли Строка.ВозможноУдалить ИЛИ ИгнорироватьВозможностьУдаления Тогда
					УдалитьОбъект(Строка.Данные,ЗагрузкаИстина);
				КонецЕсли;
			ИначеЕсли РежимУдаления = "ПометкаУдаления" Тогда
				Если Не Строка.ПометкаУдаления Тогда
					ПометитьОбъектНаУдаление(Строка.Данные,ЗагрузкаИстина);
				КонецЕсли;
			ИначеЕсли РежимУдаления = "УдалениеЗаписейРС" Тогда
				Если ЭтоЗаписьРС(Строка.Данные) Тогда
					УдалитьЗаписьРС(Строка,ТаблицаКлючей); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		УдалитьОтмеченныеОбъекты(Строка.ПолучитьЭлементы(), РежимУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьОбъектНаУдаление(Данные,ЗагрузкаИстина = Ложь) Экспорт
	Попытка
		Объект = Данные.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = ЗагрузкаИстина;
		Объект.УстановитьПометкуУдаления(Истина);
	Исключение
		Сообщить("Не удалось пометить на удаление объект: " + Объект);
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьЗаписьРС(СтрокаДерева,ТаблицаКлючей) Экспорт
	
	СтрокаРегистра = ТаблицаКлючей.Найти(СтрокаДерева.УидСтроки,"УидСтроки");
	
	Попытка
		Если СтрокаРегистра <> Неопределено Тогда
			МетаданныеРС = ПолучитьМетаданные(СтрокаРегистра.Данные);
			МЗ = РегистрыСведений[МетаданныеРС.Имя].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ, СтрокаРегистра.Данные);
			МЗ.Удалить();
		КонецЕсли;
	Исключение
		Сообщить("Не удалось удалить записи регистра сведений: " + ПолучитьПредставлениеЗаписиРС(СтрокаРегистра.Данные));
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМетаданные(Данные)
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Данные));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЗаписиРС(Данные) Экспорт
	
	ПредставлениеКлюча = "";
	
	МетаданныеРС = ПолучитьМетаданные(Данные);
	Для Каждого Измерение Из МетаданныеРС.Измерения Цикл
		Если ЗначениеЗаполнено(Данные[Измерение.Имя]) Тогда
			ПредставлениеКлюча = ПредставлениеКлюча + СокрЛП(Данные[Измерение.Имя]) + "; ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПредставлениеКлюча;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьОбъект(Данные,ЗагрузкаИстина = Ложь) Экспорт
	Попытка
		Объект = Данные.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = ЗагрузкаИстина;
		Объект.Удалить();
	Исключение
		Сообщить("Не удалось удалить объект: " + Объект);
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Функция ПолучитьРежимПоискаСсылок()
	
	Если СУчетомИерархииНеПомеченных Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ВеткаМетаданных Из ДеревоМетаданных.ПолучитьЭлементы() Цикл
		Для Каждого ОбъектМетаданных Из ВеткаМетаданных.ПолучитьЭлементы() Цикл
			Если Не ОбъектМетаданных.Проверять Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

&НаСервереБезКонтекста
Функция МассивПомеченныхНаУдаление()
	Возврат НайтиПомеченныеНаУдаление();
КонецФункции

&НаКлиенте
Процедура УстановитьСостояние(Состояние)
	
	#Если Клиент Тогда
	Состояние(Состояние + " (начало операции: " + Формат(ТекущаяДата(), "ДФ=Ч:мм:сс") + ")...");
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивОбрабатываемыхМетаданных()
	
	ВозвращаемыйМассив = Новый Массив();
	
	Для Каждого ВеткаМетаданных Из ДеревоМетаданных.ПолучитьЭлементы() Цикл
		Для Каждого ОбъектМетаданных Из ВеткаМетаданных.ПолучитьЭлементы() Цикл
			Если ОбъектМетаданных.Проверять Тогда
				ВозвращаемыйМассив.Добавить(ОбъектМетаданных.ИмяКоллекции);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВозвращаемыйМассив;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДЗПомеченнымиНаУдаление(СтруктураПараметров, СУчетомИерархииНеПомеченных) Экспорт
	
	ПоискВсехСсылок = СтруктураПараметров.РежимПоискаСсылок;
	
	мПомеченныеНаУдаление = МассивПомеченныхНаУдаление();
	
	МассивОбрабатываемыхМетаданных = ПолучитьМассивОбрабатываемыхМетаданных();
	ОбрабатываемыеПомеченныеНаУдаление = Новый Массив();
	МетаданныеОбрабатываемыхОбъектов = Новый Массив();
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	НовояКолонка = ТаблицаОбъектов.Колонки.Добавить("Объект");
	НовояКолонка = ТаблицаОбъектов.Колонки.Добавить("ИмяМетаданных");
	ТаблицаОбъектов.Индексы.Добавить("ИмяМетаданных");
	
	Для Каждого НайденныйОбъект Из мПомеченныеНаУдаление Цикл
		ИмяОбъектаМетаданных = НайденныйОбъект.Метаданные().ПолноеИмя();
		Если МассивОбрабатываемыхМетаданных.Найти(ИмяОбъектаМетаданных) <> Неопределено Тогда
			
			//ОбрабатываемыеПомеченныеНаУдаление.Добавить(НайденныйОбъект);
			СтрокаОбъектов = ТаблицаОбъектов.Добавить();
			СтрокаОбъектов.Объект = НайденныйОбъект;
			СтрокаОбъектов.ИмяМетаданных = ИмяОбъектаМетаданных;
						
			// потребуется для построения дерева метаданных только обрабатываемых объектов
			Если МетаданныеОбрабатываемыхОбъектов.Найти(ИмяОбъектаМетаданных) = Неопределено Тогда
				МетаданныеОбрабатываемыхОбъектов.Добавить(ИмяОбъектаМетаданных);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	мДеревоМетаданных = РеквизитФормыВЗначение("ДеревоМетаданных"); 
	
	Для Каждого ИмяОбрабатываемыхМетаданных ИЗ МетаданныеОбрабатываемыхОбъектов Цикл
		СтрокиСОбъектами = ТаблицаОбъектов.НайтиСтроки(Новый Структура("ИмяМетаданных",ИмяОбрабатываемыхМетаданных));
		
		СтрокаМД = мДеревоМетаданных.Строки.Найти(ИмяОбрабатываемыхМетаданных,"ИмяКоллекции",Истина); 
		
		Если СтрокаМД.ЕстьОтбор Тогда
		
			СхемаКД = ПолучитьСхемуКД(ИмяОбрабатываемыхМетаданных);
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКД.НастройкиПоУмолчанию);
			КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
			Для Каждого ЭлементОтбора Из СтрокаМД.НастройкиОтбора.Элементы Цикл
				ЭлементОтбораКД = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(ТипЗнч(ЭлементОтбора));
				ЗаполнитьЗначенияСвойств(ЭлементОтбораКД,ЭлементОтбора);
			КонецЦикла;
			//Добавим отбор только по найденным объектам
			СписокОбъектов = Новый СписокЗначений;
			Для Каждого СтрокаСОбъектом ИЗ СтрокиСОбъектами Цикл
				СписокОбъектов.Добавить(СтрокаСОбъектом.Объект);
			КонецЦикла;
			
			ЭлементОтбораКД = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбораКД.Использование = Истина;
			ЭлементОтбораКД.ПравоеЗначение = СписокОбъектов;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКД,КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			
			ТаблицаДанных = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
			Если ТаблицаДанных.Количество() Тогда
				Для Каждого СтрокаСОбъектом ИЗ ТаблицаДанных Цикл
					ОбрабатываемыеПомеченныеНаУдаление.Добавить(СтрокаСОбъектом.Ссылка);
				КонецЦикла;	
			КонецЕсли;
			
			КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбораКД);
			
		Иначе
			Для Каждого СтрокаСОбъектом ИЗ СтрокиСОбъектами Цикл
				ОбрабатываемыеПомеченныеНаУдаление.Добавить(СтрокаСОбъектом.Объект);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоОбъектов.ПолучитьЭлементы().Очистить();
	ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ДеревоОбъектов"),АдресДереваОбъектов);
	
	Если НЕ ОбрабатываемыеПомеченныеНаУдаление.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСсылки = ПолучитьВсеСсылкиНаУдаляемыеОбъекты(ОбрабатываемыеПомеченныеНаУдаление, ПоискВсехСсылок, СУчетомИерархииНеПомеченных);
	//НайденныеСсылки = ПолучитьВсеСсылкиНаУдаляемыеОбъекты(ОбрабатываемыеПомеченныеНаУдаление, Истина, СУчетомИерархииНеПомеченных);
	НайденныеСсылки.Индексы.Добавить("Ссылка");
	НайденныеСсылки.Индексы.Добавить("Данные");
	//НайденныеСсылки = ПолучитьВсеСсылкиНаУдаляемыеОбъекты(ОбрабатываемыеПомеченныеНаУдаление, Истина);
	
	ДЗ = РеквизитФормыВЗначение("ДеревоОбъектов");
	ЗаполнитьДеревоМетаданных(ДЗ, МетаданныеОбрабатываемыхОбъектов,,АдресДереваОбъектов);
	
	Количество = ОбрабатываемыеПомеченныеНаУдаление.Количество();
	индекс = 1;
	ТаблицаКлючейРегистров = Новый ТаблицаЗначений;
	НоваяКолонка = ТаблицаКлючейРегистров.Колонки.Добавить("УидСтроки");
	НоваяКолонка = ТаблицаКлючейРегистров.Колонки.Добавить("Данные");
		
	Для Каждого ПомеченныйНаУдалениеОбъект Из ОбрабатываемыеПомеченныеНаУдаление Цикл
		
		#Если Клиент Тогда
		Состояние("Вывод дерева объектов: " + Строка(индекс) + "/" + Строка(Количество));
		#КонецЕсли
		индекс = индекс + 1;
		
		ИмяОбъектаМетаданных = ПомеченныйНаУдалениеОбъект.Метаданные().ПолноеИмя();
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ИмяКоллекции", ИмяОбъектаМетаданных);
		НайденныеСтроки = ДЗ.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		
		// но по идее должна быть найдена всего одна строка ))
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = Строка.Строки.Добавить();
			НоваяСтрока.Удалить 		= Ложь;
			НоваяСтрока.Данные 			= ПомеченныйНаУдалениеОбъект;
			НоваяСтрока.ВозможноУдалить = Истина;
			НоваяСтрока.ПометкаУдаления = Истина;
			НоваяСтрока.ОбъектМетаданных = ПомеченныйНаУдалениеОбъект.Метаданные().ПолноеИмя();
			ЗаполнитьВетку(НоваяСтрока,,НайденныеСсылки, мПомеченныеНаУдаление,ТаблицаКлючейРегистров);			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Строка Из ДЗ.Строки Цикл
		Строка.Строки.Сортировать("Данные", Истина);
	КонецЦикла;
	
	ТаблицаКлючейРегистров.Индексы.Добавить("УидСтроки");
	
	АдресДереваОбъектов = ПоместитьВоВременноеХранилище(ДЗ,?(ПустаяСтрока(АдресДереваОбъектов),УникальныйИдентификатор,АдресДереваОбъектов));
	АдресТаблицыКлючейРегистров = ПоместитьВоВременноеХранилище(ТаблицаКлючейРегистров,?(ПустаяСтрока(АдресТаблицыКлючейРегистров),УникальныйИдентификатор,АдресТаблицыКлючейРегистров));
	ЗначениеВРеквизитФормы(ДЗ,"ДеревоОбъектов");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьВетку(СтрокаДЗ, ПодчиненныеЗаписиРСПозволяютУдалятьДокументы = Ложь, НайденныеСсылки, мПомеченныеНаУдаление, ТаблицаКлючейРегистров) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Ссылка", СтрокаДЗ.Данные);
	НайденныеСтроки = НайденныеСсылки.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		// если выше по иерархии ветки уже встречался объект, то его не выводим (иначе зациклится)
		Если ЭлементПрисутствуетВВетке(СтрокаДЗ, НайденнаяСтрока.Данные) Тогда
			СтрокаДЗ.ВозможноУдалить = ?(СтрокаДЗ.ВозможноУдалить, НайденнаяСтрока.Данные.ПометкаУдаления, СтрокаДЗ.ВозможноУдалить);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаДЗ.Строки.Добавить();
		НоваяСтрока.Удалить = Ложь;
		НоваяСтрока.Данные = НайденнаяСтрока.Данные;
		
		Если ЭтоЗаписьРС(НайденнаяСтрока.Данные) Тогда
			НоваяСтрока.ВозможноУдалить = Истина;
			НоваяСтрока.ПометкаУдаления = Истина;
			НоваяСтрока.УидСтроки = Новый УникальныйИдентификатор;
			СтрокаКлючей = ТаблицаКлючейРегистров.Добавить();
			СтрокаКлючей.УидСтроки = НоваяСтрока.УидСтроки;
			СтрокаКлючей.Данные = НайденнаяСтрока.Данные;
		Иначе
			Если мПомеченныеНаУдаление.Найти(НоваяСтрока.Данные) <> Неопределено Тогда
				ПометкаУдаления = Истина;
			Иначе
				ПометкаУдаления = Ложь;
			КонецЕсли;
			НоваяСтрока.ВозможноУдалить = ПометкаУдаления;
			НоваяСтрока.ПометкаУдаления = ПометкаУдаления;
		КонецЕсли;
		
		Если Не НоваяСтрока.ВозможноУдалить ИЛИ 
			(НЕ ПодчиненныеЗаписиРСПозволяютУдалятьДокументы И ЭтоЗаписьРС(НоваяСтрока.Данные)) Тогда
			УстановитьВозможностьУдаленияРодителей(НоваяСтрока);
		КонецЕсли;
		
		НоваяСтрока.ОбъектМетаданных = НайденнаяСтрока.Метаданные.ПолноеИмя();
		
		ЗаполнитьВетку(НоваяСтрока,,НайденныеСсылки, мПомеченныеНаУдаление, ТаблицаКлючейРегистров);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьВозможностьУдаленияРодителей(Строка)
	
	СтрокаРодитель = Строка.Родитель;
	
	Пока СтрокаРодитель <> Неопределено Цикл
		Если НЕ СтрокаРодитель.ВозможноУдалить Тогда
			Возврат;
		КонецЕсли;
		СтрокаРодитель.ВозможноУдалить = Ложь;
		СтрокаРодитель = СтрокаРодитель.Родитель;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭлементПрисутствуетВВетке(Знач Строка, Данные)
	
	Если ЭтоЗаписьРС(Данные) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаРодитель = Строка;
	
	Пока СтрокаРодитель <> Неопределено Цикл
		Если СтрокаРодитель.Данные = Данные Тогда
			Возврат Истина;
		КонецЕсли;
		СтрокаРодитель = СтрокаРодитель.Родитель;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоМетаданных(Дерево, ФильтрПоМетаданным = Неопределено, Проверять = Ложь, АдресДерева) Экспорт
	
	МД = ПолучитьСтруктуруОбрабатываемыхМетаданных();
	
	Для Каждого ОбъектМДКоллекция Из МД Цикл
		НомерКартинки = ОбъектМДКоллекция.ИндКартинки;
		
		НоваяСтрокаКоллекция = Дерево.Строки.Добавить();
		Если Дерево.Колонки.Найти("Данные") <> Неопределено Тогда
			НоваяСтрокаКоллекция.Данные = ПолучитьТекстРазбитыйНаСлова(ОбъектМДКоллекция.Имя);
			НоваяСтрокаКоллекция.ВозможноУдалить = Истина;
			НоваяСтрокаКоллекция.ПометкаУдаления = Истина;
		Иначе
			НоваяСтрокаКоллекция.Действие = ПолучитьТекстРазбитыйНаСлова(ОбъектМДКоллекция.Имя);
		КонецЕсли;
		НоваяСтрокаКоллекция.НомерКартинки = НомерКартинки;
		НоваяСтрокаКоллекция.ИмяКоллекции = ОбъектМДКоллекция.Имя;
		Если Дерево.Колонки.Найти("Проверять") <> Неопределено Тогда
			НоваяСтрокаКоллекция.Проверять = Проверять;
		КонецЕсли;
		
		ДобавитьСписокМетаданных (Дерево, НоваяСтрокаКоллекция, ФильтрПоМетаданным, Проверять);
		
	КонецЦикла;	
	
	ПоместитьВоВременноеХранилище(Дерево,АдресДерева);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСписокМетаданных (Дерево, СтрокаПриемник, ФильтрПоМетаданным, Проверять)
	
	СтрокаПриемник.Строки.Очистить();
	ИмяКоллекции = СтрокаПриемник.ИмяКоллекции;
	Коллекция = Метаданные[ИмяКоллекции];
	Для Каждого ОбъектМД Из Метаданные[ИмяКоллекции] Цикл
		
		// если в найденных помеченных на удаление объектах не имеется объектов данного типа,
		// то не создаем соответствующую ветку метаданных
		Если ФильтрПоМетаданным <> Неопределено
			И ФильтрПоМетаданным.Найти(ОбъектМД.ПолноеИмя()) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравоДоступа("Просмотр",ОбъектМД) Тогда
			НоваяСтрока = СтрокаПриемник.Строки.Добавить();
			ИмяОбъекта = ? (ПустаяСтрока(ОбъектМД.Синоним),ОбъектМД.Имя,ОбъектМД.Синоним);
			Если Дерево.Колонки.Найти("Данные") <> Неопределено Тогда
				НоваяСтрока.Данные = ИмяОбъекта;
				НоваяСтрока.ВозможноУдалить = Истина;
				НоваяСтрока.ПометкаУдаления = Истина;
			Иначе
				НоваяСтрока.Действие = ИмяОбъекта;
			КонецЕсли;
			НоваяСтрока.НомерКартинки = СтрокаПриемник.НомерКартинки;
			НоваяСтрока.ИмяКоллекции = ОбъектМД.ПолноеИмя();
			Если Дерево.Колонки.Найти("Проверять") <> Неопределено Тогда
				НоваяСтрока.Проверять = Проверять;
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЦикла;

	//Если пустая коллекция удалим
	Если СтрокаПриемник.Строки.Количество() = 0 Тогда
		Дерево.Строки.Удалить(СтрокаПриемник);
	Иначе
		Если Дерево.Колонки.Найти("Данные") <> Неопределено Тогда
			СтрокаПриемник.Строки.Сортировать("Данные Возр");
		Иначе
			СтрокаПриемник.Строки.Сортировать("Действие Возр");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//ПолучитьТекстРазбитыйНаСлова () Получает текст рабивая по словам
//Параметры:
//Возращает:(Строка) Текст разбитый на слова (например:'ЭтоГруппа' = 'Это Группа')
&НаСервереБезКонтекста
Функция ПолучитьТекстРазбитыйНаСлова(Знач Текст) Экспорт
	
	ОбработанаВсяСтрока = Ложь;
	ТекущийСимвол = 2;
	Пока Не ОбработанаВсяСтрока Цикл
		// Если текущая буква заглавная, а предыдущая нет, то...
		Если БукваЗаглавная(Сред(Текст, ТекущийСимвол, 1)) И
			Не БукваЗаглавная(Сред(Текст, ТекущийСимвол - 1, 1)) Тогда
			// Вставляем пробел, заглавную буквку превращаем в строчную и присоединяем остаток строки
			// Так как из-за пробела появился "лишний" символ, то добавим к счетчику символов единичку
			Текст = Лев(Текст, ТекущийСимвол - 1) + " " + НРег(Сред(Текст, ТекущийСимвол, 1)) + Прав(Текст, СтрДлина(Текст) - ТекущийСимвол);
			ТекущийСимвол = ТекущийСимвол + 1;
		КонецЕсли;
		ТекущийСимвол = ТекущийСимвол + 1;
		ОбработанаВсяСтрока = Не (СтрДлина(Текст) > ТекущийСимвол);
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции //ПолучитьТекстРазбитыйНаСлова

&НаКлиентеНаСервереБезКонтекста
Функция БукваЗаглавная(Буква) Экспорт
	
	Возврат Буква = ВРег(Буква);
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруОбрабатываемыхМетаданных() Экспорт
	
	МД = Новый ТаблицаЗначений;
	МД.Колонки.Добавить("Имя");
	МД.Колонки.Добавить("СинонимКоллекции");
	МД.Колонки.Добавить("ИндКартинки");

	НоваяСтрока = МД.Добавить();
	НоваяСтрока.ИндКартинки	= 1;
	НоваяСтрока.Имя			= "Справочники";
	НоваяСтрока.СинонимКоллекции	= "Справочники";
	НоваяСтрока = МД.Добавить();
	НоваяСтрока.ИндКартинки	= 2;
	НоваяСтрока.Имя			= "Документы";
	НоваяСтрока.СинонимКоллекции	= "Документы";
	НоваяСтрока = МД.Добавить();
	НоваяСтрока.ИндКартинки	= 3;
	НоваяСтрока.Имя			= "ПланыВидовХарактеристик";
	НоваяСтрока.СинонимКоллекции	= "Планы видов характеристик";
	НоваяСтрока = МД.Добавить();
	НоваяСтрока.ИндКартинки	= 7;
	НоваяСтрока.Имя			= "ПланыСчетов";
	НоваяСтрока.СинонимКоллекции = "Планы счетов";
	НоваяСтрока = МД.Добавить();
	НоваяСтрока.ИндКартинки	= 5;
	НоваяСтрока.Имя			= "ПланыВидовРасчета";
	НоваяСтрока.СинонимКоллекции = "Планы видов расчета";
	НоваяСтрока = МД.Добавить();
	НоваяСтрока.ИндКартинки	= 10;
	НоваяСтрока.Имя			= "БизнесПроцессы";
	НоваяСтрока.СинонимКоллекции = "Бизнес-процессы";
	НоваяСтрока = МД.Добавить();
	НоваяСтрока.ИндКартинки	= 9;
	НоваяСтрока.Имя			= "Задачи";
	НоваяСтрока.СинонимКоллекции = "Задачи";

	Возврат МД;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВсеСсылкиНаУдаляемыеОбъекты(Знач мПомеченныеНаУдаление, ПоискВсехСсылок = Истина, СУчетомИерархииНеПомеченных = Ложь) Экспорт
	
	НайденныеСсылкиНаУдаляемыеОбъекты = НайтиПоСсылкам(мПомеченныеНаУдаление);
	НайденныеСсылкиНаУдаляемыеОбъекты.Индексы.Добавить("Ссылка");
	
	НайденныеСсылкиНаУдаляемыеОбъекты.Сортировать("Данные");
	
	Если ПоискВсехСсылок Тогда
		Возврат НайденныеСсылкиНаУдаляемыеОбъекты;
	КонецЕсли;
	
	МассивНайденныхСсылок = Новый Массив();
	Для Каждого ЭлементМассива Из мПомеченныеНаУдаление Цикл
		МассивНайденныхСсылок.Добавить(ЭлементМассива);
	КонецЦикла;
	
	НайденныеСсылкиДляВозврата = НайденныеСсылкиНаУдаляемыеОбъекты.Скопировать();
	НайденныеСсылкиДляВозврата.Индексы.Добавить("Ссылка");
	
	НайденыВсеСсылки = Ложь;
	
	Пока Не НайденыВсеСсылки Цикл
		НайденыВсеСсылки = Истина;
		МассивДляНовогоПоиска = Новый Массив();		
		Для Каждого НайденнаяСсылка Из НайденныеСсылкиНаУдаляемыеОбъекты Цикл
			Если НЕ ЭтоЗаписьРС(НайденнаяСсылка.Данные)
				И (СУчетомИерархииНеПомеченных ИЛИ (НЕ СУчетомИерархииНеПомеченных И НайденнаяСсылка.Данные.ПометкаУдаления))
				И МассивНайденныхСсылок.Найти(НайденнаяСсылка.Данные) = Неопределено Тогда
				МассивНайденныхСсылок.Добавить(НайденнаяСсылка.Данные);
				МассивДляНовогоПоиска.Добавить(НайденнаяСсылка.Данные);
				НайденыВсеСсылки = Ложь;
			КонецЕсли;
		КонецЦикла;
		НайденныеСсылкиНаУдаляемыеОбъекты = НайтиПоСсылкам(МассивДляНовогоПоиска);
		Для Каждого НайденнаяНоваяСсылка Из НайденныеСсылкиНаУдаляемыеОбъекты Цикл
			ЗаполнитьЗначенияСвойств(НайденныеСсылкиДляВозврата.Добавить(), НайденнаяНоваяСсылка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат НайденныеСсылкиДляВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоЗаписьРС(Данные) Экспорт
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		Если СтрНайти(ВРег(Данные),ВРег("Регистрсведенийключзаписи")) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Если Найти(ТипЗнч(Данные), "Регистр сведений ключ записи") = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура РежимВыводаДереваПриИзменении(Элемент)
	ВывестиДеревоОбъектов();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиДеревоОбъектов(Команда)
	УстановитьЗначениеФлажкаВДереве("ДеревоОбъектов", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиДереваОбъектов(Команда)
	УстановитьЗначениеФлажкаВДереве("ДеревоМетаданных", Ложь);
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписиРегистровСведенийНаСервере()
	УдалитьОтмеченныеОбъекты(ДеревоОбъектов.ПолучитьЭлементы(), "УдалениеЗаписейРС");
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаписиРегистровСведений(Команда)
	УдалитьЗаписиРегистровСведенийНаСервере();
	ОбновитьДеревоОбъектов();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовУдалитьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Значение = ТекущиеДанные.Удалить;
	УстановитьЗначениеФлажковПодчиненныхЭлементов(ТекущиеДанные.ПолучитьЭлементы(), "Удалить", Значение);
КонецПроцедуры

&НаСервере
Процедура УдалитьОбъектыНаСервере()	
	
	УдалитьОтмеченныеОбъекты(ДеревоОбъектов.ПолучитьЭлементы(), "УдалитьОбъекты");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьОбъекты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВопросЗавершение",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,"Отмеченные записи в неподчиненных регистрах сведений и объекты, которые возможно удалить будут удалены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЗавершение(Результат,ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОбъектыНаСервере();
	ОбновитьДеревоОбъектов();
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуУдаленияНаСервере()
	УдалитьОтмеченныеОбъекты(ДеревоОбъектов.ПолучитьЭлементы(), "ПометкаУдаления");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаления(Команда)
	УстановитьПометкуУдаленияНаСервере();
	ОбновитьДеревоОбъектов();
КонецПроцедуры

&НаКлиенте
Процедура УдалениеВрежимеОбменДаннымиИстина(Команда)
	ЗагрузкаИстина = Не ЗагрузкаИстина;
	Элементы.ДеревоОбъектовУдалениеВрежимеОбменДаннымиИстина.Пометка = ЗагрузкаИстина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
		
	ОткрытьФормуЭлемента(ДеревоОбъектов.НайтиПоИдентификатору(ВыбраннаяСтрока));

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЭлемента(ВыбраннаяСтрока) Экспорт
		
	Если ЭтоЗаписьРС(ВыбраннаяСтрока.Данные) Тогда
		КлючЗаписи = ПолучитьКлючЗаписиРегистра(ВыбраннаяСтрока.УидСтроки,АдресТаблицыКлючейРегистров);
		Если КлючЗаписи <> Неопределено Тогда
			ПоказатьЗначение(,КлючЗаписи);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбраннаяСтрока.Данные) = Тип("Строка") Тогда
		Возврат;
	Иначе
		ПоказатьЗначение(,ВыбраннаяСтрока.Данные);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиРегистра(УидСтроки,АдресТаблицыКлючейРегистров)
	ТаблицаКлючей = ПолучитьИзВременногоХранилища(АдресТаблицыКлючейРегистров);
	СтрокаТаблицы = ТаблицаКлючей.Найти(УидСтроки,"УидСтроки");
	
	Возврат ?(СтрокаТаблицы = Неопределено,Неопределено,СтрокаТаблицы.Данные); 
Конецфункции

&НаКлиенте
Процедура ИгнорироватьПризнакВозможностиУдаления(Команда)
	ИгнорироватьВозможностьУдаления = НЕ ИгнорироватьВозможностьУдаления;
	Элементы.ДеревоОбъектовИгнорироватьПризнакВозможностиУдаления.Пометка = ИгнорироватьВозможностьУдаления;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхПриАктивизацииСтроки(Элемент)
	ОбновитьНастройкиОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиОтбора()
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КомпоновщикНастроекНастройкиОтбор.ТолькоПросмотр = НЕ ТекущиеДанные.Проверять ИЛИ ТекущиеДанные.ПолучитьРодителя() = Неопределено;
	
	КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	Если НЕ Элементы.КомпоновщикНастроекНастройкиОтбор.ТолькоПросмотр Тогда
		ПодключитьОбработчикОжидания("НастроитьОтборКомпоновкиДляЭлемента",0.1,Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборКомпоновкиДляЭлемента()
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	ИнициализироватьКомпоновщик(ТекущиеДанные.ИмяКоллекции);
	
	Если ТекущиеДанные.ЕстьОтбор Тогда
		Для Каждого НастройкаОтбора Из ТекущиеДанные.НастройкиОтбора.Элементы Цикл
			ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(ТипЗнч(НастройкаОтбора));
			ЗаполнитьЗначенияСвойств(ЭлементОтбора,НастройкаОтбора);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщик(ИмяТаблицы)
	ПолучитьСхемуКД(ИмяТаблицы);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
КонецПроцедуры

&НаСервере
Функция ПолучитьСхемуКД(ИмяТаблицы)
	СхемаКД = ПолучитьИзВременногоХранилища(АдресСхемы_Шаблона); 
	СхемаКД.НаборыДанных[0].Запрос = ТекстЗапросаНабораДанных(ИмяТаблицы);
		
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКД,УникальныйИдентификатор);
	
	Возврат СхемаКД;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗапросаНабораДанных(ИмяТаблицы)
	Возврат "Выбрать РАЗРЕШЕННЫЕ Ссылка Из " + ИмяТаблицы + " КАК " + Прав(ИмяТаблицы,СтрДлина(ИмяТаблицы) - СтрНайти(ИмяТаблицы,"."));
КонецФункции

&НаКлиенте
Процедура КомпоновщикНастроекОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда 
		ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
		
		Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Тогда
			ВсеВыключены = Истина;
			ТекущиеДанные.НастройкиОтбора.Элементы.Очистить();
			Для Каждого НастройкаОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				СтрокаОтбора = ТекущиеДанные.НастройкиОтбора.Элементы.Добавить(ТипЗнч(НастройкаОтбора));
				ЗаполнитьЗначенияСвойств(СтрокаОтбора,НастройкаОтбора);
				Если НастройкаОтбора.Использование Тогда
					ВсеВыключены = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			ТекущиеДанные.ЕстьОтбор = НЕ ВсеВыключены;
		Иначе
			ТекущиеДанные.ЕстьОтбор = Ложь;		
		КонецЕсли;
		
		ЗапомнитьИзмененияНаСервере(ТекущиеДанные.ИмяКоллекции,ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьИзмененияНаСервере(ИмяТаблицы,ИндексСтроки)
	
	Дерево = ПолучитьИзВременногоХранилища(АдресДереваМетаданных);
	
	ФСтрокаДерева = ДеревоМетаданных.НайтиПоИдентификатору(ИндексСтроки);
	СтрокаДерева = Дерево.Строки.Найти(ИмяТаблицы,"ИмяКоллекции",Истина);
	
	ЗаполнитьЗначенияСвойств(СтрокаДерева,ФСтрокаДерева);
	
	ПоместитьВоВременноеХранилище(Дерево,АдресДереваМетаданных);
КонецПроцедуры

&НаКлиенте
Процедура ИмяТаблицыПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОтобратьМетаданные",0.1,Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьМетаданные() Экспорт
	
	ОбработатьЭлементыДереваНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЭлементыДереваНаСервере()
	
	ОбработатьЭлементыДерева();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЭлементыДерева(СтрокаДерева = Неопределено, фСтрокаДерева = Неопределено)
	
	Если СтрокаДерева = Неопределено Тогда
		СтрокаДерева = ПолучитьИзВременногоХранилища(АдресДереваМетаданных);
		фСтрокаДерева = ДеревоМетаданных.ПолучитьЭлементы();
		фСтрокаДерева.Очистить();
	КонецЕсли;
		
	Для Каждого Строка ИЗ СтрокаДерева.Строки Цикл
		Если Строка.Родитель = Неопределено Тогда
			НоваяСтрока = фСтрокаДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			ОбработатьЭлементыДерева(Строка,НоваяСтрока);
		ИначеЕсли НЕ ПустаяСтрока(ПолеПоиска) Тогда
			Если СтрНайти(ВРег(Строка.Действие),ВРег(ПолеПоиска)) Тогда
				НоваяСтрока = фСтрокаДерева.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);	
			КонецЕсли;
		Иначе
			НоваяСтрока = фСтрокаДерева.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

