
// Функция - Запись данных построчно
//
// Параметры:
//  ИмяТаблицы					 - Строка -  Полный пусть до таблицы в  sql
//  СоответсвиеПолейИЗначений	 - Соответсвие -  Соотвествие полей и вставляемых значений
// 
// Возвращаемое значение:
// Строка  - сформированная строка для записи данных
//
Функция ЗаписьДанныхПострочно(ИмяТаблицы,СоответсвиеПолейИЗначений) Экспорт
	ЗаписьXMLПолей=новый ЗаписьXML;
	ЗаписьXMLПолей.УстановитьСтроку();
	ЗаписьXMLЗначений=новый ЗаписьXML;
	ЗаписьXMLЗначений.УстановитьСтроку();
	ЗаписьXMLИтоговый= новый ЗаписьXML;
	ЗаписьXMLИтоговый.УстановитьСтроку();
	ЗаписьXMLПолей.ЗаписатьБезОбработки("INSERT INTO ");
	ЗаписьXMLПолей.ЗаписатьБезОбработки(ИмяТаблицы);
	ЗаписьXMLПолей.ЗаписатьБезОбработки("
	|(");
	ВсегоЭлементов=СоответсвиеПолейИЗначений.Количество();
	Счетчик=1;
	Для Каждого ЭлементСоотв из СоответсвиеПолейИЗначений цикл
		ЗаписьXMLПолей.ЗаписатьБезОбработки("
		|");
		ЗаписьXMLПолей.ЗаписатьБезОбработки(ОбработкаКлючаЗаписи(Строка(ЭлементСоотв.Ключ)));
		ЗаписьXMLПолей.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов,",",""));
		ЗаписьXMLЗначений.ЗаписатьБезОбработки("
		|");
		ЗаписьXMLЗначений.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементСоотв.Значение));
		Значение=ФорматированиеПростыхТиповДанных(ЭлементСоотв.Значение);
		ЗаписьXMLЗначений.ЗаписатьБезОбработки(Значение);
		ЗаписьXMLЗначений.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементСоотв.Значение));
		ЗаписьXMLЗначений.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов,",",""));
		Счетчик =Счетчик+1;
	КонецЦикла;
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗаписьXMLПолей.Закрыть());
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(")
	|VALUES 
	|(");
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗаписьXMLЗначений.Закрыть());
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(")");
	Возврат ЗаписьXMLИтоговый.Закрыть();
КонецФункции

// Функция - Запись данных набором записей массив конкатинация
//
// Параметры:
//  ИмяТаблицы		 - Строка -  Полный пусть до таблицы в  sq
//  ТаблицаЗначений	 - ТаблицаЗначений	- таблица с данными для записи 
// 
// Возвращаемое значение:
//  Строка  - сформированная строка для записи данных
//
Функция ЗаписьДанныхНаборомЗаписей(ИмяТаблицы,ТаблицаЗначений) Экспорт 
	ЗаписьXMLИтоговый= новый ЗаписьXML;
	ЗаписьXMLИтоговый.УстановитьСтроку();
	
	
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки("INSERT INTO ");
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ИмяТаблицы);
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки("
	|(");
	//СтрокаПолей="";
	//СтрокаЗначений="";
	ВсегоПолей=ТаблицаЗначений.Колонки.Количество();
	Счетчик=1;
	Для Каждого Колонка из ТаблицаЗначений.Колонки цикл
		ЗаписьXMLИтоговый.ЗаписатьБезОбработки("
		|");
		ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ОбработкаКлючаЗаписи(Строка(Колонка.Имя)));
		ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(Счетчик<ВсегоПолей,",",""));
		Счетчик=Счетчик+1;
	КонецЦикла;
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(")
	|VALUES 
	|");
	ВсегоСтрок=ТаблицаЗначений.Количество();
	СчетчикСтрок=1;
	Для Каждого стр из ТаблицаЗначений цикл
		Счетчик=1;
		ЗаписьXMLИтоговый.ЗаписатьБезОбработки("(");
		Для Каждого Колонка из ТаблицаЗначений.Колонки цикл
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки("
			|");
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(стр[Колонка.Имя]));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ФорматированиеПростыхТиповДанных(стр[Колонка.Имя]));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(стр[Колонка.Имя]));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(Счетчик<ВсегоПолей,",",""));
			Счетчик=Счетчик+1;
		КонецЦикла;
		ЗаписьXMLИтоговый.ЗаписатьБезОбработки(")");
		ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(СчетчикСтрок<ВсегоСтрок,", ",""));
		СчетчикСтрок=СчетчикСтрок+1;
	КонецЦикла;
	
	Возврат ЗаписьXMLИтоговый.Закрыть();
КонецФункции

// Функция - Удаление данных со строгим отбором
//
// Параметры:
//  ИмяТаблицы					 - Строка -  Полный пусть до таблицы в  sql
//  СоответсвиеПолейИЗначений	 - 	Соответсвие -  Соотвествие полей и  значений по отбору для удаления
// 
// Возвращаемое значение:
// Строка  - сформированная строка для записи данных
//
Функция УдалениеДанныхСоСтрогимОтбором(ИмяТаблицы,СоответсвиеПолейИЗначений) Экспорт 
	ЗаписьXMLИтоговый= новый ЗаписьXML;
	ЗаписьXMLИтоговый.УстановитьСтроку();
	
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки("DELETE FROM ");
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ИмяТаблицы);
	Если СоответсвиеПолейИЗначений.Количество()=0 Тогда 
		Возврат ЗаписьXMLИтоговый.Закрыть();
	иначе
		ЗаписьXMLИтоговый.ЗаписатьБезОбработки("
		|");
	КонецЕсли;
	ВсегоЭлементов=СоответсвиеПолейИЗначений.Количество();
	Счетчик=1;
	//СтрокаОтбора="";
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки("WHERE ");
	Для Каждого ЭлементСоотв из СоответсвиеПолейИЗначений цикл
		ЗаписьXMLИтоговый.ЗаписатьБезОбработки("
		|");
		Если ТипЗнч(ЭлементСоотв.Значение)=Тип("Массив") Тогда
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ)));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(" IN (");
			КоличествоВМассиве=ЭлементСоотв.Значение.Количество();
			СчетчикМассива=1;
			Для Каждого ЭлементМассива из ЭлементСоотв.Значение цикл
				ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементМассива));
				ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ФорматированиеПростыхТиповДанных(ЭлементМассива));
				ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементМассива));
				ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(СчетчикМассива<КоличествоВМассиве,",",""));
				СчетчикМассива=СчетчикМассива+1;
			КонецЦикла;
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(")");
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		ИначеЕсли ТипЗнч(ЭлементСоотв.Значение)=Тип("Структура") Тогда 
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ)));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(" IN (");
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(СтрогоеЧтениеДанныхПоУсловиямПоКонкретнымПолям(ЭлементСоотв.Значение.ИмяТаблицы,ЭлементСоотв.Значение.МассивИменПолей,
			ЭлементСоотв.Значение.СоответсвиеПолейИЗначений));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(")");
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		иначе
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ)));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(" = ");
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементСоотв.Значение));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ФорматированиеПростыхТиповДанных(ЭлементСоотв.Значение));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементСоотв.Значение));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		КонецЕсли;
		Счетчик=Счетчик+1;
	КонецЦикла;
	Возврат ЗаписьXMLИтоговый.Закрыть();
КонецФункции


// Функция - Строгое чтение данных по условиям
//
// Параметры:
//  ИмяТаблицы					 - Строка -  Полный пусть до таблицы в  sql
//  СоответсвиеПолейИЗначений	 - Соответсвие -  Соотвествие полей и  значений по отбору для чтения
// 
// Возвращаемое значение:
// Строка  - сформированная строка для записи данных
//
Функция СтрогоеЧтениеДанныхПоУсловиям(ИмяТаблицы,СоответсвиеПолейИЗначений) Экспорт 
	ЗаписьXMLИтоговый= новый ЗаписьXML;
	ЗаписьXMLИтоговый.УстановитьСтроку();
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки("SELECT * FROM ");
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ИмяТаблицы);
	Если СоответсвиеПолейИЗначений.Количество()=0 Тогда 
		Возврат ЗаписьXMLИтоговый.Закрыть();
	иначе
		ЗаписьXMLИтоговый.ЗаписатьБезОбработки("
		|");
	КонецЕсли;
	ВсегоЭлементов=СоответсвиеПолейИЗначений.Количество();
	Счетчик=1;
	СтрокаОтбора="";
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки("WHERE ");
	Для Каждого ЭлементСоотв из СоответсвиеПолейИЗначений цикл
		ЗаписьXMLИтоговый.ЗаписатьБезОбработки("
		|");
		Если ТипЗнч(ЭлементСоотв.Значение)=Тип("Массив") Тогда 
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ)));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(" IN (");
			КоличествоВМассиве=ЭлементСоотв.Значение.Количество();
			СчетчикМассива=1;
			Для Каждого ЭлементМассива из ЭлементСоотв.Значение цикл
				ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементМассива));
				ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ФорматированиеПростыхТиповДанных(ЭлементМассива));
				ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементМассива));
				ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(СчетчикМассива<КоличествоВМассиве,",",""));
				СчетчикМассива=СчетчикМассива+1;
			КонецЦикла;
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(")");
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		ИначеЕсли ТипЗнч(ЭлементСоотв.Значение)=Тип("Структура") Тогда 
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ)));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(" IN (");
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(СтрогоеЧтениеДанныхПоУсловиямПоКонкретнымПолям(ЭлементСоотв.Значение.ИмяТаблицы,ЭлементСоотв.Значение.МассивИменПолей,
			ЭлементСоотв.Значение.СоответсвиеПолейИЗначений));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(")");
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		иначе	
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ)));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(" = ");
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементСоотв.Значение));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ФорматированиеПростыхТиповДанных(ЭлементСоотв.Значение));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементСоотв.Значение));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		КонецЕсли;
		Счетчик=Счетчик+1;
	КонецЦикла;
	
	Возврат ЗаписьXMLИтоговый.Закрыть();
КонецФункции

// Функция - Строгое чтение данных по условиям по конкретным полям
//
// Параметры:
//  ИмяТаблицы					 - Строка - ИмяТаблицыСчитывания
//  МассивИменПолей				 - Массив -  содержит строковое представление полей
//  СоответсвиеПолейИЗначений	 - Соответствие	 - соответсвие для отбора 
// 
// Возвращаемое значение:
// Строка  - команда чтения 
//
Функция СтрогоеЧтениеДанныхПоУсловиямПоКонкретнымПолям(ИмяТаблицы,МассивИменПолей,СоответсвиеПолейИЗначений) Экспорт 
	ЗаписьXMLПолей=новый ЗаписьXML;
	ЗаписьXMLПолей.УстановитьСтроку();
	ЗаписьXMLУсловий=новый ЗаписьXML;
	ЗаписьXMLУсловий.УстановитьСтроку();
	ЗаписьXMLИтоговый= новый ЗаписьXML;
	ЗаписьXMLИтоговый.УстановитьСтроку();
	
	ЗаписьXMLПолей.ЗаписатьБезОбработки("SELECT ");
	Счетчик=1;
	ВсегоЭлементов=МассивИменПолей.Количество();
	Для Каждого стр из МассивИменПолей цикл
		ЗаписьXMLПолей.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(стр)));
		ЗаписьXMLПолей.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов,", ",""));
	КонецЦикла;
	ЗаписьXMLПолей.ЗаписатьБезОбработки(" FROM ");
	ЗаписьXMLПолей.ЗаписатьБезОбработки(ИмяТаблицы);
	ЗаписьXMLПолей.ЗаписатьБезОбработки("
	|");
	
	ВсегоЭлементов=СоответсвиеПолейИЗначений.Количество();
	Счетчик=1;
	
	ЗаписьXMLУсловий.ЗаписатьБезОбработки("WHERE ");
	Для Каждого ЭлементСоотв из СоответсвиеПолейИЗначений цикл
		ЗаписьXMLУсловий.ЗаписатьБезОбработки("
		|");
		ЗаписьXMLУсловий.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ)));
		Если ТипЗнч(ЭлементСоотв.Значение)=Тип("Массив") Тогда 
			ЗаписьXMLУсловий.ЗаписатьБезОбработки(" IN (");
			КоличествоВМассиве=ЭлементСоотв.Значение.Количество();
			СчетчикМассива=1;
			Для Каждого ЭлементМассива из ЭлементСоотв.Значение цикл
				ЗаписьXMLУсловий.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементМассива));
				ЗаписьXMLУсловий.ЗаписатьБезОбработки(ФорматированиеПростыхТиповДанных(ЭлементМассива));
				ЗаписьXMLУсловий.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементМассива));
				ЗаписьXMLУсловий.ЗаписатьБезОбработки(?(СчетчикМассива<КоличествоВМассиве,",",""));
				СчетчикМассива=СчетчикМассива+1;
			КонецЦикла;
			ЗаписьXMLУсловий.ЗаписатьБезОбработки(")");
			ЗаписьXMLУсловий.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		иначе	
			ЗаписьXMLУсловий.ЗаписатьБезОбработки(" = ");
			ЗаписьXMLУсловий.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементСоотв.Значение));
			ЗаписьXMLУсловий.ЗаписатьБезОбработки(ФорматированиеПростыхТиповДанных(ЭлементСоотв.Значение));
			ЗаписьXMLУсловий.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементСоотв.Значение));
			ЗаписьXMLУсловий.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		КонецЕсли;
		Счетчик=Счетчик+1;
	КонецЦикла;
	
	
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗаписьXMLПолей.Закрыть());
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗаписьXMLУсловий.Закрыть());
	
	Возврат ЗаписьXMLИтоговый.Закрыть();
КонецФункции

// Функция - Строгое чтение данных по условиям для записи
//
// Параметры:
//  ИмяТаблицы					 - Строка -  Полный пусть до таблицы в  sql
//  СоответсвиеПолейИЗначений	 - Соответсвие -  Соотвествие полей и  значений по отбору для чтения
// 
// Возвращаемое значение:
// Строка  - сформированная строка для записи данных
//
Функция СтрогоеЧтениеДанныхПоУсловиямДляЗаписи(ИмяТаблицы,СоответсвиеПолейИЗначений) Экспорт 
	ЗаписьXMLИтоговый= новый ЗаписьXML;
	ЗаписьXMLИтоговый.УстановитьСтроку();
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки("SELECT * FROM ");
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ИмяТаблицы);
	Если СоответсвиеПолейИЗначений.Количество()=0 Тогда 
		Возврат ЗаписьXMLИтоговый.Закрыть();
	иначе
		ЗаписьXMLИтоговый.ЗаписатьБезОбработки("
		|");
	КонецЕсли;
	ВсегоЭлементов=СоответсвиеПолейИЗначений.Количество();
	Счетчик=1;
	СтрокаОтбора="";
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки("WHERE ");
	Для Каждого ЭлементСоотв из СоответсвиеПолейИЗначений цикл
		ЗаписьXMLИтоговый.ЗаписатьБезОбработки("
		|");
		Если ТипЗнч(ЭлементСоотв.Значение)=Тип("Массив") Тогда 
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ)));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(" IN (");
			КоличествоВМассиве=ЭлементСоотв.Значение.Количество();
			СчетчикМассива=1;
			Для Каждого ЭлементМассива из ЭлементСоотв.Значение цикл
				ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементМассива));
				ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ФорматированиеПростыхТиповДанных(ЭлементМассива));
				ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементМассива));
				ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(СчетчикМассива<КоличествоВМассиве,",",""));
				СчетчикМассива=СчетчикМассива+1;
			КонецЦикла;
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(")");
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		ИначеЕсли ТипЗнч(ЭлементСоотв.Значение)=Тип("Структура") Тогда 
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ)));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(" IN (");
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(СтрогоеЧтениеДанныхПоУсловиямПоКонкретнымПолям(ЭлементСоотв.Значение.ИмяТаблицы,ЭлементСоотв.Значение.МассивИменПолей,
			ЭлементСоотв.Значение.СоответсвиеПолейИЗначений));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(")");
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		иначе	
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ)));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(" = ");
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементСоотв.Значение));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ФорматированиеПростыхТиповДанных(ЭлементСоотв.Значение));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементСоотв.Значение));
			ЗаписьXMLИтоговый.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		КонецЕсли;
		Счетчик=Счетчик+1;
	КонецЦикла;
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(" FOR UPDATE");
	Возврат ЗаписьXMLИтоговый.Закрыть();
КонецФункции

// Функция - Строгая перезапись данных
//
// Параметры:
//  ИмяТаблицы					 - Строка -  Полный пусть до таблицы в  sql
//  СоответсвиеПолейИЗначений	 - Соответсвие -  поля и их данные для перезаписи
//  СоответсвиеОтбора			 - Соответсвие -  поля и их данные для отбора перезаписываемых значений
// 
// Возвращаемое значение:
// Строка  - сформированная строка для перезаписи  данных
//
Функция СтрогаяПерезаписьДанных(ИмяТаблицы,СоответсвиеПолейИЗначений,СоответсвиеОтбора) Экспорт 
	СтрокаКоманды="UPDATE "+ИмяТаблицы+" SET";
	ВсегоЭлементов=СоответсвиеПолейИЗначений.Количество();
	Счетчик=1;
	СтрокаЗаписи="";
	Для Каждого ЭлементСоотв из СоответсвиеПолейИЗначений цикл
		СтрокаЗаписи=СтрокаЗаписи+"
		|"+ОбработкаКлючаЗаписи(Строка(ЭлементСоотв.Ключ))+" = "+ЗнакЭкранирования(ЭлементСоотв.Значение)+ФорматированиеПростыхТиповДанных(ЭлементСоотв.Значение)+ЗнакЭкранирования(ЭлементСоотв.Значение)+?(Счетчик<ВсегоЭлементов,",","");
		Счетчик=Счетчик+1;
	КонецЦикла;
	ВсегоЭлементов=СоответсвиеОтбора.Количество();
	Счетчик=1;
	СтрокаОтбора="";
	ЗаписьXMLЧтения= новый ЗаписьXML;
	ЗаписьXMLЧтения.УстановитьСтроку();
	Для Каждого ЭлементСоотв из СоответсвиеОтбора цикл
		ЗаписьXMLЧтения.ЗаписатьБезОбработки("
		|");
		Если ТипЗнч(ЭлементСоотв.Значение)=Тип("Массив") Тогда 
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ)));
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(" IN (");
			КоличествоВМассиве=ЭлементСоотв.Значение.Количество();
			СчетчикМассива=1;
			Для Каждого ЭлементМассива из ЭлементСоотв.Значение цикл
				ЗаписьXMLЧтения.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементМассива));
				ЗаписьXMLЧтения.ЗаписатьБезОбработки(ФорматированиеПростыхТиповДанных(ЭлементМассива));
				ЗаписьXMLЧтения.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементМассива));
				ЗаписьXMLЧтения.ЗаписатьБезОбработки(?(СчетчикМассива<КоличествоВМассиве,",",""));
				СчетчикМассива=СчетчикМассива+1;
			КонецЦикла;
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(")");
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		ИначеЕсли ТипЗнч(ЭлементСоотв.Значение)=Тип("Структура") Тогда 
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ)));
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(" IN (");
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(СтрогоеЧтениеДанныхПоУсловиямПоКонкретнымПолям(ЭлементСоотв.Значение.ИмяТаблицы,ЭлементСоотв.Значение.МассивИменПолей,
			ЭлементСоотв.Значение.СоответсвиеПолейИЗначений));
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(")");
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		иначе	
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ)));
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(" = ");
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементСоотв.Значение));
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(ФорматированиеПростыхТиповДанных(ЭлементСоотв.Значение));
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(ЗнакЭкранирования(ЭлементСоотв.Значение));
			ЗаписьXMLЧтения.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов," AND ",""));
		КонецЕсли;
		Счетчик=Счетчик+1;
		//Для Каждого ЭлементСоотв из СоответсвиеОтбора цикл
		//	СтрокаОтбора=СтрокаОтбора+"
		//	|"+ОбработкаКлючаЧтения(Строка(ЭлементСоотв.Ключ))+" = "+"'"+ФорматированиеПростыхТиповДанных(ЭлементСоотв.Значение)+"'"+?(Счетчик<ВсегоЭлементов," AND ","");
		//	Счетчик=Счетчик+1;
	КонецЦикла;
	СтрокаОтбора =ЗаписьXMLЧтения.Закрыть();
	
	СтрокаКоманды=СтрокаКоманды+СтрокаЗаписи+" WHERE "+СтрокаОтбора;
	Возврат СтрокаКоманды;	
КонецФункции

// Функция - Создать временную таблицу со считыванием
//
// Параметры:
//  ИмяТаблицы		 - Строка - Имя временной таблицы 
//  СтрокаСчитывания - Строка - команды Select сформированная заранее
// 
// Возвращаемое значение:
// Строка  -  Команда с учетом Создания временной таблицы
//
Функция СоздатьВременнуюТаблицуСоСчитыванием(ИмяТаблицы,СтрокаСчитывания) Экспорт 
	ЗаписьXMLИтоговый= новый ЗаписьXML;
	ЗаписьXMLИтоговый.УстановитьСтроку();
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки("CREATE TEMP TABLE");
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки("""");
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(ИмяТаблицы);
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки("""");
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки("ON COMMIT DROP as
	|");
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки(СтрокаСчитывания);
	ЗаписьXMLИтоговый.ЗаписатьБезОбработки("
	|;");
	Возврат ЗаписьXMLИтоговый.Закрыть();
КонецФункции

// Функция - Создать временную таблицу с объявлением данных
//
// Параметры:
//  ИмяТаблицы				 - Строка - имя создаваемой временной таблицы 
//  СоответсвиеПолейИТипов	 - Соответсвие - соответсвие полей и типов полей: тип поля является строкой 
//  МассивИндексации         - Массив -  массив индексируемых полей (Строгий индекс- без составных)
// 
// Возвращаемое значение:
// Строка  - команда создающая таблицу 
//
Функция СоздатьВременнуюТаблицуСОбъявлениемДанных(ИмяТаблицы,СоответсвиеПолейИТипов,МассивИндексации=Неопределено) Экспорт 
	Если МассивИндексации=Неопределено Тогда 
		МассивИндексации=новый Массив;
	КонецЕсли;
	ЗаписьXMLПолей=новый ЗаписьXML;
	ЗаписьXMLПолей.УстановитьСтроку();
	ЗаписьXMLПолей.ЗаписатьБезОбработки("CREATE  TEMP TABLE ");
	ЗаписьXMLПолей.ЗаписатьБезОбработки(ИмяТаблицы);
	ЗаписьXMLПолей.ЗаписатьБезОбработки("(
	|");
	ВсегоЭлементов=СоответсвиеПолейИТипов.Количество();
	Счетчик=1;
	Для Каждого ЭлементСоотв из СоответсвиеПолейИТипов цикл
		ЗаписьXMLПолей.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(ЭлементСоотв.Ключ));
		ЗаписьXMLПолей.ЗаписатьБезОбработки(" ");
		ЗаписьXMLПолей.ЗаписатьБезОбработки(ЭлементСоотв.Значение);
		ЗаписьXMLПолей.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов,",",""));
		Счетчик=Счетчик+1;	
	КонецЦикла;
	ЗаписьXMLПолей.ЗаписатьБезОбработки(");");
	Для Каждого стр из МассивИндексации цикл
		ЗаписьXMLПолей.ЗаписатьБезОбработки(" 
		|CREATE INDEX ON ");
		ЗаписьXMLПолей.ЗаписатьБезОбработки(ИмяТаблицы);
		ЗаписьXMLПолей.ЗаписатьБезОбработки("USING btree (");
		ЗаписьXMLПолей.ЗаписатьБезОбработки("""");
		ЗаписьXMLПолей.ЗаписатьБезОбработки(стр);
		ЗаписьXMLПолей.ЗаписатьБезОбработки(""""); 	
		ЗаписьXMLПолей.ЗаписатьБезОбработки(")");
	КонецЦикла;
	Если МассивИндексации.Количество()>0 Тогда 
		ЗаписьXMLПолей.ЗаписатьБезОбработки(";");
		ЗаписьXMLПолей.ЗаписатьБезОбработки("
		|ANALYSE ");
		ЗаписьXMLПолей.ЗаписатьБезОбработки(ИмяТаблицы);
		ЗаписьXMLПолей.ЗаписатьБезОбработки(";");
	КонецЕсли;
	Возврат ЗаписьXMLПолей.Закрыть();
КонецФункции

// Функция - Удаление временной таблицы
//
// Параметры:
//  ИмяТаблицы	 - Строка -  Имя удаляемой временной таблицы
// 
// Возвращаемое значение:
// Строка -  команда удаления
//
Функция УдалениеВременнойТаблицы(ИмяТаблицы)Экспорт 
	ЗаписьXMLПолей=новый ЗаписьXML;
	ЗаписьXMLПолей.УстановитьСтроку();
	ЗаписьXMLПолей.ЗаписатьБезОбработки("DROP TABLE IF EXISTS ");
	ЗаписьXMLПолей.ЗаписатьБезОбработки(ИмяТаблицы);
	ЗаписьXMLПолей.ЗаписатьБезОбработки(";");
	Возврат ЗаписьXMLПолей.Закрыть();
КонецФункции

// Функция - Вставить данные из в ременной таблицы
//
// Параметры:
//  ИмяТаблицыДобавления			 - Строка	 -  имя таблицы куда добавляем данные
//  ИмяТаблицыСчитывания			 - Строка	 -  имя временной таблицы от куда забираем данные
//  СоответсвиеПолейДобавленияЧтения - Соответствие	 -  Имена полей в таблицу добавления соответсвующие иемнам полей в таблице чтения
// 
// Возвращаемое значение:
// Строка - комана добавления данных 
//
Функция ВставитьДанныеИзВРеменнойТаблицы(ИмяТаблицыДобавления,ИмяТаблицыСчитывания,СоответсвиеПолейДобавленияЧтения) Экспорт 
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXMLПолейЧтения=новый ЗаписьXML;
	ЗаписьXMLПолейЧтения.УстановитьСтроку();	
	ЗаписьXMLПолейЧтения.ЗаписатьБезОбработки("
	|SELECT 
	|");
	ЗаписьXMLПолейДобавления=новый ЗаписьXML;
	ЗаписьXMLПолейДобавления.УстановитьСтроку();
	ЗаписьXMLПолейДобавления.ЗаписатьБезОбработки("INSERT INTO ");
	ЗаписьXMLПолейДобавления.ЗаписатьБезОбработки(ИмяТаблицыДобавления);
	ЗаписьXMLПолейДобавления.ЗаписатьБезОбработки(" (");
	ВсегоЭлементов=СоответсвиеПолейДобавленияЧтения.Количество();
	Счетчик=1;
	Для Каждого ЭлементСоотв из СоответсвиеПолейДобавленияЧтения цикл
		ЗаписьXMLПолейДобавления.ЗаписатьБезОбработки(ОбработкаКлючаЗаписи(ЭлементСоотв.Ключ));
		ЗаписьXMLПолейДобавления.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов,",
		|",""));
		ЗаписьXMLПолейЧтения.ЗаписатьБезОбработки(ИмяТаблицыСчитывания);
		ЗаписьXMLПолейЧтения.ЗаписатьБезОбработки(".");
		ЗаписьXMLПолейЧтения.ЗаписатьБезОбработки(ОбработкаКлючаЧтения(ЭлементСоотв.Значение));
		ЗаписьXMLПолейЧтения.ЗаписатьБезОбработки(?(Счетчик<ВсегоЭлементов,",
		|",""));
		Счетчик=Счетчик+1;
	КонецЦикла;
	ЗаписьXMLПолейЧтения.ЗаписатьБезОбработки(" 
	|FROM ");
	ЗаписьXMLПолейЧтения.ЗаписатьБезОбработки(ИмяТаблицыСчитывания);
	ЗаписьXMLПолейДобавления.ЗаписатьБезОбработки(")");
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLПолейДобавления.Закрыть());
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLПолейЧтения.Закрыть());
	Возврат ЗаписьXML.Закрыть();	
КонецФункции

Функция МассивВСтроку(Массив,Знач Обход=0)
	Если Обход<3 Тогда 
		Попытка
			Возврат	ЗначениеВСтрокуВнутр(Массив);
		Исключение
			Обход=Обход+1;
			Возврат МассивВСтроку(Массив,Обход);
		КонецПопытки;
	КонецЕсли;
	ВызватьИсключение "Ошибка преобразования строки";	
КонецФункции

Функция ОбработкаКлючаЧтения(Знач Значение)
	СимволТочки=0;
	Если Найти(Значение,".") тогда
		СимволТочки=Найти(Значение,".");
	КонецЕсли;
	Если Найти(Значение,"_") Тогда 
		СимволТочки=Найти(Значение,"_");
	КонецЕсли ;
	Если СимволТочки>0 Тогда 
		СтрокаВозврата="("+""""+Лев(Значение,СимволТочки-1)+""""+")."+""""+Прав(Значение,СтрДлина(Значение)-СимволТочки)+"""";	
	иначе
		СтрокаВозврата= """"+Значение+"""";
	КонецЕсли;
	Возврат СтрокаВозврата;
КонецФункции

Функция ОбработкаКлючаЗаписи(Знач Значение)
	СимволТочки=0;
	Если Найти(Значение,".") тогда
		СимволТочки=Найти(Значение,".");
	КонецЕсли;
	Если Найти(Значение,"_") Тогда 
		СимволТочки=Найти(Значение,"_");
	КонецЕсли ;
	Если СимволТочки>0 Тогда 
		СтрокаВозврата=Лев(Значение,СимволТочки-1)+""""+"."+""""+Прав(Значение,СтрДлина(Значение)-СимволТочки);	
	иначе
		СтрокаВозврата= Значение;
	КонецЕсли;
	Возврат """"+СтрокаВозврата+"""";
	
КонецФункции

Функция ФорматированиеПростыхТиповДанных(Значение)
	Если ТипЗнч(Значение)=Тип("Булево") Тогда 
		Если Значение Тогда 
			Возврат "True";
		иначе
			Возврат "False";
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Значение)=Тип("Дата") Тогда 
		Возврат Формат(Значение,"ДФ='yyyy-MM-dd HH:mm:ss'; ДП=-infinity");
	КонецЕсли;
	Возврат Строка(Значение);	
КонецФункции

Функция ЕстьНаличиеКовычки(Знач Значение)
	Попытка
		Значение=Строка(Значение);
		Если Найти(Значение,"'") Тогда 
			Возврат Истина;
		иначе
			Возврат Ложь;
		КонецЕсли;	
	Исключение
		Возврат Ложь;
	КонецПопытки;	
КонецФункции


Функция ЗнакЭкранирования(Знач Значение)
	Если ЕстьНаличиеКовычки(Значение) Тогда 
	Возврат "$$" иначе
		Возврат "'"
	КонецЕсли;
	
КонецФункции
Функция ПутьДоТаблицы(Схема="",ИмяТаблицы) Экспорт 
	Если Схема="" Тогда 
		Возврат """"+ИмяТаблицы+"""";
	иначе
		Возврат Схема+"."+""""+ИмяТаблицы+"""";
	КонецЕсли;
КонецФункции