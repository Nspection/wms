&НаСервере
Процедура СохранитьНастройкиНаСервере()
	СписокРеквизитов=ПолучитьРеквизиты();
	СтруктураХраненияДанных=новый Структура;
	для Каждого Рекв из СписокРеквизитов цикл
		Если Рекв.Имя="Объект" тогда
			Продолжить;
		КонецЕсли;	
		Если ТипЗнч(ЭтаФорма[Рекв.Имя])=Тип("ДанныеФормыКоллекция") тогда
			Если  Рекв.Имя="ТаблицаМаршрутов" Тогда 
				Продолжить;
			КонецЕсли;	
			СтруктураХраненияДанных.Вставить(Рекв.Имя,ЭтаФорма[Рекв.Имя].Выгрузить());
		иначе
			СтруктураХраненияДанных.Вставить(Рекв.Имя,ЭтаФорма[Рекв.Имя]);
		КонецЕсли;
	КонецЦикла;
	ХранилищеОбщихНастроек.Сохранить("WMSНастройкаРозницы","WMSНастройкаРозницы",СтруктураХраненияДанных,,"WMSНастройкаРозницы");
	ВывестиВЛог(ФорматированнаяСтрокаОписание("Настройки сохранены",,WebЦвета.Черный));
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Значение=ХранилищеОбщихНастроек.Загрузить("WMSНастройкаРозницы","WMSНастройкаРозницы",,"WMSНастройкаРозницы");
	Если ТипЗнч(Значение)=Тип("Структура") тогда
		СписокРеквизитов=ПолучитьРеквизиты();
		для Каждого Рекв из СписокРеквизитов цикл
			
			Если Значение.Свойство(Рекв.Имя) тогда
				Если ТипЗнч(Значение[Рекв.Имя])=тип("ТаблицаЗначений") тогда
					ЭтаФорма[Рекв.Имя].Загрузить(Значение[Рекв.Имя]);
				иначе
					ЭтаФорма[Рекв.Имя]=Значение[Рекв.Имя];
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		//ЗаполнитьЗначенияСвойств(ЭтаФорма,Значение);
	КонецЕсли;	
	//ДатаАнализа=ТекущаяДата();
КонецПроцедуры

&НаСервере
Процедура СоздатьПеремещенияПодРозницуНаСервере()
	ПозицийОбработано=0;
	//НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаКСнабжению(); 	
	Запрос.УстановитьПараметр("ВремяКонец", ВремяКонец);
	Запрос.УстановитьПараметр("ВремяНачало", ВремяНачало);
	Запрос.УстановитьПараметр("ДатаАнализа", ДатаАнализа);	
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить();
	РассчитатьОстаткиНоменклатуры(МенеджерВременныхТаблиц);
	ВыборкаСклада = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСклада.Следующий() Цикл
		ВывестиВЛог(ФорматированнаяСтрокаОписание("Обработка скалада "+Строка(ВыборкаСклада.Склад),,WebЦвета.Древесный));
		ТаблицаТоваровДляПеремещения= СоздатьТаблицуТоваровПеремещения();
		ВыборкаДетальныеЗаписи=ВыборкаСклада.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтруктураПараметров=новый Структура;
			СтруктураПараметров.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура);
			СтруктураПараметров.Вставить("КСнабжению",ВыборкаДетальныеЗаписи.КСнабжению);
			СтруктураПараметров.Вставить("Склад",ВыборкаСклада.Склад);
			//СтруктураПараметров.Вставить("НастройкиWMS",НастройкиWMS);
			СтруктураПараметров.Вставить("МенеджерВременныхТаблиц",МенеджерВременныхТаблиц);
			СтруктураПараметров.Вставить("ТаблицаТоваровДляПеремещения",ТаблицаТоваровДляПеремещения);
			СоздатьТаблицыДляРассчета(СтруктураПараметров);
			Если СобратьТоварИзПикинга Тогда 
				ПоискТовараВПикинге(СтруктураПараметров);
			КонецЕсли;
			Если СобратьТоварИзЗоныХранения Тогда 
				Если СтруктураПараметров.КСнабжению>0 Тогда 
					ПоискТовараВЯчейкахХранения(СтруктураПараметров);
				КонецЕсли;	
			КонецЕсли;		
			Если СтруктураПараметров.КСнабжению>0 Тогда 
				ВывестиВЛог(ФорматированнаяСтрокаОписание(" Номенклатура " +Строка(СтруктураПараметров.Номенклатура)+" в количестве "+ Строка(СтруктураПараметров.КСнабжению)+" не найдена в свободном остатке",,WebЦвета.Красный));
			КонецЕсли;
			ПозицийОбработано=ПозицийОбработано+1;
			Элементы.СостояниеОбработки.Заголовок="Позиций обработано: "+Строка(ПозицийОбработано);
		КонецЦикла;
		ВывестиВЛог(ФорматированнаяСтрокаОписание("Создание перемещний(ия) по скаладу "+Строка(ВыборкаСклада.Склад),,WebЦвета.Древесный));
		СоздатьПеремещения(ТаблицаТоваровДляПеремещения,ВыборкаСклада.Склад);
	КонецЦикла;	
КонецПроцедуры

Процедура ВывестиВЛог(Сообщение)
     
	СообщениеТекст=СообщениеТекст+"<p>"+"<font color="+ВозвратЦветаHTML(WebЦвета.Черный)+">"+Строка(ТекущаяДата())+":</font>";
	СообщениеТекст=СообщениеТекст+"<font color="+ВозвратЦветаHTML(Сообщение.ЦветТекста)+">"+Сообщение.Заголовок +"</font>"+"</p><BR>";
	УстановитьHTML(СообщениеТекст);
КонецПроцедуры

Функция УстановитьHTML(Данные)
HTML="<!DOCTYPE HTML>
|<html>
|<body>
|"+ЗаголовокHTML();
HTML=HTML+Данные;
HTML=HTML+"
|</body>
|</html>";
	КонецФункции

	
Функция ЗаголовокHTML()
	Макет=Обработки.ит_WMS_ОбработчикРозницы.ПолучитьМакет("Макет");
	Возврат Макет.Области.ЗаголовокHTML.Текст;
КонецФункции
Функция ВозвратЦветаHTML(ВебЦвет)
	Если ВебЦвет=WebЦвета.Черный Тогда 
		Возврат """"+"Black"+"""";
	ИначеЕсли ВебЦвет=WebЦвета.Красный Тогда 
		Возврат  """"+"red"+"""";
	ИначеЕсли ВебЦвет= WebЦвета.Древесный Тогда 
		Возврат """"+"Peru"+"""";
	ИначеЕсли ВебЦвет= WebЦвета.Синий Тогда 
		Возврат """"+"Blue"+"""";
	ИначеЕсли ВебЦвет= WebЦвета.Фиолетовый Тогда 
        Возврат """"+"Purple"+"""";
	Иначе 
		Возврат """"+"Black"+"""";
	КонецЕсли;
	КонецФункции
&НаСервере
Функция  СоздатьТаблицуТоваровПеремещения()
	ТаблицаТоваровПеремещения=новый ТаблицаЗначений;		
	ТаблицаТоваровПеремещения.Колонки.Добавить("Склад",новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТоваровПеремещения.Колонки.Добавить("Ячейка",новый ОписаниеТипов("СправочникСсылка.итСкладскиеЯчейки"));
	ТаблицаТоваровПеремещения.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваровПеремещения.Колонки.Добавить("ИдентификаторУпаковки",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
	ТаблицаТоваровПеремещения.Колонки.Добавить("Характеристика",новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваровПеремещения.Колонки.Добавить("СерияНоменклатуры",новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаТоваровПеремещения.Колонки.Добавить("ДатаРозлива",новый ОписаниеТипов("Дата",,,,,новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаТоваровПеремещения.Колонки.Добавить("Качество",новый ОписаниеТипов("СправочникСсылка.Качество"));
	ТаблицаТоваровПеремещения.Колонки.Добавить("Количество",новый ОписаниеТипов("Число",,,новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));
	Возврат ТаблицаТоваровПеремещения;
КонецФункции
&НаСервере
Процедура ПоискТовараВПикинге(СтруктураПараметров)
	СтруктураПараметров.Вставить("Зона",Перечисления.итWMSЗоныСклада.Пикинга);
	РезультатовОстаткаНМ=ПолучитьОстаткиНоменклатуры(СтруктураПараметров);
	Выборка=РезультатовОстаткаНМ.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СтруктураПараметров.КСнабжению <=0 Тогда 
			Прервать;
		КонецЕсли;
		НоваяСтрока=СтруктураПараметров.ТаблицаТоваровДляПеремещения.Добавить();
		НоваяСтрокаРассчета=СтруктураПараметров.ТаблицаРассчетаНоменклатур.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		НоваяСтрока.Количество=Выборка.КоличествоОстаток;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРассчета,Выборка);
		НоваяСтрокаРассчета.Количество=Выборка.КоличествоОстаток;
		СтруктураПараметров.КСнабжению=СтруктураПараметров.КСнабжению-НоваяСтрока.Количество;
	КонецЦикла;
	ИзъятьТоварИзОстатков(СтруктураПараметров);
	СтруктураПараметров.ТаблицаРассчетаНоменклатур.Очистить();
	
КонецПроцедуры
&НаСервере
Процедура ПоискТовараВЯчейкахХранения(СтруктураПараметров)
	СтруктураПараметров.Вставить("Зона",Перечисления.итWMSЗоныСклада.Хранения);
	РезультатовОстаткаНМ=ПолучитьОстаткиНоменклатуры(СтруктураПараметров);
	Выборка=РезультатовОстаткаНМ.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СтруктураПараметров.КСнабжению <=0 Тогда 
			Прервать;
		КонецЕсли;
		НоваяСтрока=СтруктураПараметров.ТаблицаТоваровДляПеремещения.Добавить();
		НоваяСтрокаРассчета=СтруктураПараметров.ТаблицаРассчетаНоменклатур.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		НоваяСтрока.Количество=Выборка.КоличествоОстаток;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРассчета,Выборка);
		НоваяСтрокаРассчета.Количество=Выборка.КоличествоОстаток;
		СтруктураПараметров.КСнабжению=СтруктураПараметров.КСнабжению-НоваяСтрока.Количество;
	КонецЦикла;
	ИзъятьТоварИзОстатков(СтруктураПараметров);
	СтруктураПараметров.ТаблицаРассчетаНоменклатур.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура  ИзъятьТоварИзОстатков(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=СтруктураПараметров.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРассчетаНоменклатур.Склад,
	|	ТаблицаРассчетаНоменклатур.Ячейка,
	|	ТаблицаРассчетаНоменклатур.ИдентификаторУпаковки,
	|	ТаблицаРассчетаНоменклатур.Характеристика,
	|	ТаблицаРассчетаНоменклатур.СерияНоменклатуры,
	|	ТаблицаРассчетаНоменклатур.ДатаРозлива,
	|	ТаблицаРассчетаНоменклатур.Качество,
	|	ТаблицаРассчетаНоменклатур.Количество,
	|	ТаблицаРассчетаНоменклатур.Номенклатура
	|ПОМЕСТИТЬ ВтТаблицаРассчетаНоменклатур
	|ИЗ
	|	&ТаблицаРассчетаНоменклатур КАК ТаблицаРассчетаНоменклатур
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОстаткиНМИтоговые.Склад,
	|	ВтОстаткиНМИтоговые.Ячейка,
	|	ВтОстаткиНМИтоговые.ИдентификаторУпаковки,
	|	ВтОстаткиНМИтоговые.Характеристика,
	|	ВтОстаткиНМИтоговые.СерияНоменклатуры,
	|	ВтОстаткиНМИтоговые.ДатаРозлива,
	|	ВтОстаткиНМИтоговые.Качество,
	|	ВтОстаткиНМИтоговые.КоличествоОстаток - ЕСТЬNULL(ВтТаблицаРассчетаНоменклатур.Количество, 0) КАК КоличествоОстаток,
	|	ВтОстаткиНМИтоговые.Зона,
	|	ВтОстаткиНМИтоговые.ПорядокОбхода,
	|	ВтОстаткиНМИтоговые.СкладскоеПомещение,
	|	ВтОстаткиНМИтоговые.Номенклатура
	|ПОМЕСТИТЬ ВтОстаткиНМИтоговыеРассчет
	|ИЗ
	|	ВтОстаткиНМИтоговые КАК ВтОстаткиНМИтоговые
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаРассчетаНоменклатур КАК ВтТаблицаРассчетаНоменклатур
	|		ПО ВтОстаткиНМИтоговые.Склад = ВтТаблицаРассчетаНоменклатур.Склад
	|			И ВтОстаткиНМИтоговые.Ячейка = ВтТаблицаРассчетаНоменклатур.Ячейка
	|			И ВтОстаткиНМИтоговые.ИдентификаторУпаковки = ВтТаблицаРассчетаНоменклатур.ИдентификаторУпаковки
	|			И ВтОстаткиНМИтоговые.Характеристика = ВтТаблицаРассчетаНоменклатур.Характеристика
	|			И ВтОстаткиНМИтоговые.СерияНоменклатуры = ВтТаблицаРассчетаНоменклатур.СерияНоменклатуры
	|			И ВтОстаткиНМИтоговые.ДатаРозлива = ВтТаблицаРассчетаНоменклатур.ДатаРозлива
	|			И ВтОстаткиНМИтоговые.Качество = ВтТаблицаРассчетаНоменклатур.Качество
	|			И ВтОстаткиНМИтоговые.Номенклатура = ВтТаблицаРассчетаНоменклатур.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтОстаткиНМИтоговые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОстаткиНМИтоговыеРассчет.Склад,
	|	ВтОстаткиНМИтоговыеРассчет.Ячейка,
	|	ВтОстаткиНМИтоговыеРассчет.ИдентификаторУпаковки,
	|	ВтОстаткиНМИтоговыеРассчет.Характеристика,
	|	ВтОстаткиНМИтоговыеРассчет.СерияНоменклатуры,
	|	ВтОстаткиНМИтоговыеРассчет.ДатаРозлива,
	|	ВтОстаткиНМИтоговыеРассчет.Качество,
	|	ВтОстаткиНМИтоговыеРассчет.КоличествоОстаток,
	|	ВтОстаткиНМИтоговыеРассчет.Зона,
	|	ВтОстаткиНМИтоговыеРассчет.ПорядокОбхода,
	|	ВтОстаткиНМИтоговыеРассчет.СкладскоеПомещение,
	|	ВтОстаткиНМИтоговыеРассчет.Номенклатура
	|ПОМЕСТИТЬ ВтОстаткиНМИтоговые
	|ИЗ
	|	ВтОстаткиНМИтоговыеРассчет КАК ВтОстаткиНМИтоговыеРассчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтТаблицаРассчетаНоменклатур
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтОстаткиНМИтоговыеРассчет";
	Запрос.УстановитьПараметр("ТаблицаРассчетаНоменклатур",СтруктураПараметров.ТаблицаРассчетаНоменклатур);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
КонецПроцедуры
&НаСервере
Функция ПолучитьОстаткиНоменклатуры(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=СтруктураПараметров.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВтОстаткиНМИтоговые.Склад,
	|	ВтОстаткиНМИтоговые.Ячейка,
	|	ВтОстаткиНМИтоговые.ИдентификаторУпаковки,
	|	ВтОстаткиНМИтоговые.Характеристика,
	|	ВтОстаткиНМИтоговые.СерияНоменклатуры,
	|	ВтОстаткиНМИтоговые.ДатаРозлива КАК ДатаРозлива,
	|	ВтОстаткиНМИтоговые.Качество,
	|	ВтОстаткиНМИтоговые.КоличествоОстаток КАК КоличествоОстаток,
	|	ВтОстаткиНМИтоговые.СкладскоеПомещение,
	|	ВтОстаткиНМИтоговые.ПорядокОбхода,
	|	ВтОстаткиНМИтоговые.Зона,
	|	ВтОстаткиНМИтоговые.Номенклатура
	|ИЗ
	|	ВтОстаткиНМИтоговые КАК ВтОстаткиНМИтоговые
	|ГДЕ
	|	ВтОстаткиНМИтоговые.Склад = &Склад
	|	И ВтОстаткиНМИтоговые.Зона = &Зона
	|	И ВтОстаткиНМИтоговые.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРозлива,
	|	КоличествоОстаток";
	
	Запрос.УстановитьПараметр("Склад",СтруктураПараметров.Склад);
	Запрос.УстановитьПараметр("Зона",СтруктураПараметров.Зона);
	Запрос.УстановитьПараметр("Номенклатура",СтруктураПараметров.Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;		
КонецФункции
&НаСервере
Процедура  РассчитатьОстаткиНоменклатуры(МенеджерВременныхТаблиц)
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВтИтоговаяТаблицаРассчета.Номенклатура КАК Номенклатура,
	|	ВтИтоговаяТаблицаРассчета.Склад КАК Склад,
	|	ВтИтоговаяТаблицаРассчета.Организация КАК Организация
	|ПОМЕСТИТЬ ВтНмКПоиску
	|ИЗ
	|	ВтИтоговаяТаблицаРассчета КАК ВтИтоговаяТаблицаРассчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтИтоговаяТаблицаРассчета.Номенклатура,
	|	ВтИтоговаяТаблицаРассчета.Склад,
	|	ВтИтоговаяТаблицаРассчета.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Склад КАК Склад,
	|	итТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	итТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.ДатаРозлива КАК ДатаРозлива,
	|	итТоварыВЯчейкахОстатки.Качество КАК Качество,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток КАК КоличествоОстаток,
	|	итТоварыВЯчейкахОстатки.Ячейка.ВидСкладскойДеятельности КАК ВидСкладскойДеятельности
	|ПОМЕСТИТЬ ВтОстаткиНм
	|ИЗ
	|	ВтНмКПоиску КАК ВтНмКПоиску
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(, ) КАК итТоварыВЯчейкахОстатки
	|		ПО ВтНмКПоиску.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|			И ВтНмКПоиску.Склад = итТоварыВЯчейкахОстатки.Склад
	|			И ВтНмКПоиску.Организация = итТоварыВЯчейкахОстатки.Организация
	|ГДЕ
	|	НЕ итТоварыВЯчейкахОстатки.Ячейка В
	|				(ВЫБРАТЬ
	|					ВтРозничныеЯчейкиНМ.Ячейка
	|				ИЗ
	|					ВтРозничныеЯчейкиНМ КАК ВтРозничныеЯчейкиНМ
	|				ГДЕ
	|					ВтРозничныеЯчейкиНМ.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура)
	|	И итТоварыВЯчейкахОстатки.Ячейка <> &СистемнаяЯчейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОстаткиНм.Склад КАК Склад,
	|	ВтОстаткиНм.Ячейка КАК Ячейка,
	|	ВтОстаткиНм.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВтОстаткиНм.Номенклатура КАК Номенклатура,
	|	ВтОстаткиНм.Характеристика КАК Характеристика,
	|	ВтОстаткиНм.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВтОстаткиНм.ДатаРозлива КАК ДатаРозлива,
	|	ВтОстаткиНм.Качество КАК Качество,
	|	ВтОстаткиНм.КоличествоОстаток КАК КоличествоОстаток,
	|	ВтОстаткиНм.Ячейка.Зона КАК Зона,
	|	ВтОстаткиНм.Ячейка.ПорядокОбхода КАК ПорядокОбхода,
	|	ВтОстаткиНм.Ячейка.СкладскоеПомещение КАК СкладскоеПомещение
	|ПОМЕСТИТЬ ВтОстаткиНМИтоговые
	|ИЗ
	|	ВтОстаткиНм КАК ВтОстаткиНм
	|ГДЕ
	|	ВтОстаткиНм.КоличествоОстаток > 0
	|	И ВтОстаткиНм.ВидСкладскойДеятельности <> ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
	|	И НЕ ВтОстаткиНм.Ячейка.Заблокирована
	|	И НЕ ВтОстаткиНм.Ячейка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтОстаткиНм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтНмКПоиску";
	
	Запрос.УстановитьПараметр("СистемнаяЯчейка", Константы.СистемнаяЯчейка.Получить());
	Запрос.Выполнить();
	
	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицыДляРассчета(СтруктураПараметров)
	ТаблицаРассчетаНоменклатур=новый ТаблицаЗначений;		
	ТаблицаРассчетаНоменклатур.Колонки.Добавить("Склад",новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаРассчетаНоменклатур.Колонки.Добавить("Ячейка",новый ОписаниеТипов("СправочникСсылка.итСкладскиеЯчейки"));
	ТаблицаРассчетаНоменклатур.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРассчетаНоменклатур.Колонки.Добавить("ИдентификаторУпаковки",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
	ТаблицаРассчетаНоменклатур.Колонки.Добавить("Характеристика",новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРассчетаНоменклатур.Колонки.Добавить("СерияНоменклатуры",новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРассчетаНоменклатур.Колонки.Добавить("ДатаРозлива",новый ОписаниеТипов("Дата",,,,,новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаРассчетаНоменклатур.Колонки.Добавить("Качество",новый ОписаниеТипов("СправочникСсылка.Качество"));
	ТаблицаРассчетаНоменклатур.Колонки.Добавить("Количество",новый ОписаниеТипов("Число",,,новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));
	
	
	СтруктураПараметров.Вставить("ТаблицаРассчетаНоменклатур",ТаблицаРассчетаНоменклатур);
КонецПроцедуры
&НаСервере
Процедура СоздатьПеремещения(ТаблицаТоваровДляПеремещения,Склад)
ДокументПеремещения=Документы.итWMSПеремещение.СоздатьДокумент();
ЗаполнитьОсновныеПараметрыПеремещения(ДокументПеремещения,Организация,СтратегияПеремещения,Склад);
Счетчик=0;
Для Каждого стр из  ТаблицаТоваровДляПеремещения Цикл 
	Если Счетчик>=МаксимальноеКоличествоСтрокВДокументахПеремещения Тогда
		ДействияПослеЗаполненияПеремещения(ДокументПеремещения);
		ДокументПеремещения=Документы.итWMSПеремещение.СоздатьДокумент();
        ЗаполнитьОсновныеПараметрыПеремещения(ДокументПеремещения,Организация,СтратегияПеремещения,Склад);
		Счетчик=0;
	КонецЕсли;	
	НоваяСтрока=ДокументПеремещения.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
	НоваяСтрока.ЯчейкаОтправитель=стр.Ячейка;
	НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
	Счетчик=Счетчик+1;
КонецЦикла;
ДействияПослеЗаполненияПеремещения(ДокументПеремещения);
	КонецПроцедуры
&НаСервере
Процедура ДействияПослеЗаполненияПеремещения(ДокументПеремещения)
	Если ДокументПеремещения.Товары.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;	
	ВывестиВЛог(ФорматированнаяСтрокаОписание("Запись/Проведение документа перемещения",,WebЦвета.Черный));
	ДокументПеремещения.ВыборСтратегииРазмещения();
	Попытка
     Если 	ДокументПеремещения.ПроверитьЗаполнение() Тогда 
		ДокументПеремещения.Записать(РежимЗаписиДокумента.Проведение);
	иначе
		ВывестиВЛог(ФорматированнаяСтрокаОписание(ОписаниеОшибки(),,WebЦвета.Красный));
		ДокументПеремещения.Комментарий="#Черновик обработчика розницы";
		ДокументПеремещения.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		ДокументПеремещения.Записать(РежимЗаписиДокумента.Запись); 
		ВывестиВЛог(ФорматированнаяСтрокаОписание("проверьте заполненость перемещения; "+ДокументПеремещения.Номер,,WebЦвета.Красный));
		ВывестиВЛог(ФорматированнаяСтрокаОписание("Создан черновик перемещения; "+ДокументПеремещения.Номер,,WebЦвета.Красный));
	КонецЕсли;
	Исключение
		ВывестиВЛог(ФорматированнаяСтрокаОписание(ОписаниеОшибки(),,WebЦвета.Красный));
		ДокументПеремещения.Комментарий="#Черновик обработчика розницы";
		ДокументПеремещения.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		ДокументПеремещения.Записать(РежимЗаписиДокумента.Запись); 
		ВывестиВЛог(ФорматированнаяСтрокаОписание("Создан черновик перемещения; "+ДокументПеремещения.Номер,,WebЦвета.Красный));
	КонецПопытки;
КонецПроцедуры
	
&НаСервере	
Процедура ЗаполнитьОсновныеПараметрыПеремещения(ДокументПеремещения,ОрганизацияПеремещения,СтратегияДляПеремещения,Склад)
ВывестиВЛог(ФорматированнаяСтрокаОписание("Создание документа перемещения",,WebЦвета.Черный));	
Массив=новый Массив;
СтруктураДанных=новый Структура;
СтруктураДанных.Вставить("Имя","ВидСкладскойДеятельности");
СтруктураДанных.Вставить("Значение",Перечисления.ит_WMS_ВидыСкладскойДеятельности.Розничная);
Массив.Добавить(СтруктураДанных);
ДокументПеремещения.Организация=Организация;
ДокументПеремещения.СкладОтправитель=Склад;
ДокументПеремещения.СкладПолучатель=Склад;
ДокументПеремещения.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
ДокументПеремещения.АдресХраненияПараметров=ПоместитьВоВременноеХранилище(Массив);
ДокументПеремещения.ПараметрыСтратегии=новый ХранилищеЗначения(Массив);
ДокументПеремещения.СтратегияПеремещения=СтратегияДляПеремещения;
ДокументПеремещения.Дата=ТекущаяДата();
ДокументПеремещения.Комментарий="#Создано для пополнения розничных ячеек";
КонецПроцедуры
&НаСервере
Функция ТекстЗапросаКСнабжению()
	Текст="ВЫБРАТЬ
	      |	ЗаказПокупателя.Ссылка КАК Ссылка
	      |ПОМЕСТИТЬ ВтЗаказы
	      |ИЗ
	      |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      |ГДЕ
	      |	ЗаказПокупателя.Проведен
	      |	И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)), СЕКУНДА, СЕКУНДА(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)) МЕЖДУ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ДатаАнализа, ЧАС, ЧАС(&ВремяНачало)), МИНУТА, МИНУТА(&ВремяНачало)), СЕКУНДА, СЕКУНДА(&ВремяНачало)) И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ДатаАнализа, ЧАС, ЧАС(&ВремяКонец)), МИНУТА, МИНУТА(&ВремяКонец)), СЕКУНДА, СЕКУНДА(&ВремяКонец))
	      |	И ЗаказПокупателя.Организация = &Организация
	      |	И ЗаказПокупателя.Контрагент.ит_WMS_ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
	      |	И НЕ ЗаказПокупателя.ВНаборе
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	      |	СУММА(ЗаказПокупателяТовары.Количество / ЗаказПокупателяТовары.ЕдиницаИзмерения.Коэффициент) КАК Количество,
	      |	ВтЗаказы.Ссылка.Склад КАК Склад,
	      |	ВтЗаказы.Ссылка.Организация КАК Организация
	      |ПОМЕСТИТЬ ВтНмПоЗаказам
	      |ИЗ
	      |	ВтЗаказы КАК ВтЗаказы
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	      |		ПО ВтЗаказы.Ссылка = ЗаказПокупателяТовары.Ссылка
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	ЗаказПокупателяТовары.Номенклатура,
	      |	ВтЗаказы.Ссылка.Склад,
	      |	ВтЗаказы.Ссылка.Организация
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.АссортиментныйУчастокСклада КАК АссортиментныйУчастокСклада,
	      |	ВтНмПоЗаказам.Номенклатура КАК Номенклатура
	      |ПОМЕСТИТЬ ВтАссортиментныеУчасткиНМ
	      |ИЗ
	      |	ВтНмПоЗаказам КАК ВтНмПоЗаказам
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчастка.СрезПоследних(, ) КАК ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних
	      |		ПО ВтНмПоЗаказам.Номенклатура = ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.Номенклатура
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ВтАссортиментныеУчасткиНМ.Номенклатура КАК Номенклатура,
	      |	ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка КАК Ячейка
	      |ПОМЕСТИТЬ ВтРозничныеЯчейкиНМ
	      |ИЗ
	      |	ВтАссортиментныеУчасткиНМ КАК ВтАссортиментныеУчасткиНМ
	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ит_WMS_АссортиментныеУчасткиСклада.СоставЯчеек КАК ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек
	      |		ПО ВтАссортиментныеУчасткиНМ.АссортиментныйУчастокСклада = ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ссылка
	      |			И (ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная))
	      |			И (НЕ ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка.Заблокирована)
	      |			И (НЕ ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка.ПометкаУдаления)
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ВтРозничныеЯчейкиНМ.Номенклатура КАК Номенклатура,
	      |	СУММА(ЕСТЬNULL(итТоварыВЯчейкахОстатки.КоличествоОстаток, 0) + итТоварыВЯчейкахОстатки.КРазмещениюОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток) КАК Остаток,
	      |	итТоварыВЯчейкахОстатки.Склад КАК Склад,
	      |	итТоварыВЯчейкахОстатки.Организация КАК Организация
	      |ПОМЕСТИТЬ ВтДанныеОстатковНМВЯчейках
	      |ИЗ
	      |	ВтРозничныеЯчейкиНМ КАК ВтРозничныеЯчейкиНМ
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	      |		ПО ВтРозничныеЯчейкиНМ.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	      |			И ВтРозничныеЯчейкиНМ.Ячейка = итТоварыВЯчейкахОстатки.Ячейка
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	ВтРозничныеЯчейкиНМ.Номенклатура,
	      |	итТоварыВЯчейкахОстатки.Склад,
	      |	итТоварыВЯчейкахОстатки.Организация
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ВтНмПоЗаказам.Номенклатура КАК Номенклатура,
	      |	ВтНмПоЗаказам.Количество КАК Количество,
	      |	ЕСТЬNULL(ВтДанныеОстатковНМВЯчейках.Остаток, 0) КАК Остаток,
	      |	ВтНмПоЗаказам.Количество - ЕСТЬNULL(ВтДанныеОстатковНМВЯчейках.Остаток, 0) КАК КСнабжению,
	      |	ВтНмПоЗаказам.Склад КАК Склад,
	      |	ВтНмПоЗаказам.Организация КАК Организация
	      |ПОМЕСТИТЬ ВтИтоговаяТаблицаРассчета
	      |ИЗ
	      |	ВтНмПоЗаказам КАК ВтНмПоЗаказам
	      |		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеОстатковНМВЯчейках КАК ВтДанныеОстатковНМВЯчейках
	      |		ПО ВтНмПоЗаказам.Номенклатура = ВтДанныеОстатковНМВЯчейках.Номенклатура
	      |			И ВтНмПоЗаказам.Склад = ВтДанныеОстатковНМВЯчейках.Склад
	      |			И ВтНмПоЗаказам.Организация = ВтДанныеОстатковНМВЯчейках.Организация
	      |ГДЕ
	      |	ВтНмПоЗаказам.Количество - ЕСТЬNULL(ВтДанныеОстатковНМВЯчейках.Остаток, 0) > 0
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ВтЗаказы
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ВтНмПоЗаказам
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ВтАссортиментныеУчасткиНМ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ВтДанныеОстатковНМВЯчейках
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ВтИтоговаяТаблица.Номенклатура КАК Номенклатура,
	      |	ВтИтоговаяТаблица.Количество КАК Количество,
	      |	ВтИтоговаяТаблица.Остаток КАК Остаток,
	      |	ВтИтоговаяТаблица.КСнабжению КАК КСнабжению,
	      |	ВтИтоговаяТаблица.Склад КАК Склад,
	      |	ВтИтоговаяТаблица.Организация КАК Организация
	      |ИЗ
	      |	ВтИтоговаяТаблицаРассчета КАК ВтИтоговаяТаблица
	      |ИТОГИ ПО
	      |	Склад";
	Возврат Текст;
КонецФункции
&НаКлиенте
Процедура СоздатьПеремещенияПодРозницу(Команда)
	ТекущийЭлемент=Элементы.ЛогРаботы;
	СоздатьПеремещенияПодРозницуНаСервере();
КонецПроцедуры

Функция ФорматированнаяСтрокаОписание(Содержимое,
	Шрифт = Неопределено,
	ЦветТекста = Неопределено,
	ЦветФона = Неопределено, 
	Ссылка = Неопределено) Экспорт

	Описание = ОписаниеФорматированнойСтроки();
	Описание.Заголовок  = Содержимое;
	Описание.Шрифт      = Шрифт;
	Описание.ЦветТекста = ЦветТекста;
	Описание.ЦветФона   = ЦветФона;
	Описание.Ссылка     = Ссылка;
	
	Возврат Описание;

КонецФункции
Функция ОписаниеФорматированнойСтроки() Экспорт
	
	ОписаниеФорматированнойСтроки = Новый("Структура");
	ОписаниеФорматированнойСтроки.Вставить("Заголовок",  "");
	ОписаниеФорматированнойСтроки.Вставить("Шрифт",      Неопределено);
	ОписаниеФорматированнойСтроки.Вставить("ЦветТекста", Неопределено);
	ОписаниеФорматированнойСтроки.Вставить("ЦветФона",   Неопределено);
	ОписаниеФорматированнойСтроки.Вставить("Ссылка",     "");
	
	Возврат ОписаниеФорматированнойСтроки;
	
КонецФункции

&НаСервере
Процедура СоздатьДокументыНаборокНаСервере(Маршрут=Неопределено)
	
	СистемнаяЯчейка= Константы.СистемнаяЯчейка.Получить();
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРозничныхЗаказовБезНаборок();
	Запрос.УстановитьПараметр("ВремяКонец", ВремяКонец);
	Запрос.УстановитьПараметр("ВремяНачало", ВремяНачало);
	Запрос.УстановитьПараметр("ДатаАнализа", ДатаАнализа);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка=РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВывестиВЛог(ФорматированнаяСтрокаОписание("Создание наборки",,WebЦвета.Синий));
		НоваяНаборка=Документы.итWMSНаборка.СоздатьДокумент();
		НоваяНаборка.итОснование=Выборка.Ссылка;
		НоваяНаборка.ОбработкаЗаполнения(Выборка.Ссылка,"",Ложь);
		НоваяНаборка.НеРаспределятьНаТСД=Ложь;
		НоваяНаборка.Дата=ТекущаяДата();
		НоваяНаборка.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		НоваяНаборка.КоличествоПозицийНоменклатурыНаПаллете=КоличествоПозицийНоменклатурыНаПаллете;
		НоваяНаборка.КоличествоПозицийСерииНаПаллете=КоличествоПозицийСерииНаПаллете;
		НоваяНаборка.РежимРезервированияБезПеремещения=Ложь;
		НоваяНаборка.ИгнорироватьОшибкиСерии=Истина;
		НоваяНаборка.РезервироватьЯчейкиЭстокады=Истина;
		ВывестиВЛог(ФорматированнаяСтрокаОписание("Паллетизация"+НоваяНаборка.Номер,,WebЦвета.Синий));
		НоваяНаборка.ПаллетизацияСервер();
		ВывестиВЛог(ФорматированнаяСтрокаОписание("Определение ячеек эстокады"+НоваяНаборка.Номер,,WebЦвета.Синий));
		ЛокальноОпределятьЯчейкиЭстокады=ОпределятьЯчейкиЭстокады;
		Если ЛокальноОпределятьЯчейкиЭстокады Тогда
			Попытка
				НоваяНаборка.ОпределитьЯчейкиЭстокадыСерверныйВызов();
			Исключение
				ЛокальноОпределятьЯчейкиЭстокады=Ложь;
				ВывестиВЛог(ФорматированнаяСтрокаОписание("не удачная попытка  -определения ячеек эстокады",,WebЦвета.Красный));
			КонецПопытки;
		КонецЕсли;
		НоваяНаборка.Комментарий="#Создан обработчиком розницы";
		Если НоваяНаборка.Товары.Количество()=0 Тогда 
			ВывестиВЛог(ФорматированнаяСтрокаОписание("не удачная попытка  -Запись/Проведение наборки - нет товара",,WebЦвета.Красный));
			Продолжить;
		КонецЕсли;	
		УдачнаяПопытка=Ложь;
		Если ЛокальноОпределятьЯчейкиЭстокады Тогда 
		Попытка
			НоваяНаборка.Записать(РежимЗаписиДокумента.Проведение);
			УдачнаяПопытка=Истина;
		Исключение
			ВывестиВЛог(ФорматированнаяСтрокаОписание("не удачная попытка 1 -Запись/Проведение наборки ",,WebЦвета.Красный));
		КонецПопытки;
		КонецЕсли;
		Если не УдачнаяПопытка Тогда 
			Попытка
				НоваяНаборка.РезервироватьЯчейкиЭстокады=Ложь;
			    УстановитьСистемнуюЯчейкуВНаборке(СистемнаяЯчейка,НоваяНаборка);
				НоваяНаборка.Записать(РежимЗаписиДокумента.Проведение);
				УдачнаяПопытка=Истина;
			Исключение
				ВывестиВЛог(ФорматированнаяСтрокаОписание("не удачная попытка 2 -Запись/Проведение наборки ",,WebЦвета.Красный));
			КонецПопытки;
		КонецЕсли;
		Если не УдачнаяПопытка Тогда 
			НоваяНаборка.Комментарий="#Черновик создан обработчиком розницы";
			НоваяНаборка.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
			НоваяНаборка.Записать();
			ВывестиВЛог(ФорматированнаяСтрокаОписание("Запись/Проведение ЧЕРНОВИКА наборки "+НоваяНаборка.Номер,,WebЦвета.Фиолетовый))
		иначе		
			ВывестиВЛог(ФорматированнаяСтрокаОписание("Запись/Проведение наборки "+НоваяНаборка.Номер,,WebЦвета.Синий));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСистемнуюЯчейкуВНаборке(СистемнаяЯчейка,Наборка)
	Для Каждого Строка из Наборка.Товары Цикл 
		Строка.ЯчейкаПолучатель=СистемнаяЯчейка;
	КонецЦикла;
	КонецПроцедуры
&НаСервере
Функция ТекстЗапросаРозничныхЗаказовБезНаборок()
	
		Текст="ВЫБРАТЬ
		      |	ЗаказПокупателя.Ссылка КАК Ссылка
		      |ПОМЕСТИТЬ ВтЗаказы
		      |ИЗ
		      |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		      |ГДЕ
		      |	ЗаказПокупателя.Проведен
		      |	И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)), СЕКУНДА, СЕКУНДА(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)) МЕЖДУ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ДатаАнализа, ЧАС, ЧАС(&ВремяНачало)), МИНУТА, МИНУТА(&ВремяНачало)), СЕКУНДА, СЕКУНДА(&ВремяНачало)) И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ДатаАнализа, ЧАС, ЧАС(&ВремяКонец)), МИНУТА, МИНУТА(&ВремяКонец)), СЕКУНДА, СЕКУНДА(&ВремяКонец))
		      |	И ЗаказПокупателя.Организация = &Организация
		      |	И ЗаказПокупателя.Контрагент.ит_WMS_ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		      |	И НЕ ЗаказПокупателя.ВНаборе
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	ВтЗаказы.Ссылка КАК Ссылка,
		      |	МАКСИМУМ(ЕСТЬNULL(МаршрутизацияДокументыМаршрута.Ссылка, ЗНАЧЕНИЕ(Документ.Маршрутизация.пустаяСсылка))) КАК Маршрут,
		      |	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ВтЗаказы.Ссылка.ДатаОтгрузки, ЧАС, ЧАС(ВтЗаказы.Ссылка.итВремяНачалаПогрузкиКакВремя)), МИНУТА, МИНУТА(ВтЗаказы.Ссылка.итВремяНачалаПогрузкиКакВремя)), СЕКУНДА, СЕКУНДА(ВтЗаказы.Ссылка.итВремяНачалаПогрузкиКакВремя)) КАК ВремяНачалаПогрузки
		      |ПОМЕСТИТЬ ВтДанныеЗаказовПоМаршрутам
		      |ИЗ
		      |	ВтЗаказы КАК ВтЗаказы
		      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
		      |		ПО ВтЗаказы.Ссылка = МаршрутизацияДокументыМаршрута.Заказ
		      |			И (МаршрутизацияДокументыМаршрута.Ссылка.Проведен)
		      |
		      |СГРУППИРОВАТЬ ПО
		      |	ВтЗаказы.Ссылка,
		      |	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ВтЗаказы.Ссылка.ДатаОтгрузки, ЧАС, ЧАС(ВтЗаказы.Ссылка.итВремяНачалаПогрузкиКакВремя)), МИНУТА, МИНУТА(ВтЗаказы.Ссылка.итВремяНачалаПогрузкиКакВремя)), СЕКУНДА, СЕКУНДА(ВтЗаказы.Ссылка.итВремяНачалаПогрузкиКакВремя))
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	ВтДанныеЗаказовПоМаршрутам.Ссылка КАК Ссылка
		      |ИЗ
		      |	ВтДанныеЗаказовПоМаршрутам КАК ВтДанныеЗаказовПоМаршрутам
		      |ГДЕ
		      |	ВЫБОР
		      |			КОГДА &Маршрут = НЕОПРЕДЕЛЕНО
		      |				ТОГДА ИСТИНА
		      |			ИНАЧЕ ВтДанныеЗаказовПоМаршрутам.Маршрут = &Маршрут
		      |		КОНЕЦ";
	
		
Возврат Текст;
	КонецФункции
	
&НаКлиенте
Процедура СоздатьДокументыНаборок(Команда)
	СоздатьДокументыНаборокНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЛог(Команда)
	HTML="";
	СообщениеТекст="";
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуМаршрутовНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВтЗаказы
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Проведен
		|	И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)), СЕКУНДА, СЕКУНДА(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)) МЕЖДУ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ДатаАнализа, ЧАС, ЧАС(&ВремяНачало)), МИНУТА, МИНУТА(&ВремяНачало)), СЕКУНДА, СЕКУНДА(&ВремяНачало)) И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ДатаАнализа, ЧАС, ЧАС(&ВремяКонец)), МИНУТА, МИНУТА(&ВремяКонец)), СЕКУНДА, СЕКУНДА(&ВремяКонец))
		|	И ЗаказПокупателя.Организация = &Организация
		|	И ЗаказПокупателя.Контрагент.ит_WMS_ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|	И НЕ ЗаказПокупателя.ВНаборе
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтЗаказы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВтЗаказыБезНаборок
		|ИЗ
		|	ВтЗаказы КАК ВтЗаказы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтЗаказы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтЗаказыБезНаборок.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ЕСТЬNULL(МаршрутизацияДокументыМаршрута.Ссылка, ЗНАЧЕНИЕ(Документ.Маршрутизация.пустаяСсылка))) КАК Маршрут,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ВтЗаказыБезНаборок.Ссылка.ДатаОтгрузки, ЧАС, ЧАС(ВтЗаказыБезНаборок.Ссылка.итВремяНачалаПогрузкиКакВремя)), МИНУТА, МИНУТА(ВтЗаказыБезНаборок.Ссылка.итВремяНачалаПогрузкиКакВремя)), СЕКУНДА, СЕКУНДА(ВтЗаказыБезНаборок.Ссылка.итВремяНачалаПогрузкиКакВремя)) КАК ВремяНачалаПогрузки
		|ПОМЕСТИТЬ ВтДанныеЗаказовПоМаршрутам
		|ИЗ
		|	ВтЗаказыБезНаборок КАК ВтЗаказыБезНаборок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
		|		ПО ВтЗаказыБезНаборок.Ссылка = МаршрутизацияДокументыМаршрута.Заказ
		|			И (МаршрутизацияДокументыМаршрута.Ссылка.Проведен)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтЗаказыБезНаборок.Ссылка,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ВтЗаказыБезНаборок.Ссылка.ДатаОтгрузки, ЧАС, ЧАС(ВтЗаказыБезНаборок.Ссылка.итВремяНачалаПогрузкиКакВремя)), МИНУТА, МИНУТА(ВтЗаказыБезНаборок.Ссылка.итВремяНачалаПогрузкиКакВремя)), СЕКУНДА, СЕКУНДА(ВтЗаказыБезНаборок.Ссылка.итВремяНачалаПогрузкиКакВремя))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеЗаказовПоМаршрутам.Маршрут КАК Маршрут,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеЗаказовПоМаршрутам.Ссылка) КАК КоличествоНаборок,
		|	МАКСИМУМ(ВтДанныеЗаказовПоМаршрутам.ВремяНачалаПогрузки) КАК ВремяНачалаОтгрузки
		|ИЗ
		|	ВтДанныеЗаказовПоМаршрутам КАК ВтДанныеЗаказовПоМаршрутам
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеЗаказовПоМаршрутам.Маршрут
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВремяНачалаОтгрузки,
		|	КоличествоНаборок,
		|	Маршрут";
	
	Запрос.УстановитьПараметр("ВремяКонец", ВремяКонец);
	Запрос.УстановитьПараметр("ВремяНачало", ВремяНачало);
	Запрос.УстановитьПараметр("ДатаАнализа", ДатаАнализа);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТаблицаМаршрутов.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	НоваяСтрока=ТаблицаМаршрутов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуМаршрутов(Команда)
	СформироватьТаблицуМаршрутовНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СоздатьНаборкиМаршрута(Команда)
	ТекущиеДанныеМаршрутов=Элементы.ТаблицаМаршрутов.ТекущиеДанные;
	СоздатьДокументыНаборокНаСервере(ТекущиеДанныеМаршрутов.Маршрут);
	СформироватьТаблицуМаршрутовНаСервере();

КонецПроцедуры
