Перем КомпонентШК;
#Область Печать
Процедура ПечатьЭтикеткиПаллетыКороба(ШтрихКод,Принтер) Экспорт 
	СтруктураНастроек=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам("CurrentDirectoryDll,CurrentDirectory,ProcessorCapacity");
	Если  ТипЗнч(ШтрихКод)<> Тип("Массив") Тогда
		МассивШк=новый Массив;
		МассивШк.Добавить(ШтрихКод);
	иначе
		МассивШк=ШтрихКод;
	КонецЕсли;
	ТабличныйДокумент = новый ТабличныйДокумент;
	Макет=ПолучитьМакет("ПаллетЛист");
	Для Каждого Стр из МассивШк цикл
		Область=Макет.ПолучитьОбласть("ОбластьSSCC");
		ПараметрыПечати = новый Структура;
		ПараметрыПечати.Вставить("Ширина",0);
		ПараметрыПечати.Вставить("Высота",0);
		ПараметрыПечати.Вставить("ТипКода",4);
		Картинка=ПолучитьКартинкуШк(ПараметрыПечати,Стр);
		Область.Параметры.ШК=новый Картинка(Картинка);
		Область.Параметры.ШК1=новый Картинка(Картинка);
		//Область.Параметры.ШК2=новый Картинка(Картинка);
		Область.Параметры.ШтрихКод=Стр;
		Если ПроверитьSSCCНаЛеквидность(Стр) Тогда
			Область.Параметры.ТипЛогистическойЕденицы="SSCC";	
		иначе
			Область.Параметры.ТипЛогистическойЕденицы="GTIN";
		КонецЕсли;
		ТабличныйДокумент.Вывести(Область);
		//ТабличныйДокумент.ПолеСверху=5;
		//ТабличныйДокумент.ПолеСлева=5;
		//ТабличныйДокумент.ПолеСправа=0;
		//ТабличныйДокумент.ПолеСнизу=0;
		ТабличныйДокумент.МасштабПечати=55;
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;
	ИмяФайла=итWMSСлужебныеПроцедурыИФункции.СохранитьТабличныйДокументВФайлPDFнаСервере(ТабличныйДокумент);
	СтруктураПараметров=итWMSСлужебныеПроцедурыИФункции.ПолучитьСтруктуруПечатиPDF();
	СтруктураПараметров.PrinterName=Принтер;
	СтруктураПараметров.FileName=ИмяФайла;
	СтруктураПараметров.LeftField=0;
	СтруктураПараметров.RightField=0;
	СтруктураПараметров.UpField=0;
	СтруктураПараметров.DownField=0;
	СтруктураПараметров.PaperHight=220;
	СтруктураПараметров.PaperWight=404;
	//СтруктураПараметров.ImageHight=600;
	//СтруктураПараметров.ImageWight=400;
	СтруктураПараметров.PixelJpgX=0;
	СтруктураПараметров.PixelJpgY=0;	
	СтруктураПараметров.CurrentDirectoryDll=СтруктураНастроек.CurrentDirectoryDll;
	СтруктураПараметров.CurrentDirectory=СтруктураНастроек.CurrentDirectory;
	СтруктураПараметров.processorCapacity=СтруктураНастроек.ProcessorCapacity;
	итWMSСлужебныеПроцедурыИФункции.ПечатьPDFСерверныйВызов(СтруктураПараметров);
	УдалитьФайлы(ИмяФайла);
КонецПроцедуры

Процедура ПечатьЭтикеткиПаллетыКоробаЧерезPNG(ШтрихКод,Принтер) Экспорт  
    СтруктураНастроек=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам("CurrentDirectoryDll,CurrentDirectory,ProcessorCapacity");
	Если  ТипЗнч(ШтрихКод)<> Тип("Массив") Тогда
		МассивШк=новый Массив;
		МассивШк.Добавить(ШтрихКод);
	иначе
		МассивШк=ШтрихКод;
	КонецЕсли;
	ТабличныйДокумент = новый ТабличныйДокумент;
	ТабличныйДокумент.РазмерСтраницы="Custom";
	ТабличныйДокумент.ВысотаСтраницы=50;
	ТабличныйДокумент.ШиринаСтраницы=100;
	ТабличныйДокумент.ПолеСлева=0;
	ТабличныйДокумент.ПолеСправа=0;
	ТабличныйДокумент.ПолеСнизу=0;
	ТабличныйДокумент.ПолеСверху=0;

	Макет=ПолучитьМакет("Этикетка10на5");
	Для Каждого Стр из МассивШк цикл
		Область=Макет.ПолучитьОбласть("Область1");
		Область.РазмерСтраницы="Custom";
		Область.ВысотаСтраницы=50;
		Область.ШиринаСтраницы=100;
		Область.ПолеСлева=0;
		Область.ПолеСправа=0;
		Область.ПолеСнизу=0;
		Область.ПолеСверху=0;
		ПараметрыПечати = новый Структура;
		ПараметрыПечати.Вставить("Ширина",500);
		ПараметрыПечати.Вставить("Высота",500);
		ПараметрыПечати.Вставить("ТипКода",4);
		Картинка=ПолучитьКартинкуШк(ПараметрыПечати,Стр);
		Область.Параметры.ШК=новый Картинка(Картинка);
		Область.Параметры.ШтрихКод=Стр;
		Если ПроверитьSSCCНаЛеквидность(Стр) Тогда
			Область.Параметры.ТипЛогистическойЕденицы="SSCC";	
		иначе
			Область.Параметры.ТипЛогистическойЕденицы="GTIN";
		КонецЕсли;
		ТабличныйДокумент.Вывести(Область);
		//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;
	ИмяФайла=итWMSСлужебныеПроцедурыИФункции.СохранитьТабличныйДокументВФайлPDFнаСервере(ТабличныйДокумент);
	СтруктураПараметров=итWMSСлужебныеПроцедурыИФункции.ПолучитьСтруктуруПечатиPDF();
	СтруктураПараметров.PrinterName=Принтер;
	СтруктураПараметров.FileName=ИмяФайла;
	СтруктураПараметров.PaperHight=250;
	СтруктураПараметров.PaperWight=435;
	СтруктураПараметров.PixelJpgX=203;
	СтруктураПараметров.PixelJpgY=203;
	//СтруктураПараметров.printingAutoParam=Истина;
	СтруктураПараметров.newMethodParsePDF=Истина;
	СтруктураПараметров.CurrentDirectoryDll=СтруктураНастроек.CurrentDirectoryDll;
	СтруктураПараметров.CurrentDirectory=СтруктураНастроек.CurrentDirectory;
	СтруктураПараметров.processorCapacity=СтруктураНастроек.ProcessorCapacity;
	итWMSСлужебныеПроцедурыИФункции.ПечатьPDFСерверныйВызов(СтруктураПараметров);
	УдалитьФайлы(ИмяФайла);
КонецПроцедуры

Процедура ПечатьЭтикеткиПаллетыКоробаPDF(ШтрихКод,Принтер) Экспорт 
	Если  ТипЗнч(ШтрихКод)<> Тип("Массив") Тогда
		МассивШк=новый Массив;
		МассивШк.Добавить(ШтрихКод);
	иначе
		МассивШк=ШтрихКод;
	КонецЕсли;
	ТабличныйДокумент = новый ТабличныйДокумент;
	ТабличныйДокумент.РазмерСтраницы="Custom";
	ТабличныйДокумент.ВысотаСтраницы=100;
	ТабличныйДокумент.ШиринаСтраницы=100;
	ТабличныйДокумент.ПолеСлева=0;
	ТабличныйДокумент.ПолеСправа=0;
	ТабличныйДокумент.ПолеСнизу=0;
	ТабличныйДокумент.ПолеСверху=0;
	Макет=ПолучитьМакет("Этикетка10на10_1");
	Счетчик=0;
	СчетчикВсего=0;
	Для Каждого Стр из МассивШк цикл
		Счетчик=Счетчик+1;
		СчетчикВсего=СчетчикВсего+1;
		Область=Макет.ПолучитьОбласть("Область1");
		Область.РазмерСтраницы="Custom";
		Область.ВысотаСтраницы=100;
		Область.ШиринаСтраницы=100;
		Область.ПолеСлева=0;
		Область.ПолеСправа=0;
		Область.ПолеСнизу=0;
		Область.ПолеСверху=0;
		ПараметрыПечати = новый Структура;
		ПараметрыПечати.Вставить("Ширина",500);
		ПараметрыПечати.Вставить("Высота",500);
		ПараметрыПечати.Вставить("ТипКода",4);
		//ПараметрыПечати.Вставить("УголПоворота",90);
		Картинка=ПолучитьКартинкуШк(ПараметрыПечати,Стр);
		Область.Параметры.ШК=новый Картинка(Картинка);
		//Область.Параметры.ШК2=новый Картинка(Картинка);
		Область.Параметры.ШтрихКод=Стр;
		Если ПроверитьSSCCНаЛеквидность(Стр) Тогда
			Область.Параметры.ТипЛогистическойЕденицы="SSCC";	
		иначе
			Область.Параметры.ТипЛогистическойЕденицы="GTIN";
		КонецЕсли;
		ТабличныйДокумент.Вывести(Область);
		Если Счетчик<10 и МассивШк.Количество()>СчетчикВсего Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		иначе	
		ИмяФайла=итWMSСлужебныеПроцедурыИФункции.СохранитьТабличныйДокументВФайлPDFнаСервере(ТабличныйДокумент);
		СтруктураПараметров=итWMSСлужебныеПроцедурыИФункции.ПолучитьСтруктуруПечатиPDF();
		СтруктураПараметров.PrinterName=Принтер;
		СтруктураПараметров.FileName=ИмяФайла;
		СтруктураПараметров.PaperHight=204;
		СтруктураПараметров.PaperWight=445;
		//СтруктураПараметров.printingAutoParam=Истина;
		итWMSСлужебныеПроцедурыИФункции.ПечатьPDFКакВекторСерверныйВызов(СтруктураПараметров);
		УдалитьФайлы(ИмяФайла);
		Счетчик=0;
		КонецЕсли;
	КонецЦикла;
	КонецПроцедуры
	
Процедура ПечатьГрупповойЭтикеткиПМУПродукции(SSCC="",GTIN="",Марка="",Принтер) Экспорт 
	Если SSCC="" и GTIN="" Тогда 
		ВызватьИсключение "не достаточно данных";
	КонецЕсли;
	СтруктураПараметров=СформироватьСтруктуруПараметровДляГрупповойЭтикетки();
	Если SSCC<>"" Тогда 
		ЗаполнитьДанныеПоSSCC(SSCC,СтруктураПараметров);
	КонецЕсли;
	Если GTIN<>"" Тогда 
		ЗаполнитьДанныеПоGTIN(GTIN,СтруктураПараметров);
	КонецЕсли;
	Если Марка<>"" Тогда 
		ЗаполнитьСтруктуруПараметровЭтикеткиПоМарке(Марка,СтруктураПараметров);
		Если SSCC<>"" Тогда 
			СтруктураПараметров.ШкУпаковкиТекст=SSCC;
			СтруктураПараметров.ШкУпаковки=SSCC;
		ИначеЕсли GTIN <>"" Тогда  
			СтруктураПараметров.ШкУпаковкиТекст=GTIN;
			СтруктураПараметров.ШкУпаковки=GTIN;
		КонецЕсли;
	КонецЕсли;
	ПечатьГрупповойЭтикетки(СтруктураПараметров,Принтер);
КонецПроцедуры
	
Процедура ПечатьГрупповойЭтикетки(СтруктураПараметров,Принтер) Экспорт 
	МассивШк=новый Массив;
	МассивТекстШк=новый Массив;
	Если ТипЗнч(СтруктураПараметров.ШкУпаковки)<> Тип("Массив") Тогда 
		МассивШк.Добавить(СтруктураПараметров.ШкУпаковки);
	иначе
		МассивШк=СтруктураПараметров.ШкУпаковки;
	КонецЕсли;
	Если ТипЗнч(СтруктураПараметров.ШкУпаковкиТекст)<> Тип("Массив") Тогда 
		МассивТекстШк.Добавить(СтруктураПараметров.ШкУпаковкиТекст);
	иначе
		МассивТекстШк=СтруктураПараметров.ШкУпаковкиТекст;
	КонецЕсли;

	
	Макет=ПолучитьМакет("Этикетка10на10");
	ТабДок=новый ТабличныйДокумент;
	ТабДок.РазмерСтраницы="Custom";
	ТабДок.ВысотаСтраницы=100;
	ТабДок.ШиринаСтраницы=100;
	ТабДок.ПолеСлева=0;
	ТабДок.ПолеСправа=0;
	ТабДок.ПолеСнизу=0;
	ТабДок.ПолеСверху=0;
	СчетчикОбходов=0;
	Для Каждого стр из МассивШк цикл
	Область=Макет.ПолучитьОбласть("Область1");
	Область.РазмерСтраницы="Custom";
	Область.ВысотаСтраницы=100;
	Область.ШиринаСтраницы=100;
	Область.ПолеСлева=0;
	Область.ПолеСправа=0;
	Область.ПолеСнизу=0;
	Область.ПолеСверху=0;
	Область.Параметры.Заполнить(СтруктураПараметров);
	ПараметрыПечати = новый Структура;
	ПараметрыПечати.Вставить("Ширина",150);
	ПараметрыПечати.Вставить("Высота",50);
	ПараметрыПечати.Вставить("ТипКода",4);
	Картинка=ПолучитьКартинкуШк(ПараметрыПечати,стр);
	Область.Параметры.ШКУпаковки=новый Картинка(Картинка);
	Область.Параметры.ШкУпаковкиТекст=МассивТекстШк[СчетчикОбходов];
	ПараметрыПечати = новый Структура;
	ПараметрыПечати.Вставить("Ширина",250);
	ПараметрыПечати.Вставить("Высота",250);
	ПараметрыПечати.Вставить("ТипКода",4);
	ПараметрыПечати.Вставить("УголПоворота",90);
	Картинка=ПолучитьКартинкуШк(ПараметрыПечати,СтруктураПараметров.ШкГрупповойТары);
	Область.Параметры.ШкГрупповойТары=новый Картинка(Картинка);
	Если СтруктураПараметров.Объем>0 Тогда 
		Область.Параметры.Объем=Строка(СтруктураПараметров.Объем)+" л.";
	иначе
		Область.Параметры.Объем="";
	КонецЕсли;
	Если СтруктураПараметров.ДоляСпирта>0 Тогда 
		Область.Параметры.ДоляСпирта=Строка(СтруктураПараметров.ДоляСпирта)+" %";
	иначе
		Область.Параметры.ДоляСпирта="";
	КонецЕсли;
		Если СтруктураПараметров.ДоляСпирта>0 Тогда 
		Область.Параметры.ДоляСпирта=Строка(СтруктураПараметров.ДоляСпирта)+" %";
	иначе
		Область.Параметры.ДоляСпирта="";
	КонецЕсли;
    Если СтруктураПараметров.Количествовкоробе>0 Тогда 
		Область.Параметры.Количествовкоробе=Строка(СтруктураПараметров.Количествовкоробе)+" шт.";
	иначе
		Область.Параметры.Количествовкоробе="";
	КонецЕсли;
	Если СтруктураПараметров.СрокГодности>'00010101' Тогда 
		Область.Параметры.СрокГодности=Формат(СтруктураПараметров.СрокГодности,"ДФ=dd.MM.yyyy");
	иначе
		Область.Параметры.СрокГодности="";
	КонецЕсли;
	Если СтруктураПараметров.ДатаИзготовления>'00010101' Тогда 
		Область.Параметры.ДатаИзготовления=Формат(СтруктураПараметров.ДатаИзготовления,"ДФ=dd.MM.yyyy");
	иначе
		Область.Параметры.ДатаИзготовления="";
	КонецЕсли;
	СчетчикОбходов=СчетчикОбходов+1;
	Если СчетчикОбходов%10>0 Тогда 
		ТабДок.Вывести(Область);
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	иначе
		ПечатьГрупповойЭтикеткиБлокПечати(Принтер, ТабДок);
		ТабДок=новый ТабличныйДокумент;
		ТабДок.РазмерСтраницы="Custom";
		ТабДок.ВысотаСтраницы=100;
		ТабДок.ШиринаСтраницы=100;
		ТабДок.ПолеСлева=0;
		ТабДок.ПолеСправа=0;
		ТабДок.ПолеСнизу=0;
		ТабДок.ПолеСверху=0;
		ТабДок.Вывести(Область);
	КонецЕсли;
		КонецЦикла;
	ПечатьГрупповойЭтикеткиБлокПечати(Принтер, ТабДок);


КонецПроцедуры

Процедура ПечатьГрупповойЭтикеткиБлокПечати(Знач Принтер, Знач ТабДок)
	
	ИмяФайла=итWMSСлужебныеПроцедурыИФункции.СохранитьТабличныйДокументВФайлPDFнаСервере(ТабДок);
	СтруктураПараметров=итWMSСлужебныеПроцедурыИФункции.ПолучитьСтруктуруПечатиPDF();
	СтруктураПараметров.PrinterName=Принтер;
	СтруктураПараметров.FileName=ИмяФайла;
	СтруктураПараметров.PaperHight=395;
	СтруктураПараметров.PaperWight=425;
	итWMSСлужебныеПроцедурыИФункции.ПечатьPDFКакВекторСерверныйВызов(СтруктураПараметров);
	УдалитьФайлы(ИмяФайла);

КонецПроцедуры	
	
	
Функция  ТекстПечать(Принтер="") Экспорт 
СтруктураНастроек=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам("CurrentDirectoryDll,CurrentDirectory,ProcessorCapacity");
Макет=ПолучитьМакет("Этикетка10на10");
ТабДок=новый ТабличныйДокумент;
ТабДок.РазмерСтраницы="Custom";
 ТабДок.ВысотаСтраницы=100;
 ТабДок.ШиринаСтраницы=100;
 ТабДок.ПолеСлева=0;
 ТабДок.ПолеСправа=0;
 ТабДок.ПолеСнизу=0;
 ТабДок.ПолеСверху=0;

Область=Макет.ПолучитьОбласть("Область1");
Область.РазмерСтраницы="Custom";
 Область.ВысотаСтраницы=100;
 Область.ШиринаСтраницы=100;
 Область.ПолеСлева=0;
 Область.ПолеСправа=0;
 Область.ПолеСнизу=0;
 Область.ПолеСверху=0;
 ПараметрыПечати = новый Структура;
 ПараметрыПечати.Вставить("Ширина",150);
 ПараметрыПечати.Вставить("Высота",50);
 ПараметрыПечати.Вставить("ТипКода",4);
 Картинка=ПолучитьКартинкуШк(ПараметрыПечати,"000032323232323");
 Область.Параметры.ШКSSCC=новый Картинка(Картинка);
 ПараметрыПечати = новый Структура;
 ПараметрыПечати.Вставить("Ширина",25);
 ПараметрыПечати.Вставить("Высота",109);
 ПараметрыПечати.Вставить("ТипКода",1);
 ПараметрыПечати.Вставить("УголПоворота",90);
Картинка=ПолучитьКартинкуШк(ПараметрыПечати,"000032323232");
Область.Параметры.ШКУпак=новый Картинка(Картинка);
 //кк=новый Картинка(Картинка);
 //кк.Записать("D:\1.jpg");
 Область.Параметры.текстSSCC="000032323232323";
 ТабДок.Вывести(Область);
 //ТабДок.Записать("D:\1.pdf",ТипФайлаТабличногоДокумента.PDF);
 ИмяФайла=итWMSСлужебныеПроцедурыИФункции.СохранитьТабличныйДокументВФайлPDFнаСервере(ТабДок);
 СтруктураПараметров=итWMSСлужебныеПроцедурыИФункции.ПолучитьСтруктуруПечатиPDF();
 СтруктураПараметров.PrinterName=Принтер;
 СтруктураПараметров.FileName=ИмяФайла;
 СтруктураПараметров.LeftField=0;
 СтруктураПараметров.RightField=0;
 СтруктураПараметров.UpField=0;
 СтруктураПараметров.DownField=0;
 СтруктураПараметров.PaperHight=404;
 СтруктураПараметров.PaperWight=404;
 //СтруктураПараметров.OnlySaveFile=Истина;
 //СтруктураПараметров.ImageHight=600;
 //СтруктураПараметров.ImageWight=400;
 СтруктураПараметров.PixelJpgX=0;
 СтруктураПараметров.PixelJpgY=0;	
 СтруктураПараметров.CurrentDirectoryDll=СтруктураНастроек.CurrentDirectoryDll;
 СтруктураПараметров.CurrentDirectory=СтруктураНастроек.CurrentDirectory;
 СтруктураПараметров.processorCapacity=СтруктураНастроек.ProcessorCapacity;
 итWMSСлужебныеПроцедурыИФункции.ПечатьPDFСерверныйВызов(СтруктураПараметров);
 УдалитьФайлы(ИмяФайла);
 
 Возврат ТабДок;
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьСтруктуруПараметровДляГрупповойЭтикетки() Экспорт 
	СтруктураПараметров=новый Структура;
	СтруктураПараметров.Вставить("ШкУпаковкиТекст","");
	СтруктураПараметров.Вставить("ШкУпаковки","");
	СтруктураПараметров.Вставить("Продукция","");
	СтруктураПараметров.Вставить("ИНН","");
	СтруктураПараметров.Вставить("КПП","");
	СтруктураПараметров.Вставить("КОДЕГАИСорг","");
	СтруктураПараметров.Вставить("ДатаИзготовления",'00010101');
    СтруктураПараметров.Вставить("СрокГодности",'00010101');
	СтруктураПараметров.Вставить("КОДЕГАИСпрод","");
	СтруктураПараметров.Вставить("ДоляСпирта",0);
	СтруктураПараметров.Вставить("Объем",0);
	СтруктураПараметров.Вставить("Количествовкоробе",0);
	СтруктураПараметров.Вставить("ИнформацияПоСрокуГодности","Срок годности не ограничен при соблюдении условий хранения");
	СтруктураПараметров.Вставить("УсловияХранения","Хранить в вентилируемых, не имеющих постороннего запаха помещениях,"+
	"исключающих воздействие прямого солнечного света,"+
	" при температуре от 5°С до 20°С и относительной влажности воздуха не более 85%");
	СтруктураПараметров.Вставить("ОрганизацияИзготовитель","");
	СтруктураПараметров.Вставить("ЮрФактАдрес","");
	СтруктураПараметров.Вставить("КодИзготовителя","");
	СтруктураПараметров.Вставить("ШкГрупповойТарыТекст","");
	СтруктураПараметров.Вставить("ШкГрупповойТары","");
	
    Возврат СтруктураПараметров;
КонецФункции

Функция ПолучитьКартинкуШк(ПараметрыПечати=Неопределено,ШтрихКод)Экспорт 
	
	ПараметрыПечатиПоУмолчанию(ПараметрыПечати);
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	ОбработкаОбъект=Обработки.итПечатьПроизвольногоШтрихкода.Создать();
	Если КомпонентШК=Неопределено Тогда 
	КомпонентШК=Неопределено;
	ОбработкаОбъект.ПодключитьКомпоненту(КомпонентШК);
	КонецЕсли;
	Если КомпонентШК=Неопределено тогда
		Сообщить("Нет компоненты штрихкода");
		Возврат Неопределено;
	КонецЕсли;	
	СчетчикКоличествоВСтроке=0;
	Если не РольДоступна("ПолныеПрава") Тогда 
			Если не РольДоступна("итWMSПечатьШкQr")  и ПараметрыПечати.ТипКода=16 Тогда 
				ВызватьИсключение "Нет разрешения печатать QR код";
			КонецЕсли;
	КонецЕсли;
	КомпонентШК.ТипКода=ПараметрыПечати.ТипКода;
	КомпонентШК.ЗначениеКода=ШтрихКод;
	Если ПараметрыПечати.Свойство("ОтображатьТекст") Тогда 
	КомпонентШК.ОтображатьТекст=ПараметрыПечати.ОтображатьТекст;
	иначе
	КомпонентШК.ОтображатьТекст=Ложь; 
	КонецЕсли;
	Если ПараметрыПечати.Свойство("УголПоворота") Тогда 
	КомпонентШК.УголПоворота=ПараметрыПечати.УголПоворота;
	КонецЕсли;
	КомпонентШК.Ширина=ПараметрыПечати.Ширина;
	КомпонентШК.Высота=ПараметрыПечати.Высота;
	ПроверкаКартинкиПоМинимальнымПараметрам(КомпонентШК);
	ПроверкаПараметровШириныИВысоты(ПараметрыПечати,КомпонентШК);
	Картинка=КомпонентШК.ПолучитьШтрихкод();
	Возврат Картинка;
КонецФункции

Процедура ПараметрыПечатиПоУмолчанию(ПараметрыПечати)
	Если не ПараметрыПечати.Свойство("Ориентация") тогда
		ПараметрыПечати.Вставить("Ориентация","Портрет");
	КонецЕсли;
	Если не ПараметрыПечати.Свойство("ТипКода") тогда
		ПараметрыПечати.Вставить("ТипКода",16);
	КонецЕсли;
	Если  не ПараметрыПечати.Свойство("Ширина") тогда
		ПараметрыПечати.Вставить("Ширина",0);
	КонецЕсли;	
	Если  не ПараметрыПечати.Свойство("Высота") тогда
		ПараметрыПечати.Вставить("Высота",0);
	КонецЕсли;	
	Если  не ПараметрыПечати.Свойство("РазмерШрифта") тогда
		ПараметрыПечати.Вставить("РазмерШрифта",8);
	КонецЕсли;	
   Если  не ПараметрыПечати.Свойство("КоличествоВСтроке") тогда
		ПараметрыПечати.Вставить("КоличествоВСтроке",1);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкаКартинкиПоМинимальнымПараметрам(КомпонентШК)Экспорт 
	Если КомпонентШК.Ширина < КомпонентШК.МинимальнаяШиринаКода Тогда
		КомпонентШК.Ширина = КомпонентШК.МинимальнаяШиринаКода;
	КонецЕсли;
	// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
	Если КомпонентШК.Высота < КомпонентШК.МинимальнаяВысотаКода Тогда
		КомпонентШК.Высота = КомпонентШК.МинимальнаяВысотаКода;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаПараметровШириныИВысоты(ПараметрыПечати,КомпонентШК)
	Если ПараметрыПечати.Ширина < КомпонентШК.МинимальнаяШиринаКода/10 Тогда
		ПараметрыПечати.Ширина = КомпонентШК.МинимальнаяШиринаКода;
	КонецЕсли;
	// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
	Если ПараметрыПечати.Высота < КомпонентШК.МинимальнаяВысотаКода/10 Тогда
		ПараметрыПечати.Высота = КомпонентШК.МинимальнаяВысотаКода;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеПоSSCC(SSCC,СтруктураПараметров) Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	алкХранилищеУпаковокСрезПоследних.Упаковка,
		|	алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.алкХранилищеУпаковок.СрезПоследних КАК алкХранилищеУпаковокСрезПоследних
		|ГДЕ
		|	алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки = &ИерархияУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ алкХранилищеАкцизныхМарокСрезПоследних.Марка) КАК КоличетсвоМарок,
		|	МАКСИМУМ(алкХранилищеАкцизныхМарокСрезПоследних.Марка) КАК Марка,
		|	ВТ.ИерархияУпаковки
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
		|		ПО ВТ.Упаковка = алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
		|			И (НЕ алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.ИерархияУпаковки";
	
	Запрос.УстановитьПараметр("ИерархияУпаковки", SSCC);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураПараметров.ШкУпаковкиТекст=ВыборкаДетальныеЗаписи.ИерархияУпаковки;
		СтруктураПараметров.ШкУпаковки=ВыборкаДетальныеЗаписи.ИерархияУпаковки;
        ЗаполнитьСтруктуруПараметровЭтикеткиПоМарке(ВыборкаДетальныеЗаписи.Марка,СтруктураПараметров);
		СтруктураПараметров.Количествовкоробе=ВыборкаДетальныеЗаписи.КоличетсвоМарок;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецПроцедуры

Процедура ЗаполнитьДанныеПоGTIN(GTIN,СтруктураПараметров) Экспорт 
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	алкХранилищеАкцизныхМарокСрезПоследних.Марка КАК КоличетсвоМарок,
		|	алкХранилищеАкцизныхМарокСрезПоследних.Марка КАК Марка,
		|	алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
		|ГДЕ
		|	алкХранилищеАкцизныхМарокСрезПоследних.Упаковка = &Упаковка
		|	И алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ.КоличетсвоМарок) КАК КоличетсвоМарок,
		|	МАКСИМУМ(ВТ.Марка) КАК Марка,
		|	ВТ.Упаковка
		|ИЗ
		|	ВТ КАК ВТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Упаковка";
	
	Запрос.УстановитьПараметр("Упаковка", GTIN);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураПараметров.ШкУпаковкиТекст=ВыборкаДетальныеЗаписи.Упаковка;
		СтруктураПараметров.ШкУпаковки=ВыборкаДетальныеЗаписи.Упаковка;
        ЗаполнитьСтруктуруПараметровЭтикеткиПоМарке(ВыборкаДетальныеЗаписи.Марка,СтруктураПараметров);
		СтруктураПараметров.Количествовкоробе=ВыборкаДетальныеЗаписи.КоличетсвоМарок;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецПроцедуры

Процедура ЗаполнитьСтруктуруПараметровЭтикеткиПоМарке(Марка,СтруктураПараметров) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Код КАК ЕГАИСКОДпрод,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Объем КАК Объем,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Крепость КАК Крепость,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Производитель КАК Производитель,
		|	алкХранилищеАкцизныхМарокСрезПоследних.Организация.ИНН КАК ИНН,
		|	алкХранилищеАкцизныхМарокСрезПоследних.Организация.КПП КАК КПП,
		|	ПОДСТРОКА(алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Производитель.ПредставлениеАдреса, 1, 500) КАК ПроизводительАдрес,
		|	алкХранилищеАкцизныхМарокСрезПоследних.Организация,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Наименование
		|ПОМЕСТИТЬ ВтДанныеМарки
		|ИЗ
		|	РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних(, Марка = &Марка) КАК алкХранилищеАкцизныхМарокСрезПоследних
		|ГДЕ
		|	алкХранилищеАкцизныхМарокСрезПоследних.Марка = &Марка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры) КАК СерияНоменклатуры,
		|	ВтДанныеМарки.СправкаБ,
		|	ВтДанныеМарки.ЕГАИСКОДпрод,
		|	ВтДанныеМарки.Объем,
		|	ВтДанныеМарки.Крепость,
		|	ВтДанныеМарки.Производитель,
		|	ВтДанныеМарки.ИНН,
		|	ВтДанныеМарки.КПП,
		|	ВтДанныеМарки.ПроизводительАдрес,
		|	ВтДанныеМарки.Организация,
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.алкДатаНачалаРозлива) КАК ДатаНачалаРозлива,
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.СрокГодности) КАК СрокГодности,
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец) КАК Номенклатура,
		|	ВтДанныеМарки.АлкогольнаяПродукцияНаименование,
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец.ЕдиницаИзмеренияМест) КАК ЕдиницаИзмеренияМест
		|ПОМЕСТИТЬ ДанныеНоменклатур
		|ИЗ
		|	ВтДанныеМарки КАК ВтДанныеМарки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
		|		ПО ВтДанныеМарки.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеМарки.Производитель,
		|	ВтДанныеМарки.КПП,
		|	ВтДанныеМарки.ИНН,
		|	ВтДанныеМарки.ЕГАИСКОДпрод,
		|	ВтДанныеМарки.СправкаБ,
		|	ВтДанныеМарки.ПроизводительАдрес,
		|	ВтДанныеМарки.Организация,
		|	ВтДанныеМарки.Объем,
		|	ВтДанныеМарки.Крепость,
		|	ВтДанныеМарки.АлкогольнаяПродукцияНаименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеНоменклатур.СерияНоменклатуры,
		|	ДанныеНоменклатур.СправкаБ,
		|	ДанныеНоменклатур.ЕГАИСКОДпрод,
		|	ДанныеНоменклатур.Объем,
		|	ДанныеНоменклатур.Крепость,
		|	ДанныеНоменклатур.Производитель,
		|	ДанныеНоменклатур.ИНН,
		|	ДанныеНоменклатур.КПП,
		|	ДанныеНоменклатур.ПроизводительАдрес,
		|	ДанныеНоменклатур.Организация,
		|	ДанныеНоменклатур.ДатаНачалаРозлива,
		|	ДанныеНоменклатур.СрокГодности,
		|	ДанныеНоменклатур.Номенклатура,
		|	ДанныеНоменклатур.АлкогольнаяПродукцияНаименование,
		|	ДанныеНоменклатур.ЕдиницаИзмеренияМест
		|ПОМЕСТИТЬ ВтДанныеСЕденицамиВКоробе
		|ИЗ
		|	ДанныеНоменклатур КАК ДанныеНоменклатур
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеНоменклатур.СерияНоменклатуры,
		|	ДанныеНоменклатур.СправкаБ,
		|	ДанныеНоменклатур.ЕГАИСКОДпрод,
		|	ДанныеНоменклатур.Объем,
		|	ДанныеНоменклатур.Крепость,
		|	ДанныеНоменклатур.Производитель,
		|	ДанныеНоменклатур.ИНН,
		|	ДанныеНоменклатур.КПП,
		|	ДанныеНоменклатур.ПроизводительАдрес,
		|	ДанныеНоменклатур.Организация,
		|	ДанныеНоменклатур.ДатаНачалаРозлива,
		|	ДанныеНоменклатур.СрокГодности,
		|	ДанныеНоменклатур.Номенклатура,
		|	ДанныеНоменклатур.АлкогольнаяПродукцияНаименование,
		|	ДанныеНоменклатур.ЕдиницаИзмеренияМест
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеСЕденицамиВКоробе.СерияНоменклатуры,
		|	ВтДанныеСЕденицамиВКоробе.СправкаБ,
		|	ВтДанныеСЕденицамиВКоробе.ЕГАИСКОДпрод,
		|	ВтДанныеСЕденицамиВКоробе.Объем,
		|	ВтДанныеСЕденицамиВКоробе.Крепость,
		|	ВтДанныеСЕденицамиВКоробе.Производитель,
		|	ВтДанныеСЕденицамиВКоробе.ИНН,
		|	ВтДанныеСЕденицамиВКоробе.КПП,
		|	ВтДанныеСЕденицамиВКоробе.ПроизводительАдрес,
		|	ВтДанныеСЕденицамиВКоробе.Организация,
		|	ВтДанныеСЕденицамиВКоробе.ДатаНачалаРозлива,
		|	ВтДанныеСЕденицамиВКоробе.СрокГодности,
		|	ВтДанныеСЕденицамиВКоробе.Номенклатура,
		|	ВтДанныеСЕденицамиВКоробе.АлкогольнаяПродукцияНаименование,
		|	МАКСИМУМ(алкСоответствияОрганизацийЕГАИСИКонтрагентов.ОрганизацияЕГАИС.Код) КАК ОрганизацияЕГАИСКод,
		|	ВтДанныеСЕденицамиВКоробе.ЕдиницаИзмеренияМест
		|ПОМЕСТИТЬ ДанныеСКодомЕгаисОрганизации
		|ИЗ
		|	ВтДанныеСЕденицамиВКоробе КАК ВтДанныеСЕденицамиВКоробе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияОрганизацийЕГАИСИКонтрагентов КАК алкСоответствияОрганизацийЕГАИСИКонтрагентов
		|		ПО ВтДанныеСЕденицамиВКоробе.Организация = алкСоответствияОрганизацийЕГАИСИКонтрагентов.Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеСЕденицамиВКоробе.СерияНоменклатуры,
		|	ВтДанныеСЕденицамиВКоробе.СправкаБ,
		|	ВтДанныеСЕденицамиВКоробе.ЕГАИСКОДпрод,
		|	ВтДанныеСЕденицамиВКоробе.Объем,
		|	ВтДанныеСЕденицамиВКоробе.Крепость,
		|	ВтДанныеСЕденицамиВКоробе.Производитель,
		|	ВтДанныеСЕденицамиВКоробе.ИНН,
		|	ВтДанныеСЕденицамиВКоробе.КПП,
		|	ВтДанныеСЕденицамиВКоробе.ПроизводительАдрес,
		|	ВтДанныеСЕденицамиВКоробе.Организация,
		|	ВтДанныеСЕденицамиВКоробе.ДатаНачалаРозлива,
		|	ВтДанныеСЕденицамиВКоробе.СрокГодности,
		|	ВтДанныеСЕденицамиВКоробе.Номенклатура,
		|	ВтДанныеСЕденицамиВКоробе.АлкогольнаяПродукцияНаименование,
		|	ВтДанныеСЕденицамиВКоробе.ЕдиницаИзмеренияМест
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСКодомЕгаисОрганизации.СерияНоменклатуры,
		|	ДанныеСКодомЕгаисОрганизации.СправкаБ,
		|	ДанныеСКодомЕгаисОрганизации.ЕГАИСКОДпрод,
		|	ДанныеСКодомЕгаисОрганизации.Объем,
		|	ДанныеСКодомЕгаисОрганизации.Крепость,
		|	ДанныеСКодомЕгаисОрганизации.Производитель,
		|	ДанныеСКодомЕгаисОрганизации.ИНН,
		|	ДанныеСКодомЕгаисОрганизации.КПП,
		|	ДанныеСКодомЕгаисОрганизации.ПроизводительАдрес,
		|	ДанныеСКодомЕгаисОрганизации.Организация,
		|	ДанныеСКодомЕгаисОрганизации.ДатаНачалаРозлива,
		|	ДанныеСКодомЕгаисОрганизации.СрокГодности,
		|	ДанныеСКодомЕгаисОрганизации.Номенклатура,
		|	ДанныеСКодомЕгаисОрганизации.АлкогольнаяПродукцияНаименование,
		|	ДанныеСКодомЕгаисОрганизации.ОрганизацияЕГАИСКод,
		|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод,
		|	ДанныеСКодомЕгаисОрганизации.ЕдиницаИзмеренияМест
		|ИЗ
		|	ДанныеСКодомЕгаисОрганизации КАК ДанныеСКодомЕгаисОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО ДанныеСКодомЕгаисОрганизации.Номенклатура = Штрихкоды.Владелец
		|			И ДанныеСКодомЕгаисОрганизации.ЕдиницаИзмеренияМест = Штрихкоды.ЕдиницаИзмерения
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеСКодомЕгаисОрганизации.СерияНоменклатуры,
		|	ДанныеСКодомЕгаисОрганизации.СправкаБ,
		|	ДанныеСКодомЕгаисОрганизации.ЕГАИСКОДпрод,
		|	ДанныеСКодомЕгаисОрганизации.Объем,
		|	ДанныеСКодомЕгаисОрганизации.Крепость,
		|	ДанныеСКодомЕгаисОрганизации.Производитель,
		|	ДанныеСКодомЕгаисОрганизации.ИНН,
		|	ДанныеСКодомЕгаисОрганизации.КПП,
		|	ДанныеСКодомЕгаисОрганизации.ПроизводительАдрес,
		|	ДанныеСКодомЕгаисОрганизации.Организация,
		|	ДанныеСКодомЕгаисОрганизации.ДатаНачалаРозлива,
		|	ДанныеСКодомЕгаисОрганизации.СрокГодности,
		|	ДанныеСКодомЕгаисОрганизации.Номенклатура,
		|	ДанныеСКодомЕгаисОрганизации.АлкогольнаяПродукцияНаименование,
		|	ДанныеСКодомЕгаисОрганизации.ОрганизацияЕГАИСКод,
		|	ДанныеСКодомЕгаисОрганизации.ЕдиницаИзмеренияМест";
	
	Запрос.УстановитьПараметр("Марка", Марка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураПараметров.Продукция=ВыборкаДетальныеЗаписи.АлкогольнаяПродукцияНаименование;
		СтруктураПараметров.ИНН=ВыборкаДетальныеЗаписи.ИНН;
		СтруктураПараметров.КПП=ВыборкаДетальныеЗаписи.КПП;
		СтруктураПараметров.КОДЕГАИСорг=ВыборкаДетальныеЗаписи.ОрганизацияЕГАИСКод;
		СтруктураПараметров.ДатаИзготовления=ВыборкаДетальныеЗаписи.ДатаНачалаРозлива;
		СтруктураПараметров.СрокГодности=ВыборкаДетальныеЗаписи.СрокГодности;
		Если  СтруктураПараметров.СрокГодности<>'00010101' Тогда
			СтруктураПараметров.ИнформацияПоСрокуГодности="";
		КонецЕсли;
		СтруктураПараметров.КОДЕГАИСпрод=ВыборкаДетальныеЗаписи.ЕГАИСКОДпрод;
		СтруктураПараметров.ДоляСпирта=ВыборкаДетальныеЗаписи.Крепость;
		СтруктураПараметров.Объем= ВыборкаДетальныеЗаписи.Объем;
		СтруктураПараметров.Количествовкоробе=ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияМест.Коэффициент;
		СтруктураПараметров.ОрганизацияИзготовитель=ВыборкаДетальныеЗаписи.Производитель;
		СтруктураПараметров.ЮрФактАдрес=ВыборкаДетальныеЗаписи.ПроизводительАдрес;
		СтруктураПараметров.ШкГрупповойТарыТекст=ВыборкаДетальныеЗаписи.Штрихкод;
		СтруктураПараметров.ШкГрупповойТары=ВыборкаДетальныеЗаписи.Штрихкод;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ДанныеПоАлкогольнойНоменклатуре(Номенклатура,СтруктураПараметров) Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	МАКСИМУМ(Номенклатура.ЕдиницаИзмеренияМест) КАК ЕдиницаИзмеренияМест
		|ПОМЕСТИТЬ ВтНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(алкСоответствияАлкогольнойПродукцииЕГАИСИНоменклатуры.АлкогольнаяПродукция) КАК АлкогольнаяПродукция,
		|	ВтНоменклатура.Ссылка КАК Номенклатура,
		|	ВтНоменклатура.ЕдиницаИзмеренияМест
		|ПОМЕСТИТЬ ДанныеАлкПродукции
		|ИЗ
		|	ВтНоменклатура КАК ВтНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияАлкогольнойПродукцииЕГАИСИНоменклатуры КАК алкСоответствияАлкогольнойПродукцииЕГАИСИНоменклатуры
		|		ПО ВтНоменклатура.Ссылка = алкСоответствияАлкогольнойПродукцииЕГАИСИНоменклатуры.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтНоменклатура.Ссылка,
		|	ВтНоменклатура.ЕдиницаИзмеренияМест
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеАлкПродукции.АлкогольнаяПродукция,
		|	ДанныеАлкПродукции.Номенклатура,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Код КАК КодЕГАИСпрод,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Производитель КАК Производитель,
		|	ПОДСТРОКА(ДанныеАлкПродукции.АлкогольнаяПродукция.Производитель.ПредставлениеАдреса, 1, 500) КАК ПроизводительАдрес,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Крепость КАК Крепость,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Объем КАК Объем,
		|	ДанныеАлкПродукции.ЕдиницаИзмеренияМест.Коэффициент КАК КоличествоВУпаковке,
		|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК ШК
		|ИЗ
		|	ДанныеАлкПродукции КАК ДанныеАлкПродукции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО ДанныеАлкПродукции.Номенклатура = Штрихкоды.Владелец
		|			И ДанныеАлкПродукции.ЕдиницаИзмеренияМест = Штрихкоды.ЕдиницаИзмерения
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеАлкПродукции.АлкогольнаяПродукция,
		|	ДанныеАлкПродукции.Номенклатура,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Код,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Производитель,
		|	ПОДСТРОКА(ДанныеАлкПродукции.АлкогольнаяПродукция.Производитель.ПредставлениеАдреса, 1, 500),
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Крепость,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Объем,
		|	ДанныеАлкПродукции.ЕдиницаИзмеренияМест.Коэффициент";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СтруктураПараметров.Продукция=ВыборкаДетальныеЗаписи.АлкогольнаяПродукция;
	СтруктураПараметров.КОДЕГАИСпрод=ВыборкаДетальныеЗаписи.КодЕГАИСпрод;
	СтруктураПараметров.Количествовкоробе=ВыборкаДетальныеЗаписи.КоличествоВУпаковке;
	СтруктураПараметров.ОрганизацияИзготовитель=ВыборкаДетальныеЗаписи.Производитель;
	СтруктураПараметров.ДоляСпирта=ВыборкаДетальныеЗаписи.Крепость;
	СтруктураПараметров.Объем=ВыборкаДетальныеЗаписи.Объем;
	СтруктураПараметров.ЮрФактАдрес=ВыборкаДетальныеЗаписи.ПроизводительАдрес;
	СтруктураПараметров.ШкГрупповойТары=ВыборкаДетальныеЗаписи.ШК;
	СтруктураПараметров.ШкГрупповойТарыТекст=ВыборкаДетальныеЗаписи.ШК;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА	
	КонецПроцедуры
	
Процедура ДанныеПоБезАлкогольнойНоменклатуре(Номенклатура,СтруктураПараметров) Экспорт 
	 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.ЕдиницаИзмеренияМест
		|ПОМЕСТИТЬ ВтНм
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтНм.Ссылка,
		|	ВЫБОР
		|		КОГДА ВтНм.Ссылка.Производитель = НЕОПРЕДЕЛЕНО
		|				ИЛИ ВтНм.Ссылка.Производитель = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИЛИ ВтНм.Ссылка.Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ВтНм.Ссылка.алкПроизводитель
		|		ИНАЧЕ ВтНм.Ссылка.Производитель
		|	КОНЕЦ КАК Производитель,
		|	ВтНм.Ссылка.ЕдиницаХраненияОстатков.Объем КАК Объем,
		|	ВтНм.Ссылка.ЕдиницаИзмеренияМест.Коэффициент КАК КоличествоВУпаковке,
		|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК ШК
		|ПОМЕСТИТЬ ВтПроизводитель
		|ИЗ
		|	ВтНм КАК ВтНм
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО ВтНм.Ссылка = Штрихкоды.Владелец
		|			И ВтНм.ЕдиницаИзмеренияМест = Штрихкоды.ЕдиницаИзмерения
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ВтНм.Ссылка.Производитель = НЕОПРЕДЕЛЕНО
		|				ИЛИ ВтНм.Ссылка.Производитель = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИЛИ ВтНм.Ссылка.Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ВтНм.Ссылка.алкПроизводитель
		|		ИНАЧЕ ВтНм.Ссылка.Производитель
		|	КОНЕЦ,
		|	ВтНм.Ссылка.ЕдиницаХраненияОстатков.Объем,
		|	ВтНм.Ссылка.ЕдиницаИзмеренияМест.Коэффициент,
		|	ВтНм.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтПроизводитель.Ссылка,
		|	ВтПроизводитель.Производитель,
		|	ВтПроизводитель.Объем,
		|	ВтПроизводитель.КоличествоВУпаковке,
		|	МАКСИМУМ(ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформация.Представление, """"), 1, 255)) КАК Адрес,
		|	ВтПроизводитель.ШК
		|ИЗ
		|	ВтПроизводитель КАК ВтПроизводитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ВтПроизводитель.Производитель = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|			И (КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтПроизводитель.Ссылка,
		|	ВтПроизводитель.Производитель,
		|	ВтПроизводитель.Объем,
		|	ВтПроизводитель.КоличествоВУпаковке,
		|	ВтПроизводитель.ШК";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СтруктураПараметров.Продукция=ВыборкаДетальныеЗаписи.Ссылка;
	СтруктураПараметров.КОДЕГАИСпрод="-";
	СтруктураПараметров.Количествовкоробе=ВыборкаДетальныеЗаписи.КоличествоВУпаковке;
	СтруктураПараметров.ОрганизацияИзготовитель=ВыборкаДетальныеЗаписи.Производитель;
	СтруктураПараметров.ДоляСпирта=0;
	СтруктураПараметров.Объем=ВыборкаДетальныеЗаписи.Объем;
	СтруктураПараметров.ЮрФактАдрес=ВыборкаДетальныеЗаписи.Адрес;
	СтруктураПараметров.ШкГрупповойТары=ВыборкаДетальныеЗаписи.ШК;
	СтруктураПараметров.ШкГрупповойТарыТекст=ВыборкаДетальныеЗаписи.ШК;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	КонецПроцедуры


#Область ПроверкаНаЛеквидностьSSCC_GTIN
// Процедура - Проверить SSCCНа леквидность
// Процедура проверяет идентификатор паллеты на соотв. нормам RAR , если не соотв. то отказ принимает значение "ИСТИНА" 
// Параметры:
//  SSCC	 - Строка - идентификатор паллеты(упаковки)
//  Отказ	 - Булево - флаг отказа
//  Сообщать - Булево - если истина, то выдается сообщение пользователю об ошибке
//
функция ПроверитьSSCCНаЛеквидность(SSCC,Сообщать=Ложь) Экспорт 
	Проверка=Ложь;
	ПроверкаНаSSCC20_18(SSCC,Проверка,Сообщать);
	ПроверкаНаSSCCRAR(SSCC,Проверка,Сообщать);
	Возврат Проверка		
КонецФункции
// Процедура - Проверка на SSCC 20-18
// проверят соотв. SSCC 20-18 символьному формату упаковки согласно RAR
// Параметры:
//  SSCC	 - Строка - идентификатор паллеты(упаковки)
//  Проверка - Булево - Установить в начальное положение ЛОЖЬ - истина - значит проверка пройдена 
//  Сообщать - Булево - если истина, то выдается сообщение пользователю об ошибке
//
Процедура ПроверкаНаSSCC20_18(SSCC,Проверка,Сообщать)
	Ошибка=Истина;
	Если СтрДлина(SSCC)=20 тогда
	Если Лев(SSCC,2)<>"00" тогда
		Возврат
	КонецЕсли;
		Ошибка=Ложь;
	КонецЕсли;
	Если СтрДлина(SSCC)=18 тогда
		Ошибка=Ложь;
	КонецЕсли;
	Если Ошибка тогда
		Возврат
	КонецЕсли;	
	SSCCБезКонтрольнойЦифры=Лев(SSCC,СтрДлина(SSCC)-1);
	КонтрольнаяЦифраВSSCC=Прав(SSCC,1);
	ДанныеРасчетаКонтрольнойЦифры=ПолучитьКонтрольнуюЦифруШтрихКода(SSCCБезКонтрольнойЦифры);
	Если  СокрЛП(НРег(КонтрольнаяЦифраВSSCC))=СокрЛП(НРег(ДанныеРасчетаКонтрольнойЦифры)) тогда
		Проверка=Истина;
	КонецЕсли;	
		
КонецПроцедуры
// Процедура - Проверка на SSCCRAR
//  проверят соотв. SSCC 26 символьному формату упаковки согласно RAR
// Параметры:
//  SSCC	 - Строка - идентификатор паллеты(упаковки)
//  Проверка - Булево - Установить в начальное положение ЛОЖЬ - истина - значит проверка пройдена 	
//  Сообщать - Булево - если истина, то выдается сообщение пользователю об ошибке
//
Процедура ПроверкаНаSSCCRAR(SSCC,Проверка,Сообщать)
	Если СтрДлина(СокрЛП(SSCC)) <> 26  тогда
		Возврат
	КонецЕсли;
	ЗначениеЛогистическойЕденицы=Сред(СокрЛП(SSCC),13,1);
	Попытка
		ЧислоЛогистическойЕденицы=	Число(ЗначениеЛогистическойЕденицы);
	Исключение
		Сообщить("не читается логистическая еденица");
		Возврат
	КонецПопытки;
	Если ЧислоЛогистическойЕденицы=1 или ЧислоЛогистическойЕденицы=3 тогда
		Если Сообщать Тогда 
		Сообщить("Вы считываете идентификатор короба, отказано в присвоении паллеты");
		КонецЕсли;
		Возврат
	КонецЕсли;		
	Если ЧислоЛогистическойЕденицы=2 или ЧислоЛогистическойЕденицы=4   тогда
		Проверка = Истина;
	КонецЕсли;
	//ДатаSSCC=Сред(СокрЛП(SSCC),20,6);
	//ЛогистическийНомер=Сред(СокрЛП(SSCC),26,6);
	//ИдентификаторУпаковки=Сред(СокрЛП(SSCC),32,1);
	//Попытка
	//ГодSSCC="20"+Прав(ДатаSSCC,2);
	//Месяц=Сред(ДатаSSCC,3,2);
	//День=Лев(ДатаSSCC,2);
	//ДатаSSCC=Дата(ГодSSCC+Месяц+День);
	//Исключение
	//	Возврат
	//КонецПопытки;	
	КонецПроцедуры
// Функция - Получить контрольную цифру штрих кода
//
// Параметры:
//  ШтрихКод - Строка - любой штрих код , формат которого подразумевает наличие контрольной цифры.  
// 
// Возвращаемое значение:
// Строка - Контрольная цифра строкой.
//	
Функция ПолучитьКонтрольнуюЦифруШтрихКода(ШтрихКод)Экспорт
	ДлинаШтрихКода=СтрДлина(ШтрихКод);
	СуммаНеЧетных=ПолучитьСуммуЦифрНаНечетныхМестах(ДлинаШтрихКода,ШтрихКод);
	СуммаЧетных=ПосчитатьСуммуЦифрНаЧетныхМестах(ДлинаШтрихКода,ШтрихКод);
	СтрокаИтого=Строка(СуммаНеЧетных+СуммаЧетных);
	ЕденицаСуммы=Прав(СтрокаИтого,1);
	Если Число(ЕденицаСуммы) = 0 тогда
		Возврат "0" 
	иначе
		Возврат Строка(10-Число(ЕденицаСуммы));
	КонецЕсли;	
КонецФункции
// Функция - Посчитать сумму цифр на четных местах
//
// Параметры:
//  ДлинаШтрихКода	 - Число 
//  ШтрихКод		 - Строка	
// 
// Возвращаемое значение:
// Число  - Сумма цифр на четных местах 
//
Функция ПосчитатьСуммуЦифрНаЧетныхМестах(ДлинаШтрихКода,ШтрихКод)
	Если ДлинаШтрихКода<2 тогда
		Возврат 0
	КонецЕсли;
	Сумма=0;
	ТочкаОтсчета=ДлинаШтрихКода;
	Если  Окр(ДлинаШтрихКода/2,0,РежимОкругления.Окр15как20) <> ДлинаШтрихКода/2 тогда
		ЧетноеКоличествоСимволов=Ложь;
	иначе
		ЧетноеКоличествоСимволов=Истина;
	КонецЕсли;	

	для n=1 по ДлинаШтрихКода цикл
		Если ТочкаОтсчета-n=0 и не ЧетноеКоличествоСимволов Тогда 
			Прервать;
		КонецЕсли;	
		Сумма=Сумма+Число(Сред(ШтрихКод,ТочкаОтсчета-n,1));
		Если (n+1)>ДлинаШтрихКода тогда
			Прервать;
		КонецЕсли;		
		n=n+1;
	КонецЦикла;

	Возврат Сумма;

	КонецФункции
// Функция - Получить сумму цифр на нечетных местах
//
// Параметры:
//  ДлинаШтрихКода	 - Число 
//  ШтрихКод		 - Строка	
// 
// Возвращаемое значение:
// Число  - Сумма цифр на не четных местах 
//	
Функция ПолучитьСуммуЦифрНаНечетныхМестах(ДлинаШтрихКода,ШтрихКод)
	Сумма=0;
	ТочкаОтсчета=ДлинаШтрихКода+1;
	Если  Окр(ДлинаШтрихКода/2,0,РежимОкругления.Окр15как20) <> ДлинаШтрихКода/2 тогда
		ЧетноеКоличествоСимволов=Ложь;
	иначе
		ЧетноеКоличествоСимволов=Истина;
	КонецЕсли;	

	для n=1 по ДлинаШтрихКода цикл
		Если ТочкаОтсчета-n=0 и  ЧетноеКоличествоСимволов Тогда 
			Прервать;
		КонецЕсли;
		Сумма=Сумма+Число(Сред(ШтрихКод,ТочкаОтсчета-n,1));
		Если (n+1)>ДлинаШтрихКода тогда
			Прервать;
		КонецЕсли;	
		n=n+1;
	КонецЦикла;
	Сумма=Сумма*3;
	Возврат Сумма;
КонецФункции
// Процедура - Проверить GTINНа леквидность
// проверка того, что идентификатор короба соотв. 26 симвоьному формату RAR
// Параметры:
//  GTIN	 - Строка - идентификатор короба к проверке
//  Отказ	 - Булево -  флаг отказа 
//  Сообщать - Булево -  если истина, то выдается сообщение пользователю об ошибке
//
Функция  ПроверитьGTINНаЛеквидность(GTIN,Сообщать=Ложь) Экспорт 
	Проверка=Ложь;
	ПроверкаНаGTINRAR(GTIN,Проверка,Сообщать);
	Возврат Проверка		
КонецФункции
// Процедура - Проверка на GTINRAR
//  проверка того, что идентификатор короба соотв. 26 симвоьному формату RAR
// Параметры:
//  GTIN	 - Строка - идентификатор короба к проверке
//  Отказ	 - Булево -  флаг отказа 
//  Сообщать - Булево -  если истина, то выдается сообщение пользователю об ошибке
//
Процедура ПроверкаНаGTINRAR(GTIN,Проверка,Сообщать)
	Если СтрДлина(СокрЛП(GTIN)) <> 26  тогда
		Возврат
	КонецЕсли;
	ЗначениеЛогистическойЕденицы=Сред(СокрЛП(GTIN),13,1);
	Попытка
		ЧислоЛогистическойЕденицы=	Число(ЗначениеЛогистическойЕденицы);
	Исключение
		Сообщить("не читается логистическая еденица");
		Возврат
	КонецПопытки;
	Если ЧислоЛогистическойЕденицы=1 или ЧислоЛогистическойЕденицы=3 тогда
		Проверка = Истина;
	КонецЕсли;		
	Если ЧислоЛогистическойЕденицы=2 или ЧислоЛогистическойЕденицы=4   тогда
		Если Сообщать Тогда 
			Сообщить("Вы считываете идентификатор Паллеты, отказано в присвоении Короба");
		КонецЕсли;
		Возврат
	КонецЕсли;

	КонецПроцедуры

#КонецОбласти

#КонецОбласти
	
