Перем ИгнорироватьОтказПриПроверках Экспорт ;



#Область ОбработкаЗаполнения
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)  
	Отказ=Ложь;
	Если ТипЗнч(ДанныеЗаполнения)=тип("ДокументСсылка.итWMSНаборка") тогда
		ЗаполнениеНаОснованииНаборки(ДанныеЗаполнения,Истина,Отказ);
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения)=тип("ДокументСсылка.Маршрутизация") тогда
		ЗаполнениеНаОснованииМаршрута(ДанныеЗаполнения,Истина,Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнениеНаОснованииМаршрута(Маршрут,СтандартнаяОбработка=Ложь,Отказ) Экспорт 
	ЗаполнитьСписокОснованийПоМаршруту(Маршрут,Отказ);
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	Если СтандартнаяОбработка Тогда 
		СозданНаОснованиСерверногоВызова=Истина;
	КонецЕсли;
	ЗаполнитьТабличнуюЧастьТоварыПоТаблицеОснований(Отказ);
КонецПроцедуры

Процедура  ЗаполнениеНаОснованииНаборки(Наборка,СтандартнаяОбработка=Ложь,Отказ) Экспорт
	Если УНаборкиУжеЕстьотгрузка(Наборка) тогда
		Сообщить("у документа "+Наборка+" уже есть Отгрузка");
		Отказ=Истина;
		Возврат
	КонецЕсли;	
	
	ЗаполнитьСписокОснованийПоНаборке(Наборка,Отказ);
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	Организация=Наборка.Организация;
	Контрагент=Наборка.Контрагент;
	//итОснование=Наборка.Ссылка;
	Если СтандартнаяОбработка Тогда 
		СозданНаОснованиСерверногоВызова=Истина;
	КонецЕсли;
	ЗаполнитьТабличнуюЧастьТоварыПоТаблицеОснований(Отказ);
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьТоварыПоТаблицеОснований(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковки,
	|	итWMSНаборкаТовары.Номенклатура КАК Номенклатура,
	|	итWMSНаборкаТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итWMSНаборкаТовары.Качество КАК Качество,
	|	итWMSНаборкаТовары.ДатаРозлива КАК ДатаРозлива,
	|	СУММА(ВЫБОР
	|			КОГДА итWMSНаборкаТовары.ИзъятиеТовара
	|				ТОГДА ЕСТЬNULL(итWMSНаборкаТовары.КоличествоФакт, 0) - ЕСТЬNULL(итWMSНаборкаТовары.КоличествоИзъятия, 0)
	|			ИНАЧЕ итWMSНаборкаТовары.КоличествоФакт
	|		КОНЕЦ) КАК Количество,
	|	итWMSНаборкаТовары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	итWMSНаборкаТовары.Ссылка КАК Наборка,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(итWMSНаборкаТовары.Ссылка.итОснование) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА ЕСТЬNULL(итWMSНаборкаТовары.Ссылка.итОснование, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ДанныеНаборок
	|ИЗ
	|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
	|ГДЕ
	|	итWMSНаборкаТовары.Ссылка В(&СписокНаборок)
	|	И итWMSНаборкаТовары.СостояниеЗадачи <> ЗНАЧЕНИЕ(Перечисление.ИТwmsСостоянияЗадачТСД.Отменена)
	|	И ВЫБОР
	|			КОГДА итWMSНаборкаТовары.ИзъятиеТовара
	|				ТОГДА ЕСТЬNULL(итWMSНаборкаТовары.КоличествоФакт, 0) - ЕСТЬNULL(итWMSНаборкаТовары.КоличествоИзъятия, 0)
	|			ИНАЧЕ итWMSНаборкаТовары.КоличествоФакт
	|		КОНЕЦ > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSНаборкаТовары.Номенклатура,
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель,
	|	итWMSНаборкаТовары.СерияНоменклатуры,
	|	итWMSНаборкаТовары.Качество,
	|	итWMSНаборкаТовары.ДатаРозлива,
	|	итWMSНаборкаТовары.ЯчейкаПолучатель,
	|	итWMSНаборкаТовары.Ссылка,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(итWMSНаборкаТовары.Ссылка.итОснование) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА ЕСТЬNULL(итWMSНаборкаТовары.Ссылка.итОснование, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Склад КАК Склад,
	|	итТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	итТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.ДатаРозлива КАК ДатаРозлива,
	|	итТоварыВЯчейкахОстатки.Качество КАК Качество,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток КАК КоличествоОстаток,
	|	ДанныеНаборок.Наборка КАК Наборка,
	|	ДанныеНаборок.ЗаказПокупателя КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ПаллетыКотгрузке
	|ИЗ
	|	ДанныеНаборок КАК ДанныеНаборок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(, Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК итТоварыВЯчейкахОстатки
	|		ПО ДанныеНаборок.ИдентификаторУпаковки = итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
	|			И ДанныеНаборок.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|			И ДанныеНаборок.СерияНоменклатуры = итТоварыВЯчейкахОстатки.СерияНоменклатуры
	|			И ДанныеНаборок.ЯчейкаПолучатель = итТоварыВЯчейкахОстатки.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПаллетыКотгрузке.Склад КАК Склад,
	|	ПаллетыКотгрузке.Ячейка КАК Ячейка,
	|	ПаллетыКотгрузке.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ПаллетыКотгрузке.Номенклатура КАК Номенклатура,
	|	ПаллетыКотгрузке.Характеристика КАК Характеристика,
	|	ПаллетыКотгрузке.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ПаллетыКотгрузке.ДатаРозлива КАК ДатаРозлива,
	|	ПаллетыКотгрузке.Качество КАК Качество,
	|	СУММА(ПаллетыКотгрузке.КоличествоОстаток) КАК КоличествоОстаток,
	|	ПаллетыКотгрузке.Наборка КАК Наборка,
	|	ПаллетыКотгрузке.ЗаказПокупателя КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ГруппированныеДанные
	|ИЗ
	|	ПаллетыКотгрузке КАК ПаллетыКотгрузке
	|
	|СГРУППИРОВАТЬ ПО
	|	ПаллетыКотгрузке.Склад,
	|	ПаллетыКотгрузке.Ячейка,
	|	ПаллетыКотгрузке.ИдентификаторУпаковки,
	|	ПаллетыКотгрузке.Номенклатура,
	|	ПаллетыКотгрузке.Характеристика,
	|	ПаллетыКотгрузке.СерияНоменклатуры,
	|	ПаллетыКотгрузке.ДатаРозлива,
	|	ПаллетыКотгрузке.Качество,
	|	ПаллетыКотгрузке.Наборка,
	|	ПаллетыКотгрузке.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппированныеДанные.ЗаказПокупателя КАК ЗаказПокупателя,
	|	МИНИМУМ(ЕСТЬNULL(МаршрутизацияДокументыМаршрута.ОчередьДоставки, -1)) КАК ОчередьДоставки
	|ПОМЕСТИТЬ ОчередьДоставки
	|ИЗ
	|	ГруппированныеДанные КАК ГруппированныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
	|		ПО (МаршрутизацияДокументыМаршрута.Заказ = ГруппированныеДанные.ЗаказПокупателя)
	|			И (МаршрутизацияДокументыМаршрута.Ссылка.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппированныеДанные.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппированныеДанные.Склад КАК Склад,
	|	ГруппированныеДанные.Ячейка КАК ЯчейкаОтправитель,
	|	ГруппированныеДанные.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ГруппированныеДанные.Номенклатура КАК Номенклатура,
	|	ГруппированныеДанные.Характеристика КАК Характеристика,
	|	ГруппированныеДанные.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ГруппированныеДанные.ДатаРозлива КАК ДатаРозлива,
	|	ГруппированныеДанные.Качество КАК Качество,
	|	ГруппированныеДанные.КоличествоОстаток КАК Количество,
	|	ГруппированныеДанные.Наборка КАК Наборка,
	|	ГруппированныеДанные.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ОД.ОчередьДоставки КАК ОчередьДоставки
	|ПОМЕСТИТЬ ГруппированныеДанныеСОчередью
	|ИЗ
	|	ГруппированныеДанные КАК ГруппированныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОчередьДоставки КАК ОД
	|		ПО ГруппированныеДанные.ЗаказПокупателя = ОД.ЗаказПокупателя
	|ГДЕ
	|	ГруппированныеДанные.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппированныеДанныеСОчередью.Склад КАК Склад,
	|	ГруппированныеДанныеСОчередью.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ГруппированныеДанныеСОчередью.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ГруппированныеДанныеСОчередью.Номенклатура КАК Номенклатура,
	|	ГруппированныеДанныеСОчередью.Характеристика КАК Характеристика,
	|	ГруппированныеДанныеСОчередью.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ГруппированныеДанныеСОчередью.ДатаРозлива КАК ДатаРозлива,
	|	ГруппированныеДанныеСОчередью.Качество КАК Качество,
	|	ВЫБОР
	|		КОГДА ГруппированныеДанныеСОчередью.Количество > ЕСТЬNULL(ДанныеНаборок.Количество, 0)
	|			ТОГДА ЕСТЬNULL(ДанныеНаборок.Количество, 0)
	|		ИНАЧЕ ГруппированныеДанныеСОчередью.Количество
	|	КОНЕЦ КАК Количество,
	|	ГруппированныеДанныеСОчередью.Наборка КАК Наборка,
	|	ГруппированныеДанныеСОчередью.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ГруппированныеДанныеСОчередью.ОчередьДоставки КАК ОчередьДоставки
	|ИЗ
	|	ГруппированныеДанныеСОчередью КАК ГруппированныеДанныеСОчередью
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеНаборок КАК ДанныеНаборок
	|		ПО ГруппированныеДанныеСОчередью.ИдентификаторУпаковки = ДанныеНаборок.ИдентификаторУпаковки
	|			И ГруппированныеДанныеСОчередью.Номенклатура = ДанныеНаборок.Номенклатура
	|			И ГруппированныеДанныеСОчередью.СерияНоменклатуры = ДанныеНаборок.СерияНоменклатуры
	|			И ГруппированныеДанныеСОчередью.ДатаРозлива = ДанныеНаборок.ДатаРозлива
	|			И ГруппированныеДанныеСОчередью.Качество = ДанныеНаборок.Качество
	|			И ГруппированныеДанныеСОчередью.ЯчейкаОтправитель = ДанныеНаборок.ЯчейкаПолучатель
	|			И ГруппированныеДанныеСОчередью.Наборка = ДанныеНаборок.Наборка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьДоставки УБЫВ
	|ИТОГИ ПО
	|	ОчередьДоставки";
	
	МассивОснований= итОснования.ВыгрузитьКолонку("Документ");
	МассивОснований.Добавить(итОснование);
	Запрос.УстановитьПараметр("СписокНаборок", МассивОснований);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоОчереди=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	НомерОчереди=0;
	Пока ВыборкаПоОчереди.Следующий() Цикл
		НомерОчереди=НомерОчереди+1;
		ВыборкаДетальныеЗаписи = ВыборкаПоОчереди.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока=Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
			НоваяСтрока.ОчередностьПогрузки=НомерОчереди;
			НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнитьСписокОснованийПоНаборке(Наборка,Отказ)
	итОснования.Очистить();
	Если ТипЗнч(Наборка.итОснование)<>Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		НоваяСтрока = итОснования.Добавить();
		НоваяСтрока.Документ=Наборка;
		Возврат
	КонецЕсли;
	итОснование=Наборка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(МаршрутизацияДокументыМаршрута.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ МаршрутЗаказа
	|ИЗ
	|	Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
	|ГДЕ
	|	МаршрутизацияДокументыМаршрута.Заказ = &Документ
	|	И МаршрутизацияДокументыМаршрута.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутизацияДокументыМаршрута.Заказ КАК Документ,
	|	МаршрутЗаказа.Ссылка КАК Маршрут
	|ПОМЕСТИТЬ СписокЗаказовМаршрута
	|ИЗ
	|	МаршрутЗаказа КАК МаршрутЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
	|		ПО МаршрутЗаказа.Ссылка = МаршрутизацияДокументыМаршрута.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутЗаказа.Ссылка,
	|	МаршрутизацияДокументыМаршрута.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(итWMSНаборка.Ссылка, ЗНАЧЕНИЕ(Документ.итWMSНаборка.ПустаяСсылка)) КАК Наборка,
	|	СписокЗаказовМаршрута.Маршрут КАК Маршрут,
	|	СписокЗаказовМаршрута.Документ КАК Документ
	|ИЗ
	|	СписокЗаказовМаршрута КАК СписокЗаказовМаршрута
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.итWMSНаборка КАК итWMSНаборка
	|		ПО СписокЗаказовМаршрута.Документ = итWMSНаборка.итОснование
	|ГДЕ
	|	итWMSНаборка.Проведен = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокЗаказовМаршрута.Маршрут,
	|	СписокЗаказовМаршрута.Документ,
	|	ЕСТЬNULL(итWMSНаборка.Ссылка, ЗНАЧЕНИЕ(Документ.итWMSНаборка.ПустаяСсылка))
	|ИТОГИ ПО
	|	Маршрут";
	
	Запрос.УстановитьПараметр("Документ", Наборка.итОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Отказ=Истина;
		Сообщить("Наборка не включена в маршрут, отгрузка запрещена");
	КонецЕсли;	
	ВыборкаМаршрута=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМаршрута.Следующий() цикл
		НоваяСтрока=итОснования.Добавить();
		НоваяСтрока.Документ=ВыборкаМаршрута.Маршрут;
		ВыборкаДетальныеЗаписи = ВыборкаМаршрута.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Наборка.Пустая() Тогда 
				Если  не ВыборкаДетальныеЗаписи.Документ.Транзит и не ВыборкаДетальныеЗаписи.Документ.Набран Тогда 
					Отказ=Истина;
					Сообщить( "по заказу "+ВыборкаДетальныеЗаписи.Документ +" из маршрута "+ ВыборкаДетальныеЗаписи.Маршрут +" не найдена наборка , отказано в отгрузке");
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(ВыборкаДетальныеЗаписи.Наборка)=Тип("ДокументСсылка.итWMSНаборка") Тогда
				Если  не ВыборкаДетальныеЗаписи.Документ.Транзит и не ВыборкаДетальныеЗаписи.Наборка.Пустая() Тогда 
					Если не НаборкаВСостоянииКОтгрузке(ВыборкаДетальныеЗаписи.Наборка) Тогда 
						Отказ=Истина;
						Сообщить( "по заказу "+ВыборкаДетальныеЗаписи.Документ +" из маршрута "+ ВыборкаДетальныеЗаписи.Маршрут +" наборка не готова к отгрузке!!!");
						Продолжить;
					КонецЕсли;
					Если УНаборкиУжеЕстьотгрузка(ВыборкаДетальныеЗаписи.Наборка) тогда
						Сообщить("у документа "+ВыборкаДетальныеЗаписи.Наборка+" уже есть Отгрузка");
						Отказ=Истина;
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;
			НоваяСтрока=итОснования.Добавить();
			НоваяСтрока.Документ=ВыборкаДетальныеЗаписи.Документ;
			//Если ВыборкаДетальныеЗаписи.Наборка<>Наборка Тогда 
			Если  не ВыборкаДетальныеЗаписи.Документ.Транзит Тогда 
			НоваяСтрока=итОснования.Добавить();
			НоваяСтрока.Документ=ВыборкаДетальныеЗаписи.Наборка;
			КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если Отказ Тогда 
		итОснования.Очистить();
		итОснование=Неопределено;
	КонецЕсли;	

КонецПроцедуры

Процедура ЗаполнитьСписокОснованийПоМаршруту(Маршрут,Отказ)
	итОснования.Очистить();
	Если ТипЗнч(Маршрут)<>Тип("ДокументСсылка.Маршрутизация") Тогда
		НоваяСтрока = итОснования.Добавить();
		НоваяСтрока.Документ=Маршрут;
		Возврат
	КонецЕсли;
	итОснование=Маршрут;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(итWMSНаборка.Ссылка, ЗНАЧЕНИЕ(Документ.итWMSНаборка.ПустаяСсылка)) КАК Наборка,
	|	МаршрутизацияДокументыМаршрута.Ссылка КАК Маршрут,
	|	МаршрутизацияДокументыМаршрута.Заказ КАК Документ
	|ИЗ
	|	Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка КАК итWMSНаборка
	|		ПО итWMSНаборка.итОснование = МаршрутизацияДокументыМаршрута.Заказ
	|		И итWMSНаборка.Проведен
	|		И МаршрутизацияДокументыМаршрута.Ссылка.Проведен
	|		И МаршрутизацияДокументыМаршрута.Ссылка = &Маршрут
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(итWMSНаборка.Ссылка, ЗНАЧЕНИЕ(Документ.итWMSНаборка.ПустаяСсылка)),
	|	МаршрутизацияДокументыМаршрута.Заказ,
	|	МаршрутизацияДокументыМаршрута.Ссылка
	|ИТОГИ
	|ПО
	|	Маршрут";
	
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Отказ=Истина;
		Сообщить("Наборка не включена в маршрут, отгрузка запрещена");
	КонецЕсли;	
	ВыборкаМаршрута=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМаршрута.Следующий() цикл
		НоваяСтрока=итОснования.Добавить();
		НоваяСтрока.Документ=ВыборкаМаршрута.Маршрут;
		ВыборкаДетальныеЗаписи = ВыборкаМаршрута.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Наборка.Пустая() Тогда 
				Если  не ВыборкаДетальныеЗаписи.Документ.Транзит Тогда 
					Отказ=Истина;
					Сообщить( "по заказу "+ВыборкаДетальныеЗаписи.Документ +" из маршрута "+ ВыборкаДетальныеЗаписи.Маршрут +" не найдена наборка , отказано в отгрузке");
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(ВыборкаДетальныеЗаписи.Наборка)=Тип("ДокументСсылка.итWMSНаборка") Тогда
				Если  не ВыборкаДетальныеЗаписи.Документ.Транзит Тогда 
					Если не НаборкаВСостоянииКОтгрузке(ВыборкаДетальныеЗаписи.Наборка) Тогда 
						Отказ=Истина;
						Сообщить( "по заказу "+ВыборкаДетальныеЗаписи.Документ +" из маршрута "+ ВыборкаДетальныеЗаписи.Маршрут +" наборка не готова к отгрузке!!!");
						Продолжить;
					КонецЕсли;
					Если УНаборкиУжеЕстьотгрузка(ВыборкаДетальныеЗаписи.Наборка) тогда
						Сообщить("у документа "+ВыборкаДетальныеЗаписи.Наборка+" уже есть Отгрузка");
						Отказ=Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			
			НоваяСтрока=итОснования.Добавить();
			НоваяСтрока.Документ=ВыборкаДетальныеЗаписи.Документ;
			Если  не ВыборкаДетальныеЗаписи.Документ.Транзит Тогда 
			НоваяСтрока=итОснования.Добавить();
			НоваяСтрока.Документ=ВыборкаДетальныеЗаписи.Наборка;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если Отказ Тогда 
		итОснования.Очистить();
		итОснование=Неопределено;
	КонецЕсли;	
	
	
КонецПроцедуры


Функция НаборкаВСостоянииКОтгрузке(Наборка)
	Если Наборка.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен Тогда 
		Возврат Истина;
	КонецЕсли;
	Если Наборка.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда 
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
#КонецОбласти


#Область ПередЗаписью
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	итWMSСлужебныеПроцедурыИФункции.УстановитьРежимПроведенияЗавершенногоДокумента(СтатусДокумента,РежимПроведения);
	Если Проведен и РежимЗаписи=РежимЗаписиДокумента.Запись тогда
		Если не ОбменДанными.Загрузка Тогда 
			РежимЗаписи=РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	КонецЕсли;	
	Если  РежимЗаписи=РежимЗаписиДокумента.Проведение тогда
		ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;	
	Если ЭтотОбъект.Проведен и РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения тогда
		ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда 
		//ОтложенноеПроведение=Ложь; 
		Если не Ссылка.Пустая() Тогда 
			итWMSСлужебныеПроцедурыИФункции.УдалитьЗаписьДопОбработкиОтложенногоПроведения(Ссылка);
		КонецЕсли;	
		КонецЕсли;
	Если ОбменДанными.Загрузка Тогда 
		Отказ=Ложь;
	КонецЕсли;	
КонецПроцедуры

Процедура ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения)
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется или  СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован  тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		БлокировкаДанных = новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
		ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ДокументОснование",Ссылка);
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей= РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		для Каждого стр из НаборЗаписей цикл
			НаборЗаписей_2=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
			НаборЗаписей_2.Отбор.ИдЗадачи.Установить(стр.ИдЗадачи);
			НаборЗаписей_2.Прочитать();
			НаборЗаписей_2.Очистить();
			НаборЗаписей_2.Записать();
		КонецЦикла;
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен тогда
		Отказ = Истина;
		Сообщить("Документ распределен на тсд и не может быть распроведен ");
		
	КонецЕсли;
	Если не Отказ Тогда 
		ПередЗаписьюОтменаПроведенияОбработчикОснования(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПередЗаписьюОтменаПроведенияОбработчикОснования(Отказ, РежимЗаписи, РежимПроведения)
	ВернутьДокументыОснованияВПредыдущийСтатус(Отказ, РежимПроведения);
КонецПроцедуры

Процедура ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения)
	//Если ТипЗнч(итОснование)=Тип("ДокументСсылка.итWMSНаборка") Тогда
	//	ЗаполнитьСписокОснованийПоНаборке(итОснование,Отказ);
	//КонецЕсли;
	//Если ТипЗнч(итОснование)=Тип("ДокументСсылка.итМаршрутизация") Тогда 
	//	ЗаполнитьСписокОснованийПоМаршруту(итОснование,Отказ);
	//КонецЕсли;
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан и НеРаспределятьНаТСД тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован;
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан и не НеРаспределятьНаТСД  тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
		для Каждого стр из Товары цикл
			стр.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
		КонецЦикла;
		Хранилище=новый ХранилищеЗначения(Товары.Выгрузить(),новый СжатиеДанных(9));
		СнимокТабличнойЧастиДоРаспределения=Хранилище;
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован и не НеРаспределятьНаТСД  тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
		для Каждого стр из Товары цикл
			стр.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
		КонецЦикла;
		Хранилище=новый ХранилищеЗначения(Товары.Выгрузить(),новый СжатиеДанных(9));
		СнимокТабличнойЧастиДоРаспределения=Хранилище;
	КонецЕсли;
	Если не Отказ Тогда 
		ПередЗаписьюПроведениеОбработчикОснования(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;
	//Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется или СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован тогда
	//	Если ТипЗнч(итОснование)=тип("ДокументСсылка.итWMSНаборка") и не итОснование.Пустая() Тогда
	//		Если итОснование.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
	//			 итОснование.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой   тогда
	//			 Если УНаборкиУжеЕстьотгрузка(итОснование) тогда
	//				Сообщить("у документа "+итОснование+" уже есть Отгрузка");
	//				Отказ=Истина;
	//				Возврат
	//			КонецЕсли;	
	
	//			 ОбъектНаборки=итОснование.ПолучитьОбъект();
	//			 ОбъектНаборки.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен;
	//			 ОбъектНаборки.Записать();
	//		 КонецЕсли;
	//	КонецЕсли;
	
	//КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписьюПроведениеОбработчикОснования(Отказ, РежимЗаписи, РежимПроведения)
	ЗавершитьДокументыОснования(Отказ, РежимПроведения);
КонецПроцедуры

Процедура ЗавершитьДокументыОснования(Отказ, РежимПроведения)
	Для Каждого  стр из итОснования цикл
		Если ТипЗнч(стр.Документ) = Тип("ДокументСсылка.итWMSНаборка") Тогда 
			Если стр.Документ.Проведен Тогда 
				Если стр.Документ.СтатусДокумента<>Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда
					ОбъектНаборки=стр.Документ.ПолучитьОбъект();
					ОбъектНаборки.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен;
					ОбъектНаборки.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВернутьДокументыОснованияВПредыдущийСтатус(Отказ, РежимПроведения)
	Для Каждого  стр из итОснования цикл
		Если ТипЗнч(стр.Документ) = Тип("ДокументСсылка.итWMSНаборка") Тогда 
			Если стр.Документ.Проведен Тогда 
				Если стр.Документ.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда
					ОбъектНаборки=стр.Документ.ПолучитьОбъект();
					ОбъектНаборки.ДействияПриФиксацииЗадачДокумента();
					ОбъектНаборки.ПроведениеБезИзмененияДатыЗавршения=Истина;
					ОбъектНаборки.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
					Если ТипЗнч(ОбъектНаборки.итОснование)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
						Если не ОбъектНаборки.итОснование.Пустая() Тогда 
							ОбъектЗаказа= ОбъектНаборки.итОснование.ПолучитьОбъект();
							ОбъектЗаказа.Отгружен=Ложь;
							ОбъектЗаказа.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаПроведения

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Если ТипЗнч(итОснование)=тип("ДокументСсылка.итWMSНаборка") и не итОснование.Пустая() Тогда
		Если УНаборкиУжеЕстьотгрузка(итОснование) тогда
			Сообщить("у документа "+итОснование+" уже есть Отгрузка");
			Отказ=Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если Отказ тогда
		Возврат
	КонецЕсли;
	УстановитьБлокировкиДанныхИОчиститьРегистры();
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда
		РаспределениеДокументаНаЗадачиТСД(Отказ, РежимПроведения);
	КонецЕсли;
	ПроведениеПоРезервированиюЯчеек(Отказ, РежимПроведения);
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен тогда
		ПроведениеПоРегистрамНакопления(Отказ, РежимПроведения);
	КонецЕсли;
	ПроверитьНаСоответствиеОснованию(Отказ, РежимПроведения);
	ПроверкаНаСоответсвиеДанныхЯчеек(Отказ, РежимПроведения);   
	Если  не Отказ Тогда 
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьБлокировкиДанныхИОчиститьРегистры()
	
БлокировкаДанных = новый БлокировкаДанных;

#Область БлокировкаитТоварыВЯчейках	
	СтруктураПараметров=итWMSСлужебныеПроцедурыИФункции.СоздатьСтруктуруПараметровБлокировкиДанных(Товары,БлокировкаДанных);
	СтруктураПараметров.ПолеПространствоБлокировок="Ячейка";
	СтруктураПараметров.ПолеИсточника="ЯчейкаОтправитель";
	СтруктураПараметров.ПространствоБлокировки="РегистрНакопления.итТоварыВЯчейках";
	итWMSСлужебныеПроцедурыИФункции.УстановкаЭлементаБлокировокДанныхWMS(СтруктураПараметров);
#КонецОбласти

	
БлокировкаДанных.Заблокировать();
	
	
	НаборЗаписей=РегистрыНакопления.итТоварыВЯчейках.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	
	
КонецПроцедуры


Процедура ПроведениеПоРегистрамНакопления(Отказ, РежимПроведения)
	ПроведениеПоРезервированиюЯчеек(Отказ, РежимПроведения,Истина);
	ПроведениеПоТоварамВЯчейках(Отказ, РежимПроведения);
КонецПроцедуры

Процедура ПроведениеПоТоварамВЯчейках(Отказ, РежимПроведения)
		
	итТоварыВЯчейках=Движения.итТоварыВЯчейках;
	КачествоПустаяССылка=Справочники.Качество.ПустаяСсылка();
	КачествоНовый=Справочники.Качество.Новый;
	для Каждого стр из Товары цикл
		Если стр.СостояниеЗадачи<>Перечисления.итWMSСостоянияЗадачТСД.Выполнена Тогда 
			Продолжить;
		КонецЕсли;	
		/// движение Расход
		НоваяЗапись=итТоварыВЯчейках.Добавить();
		НоваяЗапись.Период=Дата;
		НоваяЗапись.Организация=Организация;
		НоваяЗапись.Ячейка=стр.ЯчейкаОтправитель;
		НоваяЗапись.Характеристика=стр.Характеристика;
		НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Расход;
		НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
		НоваяЗапись.Номенклатура=стр.Номенклатура;
		НоваяЗапись.ДатаРозлива=стр.ДатаРозлива;
		НоваяЗапись.Качество=?(стр.Качество=КачествоПустаяССылка,КачествоНовый,стр.Качество);
		НоваяЗапись.Количество=стр.Количество;
		НоваяЗапись.СерияНоменклатуры=стр.СерияНоменклатуры;
	КонецЦикла;
	итТоварыВЯчейках.Записать();
КонецПроцедуры

Процедура ПроведениеПоРезервированиюЯчеек(Отказ, РежимПроведения,СнятиеСРезерва=Ложь)
		
	ТоварывЯчейкахРезерв=Движения.итТоварыВЯчейках;	
	КачествоПустаяССылка=Справочники.Качество.ПустаяСсылка();
	КачествоНовый=Справочники.Качество.Новый;
	для Каждого стр из Товары цикл
		НоваяЗапись=ТоварывЯчейкахРезерв.Добавить();
		НоваяЗапись.Период=Дата;
		Если СнятиеСРезерва тогда
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Расход;
		иначе
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
		КонецЕсли;
		НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
		НоваяЗапись.Организация=Организация;
		НоваяЗапись.Номенклатура=стр.Номенклатура;
		НоваяЗапись.Характеристика=стр.Характеристика;
		НоваяЗапись.ДатаРозлива=стр.ДатаРозлива;
		НоваяЗапись.Ячейка=стр.ЯчейкаОтправитель;
		НоваяЗапись.Качество=?(стр.Качество=КачествоПустаяССылка,КачествоНовый,стр.Качество);
		НоваяЗапись.КОтбору=стр.Количество;
		НоваяЗапись.СерияНоменклатуры=стр.СерияНоменклатуры;
	КонецЦикла;
	ТоварывЯчейкахРезерв.Записать();
КонецПроцедуры

Процедура ПроверитьНаСоответствиеОснованию(Отказ, РежимПроведения)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSНаборкаТовары.Номенклатура,
	|	итWMSНаборкаТовары.Характеристика,
	|	итWMSНаборкаТовары.СерияНоменклатуры,
	|	итWMSНаборкаТовары.Качество,
	|	ВЫБОР
	|		КОГДА итWMSНаборкаТовары.ИзъятиеТовара
	|			ТОГДА ЕСТЬNULL(итWMSНаборкаТовары.КоличествоФакт, 0) - ЕСТЬNULL(итWMSНаборкаТовары.КоличествоИзъятия, 0)
	|		ИНАЧЕ итWMSНаборкаТовары.КоличествоФакт
	|	КОНЕЦ КАК КоличествоНаборка,
	|	итWMSНаборкаТовары.ЯчейкаПолучатель КАК Ячейка,
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковки,
	|	0 КАК КоличествоОтгрузка,
	|	итWMSНаборкаТовары.Ссылка КАК Наборка
	|ПОМЕСТИТЬ ДанныеСравненияОбъединения
	|ИЗ
	|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
	|ГДЕ
	|	НЕ итWMSНаборкаТовары.СостояниеЗадачи = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Отменена)
	|	И итWMSНаборкаТовары.Ссылка В(&СписокДокументов)
	|	И ВЫБОР
	|			КОГДА итWMSНаборкаТовары.ИзъятиеТовара
	|				ТОГДА ЕСТЬNULL(итWMSНаборкаТовары.КоличествоФакт, 0) - ЕСТЬNULL(итWMSНаборкаТовары.КоличествоИзъятия, 0)
	|			ИНАЧЕ итWMSНаборкаТовары.КоличествоФакт
	|		КОНЕЦ > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	итWMSОтгрузкаТовары.Номенклатура,
	|	итWMSОтгрузкаТовары.Характеристика,
	|	итWMSОтгрузкаТовары.СерияНоменклатуры,
	|	итWMSОтгрузкаТовары.Качество,
	|	0,
	|	итWMSОтгрузкаТовары.ЯчейкаОтправитель,
	|	итWMSОтгрузкаТовары.ИдентификаторУпаковки,
	|	итWMSОтгрузкаТовары.Количество,
	|	итWMSОтгрузкаТовары.Наборка
	|ИЗ
	|	Документ.итWMSОтгрузка.Товары КАК итWMSОтгрузкаТовары
	|ГДЕ
	|	итWMSОтгрузкаТовары.Ссылка = &Ссылка
	|	И НЕ итWMSОтгрузкаТовары.СостояниеЗадачи = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Отменена)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСравненияОбъединения.Номенклатура,
	|	ДанныеСравненияОбъединения.Характеристика,
	|	ДанныеСравненияОбъединения.СерияНоменклатуры,
	|	ДанныеСравненияОбъединения.Качество,
	|	СУММА(ДанныеСравненияОбъединения.КоличествоНаборка) КАК КоличествоНаборка,
	|	ДанныеСравненияОбъединения.Ячейка,
	|	ДанныеСравненияОбъединения.ИдентификаторУпаковки,
	|	СУММА(ДанныеСравненияОбъединения.КоличествоОтгрузка) КАК КоличествоОтгрузка,
	|	ДанныеСравненияОбъединения.Наборка
	|ПОМЕСТИТЬ СравнениеГруппировка
	|ИЗ
	|	ДанныеСравненияОбъединения КАК ДанныеСравненияОбъединения
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСравненияОбъединения.Номенклатура,
	|	ДанныеСравненияОбъединения.Характеристика,
	|	ДанныеСравненияОбъединения.СерияНоменклатуры,
	|	ДанныеСравненияОбъединения.Качество,
	|	ДанныеСравненияОбъединения.Ячейка,
	|	ДанныеСравненияОбъединения.ИдентификаторУпаковки,
	|	ДанныеСравненияОбъединения.Наборка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СравнениеГруппировка.Номенклатура,
	|	СравнениеГруппировка.Характеристика,
	|	СравнениеГруппировка.СерияНоменклатуры,
	|	СравнениеГруппировка.Качество,
	|	СравнениеГруппировка.КоличествоНаборка,
	|	СравнениеГруппировка.Ячейка,
	|	СравнениеГруппировка.ИдентификаторУпаковки,
	|	СравнениеГруппировка.КоличествоОтгрузка,
	|	СравнениеГруппировка.Наборка
	|ИЗ
	|	СравнениеГруппировка КАК СравнениеГруппировка
	|ГДЕ
	|	СравнениеГруппировка.КоличествоОтгрузка <> СравнениеГруппировка.КоличествоНаборка";
	
	МассивОснований= итОснования.ВыгрузитьКолонку("Документ");
	МассивОснований.Добавить(итОснование);
	Запрос.УстановитьПараметр("СписокДокументов",МассивОснований);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТекстСообщения="";
	Ошибка=Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Ошибка=Истина;
		Если ВыборкаДетальныеЗаписи.КоличествоОтгрузка= 0 тогда
			ТекстСообщения=ТекстСообщения+"
			|";
			Для Каждого Колонка из РезультатЗапроса.Колонки цикл
				ТекстСообщения=ТекстСообщения+" "+Колонка.Имя+" : " + Строка(ВыборкаДетальныеЗаписи[Колонка.Имя]);
			КонецЦикла;
			ТекстСообщения = ТекстСообщения+ " ПРИЧИНА ОТКАЗА :  данные товар есть в наборках, но нет в отгрузке  ";
		КонецЕсли;
		Если ВыборкаДетальныеЗаписи.КоличествоНаборка= 0 Тогда
			ТекстСообщения=ТекстСообщения+"
			|";
			Для Каждого Колонка из РезультатЗапроса.Колонки цикл
				ТекстСообщения=ТекстСообщения+" "+Колонка.Имя+" : " + Строка(ВыборкаДетальныеЗаписи[Колонка.Имя]);
			КонецЦикла;
			ТекстСообщения = ТекстСообщения+ " ПРИЧИНА ОТКАЗА :  данные товар есть в отгрузке, но нет в наборках  ";
			
		КонецЕсли;
		Если ВыборкаДетальныеЗаписи.КоличествоОтгрузка>ВыборкаДетальныеЗаписи.КоличествоНаборка и ВыборкаДетальныеЗаписи.КоличествоНаборка<> 0 Тогда 
			ТекстСообщения=ТекстСообщения+"
			|";
			Для Каждого Колонка из РезультатЗапроса.Колонки цикл
				ТекстСообщения=ТекстСообщения+" "+Колонка.Имя+" : " + Строка(ВыборкаДетальныеЗаписи[Колонка.Имя]);
			КонецЦикла;
			ТекстСообщения = ТекстСообщения+ " ПРИЧИНА ОТКАЗА : количество к отгрузке больше чем количество в наборках";
			
		КонецЕсли;
		Если ВыборкаДетальныеЗаписи.КоличествоОтгрузка<ВыборкаДетальныеЗаписи.КоличествоНаборка и ВыборкаДетальныеЗаписи.КоличествоОтгрузка<> 0 Тогда 
			ТекстСообщения=ТекстСообщения+"
			|";
			Для Каждого Колонка из РезультатЗапроса.Колонки цикл
				ТекстСообщения=ТекстСообщения+" "+Колонка.Имя+" : " + Строка(ВыборкаДетальныеЗаписи[Колонка.Имя]);
			КонецЦикла;
			ТекстСообщения = ТекстСообщения+ " ПРИЧИНА ОТКАЗА : количество в Наборках  больше чем количество в отгрузке";
		КонецЕсли;
		Если ТекстСообщения<>"" Тогда 
			Сообщить(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется или
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован или
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен Тогда 
		Если Ошибка Тогда 
			Отказ=Истина;
		КонецЕсли;
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Процедура ПроверкаНаСоответсвиеДанныхЯчеек(Отказ, РежимПроведения)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSОтгрузкаТовары.ИдентификаторУпаковки,
	|	итWMSОтгрузкаТовары.Номенклатура,
	|	итWMSОтгрузкаТовары.СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА итWMSОтгрузкаТовары.Качество = ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Качество.Новый)
	|		ИНАЧЕ итWMSОтгрузкаТовары.Качество
	|	КОНЕЦ КАК Качество,
	|	итWMSОтгрузкаТовары.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	СУММА(итWMSОтгрузкаТовары.Количество) КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтправитель,
	|	итWMSОтгрузкаТовары.Ссылка.Организация
	|ПОМЕСТИТЬ СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки
	|ИЗ
	|	Документ.итWMSОтгрузка.Товары КАК итWMSОтгрузкаТовары
	|ГДЕ
	|	итWMSОтгрузкаТовары.Ссылка = &Ссылка
	|	И итWMSОтгрузкаТовары.СостояниеЗадачи <> ЗНАЧЕНИЕ(перечисление.итWMSСостоянияЗадачТсд.Отменена)
	|СГРУППИРОВАТЬ ПО
	|	итWMSОтгрузкаТовары.ИдентификаторУпаковки,
	|	итWMSОтгрузкаТовары.Номенклатура,
	|	итWMSОтгрузкаТовары.СерияНоменклатуры,
	|	итWMSОтгрузкаТовары.ЯчейкаОтправитель,
	|	итWMSОтгрузкаТовары.Ссылка.Организация,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|	ВЫБОР
	|		КОГДА итWMSОтгрузкаТовары.Качество = ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Качество.Новый)
	|		ИНАЧЕ итWMSОтгрузкаТовары.Качество
	|	КОНЕЦ
	|;
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.ИдентификаторУпаковки,
	|	СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.Номенклатура,
	|	СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.ЯчейкаОтправитель,
	|	СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.СерияНоменклатуры,
	|	СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.Качество,
	|	СУММА(ЕСТЬNULL(итТоварыВЯчейкахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(итТоварыВЯчейкахОстатки.КОтборуОстаток,
	|		0)) КАК ОстатокЗаМинусомРезерваИКоличестваДокумента
	|ПОМЕСТИТЬ ОстатокЗаМинусомРезерваИКоличестваДокументаВЯчейкеОтправитель
	|ИЗ
	|	СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки КАК СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(&Период,) КАК итТоварыВЯчейкахОстатки
	|		ПО СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|		И СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.СерияНоменклатуры = итТоварыВЯчейкахОстатки.СерияНоменклатуры
	|		И СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.ЯчейкаОтправитель = итТоварыВЯчейкахОстатки.Ячейка
	|		И СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.Качество = итТоварыВЯчейкахОстатки.Качество
	|		И
	|			СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.ИдентификаторУпаковки = итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
	|		И СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.СкладОтправитель = итТоварыВЯчейкахОстатки.Склад
	|		И СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.Организация = итТоварыВЯчейкахОстатки.Организация
	|СГРУППИРОВАТЬ ПО
	|	СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.Номенклатура,
	|	СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.СерияНоменклатуры,
	|	СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.ЯчейкаОтправитель,
	|	СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.Качество,
	|	СрезПеремещенияВРазрезеЯчейкиОтправителяИдУпаковки.ИдентификаторУпаковки
	|;
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстатокЗаМинусомРезерваИКоличестваДокументаВЯчейкеОтправитель.ИдентификаторУпаковки,
	|	ОстатокЗаМинусомРезерваИКоличестваДокументаВЯчейкеОтправитель.Номенклатура,
	|	ОстатокЗаМинусомРезерваИКоличестваДокументаВЯчейкеОтправитель.ЯчейкаОтправитель,
	|	ОстатокЗаМинусомРезерваИКоличестваДокументаВЯчейкеОтправитель.СерияНоменклатуры,
	|	ОстатокЗаМинусомРезерваИКоличестваДокументаВЯчейкеОтправитель.Качество,
	|	ОстатокЗаМинусомРезерваИКоличестваДокументаВЯчейкеОтправитель.ОстатокЗаМинусомРезерваИКоличестваДокумента
	|ИЗ
	|	ОстатокЗаМинусомРезерваИКоличестваДокументаВЯчейкеОтправитель КАК
	|		ОстатокЗаМинусомРезерваИКоличестваДокументаВЯчейкеОтправитель";
	
	Запрос.УстановитьПараметр("Период", новый Граница(новый МоментВремени(Дата,Ссылка),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка",Ссылка);	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если  ВыборкаДетальныеЗаписи.ОстатокЗаМинусомРезерваИКоличестваДокумента <0 тогда
			Отказ=Истина;
			Сообщить("для Идентификатора упаковки "+ВыборкаДетальныеЗаписи.ИдентификаторУпаковки+" первышенно возможное количетсво перемещаемой номеклатуры 
			|"+ВыборкаДетальныеЗаписи.Номенклатура+" серия-" +ВыборкаДетальныеЗаписи.СерияНоменклатуры +" качеством-"+ВыборкаДетальныеЗаписи.Качество+ 
			" на "+(-ВыборкаДетальныеЗаписи.ОстатокЗаМинусомРезерваИКоличестваДокумента) +" базовых едениц");
		КонецЕсли;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Процедура РаспределениеДокументаНаЗадачиТСД(Отказ, РежимПроведения)
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",Ссылка);
	БлокировкаДанных.Заблокировать();
	
	НаборЗаписей= РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей цикл
		НаборЗаписей_2=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
		НаборЗаписей_2.Отбор.ИдЗадачи.Установить(стр.ИдЗадачи);
		НаборЗаписей_2.Прочитать();
		НаборЗаписей_2.Очистить();
		НаборЗаписей_2.Записать();
	КонецЦикла;
	
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSОтгрузкаТовары.Ссылка,
	|	итWMSОтгрузкаТовары.НомерСтроки,
	|	итWMSОтгрузкаТовары.ИдентификаторСтроки,
	|	итWMSОтгрузкаТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итWMSОтгрузкаТовары.Номенклатура,
	|	итWMSОтгрузкаТовары.Характеристика,
	|	итWMSОтгрузкаТовары.Качество,
	|	итWMSОтгрузкаТовары.ДатаРозлива,
	|	итWMSОтгрузкаТовары.СостояниеЗадачи,
	|	итWMSОтгрузкаТовары.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	итWMSОтгрузкаТовары.Количество,
	|	итWMSОтгрузкаТовары.СерияНоменклатуры,
	|	итWMSОтгрузкаТовары.ОчередностьПогрузки КАК ОчередностьПогрузки,
	|	итWMSОтгрузкаТовары.Наборка.Контрагент КАК Контрагент,
	|	итWMSОтгрузкаТовары.Наборка КАК Наборка
	|ИЗ
	|	Документ.итWMSОтгрузка.Товары КАК итWMSОтгрузкаТовары
	|ГДЕ
	|	итWMSОтгрузкаТовары.Ссылка = &Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ЯчейкаОтправитель),
	|	МАКСИМУМ(ОчередностьПогрузки),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Наборка)
	|ПО
	|	ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИдентификаторУпаковки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИдентификаторУпаковки.Следующий() Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДокументОснование=Ссылка;
		НоваяЗапись.ИдЗадачи=новый УникальныйИдентификатор;
		НоваяЗапись.ИдентификаторУпаковки=ВыборкаИдентификаторУпаковки.ИдентификаторУпаковки;
		НоваяЗапись.ЯчейкаПолучатель= ОтгрузочныеВорота;
		НоваяЗапись.ЯчейкаОтправитель=ВыборкаИдентификаторУпаковки.ЯчейкаОтправитель;
		НоваяЗапись.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Отгрузка;
		НоваяЗапись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
		СтруктураДополнительныхДанныхЗадачи=новый Структура;
		СтруктураДополнительныхДанныхЗадачи.Вставить("ОчередностьПогрузки",ВыборкаИдентификаторУпаковки.ОчередностьПогрузки);
		СтруктураДополнительныхДанныхЗадачи.Вставить("Контрагент",Строка(ВыборкаИдентификаторУпаковки.Контрагент));
		СтруктураДополнительныхДанныхЗадачи.Вставить("ДатаНаборки",ВыборкаИдентификаторУпаковки.Наборка.Дата);
		СтруктураДополнительныхДанныхЗадачи.Вставить("НомерНаборки",ВыборкаИдентификаторУпаковки.Наборка.Номер);
		НоваяЗапись.ДополнительныеДанные=новый ХранилищеЗначения(СтруктураДополнительныхДанныхЗадачи);
		ВыборкаДетальныеЗаписи = ВыборкаИдентификаторУпаковки.Выбрать();
		ЗаполнитьСтрокиЗадачиТСД(Отказ, РежимПроведения,НоваяЗапись.ИдЗадачи,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиЗадачиТСД(Отказ, РежимПроведения,ИдЗадачи,ВыборкаДетальныеЗаписи)
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSСтрокиЗадачТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ИдЗадачи",ИдЗадачи);
	БлокировкаДанных.Заблокировать();
	НаборЗаписей= РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.ИдЗадачи=ИдЗадачи;
		НоваяЗапись.идСтроки=ВыборкаДетальныеЗаписи.ИдентификаторСтроки;
		НоваяЗапись.ДатаРозлива= ВыборкаДетальныеЗаписи.ДатаРозлива;
		НоваяЗапись.СерияНоменклатуры = ВыборкаДетальныеЗаписи.СерияНоменклатуры;
		НоваяЗапись.Номенклатура=ВыборкаДетальныеЗаписи.Номенклатура;
		НоваяЗапись.Количество=ВыборкаДетальныеЗаписи.Количество;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры



#КонецОбласти


#Область СлужебныеФункцииИПроцедуры

Функция УНаборкиУжеЕстьОтгрузка(Наборка)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	итWMSОтгрузка.Ссылка
	|ИЗ
	|	Документ.итWMSОтгрузка КАК итWMSОтгрузка
	|ГДЕ
	|	итWMSОтгрузка.итОснование = &Наборка
	|	И итWMSОтгрузка.Проведен = ИСТИНА
	|	И итWMSОтгрузка.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	итWMSОтгрузкаитОснования.Ссылка
	|ИЗ
	|	Документ.итWMSОтгрузка.итОснования КАК итWMSОтгрузкаитОснования
	|ГДЕ
	|	итWMSОтгрузкаитОснования.Документ = &Наборка
	|	И итWMSОтгрузкаитОснования.Ссылка <> &Ссылка
	|	И итWMSОтгрузкаитОснования.Ссылка.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("Наборка", Наборка);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

#КонецОбласти


#Область ОбязательныеПроцедурыИФункции
Процедура ДействияПриОтказеОтИсполненияДокумента()Экспорт 
	ЭтотОбъект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;	
КонецПроцедуры

Процедура ДействияПриФиксацииЗадачДокумента() Экспорт 
	ЭтотОбъект.СтатусДокумента=СосотояниеЗавршенияОтгрузки();
	ДатаЗавершенияДокумента=ТекущаяДата();
	#Область ГвоздиГифта
	Для Каждого стр из итОснования цикл
		Если ТипЗнч(стр.Документ)=Тип("ДокументСсылка.ЗаказПокупателя") тогда
			//Если не ЕстьортУЗаказа(стр.Документ) Тогда 
			ОбъектЗаказа=стр.Документ.ПолучитьОбъект();
			ОбъектЗаказа.Отгружен=Истина;
			ОбъектЗаказа.ДатаФактическойОтгрузки=ДатаЗавершенияДокумента;
			ОбъектЗаказа.Записать();
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	#КонецОбласти
	
КонецПроцедуры

//Функция ЕстьортУЗаказа(Заказ)
//	
//	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
//	// Данный фрагмент построен конструктором.
//	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	итОтгрузкаРазмещениеТоваров.Ссылка
//		|ИЗ
//		|	Документ.итОтгрузкаРазмещениеТоваров КАК итОтгрузкаРазмещениеТоваров
//		|ГДЕ
//		|	итОтгрузкаРазмещениеТоваров.Основание = &Основание
//		|	И итОтгрузкаРазмещениеТоваров.Проведен";
//	
//	Запрос.УстановитьПараметр("Основание", Заказ);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
//		Возврат Истина;
//	КонецЕсли;
//	Возврат Ложь;
//	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
//	КонецФункции
Функция СосотояниеЗавршенияОтгрузки()
	СостояниеОтмены=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
	Ошибка=Ложь;
	Для Каждого стр из Товары цикл
		Если стр.СостояниеЗадачи= СостояниеОтмены Тогда
			Ошибка=Истина;
		КонецЕсли;	
	КонецЦикла;
	Если Ошибка Тогда 
		Возврат Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой;
	иначе
		Возврат Перечисления.итWMSСтатусыСкладскихДокументов.Завершен;
	КонецЕсли;	
	КонецФункции
#КонецОбласти