Перем ОбработкаТСД Экспорт;
Перем СообщениеДляТСД Экспорт ; 
Перем ИгнорироватьОтказПриПроверках Экспорт ;
Перем ПривилигированноеПроведение Экспорт ;


#Область ПередЗаписью
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ПередЗаписьюУстановкаЗначенийПоУмолчанию();
	итWMSСлужебныеПроцедурыИФункции.УстановитьРежимПроведенияЗавершенногоДокумента(СтатусДокумента,РежимПроведения);
	Если ЭтотОбъект.Проведен и РежимЗаписи=РежимЗаписиДокумента.Запись тогда
		Если не ОбменДанными.Загрузка Тогда 
		РежимЗаписи=РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	КонецЕсли;	
	Если РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения тогда
		ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения);
	ИначеЕсли  РежимЗаписи= РежимЗаписиДокумента.Проведение тогда
		ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;
    
	Если ПометкаУдаления  Тогда 
		СтарыйОбъект=Ссылка.ПолучитьОбъект();
		Если СтарыйОбъект.ПометкаУдаления = Ложь Тогда 
			ОчиститьДанныеМарок();
		КонецЕсли;
	КонецЕсли;
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда 
	//ОтложенноеПроведение=Ложь;
	Если не Ссылка.Пустая() Тогда 
	итWMSСлужебныеПроцедурыИФункции.УдалитьЗаписьДопОбработкиОтложенногоПроведения(Ссылка);
	КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписьюУстановкаЗначенийПоУмолчанию()
	
	Если ТипЗнч(ПривилигированноеПроведение)<>Тип("Булево") Тогда 
		ПривилигированноеПроведение=Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения)
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется или  СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован  тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		ОчиститьДанныеЗадач();
		ОчиститьДанныеМарок();
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен тогда
		Отказ = Истина;
		Сообщить("Документ распределен на тсд и не может быть распроведен ");
		//ОтменитьЗаписиЗакрепленияДокументаТранзита(Отказ, РежимПроведения);
	КонецЕсли;
	Если не Отказ тогда
		ОтменитьЗаписиЗакрепленияДокументаТранзита(Отказ, РежимПроведения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения)
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан и НеРаспределятьНаТСД тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован;
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан и не НеРаспределятьНаТСД  тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
		ПроверкаНаПравильностьЗаполненияПМУ(Отказ);
		для Каждого стр из Товары цикл
			стр.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
		КонецЦикла;
		Хранилище=новый ХранилищеЗначения(Товары.Выгрузить(),новый СжатиеДанных(9));
		СнимокТабличнойЧастиДоРаспределения=Хранилище;
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован и не НеРаспределятьНаТСД  тогда
		ПроверкаНаПравильностьЗаполненияПМУ(Отказ);
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
		для Каждого стр из Товары цикл
			стр.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
		КонецЦикла;
		Хранилище=новый ХранилищеЗначения(Товары.Выгрузить(),новый СжатиеДанных(9));
		СнимокТабличнойЧастиДоРаспределения=Хранилище;
	КонецЕсли;
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или 
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой тогда
	    ПроверитьДокументНаСоответсвиеИсходнымДанным();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаНаПравильностьЗаполненияПМУ(Отказ)
	Если ПривилигированноеПроведение Тогда 
		Возврат
	КонецЕсли;	
	Если ДокументыПомарочногоУчета.Количество()>0 и СоответсвиеДаннныхТТНиСкласдкогоУчета.Количество()=0 Тогда 
		Отказ=Истина;
		Сообщить("Заполните соответсвие ПМУ");
	КонецЕсли;	
	ПроверкаСоотвСправокБиНоменклатуры(Отказ);
КонецПроцедуры
		
Процедура ПроверкаСоотвСправокБиНоменклатуры(Отказ)
		
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответсвиеДаннныхТТНиСкласдкогоУчета.СправкаБ КАК СправкаБ,
		|	СоответсвиеДаннныхТТНиСкласдкогоУчета.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	СоответсвиеДаннныхТТНиСкласдкогоУчета.Номенклатура КАК Номенклатура,
		|	СоответсвиеДаннныхТТНиСкласдкогоУчета.ДатаРозлива КАК ДатаРозлива
		|ПОМЕСТИТЬ Вт
		|ИЗ
		|	&СоответсвиеДаннныхТТНиСкласдкогоУчета КАК СоответсвиеДаннныхТТНиСкласдкогоУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеМарокЕГАИСМарки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ДанныеМарокЕГАИСМарки.СправкаБ КАК СправкаБ,
		|	ДанныеМарокЕГАИСМарки.ДатаРозлива КАК ДатаРозлива
		|ПОМЕСТИТЬ ВтДанныеМарок
		|ИЗ
		|	Документ.ДанныеМарокЕГАИС.Марки КАК ДанныеМарокЕГАИСМарки
		|ГДЕ
		|	ДанныеМарокЕГАИСМарки.Ссылка В(&МассивДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеМарокЕГАИСМарки.АлкогольнаяПродукция,
		|	ДанныеМарокЕГАИСМарки.СправкаБ,
		|	ДанныеМарокЕГАИСМарки.ДатаРозлива
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Вт.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ВтДанныеМарок.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ВтДанныеМарок.СправкаБ КАК СправкаБ,
		|	ВтДанныеМарок.ДатаРозлива КАК ДатаРозлива
		|ИЗ
		|	ВтДанныеМарок КАК ВтДанныеМарок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Вт КАК Вт
		|		ПО ВтДанныеМарок.АлкогольнаяПродукция = Вт.АлкогольнаяПродукция
		|			И ВтДанныеМарок.СправкаБ = Вт.СправкаБ
		|			И ВтДанныеМарок.ДатаРозлива = Вт.ДатаРозлива
		|ГДЕ
		|	ЕСТЬNULL(Вт.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Вт.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
		|	ВтДанныеМарок.АлкогольнаяПродукция,
		|	ВтДанныеМарок.СправкаБ,
		|	ВтДанныеМарок.ДатаРозлива";
	
	
	Запрос.УстановитьПараметр("СоответсвиеДаннныхТТНиСкласдкогоУчета",СоответсвиеДаннныхТТНиСкласдкогоУчета);
	Запрос.УстановитьПараметр("МассивДокументов", ДокументыПомарочногоУчета.ВыгрузитьКолонку("Документ"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Отказ=Истина;
		Сообщить("Для Алкогольной продукции "+ВыборкаДетальныеЗаписи.АлкогольнаяПродукция+" со справкой "+ВыборкаДетальныеЗаписи.СправкаБ + " дата розлива "+ВыборкаДетальныеЗаписи.ДатаРозлива+ " не найдена номенклатура из таблицы соотв.");
	КонецЦикла;
	

	
КонецПроцедуры
	
Процедура ОтменитьЗаписиЗакрепленияДокументаТранзита(Отказ, РежимПроведения)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMS_ДанныеДокументов.Документ
	|ИЗ
	|	РегистрСведений.итWMS_ДанныеДокументов КАК итWMS_ДанныеДокументов
	|ГДЕ
	|	итWMS_ДанныеДокументов.ДокументПолучатель = &ДокументПолучатель";
	
	Запрос.УстановитьПараметр("ДокументПолучатель", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей=РегистрыСведений.итWMS_ДанныеДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(ВыборкаДетальныеЗаписи.Документ);
		НаборЗаписей.Прочитать();
		для Каждого стр из НаборЗаписей цикл
			стр.ПринятНаИсполнение=Ложь;
			стр.ДокументПолучатель=Документы.итWMSПриемка.ПустаяСсылка();
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаПроведения
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	УстановитьБлокировкиДанныхИОчиститьРегистры();
	
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда
		ОчиститьДанныеМарок();
		РаспределениеДокументаНаЗадачиТСД(Отказ, РежимПроведения);	
	КонецЕсли;
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется или СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован тогда
		ЗакрепитьДокументыТранзитаЗаПриемкой(Отказ, РежимПроведения);
	КонецЕсли;
	//Если СтатусДокумента<>Перечисления.итWMSСтатусыСкладскихДокументов.Завершен тогда
	ПроведениеПоРезервированиюЯчеек(Отказ, РежимПроведения,);
	//КонецЕсли;
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен 
		Или СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен
		Или  СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой	тогда
		ПроведениеПоРегистрамНакопления(Отказ, РежимПроведения);
	КонецЕсли;
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда
		ОчиститьДанныеМарок();
	КонецЕсли;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура ПроведениеПоРезервированиюЯчеек(Отказ, РежимПроведения,СнятиеСРезерва=Ложь)
	ВидДвижения=?(СнятиеСРезерва,ВидДвиженияНакопления.Расход,ВидДвиженияНакопления.Приход);
	ИтТоварывЯчейках=Движения.итТоварыВЯчейках;
	Для Каждого стр Из Товары Цикл
		Если стр.ЯчейкаПолучатель.Пустая() Тогда 
			Продолжить;
		КонецЕсли;	
	НоваяЗапись=ИтТоварывЯчейках.Добавить();
    НоваяЗапись.Организация=Организация;
    НоваяЗапись.Период=Дата;
    НоваяЗапись.Регистратор=Ссылка;
	//НоваяЗапись.Склад=Склад;
    НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
    НоваяЗапись.Ячейка=стр.ЯчейкаПолучатель;
    НоваяЗапись.Номенклатура=стр.Номенклатура;
    НоваяЗапись.Характеристика=стр.Характеристика;
    НоваяЗапись.СерияНоменклатуры=стр.СерияНоменклатуры;
    НоваяЗапись.ДатаРозлива=стр.ДатаРозлива;
    НоваяЗапись.Качество=?(стр.Качество=Справочники.Качество.ПустаяСсылка(),Справочники.Качество.Новый,стр.Качество);
    НоваяЗапись.ВидДвижения=ВидДвижения;
    НоваяЗапись.КРазмещению=стр.КоличествоПлан;
	КонецЦикла;	
	ИтТоварывЯчейках.Записать();	
КонецПроцедуры

Процедура ПроведениеПоРегистрамНакопления(Отказ, РежимПроведения)
	ПроведениеПоРезервированиюЯчеек(Отказ, РежимПроведения,Истина);
	ПроведениеПоТоварамВЯчейках(Отказ, РежимПроведения);
КонецПроцедуры

Процедура УстановитьБлокировкиДанныхИОчиститьРегистры()
	
БлокировкаДанных = новый БлокировкаДанных;
ЯчейкаПолучательТовары=новый ТаблицаЗначений;
ЯчейкаПолучательТовары.Колонки.Добавить("ЯчейкаПолучатель",новый ОписаниеТипов("СправочникСсылка.итСкладскиеЯчейки"));
ПустаяЯчейка=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
Для Каждого стр из Товары Цикл 
	Если стр.ЯчейкаПолучатель=ПустаяЯчейка Тогда 
		Продолжить;
	КонецЕсли;
	НоваяСтрока=ЯчейкаПолучательТовары.Добавить();
	НоваяСтрока.ЯчейкаПолучатель=стр.ЯчейкаПолучатель;
КонецЦикла;

#Область БлокировкаитТоварыВЯчейках	

	СтруктураПараметров=итWMSСлужебныеПроцедурыИФункции.СоздатьСтруктуруПараметровБлокировкиДанных(ЯчейкаПолучательТовары,БлокировкаДанных);
	СтруктураПараметров.ПолеПространствоБлокировок="Ячейка";
	СтруктураПараметров.ПолеИсточника="ЯчейкаПолучатель";
	СтруктураПараметров.ПространствоБлокировки="РегистрНакопления.итТоварыВЯчейках";
	итWMSСлужебныеПроцедурыИФункции.УстановкаЭлементаБлокировокДанныхWMS(СтруктураПараметров);
	
 #КонецОбласти
 

		
БлокировкаДанных.Заблокировать();
	
	
	НаборЗаписей=РегистрыНакопления.итТоварыВЯчейках.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	
КонецПроцедуры





процедура ПроведениеПоТоварамВЯчейках(Отказ, РежимПроведения)
	ИтТоварывЯчейках=Движения.итТоварыВЯчейках;
	Для Каждого стр Из Товары Цикл
	НоваяЗапись=ИтТоварывЯчейках.Добавить();
	НоваяЗапись.Период=Дата;
    НоваяЗапись.Организация=Организация;
	//НоваяЗапись.Склад=Склад;
    НоваяЗапись.Регистратор=Ссылка;
    НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
    НоваяЗапись.Ячейка=стр.ЯчейкаПолучатель;
    НоваяЗапись.Номенклатура=стр.Номенклатура;
    НоваяЗапись.Характеристика=стр.Характеристика;
    НоваяЗапись.СерияНоменклатуры=стр.СерияНоменклатуры;
    НоваяЗапись.ДатаРозлива=стр.ДатаРозлива;
    НоваяЗапись.Качество=?(стр.Качество=Справочники.Качество.ПустаяСсылка(),Справочники.Качество.Новый,стр.Качество);
    НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
    НоваяЗапись.Количество=стр.КоличествоФакт;
	КонецЦикла;	
	ИтТоварывЯчейках.Записать();
КонецПроцедуры



#Область РаботаСЗадачамиТСД
Процедура РаспределениеДокументаНаЗадачиТСД(Отказ, РежимПроведения)
	ОчиститьДанныеЗадач();
	НаборЗаписей= РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	Если ПриемкаИзТранзита тогда
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSПриемкаТовары.Ссылка,
		|	итWMSПриемкаТовары.НомерСтроки,
		|	итWMSПриемкаТовары.ИдентификаторСтроки,
		|	итWMSПриемкаТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	итWMSПриемкаТовары.Номенклатура,
		|	итWMSПриемкаТовары.Характеристика,
		|	итWMSПриемкаТовары.Качество,
		|	итWMSПриемкаТовары.ДатаРозлива,
		|	итWMSПриемкаТовары.КоличествоПлан,
		|	итWMSПриемкаТовары.КоличествоФакт,
		|	итWMSПриемкаТовары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
		|	итWMSПриемкаТовары.СостояниеЗадачи,
		|	итWMSПриемкаТовары.Комментарий КАК Комментарий
		|ИЗ
		|	Документ.итWMSПриемка.Товары КАК итWMSПриемкаТовары
		|ГДЕ
		|	итWMSПриемкаТовары.Ссылка = &Ссылка
		|ИТОГИ
		|	МАКСИМУМ(ЯчейкаПолучатель),
		|	МАКСИМУМ(Комментарий)
		|ПО
		|	ИдентификаторУпаковки";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаИдентификаторУпаковки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаИдентификаторУпаковки.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ДокументОснование=Ссылка;
			НоваяЗапись.ИдЗадачи=новый УникальныйИдентификатор;
			НоваяЗапись.ИдентификаторУпаковки=ВыборкаИдентификаторУпаковки.ИдентификаторУпаковки;
			НоваяЗапись.ЯчейкаПолучатель=ВыборкаИдентификаторУпаковки.ЯчейкаПолучатель;
			НоваяЗапись.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Приемка;
			НоваяЗапись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
			НоваяЗапись.ДополнительныеДанные=новый ХранилищеЗначения(новый Структура("Комментарий",ВыборкаИдентификаторУпаковки.Комментарий));
			ВыборкаДетальныеЗаписи = ВыборкаИдентификаторУпаковки.Выбрать();
			ЗаполнитьСтрокиЗадачиТСД(Отказ, РежимПроведения,НоваяЗапись.ИдЗадачи,ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
	иначе
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДокументОснование=Ссылка;
		НоваяЗапись.ИдЗадачи=новый УникальныйИдентификатор;
		НоваяЗапись.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть;
		НоваяЗапись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
	КонецЕсли;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиЗадачиТСД(Отказ, РежимПроведения,ИдЗадачи,ВыборкаДетальныеЗаписи)
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSСтрокиЗадачТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ИдЗадачи",ИдЗадачи);
	БлокировкаДанных.Заблокировать();
	НаборЗаписей= РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.ИдЗадачи=ИдЗадачи;
		НоваяЗапись.идСтроки=ВыборкаДетальныеЗаписи.ИдентификаторСтроки;
		НоваяЗапись.ДатаРозлива= ВыборкаДетальныеЗаписи.ДатаРозлива;
		НоваяЗапись.Номенклатура=ВыборкаДетальныеЗаписи.Номенклатура;
		НоваяЗапись.Количество=ВыборкаДетальныеЗаписи.КоличествоПлан;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры
Процедура ОчиститьДанныеМарок()
	Если ДокументыПомарочногоУчета.Количество()=0 Тогда 
		Возврат
	КонецЕсли;
	НаборЗаписей=РегистрыСведений.итWMS_АгрегацияМарок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
	НаборЗаписей.Прочитать();
    НаборЗаписей.Очистить();
	НаборЗаписей.Записать();	
	КонецПроцедуры
	
Процедура ОчиститьДанныеЗадач()
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",Ссылка);
	БлокировкаДанных.Заблокировать();
	
	НаборЗаписей= РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	//Если  ПриемкаИзТранзита тогда
	для Каждого стр из НаборЗаписей цикл
		НаборЗаписей_2=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
		НаборЗаписей_2.Отбор.ИдЗадачи.Установить(стр.ИдЗадачи);
		НаборЗаписей_2.Прочитать();
		НаборЗаписей_2.Очистить();
		НаборЗаписей_2.Записать();
	КонецЦикла;
	//КонецЕсли;
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	//ОтменитьЗаписиЗакрепленияДокументаТранзита(Отказ, РежимПроведения);
КонецПроцедуры
	
Процедура ЗакрепитьДокументыТранзитаЗаПриемкой(Отказ, РежимПроведения)
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMS_ДанныеДокументов");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Документ",ГУИД_ДокументаТранизата);
	БлокировкаДанных.Заблокировать();
	ОтменитьЗаписиЗакрепленияДокументаТранзита(Отказ, РежимПроведения);	
	Если ГУИД_ДокументаТранизата=новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") тогда
		Возврат
	КонецЕсли;	
	НаборЗаписей=РегистрыСведений.итWMS_ДанныеДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ГУИД_ДокументаТранизата);
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей цикл
		Если стр.ПринятНаИсполнение Тогда 
			Отказ=Истина;
			Сообщить("Документ уже закреплен за другой приемкой");
			Возврат
		КонецЕсли;
		стр.ПринятНаИсполнение=Истина;
		стр.ДокументПолучатель=Ссылка;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

#Область СтатусПриемкиПриФиксации
Функция ЗапросПроверкиПриемки()Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSПриемкаТовары.Номенклатура,
	|	итWMSПриемкаТовары.КоличествоПлан,
	|	итWMSПриемкаТовары.КоличествоФакт,
	|	итWMSПриемкаТовары.ДатаРозлива,
	|	итWMSПриемкаТовары.ИдентификаторСтроки
	|ИЗ
	|	Документ.итWMSПриемка.Товары КАК итWMSПриемкаТовары
	|ГДЕ
	|	итWMSПриемкаТовары.Ссылка = &Ссылка
	|	И итWMSПриемкаТовары.КоличествоПлан <> итWMSПриемкаТовары.КоличествоФакт";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
КонецФункции

Функция ЗапросПроверкиПриемкиКакЕсть()Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ДатаРозлива,
	|	ВложенныйЗапрос.Количество,
	|	0 КАК КоличествоФакт
	|ПОМЕСТИТЬ ТаблицаОбъединения
	|ИЗ
	|	(ВЫБРАТЬ
	|		итWMSПриемкаДанныеФизическогоНосителя.Номенклатура КАК Номенклатура,
	|		итWMSПриемкаДанныеФизическогоНосителя.ДатаРозлива КАК ДатаРозлива,
	|		СУММА(итWMSПриемкаДанныеФизическогоНосителя.Количество) КАК Количество
	|	ИЗ
	|		Документ.итWMSПриемка.ДанныеФизическогоНосителя КАК итWMSПриемкаДанныеФизическогоНосителя
	|	ГДЕ
	|		итWMSПриемкаДанныеФизическогоНосителя.Ссылка = &Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		итWMSПриемкаДанныеФизическогоНосителя.Номенклатура,
	|		итWMSПриемкаДанныеФизическогоНосителя.ДатаРозлива) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ДатаРозлива,
	|	0,
	|	ВложенныйЗапрос.КоличествоФакт
	|ИЗ
	|	(ВЫБРАТЬ
	|		итWMSПриемкаТовары.Номенклатура КАК Номенклатура,
	|		итWMSПриемкаТовары.ДатаРозлива КАК ДатаРозлива,
	|		СУММА(итWMSПриемкаТовары.КоличествоФакт) КАК КоличествоФакт
	|	ИЗ
	|		Документ.итWMSПриемка.Товары КАК итWMSПриемкаТовары
	|	ГДЕ
	|		итWMSПриемкаТовары.Ссылка = &Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		итWMSПриемкаТовары.Номенклатура,
	|		итWMSПриемкаТовары.ДатаРозлива) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъединения.Номенклатура,
	|	ТаблицаОбъединения.ДатаРозлива,
	|	СУММА(ТаблицаОбъединения.Количество) КАК Количество,
	|	СУММА(ТаблицаОбъединения.КоличествоФакт) КАК КоличествоФакт
	|ПОМЕСТИТЬ ТаблицаГруппировкиДанных
	|ИЗ
	|	ТаблицаОбъединения КАК ТаблицаОбъединения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбъединения.Номенклатура,
	|	ТаблицаОбъединения.ДатаРозлива
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаГруппировкиДанных.Номенклатура,
	|	ТаблицаГруппировкиДанных.ДатаРозлива,
	|	ТаблицаГруппировкиДанных.Количество КАК КоличествоПлан,
	|	ТаблицаГруппировкиДанных.КоличествоФакт
	|ИЗ
	|	ТаблицаГруппировкиДанных КАК ТаблицаГруппировкиДанных
	|ГДЕ
	|	ТаблицаГруппировкиДанных.Количество <> ТаблицаГруппировкиДанных.КоличествоФакт";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
КонецФункции

Процедура ОпределитьСтатусВыполненногоДокумента() Экспорт 
	Если ЭтотОбъект.ПриемкаИзТранзита тогда
		РезультатЗапроса=ЗапросПроверкиПриемки();
		
	иначе
		РезультатЗапроса=ЗапросПроверкиПриемкиКакЕсть();
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		ЭтотОбъект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой;
	иначе
		ЭтотОбъект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СверкаДанныхПриемки

Процедура ПроверитьДокументНаСоответсвиеИсходнымДанным()Экспорт
	ПустойИдентификатор=новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	СтатусУдовлетворяетУсловиям=Ложь;
	Если СтатусДокумента= Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
		СтатусДокумента= Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой тогда
		СтатусУдовлетворяетУсловиям=Истина;
	КонецЕсли;	 
	Если не СтатусУдовлетворяетУсловиям тогда
		Возврат
	КонецЕсли;	
	Если ГУИД_ДокументаТранизата = ПустойИдентификатор тогда
		Возврат
	КонецЕсли;
	Если не ДанныеПроверены или (ДанныеПроверены и ДанныеПоследнейПроверкиРасходятся()) тогда
		СтруктураДанных=ЗапроситьДанныеДокументаПоГуидуМодуль(ГУИД_ДокументаТранизата,Ложь);
		Если СтруктураДанных=Неопределено тогда
			Возврат
		КонецЕсли;	
		ДанныеХранилища= СтруктураДанных.ДанныеДокумента;
		ПеребратьТаблицуДанных(ДанныеХранилища);
		Сообщение="";
		Если ДанныеХранилища.ПризнакЗагрузки=0 тогда
			МассивОшибок = СравнитьДанныеПриемкиКакЕсть(ДанныеХранилища.ТаблицаДанных);
		иначе
			МассивОшибок = СравнитьДанныеПриемки(ДанныеХранилища.ТаблицаДанных);
		КонецЕсли;
		Если МассивОшибок.Количество()>0 тогда
			СтруктураДанных.Вставить("МассивОшибокПриемки",МассивОшибок);
			СтруктураДанных.Вставить("ДатаПриемки",Дата);
			СтруктураДанных.Вставить("НомерПриемки",Номер);
			СтруктураДанных.Вставить("ГуидПриемки",Ссылка.УникальныйИдентификатор());
			Сообщение=итWMSСлужебныеПроцедурыИФункции.СериализаторДанных(СтруктураДанных);
		КонецЕсли;
		СнимокТабличныхЧастейПриПроверкеСтруктура=новый Структура("Товары,ДанныеФизическогоНосителя",Товары.Выгрузить(),ДанныеФизическогоНосителя.Выгрузить());
		СнимокТабличныхЧастейПриПроверке=новый ХранилищеЗначения(СнимокТабличныхЧастейПриПроверкеСтруктура);
		ДанныеПроверены=Истина;
		Если Сообщение<>"" тогда
		СтруктураДанныхКОтправке=новый Структура;
		СтруктураДанныхКОтправке.Вставить("Номер",Номер);
		СтруктураДанныхКОтправке.Вставить("Дата",Дата);
		СтруктураДанныхКОтправке.Вставить("НомерВходящегоДокумента",НомерВходящегоДокумента);
		СтруктураДанныхКОтправке.Вставить("ДатаВходящегоДокумента",ДатаВходящегоДокумента);
		СтруктураДанныхКОтправке.Вставить("Сообщение",Сообщение);
		МассивПараметров=новый Массив;
		МассивПараметров.Добавить(СтруктураДанныхКОтправке);
		ФоновыеЗадания.Выполнить("итWMSОбработчикДанныхПриемки.ФоновоеОповещениеНесоответствияДанныхПриемки",МассивПараметров,Строка(новый УникальныйИдентификатор),"WMSФоновоеОповещениеНесоответствияДанныхПриемки");
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

Процедура ПеребратьТаблицуДанных(ДанныеХранилища)
ТаблицаДанных=ДанныеХранилища.ТаблицаДанных;
ТаблицаДанных.Колонки.Удалить("итИндентификаторыТоварныхПозиций");
ТаблицаДанных.Колонки.Добавить("итИндентификаторыТоварныхПозиций",новый ОписаниеТипов("СправочникСсылка.итИндентификаторыТоварныхПозиций"));
Для Каждого стр из ТаблицаДанных Цикл
	стр.итИндентификаторыТоварныхПозиций=Справочники.итИндентификаторыТоварныхПозиций.ПолучитьСсылку(новый УникальныйИдентификатор(стр.ИТПСтрокой));
КонецЦикла;
	
	КонецПроцедуры

Функция СравнитьДанныеПриемки(ТаблицаДанных)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//Сообщение="";

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанных.итИндентификаторыТоварныхПозиций,
		|	ТаблицаДанных.ДатаРозлива,
		|	ТаблицаДанных.КоличествоВБазовыхЕденицахИзмерения,
		|	ТаблицаДанных.ИдентификаторУпаковки
		|ПОМЕСТИТЬ ДанныеХранилища
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.ИдентификаторУпаковки,
		|	Товары.ДатаРозлива,
		|	Товары.КоличествоФакт,
		|	Товары.Номенклатура
		|ПОМЕСТИТЬ ВтДанныеТоваров
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеТоваров.ИдентификаторУпаковки,
		|	ВтДанныеТоваров.ДатаРозлива,
		|	СУММА(ВтДанныеТоваров.КоличествоФакт) КАК КоличествоФакт,
		|	ЕСТЬNULL(итИндентификаторыТоварныхПозиций.Ссылка, ЗНАЧЕНИЕ(Справочник.итИндентификаторыТоварныхПозиций.ПустаяСсылка)) КАК ИТП
		|ПОМЕСТИТЬ ДанныеТоваров
		|ИЗ
		|	ВтДанныеТоваров КАК ВтДанныеТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НМ
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.итИндентификаторыТоварныхПозиций КАК итИндентификаторыТоварныхПозиций
		|			ПО НМ.итИдентификаторНоменклатурнойПозиции = итИндентификаторыТоварныхПозиций.Ссылка
		|		ПО ВтДанныеТоваров.Номенклатура = НМ.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеТоваров.ДатаРозлива,
		|	ВтДанныеТоваров.ИдентификаторУпаковки,
		|	ЕСТЬNULL(итИндентификаторыТоварныхПозиций.Ссылка, ЗНАЧЕНИЕ(Справочник.итИндентификаторыТоварныхПозиций.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеХранилища.итИндентификаторыТоварныхПозиций,
		|	ДанныеХранилища.ДатаРозлива,
		|	ДанныеХранилища.КоличествоВБазовыхЕденицахИзмерения КАК КоличествоТранзита,
		|	ДанныеХранилища.ИдентификаторУпаковки,
		|	0 КАК КоличествоФакт
		|ПОМЕСТИТЬ ИтоговыеДанные
		|ИЗ
		|	ДанныеХранилища КАК ДанныеХранилища
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеТоваров.ИТП,
		|	ДанныеТоваров.ДатаРозлива,
		|	0,
		|	ДанныеТоваров.ИдентификаторУпаковки,
		|	ДанныеТоваров.КоличествоФакт
		|ИЗ
		|	ДанныеТоваров КАК ДанныеТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыеДанные.итИндентификаторыТоварныхПозиций,
		|	ИтоговыеДанные.ДатаРозлива,
		|	СУММА(ИтоговыеДанные.КоличествоТранзита) КАК КоличествоТранзита,
		|	ИтоговыеДанные.ИдентификаторУпаковки,
		|	СУММА(ИтоговыеДанные.КоличествоФакт) КАК КоличествоФакт
		|ИЗ
		|	ИтоговыеДанные КАК ИтоговыеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ИтоговыеДанные.итИндентификаторыТоварныхПозиций,
		|	ИтоговыеДанные.ДатаРозлива,
		|	ИтоговыеДанные.ИдентификаторУпаковки";
	
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаДанных",ТаблицаДанных);
	Запрос.УстановитьПараметр("Товары",Товары.Выгрузить());

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивОшибок=новый Массив;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.КоличествоТранзита<> ВыборкаДетальныеЗаписи.КоличествоФакт тогда
			Структура=новый Структура;
			Структура.Вставить("ИдентификаторУпаковки",ВыборкаДетальныеЗаписи.ИдентификаторУпаковки);
			Структура.Вставить("ИТП",ВыборкаДетальныеЗаписи.итИндентификаторыТоварныхПозиций.Наименование);
			Структура.Вставить("ИтпГУИД",ВыборкаДетальныеЗаписи.итИндентификаторыТоварныхПозиций.УникальныйИдентификатор());
			НоменклатураПоИТП=ПоискНоменклатурыПоИдентификатору(ВыборкаДетальныеЗаписи.итИндентификаторыТоварныхПозиций);
			Структура.Вставить("НоменклатураБазы",НоменклатураПоИТП.Наименование);
			Структура.Вставить("НоменклатураБазыГуид",НоменклатураПоИТП.УникальныйИдентификатор());
			Структура.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
			Структура.Вставить("КоличествоФакт",ВыборкаДетальныеЗаписи.КоличествоФакт);
			Структура.Вставить("КоличествоФизносителя",0);
			Структура.Вставить("КоличествоТранзита",ВыборкаДетальныеЗаписи.КоличествоТранзита);
			Структура.Вставить("Сообщение","Количество Транзита и Факта по SSCC не свопадает");
			МассивОшибок.Добавить(Структура);

			КонецЕсли;
	КонецЦикла;
    Возврат МассивОшибок;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
	КонецФункции
	
Функция СравнитьДанныеПриемкиКакЕсть(ТаблицаДанных)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.итИндентификаторыТоварныхПозиций КАК итИндентификаторыТоварныхПозиций,
	|	ТаблицаДанных.ДатаРозлива КАК ДатаРозлива,
	|	ТаблицаДанных.КоличествоВБазовыхЕденицахИзмерения КАК КоличествоВБазовыхЕденицахИзмерения
	|ПОМЕСТИТЬ ДанныеТранзита
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеФизическогоНосителя.Количество КАК Количество,
	|	ДанныеФизическогоНосителя.ДатаРозлива КАК ДатаРозлива,
	|	ДанныеФизическогоНосителя.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТДанныеФизическогоНосителяДокумента
	|ИЗ
	|	&ДанныеФизическогоНосителя КАК ДанныеФизическогоНосителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ДатаРозлива КАК ДатаРозлива,
	|	Товары.КоличествоФакт КАК КоличествоФакт,
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВтДанныеТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеФизическогоНосителяДокумента.ДатаРозлива КАК ДатаРозлива,
	|	СУММА(ВТДанныеФизическогоНосителяДокумента.Количество) КАК Количество,
	|	ЕСТЬNULL(итИндентификаторыТоварныхПозиций.Ссылка, ЗНАЧЕНИЕ(Справочник.итИндентификаторыТоварныхПозиций.ПустаяСсылка)) КАК ИТП
	|ПОМЕСТИТЬ ДанныеФизическогоНосителяДокумента
	|ИЗ
	|	ВТДанныеФизическогоНосителяДокумента КАК ВТДанныеФизическогоНосителяДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НМ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.итИндентификаторыТоварныхПозиций КАК итИндентификаторыТоварныхПозиций
	|			ПО НМ.итИдентификаторНоменклатурнойПозиции = итИндентификаторыТоварныхПозиций.Ссылка
	|		ПО ВТДанныеФизическогоНосителяДокумента.Номенклатура = НМ.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеФизическогоНосителяДокумента.ДатаРозлива,
	|	ЕСТЬNULL(итИндентификаторыТоварныхПозиций.Ссылка, ЗНАЧЕНИЕ(Справочник.итИндентификаторыТоварныхПозиций.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеТовары.ДатаРозлива КАК ДатаРозлива,
	|	СУММА(ВтДанныеТовары.КоличествоФакт) КАК КоличествоФакт,
	|	ЕСТЬNULL(итИндентификаторыТоварныхПозиций.Ссылка, ЗНАЧЕНИЕ(Справочник.итИндентификаторыТоварныхПозиций.ПустаяСсылка)) КАК ИТП
	|ПОМЕСТИТЬ ДанныеТовары
	|ИЗ
	|	ВтДанныеТовары КАК ВтДанныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НМ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.итИндентификаторыТоварныхПозиций КАК итИндентификаторыТоварныхПозиций
	|			ПО НМ.итИдентификаторНоменклатурнойПозиции = итИндентификаторыТоварныхПозиций.Ссылка
	|		ПО ВтДанныеТовары.Номенклатура = НМ.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеТовары.ДатаРозлива,
	|	ЕСТЬNULL(итИндентификаторыТоварныхПозиций.Ссылка, ЗНАЧЕНИЕ(Справочник.итИндентификаторыТоварныхПозиций.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТранзита.итИндентификаторыТоварныхПозиций КАК НоменклатураитИдентификаторНоменклатурнойПозиции,
	|	ДанныеТранзита.ДатаРозлива КАК ДатаРозлива,
	|	0 КАК КоличествоФизносителя,
	|	0 КАК КоличествоТовары,
	|	ДанныеТранзита.КоличествоВБазовыхЕденицахИзмерения КАК КоличествоТранзита
	|ПОМЕСТИТЬ ИтоговыеДанные
	|ИЗ
	|	ДанныеТранзита КАК ДанныеТранзита
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеФизическогоНосителяДокумента.ИТП,
	|	ДанныеФизическогоНосителяДокумента.ДатаРозлива,
	|	ДанныеФизическогоНосителяДокумента.Количество,
	|	0,
	|	0
	|ИЗ
	|	ДанныеФизическогоНосителяДокумента КАК ДанныеФизическогоНосителяДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеТовары.ИТП,
	|	ДанныеТовары.ДатаРозлива,
	|	0,
	|	ДанныеТовары.КоличествоФакт,
	|	0
	|ИЗ
	|	ДанныеТовары КАК ДанныеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговыеДанные.НоменклатураитИдентификаторНоменклатурнойПозиции КАК НоменклатураитИдентификаторНоменклатурнойПозиции,
	|	ИтоговыеДанные.ДатаРозлива КАК ДатаРозлива,
	|	СУММА(ИтоговыеДанные.КоличествоФизносителя) КАК КоличествоФизносителя,
	|	СУММА(ИтоговыеДанные.КоличествоТовары) КАК КоличествоТовары,
	|	СУММА(ИтоговыеДанные.КоличествоТранзита) КАК КоличествоТранзита
	|ИЗ
	|	ИтоговыеДанные КАК ИтоговыеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговыеДанные.НоменклатураитИдентификаторНоменклатурнойПозиции,
	|	ИтоговыеДанные.ДатаРозлива";
	
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаДанных",ТаблицаДанных);
	Запрос.УстановитьПараметр("Товары",Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДанныеФизическогоНосителя",ДанныеФизическогоНосителя.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивОшибок=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.КоличествоТранзита <> ВыборкаДетальныеЗаписи.КоличествоФизносителя или
			ВыборкаДетальныеЗаписи.КоличествоТранзита <> ВыборкаДетальныеЗаписи.КоличествоТовары Тогда 
			Структура=новый Структура;
			Структура.Вставить("ИТП",ВыборкаДетальныеЗаписи.НоменклатураитИдентификаторНоменклатурнойПозиции.Наименование);
			Структура.Вставить("ИтпГУИД",ВыборкаДетальныеЗаписи.НоменклатураитИдентификаторНоменклатурнойПозиции.УникальныйИдентификатор());
		    Структура.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
			НоменклатураПоИТП=ПоискНоменклатурыПоИдентификатору(ВыборкаДетальныеЗаписи.НоменклатураитИдентификаторНоменклатурнойПозиции);
			Структура.Вставить("НоменклатураБазы",НоменклатураПоИТП.Наименование);
			Структура.Вставить("НоменклатураБазыГуид",НоменклатураПоИТП.УникальныйИдентификатор());
			Структура.Вставить("КоличествоФизносителя",ВыборкаДетальныеЗаписи.КоличествоФизносителя);
			Структура.Вставить("КоличествоТовары",ВыборкаДетальныеЗаписи.КоличествоТовары);
			Структура.Вставить("КоличествоТранзита",ВыборкаДетальныеЗаписи.КоличествоТранзита);
			Структура.Вставить("Сообщение","Количество Транзита и Факта не свопадает");
			МассивОшибок.Добавить(Структура);
		КонецЕсли;
	КонецЦикла;
	
    Возврат МассивОшибок;	
	
	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецФункции

Функция ПоискНоменклатурыПоИдентификатору(итИндентификаторыТоварныхПозиций)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.итИдентификаторНоменклатурнойПозиции = &итИдентификаторНоменклатурнойПозиции
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Ссылка";
	
	Запрос.УстановитьПараметр("итИдентификаторНоменклатурнойПозиции", итИндентификаторыТоварныхПозиций);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	Возврат Справочники.Номенклатура.ПустаяСсылка();
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

Функция ЗапроситьДанныеДокументаПоГуидуМодуль(ГУИД_Документа,ИскатьТолькоСвободныеДокументы=Истина) Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	итWMS_ДанныеДокументов.ДанныеДокумента,
	|	итWMS_ДанныеДокументов.Дата,
	|	итWMS_ДанныеДокументов.Номер,
	|	итWMS_ДанныеДокументов.Филиал
	|ИЗ
	|	РегистрСведений.итWMS_ДанныеДокументов КАК итWMS_ДанныеДокументов
	|ГДЕ
	|	итWMS_ДанныеДокументов.Документ = &Документ
	|	И ВЫБОР
	|			КОГДА &ИскатьТолькоСвободныеДокументы
	|				ТОГДА итWMS_ДанныеДокументов.ПринятНаИсполнение = ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Документ", ГУИД_Документа);
	Запрос.УстановитьПараметр("ИскатьТолькоСвободныеДокументы",ИскатьТолькоСвободныеДокументы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		СтруктураДанных=новый Структура;
		СтруктураДанных.Вставить("ДанныеДокумента",ВыборкаДетальныеЗаписи.ДанныеДокумента.Получить());
		СтруктураДанных.Вставить("Дата",ВыборкаДетальныеЗаписи.Дата);
		СтруктураДанных.Вставить("Номер",ВыборкаДетальныеЗаписи.Номер);
		СтруктураДанных.Вставить("Филиал",ВыборкаДетальныеЗаписи.Филиал);
		
		
		Возврат  СтруктураДанных;
	КонецЕсли;
	Возврат Неопределено;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецФункции

Функция ДанныеПоследнейПроверкиРасходятся()
	ДанныеТч=СнимокТабличныхЧастейПриПроверке.Получить();
	Если ТипЗнч(ДанныеТч)<> тип("Структура") тогда
		Возврат Истина;
	КонецЕсли;
	Если не ДанныеТч.Свойство("Товары") тогда
		Возврат Истина;
	КонецЕсли;
	Если не ДанныеТч.Свойство("ДанныеФизическогоНосителя") тогда
		Возврат Истина;
	КонецЕсли;
	Проверка=Ложь;
	СверитьТабличнуюЧастьТовары(ДанныеТч.Товары,Проверка);
	СверитьТабличнуюЧастьДанныеФизическогоНосителя(ДанныеТч.ДанныеФизическогоНосителя,Проверка);
	Возврат Проверка;
КонецФункции

Процедура  СверитьТабличнуюЧастьТовары(ДанныеХранилищаТовары,Проверка)
	для Каждого Строка из ДанныеХранилищаТовары цикл
		МассивСтрокТаблицыТовары=Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",Строка.ИдентификаторСтроки));
		Если МассивСтрокТаблицыТовары.Количество()=0 тогда
			Проверка=Истина;
		КонецЕсли;	
		для Каждого стр из МассивСтрокТаблицыТовары цикл
			Попытка
				для Каждого Колонка из ДанныеХранилищаТовары.Колонки цикл
					Если стр[Колонка.имя]<> Строка[Колонка.имя] тогда
						Проверка=Истина;
						Возврат
					КонецЕсли;	
				КонецЦикла;
			Исключение
				Проверка=Истина;
				Возврат
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СверитьТабличнуюЧастьДанныеФизическогоНосителя(ДанныеХранилищаДанныеФизическогоНосителя,Проверка)
	ДанныеФизНосителя=ДанныеФизическогоНосителя.Выгрузить();
	ДанныеФизНосителя.Свернуть("Номенклатура,Характиристика,ДатаРозлива,Качество","Количество");
	ДанныеХранилищаДанныеФизическогоНосителя.Свернуть("Номенклатура,Характиристика,ДатаРозлива,Качество","Количество");
	Если ДанныеФизНосителя.Количество()<>ДанныеХранилищаДанныеФизическогоНосителя.Количество() тогда
		Проверка=Истина;
		Возврат
	КонецЕсли;
	для Каждого Строка из ДанныеХранилищаДанныеФизическогоНосителя цикл
		МассивСтрокТаблицыДанныеФизическогоНосителя=ДанныеФизНосителя.НайтиСтроки(новый Структура("Номенклатура,Характиристика,ДатаРозлива,Качество",Строка.Номенклатура,Строка.Характиристика,Строка.ДатаРозлива,Строка.Качество));
		Если МассивСтрокТаблицыДанныеФизическогоНосителя.Количество()=0 Тогда 
			Проверка=Истина;
		КонецЕсли; 
		для Каждого стр из МассивСтрокТаблицыДанныеФизическогоНосителя цикл
			Попытка
				для Каждого Колонка из ДанныеХранилищаДанныеФизическогоНосителя.Колонки цикл
					Если стр[Колонка.имя]<> Строка[Колонка.имя] тогда
						Проверка=Истина;
						Возврат
					КонецЕсли;	
				КонецЦикла;
			Исключение
				Проверка=Истина;
				Возврат
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры


#КонецОбласти

#Область СозданиеПрисвоениеСерииНоменклатуры

Процедура УстановитьСерииНоменклатуры() Экспорт 
	Если ВидОперации<>Перечисления.ВидыОперацииПримкиWMS.ПередачаМеждуПодразделениями Тогда 
	УстановитьСтарыеСерииМарок();
	КонецЕсли;
	//УстановитьСоотвСерийВозврата();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSПриемкаДокументыПомарочногоУчета.Документ
		|ПОМЕСТИТЬ ВтДокументыПМУУчета
		|ИЗ
		|	Документ.итWMSПриемка.ДокументыПомарочногоУчета КАК итWMSПриемкаДокументыПомарочногоУчета
		|ГДЕ
		|	итWMSПриемкаДокументыПомарочногоУчета.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSПриемкаТовары.ИдентификаторСтроки,
		|	итWMSПриемкаТовары.СправкаБ,
		|	итWMSПриемкаТовары.Номенклатура,
		|	итWMSПриемкаТовары.ДатаРозлива
		|ПОМЕСТИТЬ ВтДанныеДляПоискаСерий
		|ИЗ
		|	Документ.итWMSПриемка.Товары КАК итWMSПриемкаТовары
		|ГДЕ
		|	итWMSПриемкаТовары.КоличествоФакт > 0
		|	И итWMSПриемкаТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеМарокЕГАИСМарки.СправкаБ,
		|	ДанныеМарокЕГАИСМарки.СправкаА
		|ПОМЕСТИТЬ ВтДанныеСоотвСправокАиБ
		|ИЗ
		|	ВтДокументыПМУУчета КАК ВтДокументыПМУУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДанныеМарокЕГАИС.Марки КАК ДанныеМарокЕГАИСМарки
		|		ПО ВтДокументыПМУУчета.Документ = ДанныеМарокЕГАИСМарки.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ДанныеМарокЕГАИСМарки.СправкаБ,
		|	ДанныеМарокЕГАИСМарки.СправкаА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры,
		|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))) КАК СерияНоменклатуры,
		|	ВтДанныеДляПоискаСерий.ИдентификаторСтроки,
		|	ВтДанныеДляПоискаСерий.СправкаБ,
		|	ВтДанныеДляПоискаСерий.Номенклатура,
		|	ВтДанныеДляПоискаСерий.ДатаРозлива
		|ПОМЕСТИТЬ ВтИтоговыеДанные
		|ИЗ
		|	ВтДанныеДляПоискаСерий КАК ВтДанныеДляПоискаСерий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
		|		ПО ВтДанныеДляПоискаСерий.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеДляПоискаСерий.ИдентификаторСтроки,
		|	ВтДанныеДляПоискаСерий.СправкаБ,
		|	ВтДанныеДляПоискаСерий.Номенклатура,
		|	ВтДанныеДляПоискаСерий.ДатаРозлива
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтИтоговыеДанные.СерияНоменклатуры,
		|	ВтИтоговыеДанные.ИдентификаторСтроки,
		|	ВтИтоговыеДанные.СправкаБ,
		|	ВтИтоговыеДанные.Номенклатура,
		|	ВтИтоговыеДанные.ДатаРозлива,
		|	ЕСТЬNULL(ВтДанныеСоотвСправокАиБ.СправкаА, ЗНАЧЕНИЕ(Справочник.АлкКлассификаторСправокАиБ.ПустаяСсылка)) КАК СправкаА
		|ИЗ
		|	ВтИтоговыеДанные КАК ВтИтоговыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеСоотвСправокАиБ КАК ВтДанныеСоотвСправокАиБ
		|		ПО ВтИтоговыеДанные.СправкаБ = ВтДанныеСоотвСправокАиБ.СправкаБ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ПустаяСерия=Справочники.СерииНоменклатуры.ПустаяСсылка();
	ЭтоВозврат=ВидОперации=Перечисления.ВидыОперацииПримкиWMS.Возврат;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл   
		 СправкаА=Неопределено;
		 СерияНоменклатуры=ВыборкаДетальныеЗаписи.СерияНоменклатуры;
		 СтруктураПараметровСерии=новый Структура();
		 СтруктураПараметровСерии.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
		 СтруктураПараметровСерии.Вставить("ДатаВходящего",ДатаВходящегоДокумента);
		 СтруктураПараметровСерии.Вставить("НомерВходящего",НомерВходящегоДокумента);
         СтруктураПараметровСерии.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура);
		 Если ВыборкаДетальныеЗаписи.СправкаБ.Пустая()  Тогда 
			 СерияНоменклатуры=НайтиСоздатьСериюНоменклатуры(СтруктураПараметровСерии);
		 ИначеЕсли СерияНоменклатуры=ПустаяСерия или ЭтоВозврат Тогда	
				 Если ВыборкаДетальныеЗаписи.СправкаА.Пустая() Тогда 
					 ВызватьИсключение "Исключительная ошибка справки А";
				 КонецЕсли;
				 СтруктураПараметровСерии.Вставить("СправкиАиБ",новый Структура("СправкаА,СправкаБ",
				 ВыборкаДетальныеЗаписи.СправкаА,ВыборкаДетальныеЗаписи.СправкаБ));
				 СправкаА=ВыборкаДетальныеЗаписи.СправкаА;
				 СерияНоменклатуры=НайтиСоздатьСериюНоменклатуры(СтруктураПараметровСерии);
		 КонецЕсли;
		 МассивСтрок=Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",ВыборкаДетальныеЗаписи.ИдентификаторСтроки));
		 Для Каждого СтрТабЧасти из МассивСтрок цикл
			 СтрТабЧасти.СерияНоменклатуры=СерияНоменклатуры;  
			 Если СправкаА<>Неопределено Тогда 
				 СтрТабЧасти.СправкаА=СправкаА;
			КонецЕсли;	 
		  КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьСтарыеСерииМарок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSПриемкаТовары.СправкаБ КАК СправкаБ
		|ПОМЕСТИТЬ ВтСправкиБ
		|ИЗ
		|	Документ.итWMSПриемка.Товары КАК итWMSПриемкаТовары
		|ГДЕ
		|	итWMSПриемкаТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSПриемкаТовары.СправкаБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSПриемкаДокументыПомарочногоУчета.Документ КАК Документ
		|ПОМЕСТИТЬ ВтПомарочныеДокументы
		|ИЗ
		|	Документ.итWMSПриемка.ДокументыПомарочногоУчета КАК итWMSПриемкаДокументыПомарочногоУчета
		|ГДЕ
		|	итWMSПриемкаДокументыПомарочногоУчета.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSПриемкаДокументыПомарочногоУчета.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеМарокЕГАИСМарки.СправкаБ КАК СправкаБ,
		|	ДанныеМарокЕГАИСМарки.СправкаА КАК СправкаА,
		|	МАКСИМУМ(ДанныеМарокЕГАИСМарки.Марка) КАК Марка
		|ПОМЕСТИТЬ ВтМаркиСправкиБ
		|ИЗ
		|	ВтПомарочныеДокументы КАК ВтПомарочныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДанныеМарокЕГАИС.Марки КАК ДанныеМарокЕГАИСМарки
		|		ПО ВтПомарочныеДокументы.Документ = ДанныеМарокЕГАИСМарки.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеМарокЕГАИСМарки.СправкаБ,
		|	ДанныеМарокЕГАИСМарки.СправкаА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	алкХранилищеАкцизныхМарок.Марка КАК Марка,
		|	МАКСИМУМ(алкХранилищеАкцизныхМарок.Период) КАК Период,
		|	ВтМаркиСправкиБ.СправкаБ КАК СправкаБ
		|ПОМЕСТИТЬ ДатаПоследнегоДвиженияМарки
		|ИЗ
		|	ВтМаркиСправкиБ КАК ВтМаркиСправкиБ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок КАК алкХранилищеАкцизныхМарок
		|		ПО ВтМаркиСправкиБ.Марка = алкХранилищеАкцизныхМарок.Марка
		|			И ВтМаркиСправкиБ.СправкаБ <> алкХранилищеАкцизныхМарок.СправкаБ
		|
		|СГРУППИРОВАТЬ ПО
		|	алкХранилищеАкцизныхМарок.Марка,
		|	ВтМаркиСправкиБ.СправкаБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Марка КАК Марка,
		|	ВложенныйЗапрос.СправкаБ КАК СправкаБ,
		|	алкХранилищеАкцизныхМарок.СправкаБ КАК СтараяСправкаБ
		|ПОМЕСТИТЬ СрезПоследнейСправкиБ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДатаПоследнегоДвиженияМарки.Марка КАК Марка,
		|		ДатаПоследнегоДвиженияМарки.Период КАК Период,
		|		ДатаПоследнегоДвиженияМарки.СправкаБ КАК СправкаБ,
		|		МАКСИМУМ(алкХранилищеАкцизныхМарок.Регистратор) КАК Регистратор
		|	ИЗ
		|		ДатаПоследнегоДвиженияМарки КАК ДатаПоследнегоДвиженияМарки
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок КАК алкХранилищеАкцизныхМарок
		|			ПО ДатаПоследнегоДвиженияМарки.Марка = алкХранилищеАкцизныхМарок.Марка
		|				И ДатаПоследнегоДвиженияМарки.Период = алкХранилищеАкцизныхМарок.Период
		|				И ДатаПоследнегоДвиженияМарки.СправкаБ <> алкХранилищеАкцизныхМарок.СправкаБ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДатаПоследнегоДвиженияМарки.Марка,
		|		ДатаПоследнегоДвиженияМарки.Период,
		|		ДатаПоследнегоДвиженияМарки.СправкаБ) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок КАК алкХранилищеАкцизныхМарок
		|		ПО ВложенныйЗапрос.Марка = алкХранилищеАкцизныхМарок.Марка
		|			И ВложенныйЗапрос.Регистратор = алкХранилищеАкцизныхМарок.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СрезПоследнейСправкиБ.СправкаБ КАК СправкаБ,
		|	СрезПоследнейСправкиБ.СтараяСправкаБ КАК СтараяСправкаБ,
		|	СрезПоследнейСправкиБ.Марка КАК Марка,
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры) КАК СерияНоменклатуры
		|ИЗ
		|	СрезПоследнейСправкиБ КАК СрезПоследнейСправкиБ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
		|		ПО СрезПоследнейСправкиБ.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
		|
		|СГРУППИРОВАТЬ ПО
		|	СрезПоследнейСправкиБ.СправкаБ,
		|	СрезПоследнейСправкиБ.СтараяСправкаБ,
		|	СрезПоследнейСправкиБ.Марка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СтрокиТЧ=Товары.НайтиСтроки(новый Структура("СправкаБ",ВыборкаДетальныеЗаписи.СправкаБ));
	Для Каждого стр из СтрокиТЧ Цикл  
		стр.СтараяСерияНоменклатуры=ВыборкаДетальныеЗаписи.СерияНоменклатуры;
	КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСоотвСерийВозврата()

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	итWMSПриемкаДокументыПомарочногоУчета.Документ
		|ПОМЕСТИТЬ ВтДокументыМарок
		|ИЗ
		|	Документ.итWMSПриемка.ДокументыПомарочногоУчета КАК итWMSПриемкаДокументыПомарочногоУчета
		|ГДЕ
		|	итWMSПриемкаДокументыПомарочногоУчета.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеМарокЕГАИСМарки.АлкогольнаяПродукция,
		|	ДанныеМарокЕГАИСМарки.СправкаБ,
		|	МАКСИМУМ(ДанныеМарокЕГАИСМарки.Марка) КАК Марка,
		|	ДанныеМарокЕГАИСМарки.СправкаА
		|ПОМЕСТИТЬ ДанныеМарки
		|ИЗ
		|	ВтДокументыМарок КАК ВтДокументыМарок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДанныеМарокЕГАИС.Марки КАК ДанныеМарокЕГАИСМарки
		|		ПО ВтДокументыМарок.Документ = ДанныеМарокЕГАИСМарки.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ДанныеМарокЕГАИСМарки.АлкогольнаяПродукция,
		|	ДанныеМарокЕГАИСМарки.СправкаБ,
		|	ДанныеМарокЕГАИСМарки.СправкаА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеМарки.АлкогольнаяПродукция,
		|	ДанныеМарки.СправкаБ,
		|	ДанныеМарки.Марка,
		|	ДанныеМарки.СправкаА,
		|	алкХранилищеАкцизныхМарокСрезПервых.СправкаБ КАК СтараяСправкаБ
		|ПОМЕСТИТЬ МаркаСтараяСправкаБ
		|ИЗ
		|	ДанныеМарки КАК ДанныеМарки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПервых КАК алкХранилищеАкцизныхМарокСрезПервых
		|		ПО ДанныеМарки.Марка = алкХранилищеАкцизныхМарокСрезПервых.Марка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаркаСтараяСправкаБ.АлкогольнаяПродукция,
		|	МаркаСтараяСправкаБ.СправкаБ,
		|	МаркаСтараяСправкаБ.Марка,
		|	МаркаСтараяСправкаБ.СправкаА,
		|	МаркаСтараяСправкаБ.СтараяСправкаБ,
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры) КАК СерияНоменклатуры
		|ИЗ
		|	МаркаСтараяСправкаБ КАК МаркаСтараяСправкаБ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
		|		ПО МаркаСтараяСправкаБ.СтараяСправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
		|СГРУППИРОВАТЬ ПО
		|	МаркаСтараяСправкаБ.АлкогольнаяПродукция,
		|	МаркаСтараяСправкаБ.СправкаБ,
		|	МаркаСтараяСправкаБ.Марка,
		|	МаркаСтараяСправкаБ.СправкаА,
		|	МаркаСтараяСправкаБ.СтараяСправкаБ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей=РегистрыСведений.алкСоответствияСправокАиБЕГАИСИСерий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СправкаБ.Установить(ВыборкаДетальныеЗаписи.СправкаБ);
		НаборЗаписей.Отбор.СправкаА.Установить(ВыборкаДетальныеЗаписи.СправкаА);
		НаборЗаписей.Отбор.СерияНоменклатуры.Установить(ВыборкаДетальныеЗаписи.СерияНоменклатуры);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.СправкаА=ВыборкаДетальныеЗаписи.СправкаА;
		НоваяЗапись.СправкаБ=ВыборкаДетальныеЗаписи.СправкаБ;
		НоваяЗапись.СерияНоменклатуры=ВыборкаДетальныеЗаписи.СерияНоменклатуры;
		НаборЗаписей.Записать();
	КонецЦикла;
	

КонецПроцедуры



Функция НайтиСоздатьСериюНоменклатуры(СтруктураПараметровСерии)
	
    СправкаБ=Неопределено;
	СправкаА=Неопределено;
	Если СтруктураПараметровСерии.Свойство("СправкиАиБ")  Тогда
		СправкаБ=СтруктураПараметровСерии.СправкиАиБ.СправкаБ;
		СправкаА=СтруктураПараметровСерии.СправкиАиБ.СправкаА;
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СерииНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.ДатаПроизводства = &ДатаНачалаРозлива
		|	И ПОДСТРОКА(СерииНоменклатуры.СерийныйНомер, 1, 100) = ПОДСТРОКА(&СерийныйНомер, 1, 100)
		|	И СерииНоменклатуры.Владелец = &Номенклатура
		|	И ВЫБОР
		|			КОГДА &ИскатьПоНаименование
		|				ТОГДА ПОДСТРОКА(СерииНоменклатуры.Наименование, 1, 150) = ПОДСТРОКА(&Наименование, 1, 150)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДатаНачалаРозлива", СтруктураПараметровСерии.ДатаРозлива);
	Запрос.УстановитьПараметр("СерийныйНомер", Строка(Формат(СтруктураПараметровСерии.ДатаВходящего,"ДФ=dd.MM.yyyy"))+";"+Строка(СтруктураПараметровСерии.НомерВходящего));
    Запрос.УстановитьПараметр("Номенклатура",СтруктураПараметровСерии.Номенклатура);
	Если СправкаБ=Неопределено тогда
		Запрос.УстановитьПараметр("ИскатьПоНаименование",Ложь);
		Запрос.УстановитьПараметр("Наименование","");
	иначе
		Запрос.УстановитьПараметр("ИскатьПоНаименование",Истина);
		Запрос.УстановитьПараметр("Наименование",Формат(СтруктураПараметровСерии.ДатаРозлива,"ДФ=dd.MM.yyyy")+?(СправкаБ=Неопределено,"","; "+Строка(СправкаБ)));
    КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		ЗаполнитьСоотвАиБ(ВыборкаДетальныеЗаписи.Ссылка, СправкаА, СправкаБ);
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЕсли;
	НоваяСерия=Справочники.СерииНоменклатуры.СоздатьЭлемент();
	НоваяСерия.Владелец=СтруктураПараметровСерии.Номенклатура;
	НоваяСерия.ДатаПроизводства=СтруктураПараметровСерии.ДатаРозлива;
	НоваяСерия.СерийныйНомер= Строка(Формат(СтруктураПараметровСерии.ДатаВходящего,"ДФ=dd.MM.yyyy"))+";"+Строка(СтруктураПараметровСерии.НомерВходящего);
	НоваяСерия.Производитель=СтруктураПараметровСерии.Номенклатура.Производитель;
	НоваяСерия.СтранаПроисхождения=СтруктураПараметровСерии.Номенклатура.СтранаПроисхождения;
	НоваяСерия.СрокГодности=РассчитатьСрокГодности(НоваяСерия.ДатаПроизводства,СтруктураПараметровСерии.Номенклатура);
	НоваяСерия.Наименование=Формат(СтруктураПараметровСерии.ДатаРозлива,"ДФ=dd.MM.yyyy")+?(СправкаБ=Неопределено,"","; "+Строка(СправкаБ));
	НоваяСерия.Записать();
	ЗаполнитьСоотвАиБ(НоваяСерия.Ссылка, СправкаА, СправкаБ);

	Возврат НоваяСерия.Ссылка;
	

КонецФункции


// Описание
// 
// Параметры:
// 	ДатаПроизводства - Дата - Описание
// 	КарточкаНМ - СправочникСсылка.Номенклатура - Описание
// Возвращаемое значение:
//  Дата - дата окончания срока годности
// 	
Функция РассчитатьСрокГодности(ДатаПроизводства,КарточкаНМ)
	СрокГодности='00010101';
	Если КарточкаНМ.СрокГодности=0 и КарточкаНМ.ЕдиницаИзмеренияСрокаГодности.Пустая() Тогда 
		Возврат СрокГодности;
	КонецЕсли;	
	Если КарточкаНМ.ЕдиницаИзмеренияСрокаГодности=Перечисления.ЕдиницыИзмеренияВремени.Месяц или КарточкаНМ.ЕдиницаИзмеренияСрокаГодности.Пустая() Тогда
	СрокГодности=ДобавитьМесяц(ДатаПроизводства,КарточкаНМ.СрокГодности);
	КонецЕсли;
	Возврат СрокГодности;
КонецФункции

Процедура ЗаполнитьСоотвАиБ(Знач Серия, СправкаА, СправкаБ)
		
		Перем НаборЗаписейСоответствие, СтрокаСоответствий;
		
		Если СправкаА<>Неопределено и СправкаБ<> Неопределено Тогда 
			НаборЗаписейСоответствие=РегистрыСведений.алкСоответствияСправокАиБЕГАИСИСерий.СоздатьНаборЗаписей();
			НаборЗаписейСоответствие.Отбор.СправкаА.Установить(СправкаА);
			НаборЗаписейСоответствие.Отбор.СправкаБ.Установить(СправкаБ);
			НаборЗаписейСоответствие.Отбор.СерияНоменклатуры.Установить(Серия);
			НаборЗаписейСоответствие.Прочитать();
			НаборЗаписейСоответствие.Очистить();
			СтрокаСоответствий=НаборЗаписейСоответствие.Добавить();
			СтрокаСоответствий.СправкаА=СправкаА;
			СтрокаСоответствий.СправкаБ=СправкаБ;
			СтрокаСоответствий.СерияНоменклатуры= Серия;
			НаборЗаписейСоответствие.Записать();
		КонецЕсли;

КонецПроцедуры
	

	

#КонецОбласти




#Область ОбязательныеПроцедурыИФункции

Процедура ДействияПриОтказеОтИсполненияДокумента()Экспорт 
	ЭтотОбъект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
	СнимокТовары=СнимокТабличнойЧастиДоРаспределения.Получить();
	Если ТипЗнч(СнимокТовары)=тип("ТаблицаЗначений") тогда
		Товары.Очистить();
		Товары.Загрузить(СнимокТовары);
	КонецЕсли;	
КонецПроцедуры

Процедура ДействияПриФиксацииЗадачДокумента() Экспорт 
	ОпределитьСтатусВыполненногоДокумента();
	УстановитьСерииНоменклатуры();
	ДатаЗавершенияДокумента=ТекущаяДата();
КонецПроцедуры



#КонецОбласти
