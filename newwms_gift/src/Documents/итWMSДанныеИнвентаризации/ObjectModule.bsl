Перем ИгнорироватьОтказПриПроверках Экспорт ;

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	итWMSСлужебныеПроцедурыИФункции.УстановитьРежимПроведенияЗавершенногоДокумента(СтатусДокумента,РежимПроведения);
	Если Проведен и РежимЗаписи=РежимЗаписиДокумента.Запись тогда
		Если  не ОбменДанными.Загрузка Тогда 
		РежимЗаписи=РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	КонецЕсли;	
	//Если  РежимЗаписи=РежимЗаписиДокумента.Проведение тогда
	//	ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения);
	//КонецЕсли;	
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение тогда
		ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;
	Если ЭтотОбъект.Проведен и РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения тогда
		ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;	
	Если ОбменДанными.Загрузка Тогда 
		Отказ=Ложь;
	КонецЕсли;	
КонецПроцедуры

Процедура ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения)
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан тогда
		Отказ=Истина;
		Сообщить("Не возможно провести документ без заполненных данных Инвентаризации");
	КонецЕсли;
	Если ТипЗнч(итОснование) = Тип("ДокументСсылка.итWMSЗадачиИнвентаризации") Тогда 
	ПроверитьНаНесколькоДокументовПо1Основанию(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьНаНесколькоДокументовПо1Основанию(Отказ, РежимЗаписи, РежимПроведения)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSДанныеИнвентаризации.Ссылка
		|ИЗ
		|	Документ.итWMSДанныеИнвентаризации КАК итWMSДанныеИнвентаризации
		|ГДЕ
		|	итWMSДанныеИнвентаризации.Ссылка <> &Ссылка
		|	И итWMSДанныеИнвентаризации.итОснование = &итОснование
		|	И итWMSДанныеИнвентаризации.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("итОснование", итОснование);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Сообщить("У задачи уже имеется  не помеченный на удаление документ Данные инвентаризации ");
		Отказ =Истина;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	КонецПроцедуры

Процедура ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения)
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен тогда
		Отказ=Истина;
		Сообщить("Завршенный документ распровести невозможно, переведите его в статус зарезервирован");
		Возврат
	КонецЕсли;	
	
	СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;		
	БлокировкаДанных=новый БлокировкаДанных;
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSДанныеИнвентаризации");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОбработки",Ссылка);
	БлокировкаДанных.Заблокировать();
	
	НаборЗаписей=РегистрыСведений.итWMSДанныеИнвентаризации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОбработки.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	для Каждого Строка из НаборЗаписей цикл
		НаборЗаписей2=РегистрыСведений.итWMSДанныеИнвентаризации.СоздатьНаборЗаписей();
		//НаборЗаписей2.Отбор.ДокументОбработки.Установить(Ссылка);
		НаборЗаписей2.Отбор.ДатаИнвентаризации.Установить(Строка.ДатаИнвентаризации);
		НаборЗаписей2.Отбор.Ячейка.Установить(Строка.Ячейка);
		НаборЗаписей2.Отбор.ИдСтроки.Установить(Строка.ИдСтроки);
		НаборЗаписей2.Прочитать();
		для Каждого Стр из НаборЗаписей2 Цикл 	
			стр.ДокументОбработки=Документы.итWMSДанныеИнвентаризации.ПустаяСсылка();
		КонецЦикла;
		НаборЗаписей2.Записать();
	КонецЦикла;
	
	
	
	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УстановитьБлокировкиДанныхИОчиститьРегистры();	
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен тогда	
		СнятиеБлокировокСоВсехЯчеекИнвентаризации();
		НаборЗаписейИтТоварыВЯчейках=РегистрыНакопления.итТоварыВЯчейках.СоздатьНаборЗаписей();
		НаборЗаписейИтТоварыВЯчейках.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаписейИтТоварыВЯчейках.Прочитать();
		
		для Каждого стр из Товары цикл
			ДвижениеитТоварыВЯчейках(Отказ, РежимПроведения,стр,НаборЗаписейИтТоварыВЯчейках);
		КонецЦикла;
		НаборЗаписейИтТоварыВЯчейках.Записать();
	КонецЕсли;	
КонецПроцедуры

Процедура СнятиеБлокировокСоВсехЯчеекИнвентаризации()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSДанныеИнвентаризацииТовары.Ячейка
	|ПОМЕСТИТЬ ЯчейкиДокумента
	|ИЗ
	|	Документ.итWMSДанныеИнвентаризации.Товары КАК итWMSДанныеИнвентаризацииТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSДанныеИнвентаризацииТовары.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЯчейкиДокумента.Ячейка
	|ИЗ
	|	ЯчейкиДокумента КАК ЯчейкиДокумента
	|ГДЕ
	|	ЯчейкиДокумента.Ячейка.ДатаСнятияБлокировкиИнвентаризации > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектЯчейки=ВыборкаДетальныеЗаписи.Ячейка.ПолучитьОбъект();
		ОбъектЯчейки.Заблокирована=Ложь;
		ОбъектЯчейки.ДатаСнятияБлокировкиИнвентаризации='00010101';
		ОбъектЯчейки.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
Процедура ДвижениеитТоварыВЯчейках(Отказ, РежимПроведения,СтрокаДанных,НаборЗаписейИтТоварыВЯчейках)
	Если СтрокаДанных.КоличествоПлан=СтрокаДанных.КоличествоФакт тогда
		Возврат
	КонецЕсли;
	Если СтрокаДанных.КоличествоПлан<>0 тогда
		НоваяЗаписьРасход=НаборЗаписейИтТоварыВЯчейках.Добавить();
		НоваяЗаписьРасход.ВидДвижения=ВидДвиженияНакопления.Расход;
		НоваяЗаписьРасход.Ячейка=СтрокаДанных.Ячейка;
		НоваяЗаписьРасход.ИдентификаторУпаковки=СтрокаДанных.ИдентификаторУпаковки;
		НоваяЗаписьРасход.Номенклатура=СтрокаДанных.Номенклатура;
		НоваяЗаписьРасход.Период=СтрокаДанных.ДатаИнвентаризации;
		НоваяЗаписьРасход.ДатаРозлива=СтрокаДанных.ДатаРозлива;
		НоваяЗаписьРасход.Склад=СтрокаДанных.Склад;
		НоваяЗаписьРасход.Организация=СтрокаДанных.Организация;
		НоваяЗаписьРасход.СерияНоменклатуры=СтрокаДанных.СерияНоменклатуры;
		НоваяЗаписьРасход.Качество=СтрокаДанных.Качество;
		НоваяЗаписьРасход.Количество=СтрокаДанных.КоличествоПлан;
	КонецЕсли;
	Если СтрокаДанных.КоличествоФакт<>0 тогда
		НоваяЗаписьПриход=НаборЗаписейИтТоварыВЯчейках.Добавить();
		НоваяЗаписьПриход.ВидДвижения=ВидДвиженияНакопления.Приход;
		НоваяЗаписьПриход.Ячейка=СтрокаДанных.Ячейка;
		НоваяЗаписьПриход.ИдентификаторУпаковки=СтрокаДанных.ИдентификаторУпаковки;
		НоваяЗаписьПриход.Организация=СтрокаДанных.Организация;
		НоваяЗаписьПриход.Номенклатура=СтрокаДанных.Номенклатура;
		НоваяЗаписьПриход.ДатаРозлива=СтрокаДанных.ДатаРозлива;
		НоваяЗаписьПриход.Период=СтрокаДанных.ДатаИнвентаризации;
		НоваяЗаписьПриход.Склад=СтрокаДанных.Склад;
		НоваяЗаписьПриход.СерияНоменклатуры=СтрокаДанных.СерияНоменклатуры;
		НоваяЗаписьПриход.Качество=СтрокаДанных.Качество;
		НоваяЗаписьПриход.Количество=СтрокаДанных.КоличествоФакт;
	КонецЕсли;
	
КонецПроцедуры


Процедура УстановитьБлокировкиДанныхИОчиститьРегистры()
	
БлокировкаДанных = новый БлокировкаДанных;
		
#Область БлокировкаитТоварыВЯчейках	
	СтруктураПараметров=итWMSСлужебныеПроцедурыИФункции.СоздатьСтруктуруПараметровБлокировкиДанных(Товары,БлокировкаДанных);
	СтруктураПараметров.ПолеПространствоБлокировок="Номенклатура,Ячейка,ИдентификаторУпаковки";
	СтруктураПараметров.ПолеИсточника="Номенклатура,Ячейка,ИдентификаторУпаковки";
	СтруктураПараметров.ПространствоБлокировки="РегистрНакопления.итТоварыВЯчейках";
	итWMSСлужебныеПроцедурыИФункции.УстановкаЭлементаБлокировокДанныхWMS(СтруктураПараметров);	
#КонецОбласти


БлокировкаДанных.Заблокировать();
	
	
	НаборЗаписей=РегистрыНакопления.итТоварыВЯчейках.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	
	
	
КонецПроцедуры

#Область СборДанныхИнвентаризации

Процедура ЗаполнитьДаннымиИнвентаризацииНаСервереМодуль(МассивЯчеек=Неопределено)Экспорт 
	МенеджерВТ=новый МенеджерВременныхТаблиц;
	ДатаНачала = Неопределено;
	ДатаОкончания=Неопределено;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	ЧтениеБлокировкаИФиксацияДанных(МенеджерВТ,ДатаНачала,ДатаОкончания,МассивЯчеек);
	
	Если ДатаНачала=Неопределено   или ДатаОкончания=Неопределено тогда
		Сообщить("не данных по Инвентаризации");
		Возврат
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВтБлокированныхДанных.Ячейка КАК Ячейка,
	|	МАКСИМУМ(ВтБлокированныхДанных.ДатаИнвентаризации) КАК ДатаИнвентаризации
	|ПОМЕСТИТЬ ДанныеДатИЯчеекДляДвижений
	|ИЗ
	|	ВтБлокированныхДанных КАК ВтБлокированныхДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтБлокированныхДанных.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляДвижений.Ячейка КАК Ячейка,
	|	ДанныеДляДвижений.ДатаИнвентаризации КАК ДатаИнвентаризации,
	|	итWMSДанныеИнвентаризации.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итWMSДанныеИнвентаризации.Номенклатура КАК Номенклатура,
	|	итWMSДанныеИнвентаризации.ДатаРозлива КАК ДатаРозлива,
	|	СУММА(итWMSДанныеИнвентаризации.Количество) КАК Количество,
	|	МАКСИМУМ(итWMSДанныеИнвентаризации.ПустаяЯчейка) КАК ПустаяЯчейка
	|ПОМЕСТИТЬ ДанныеИнвентаризации
	|ИЗ
	|	ДанныеДатИЯчеекДляДвижений КАК ДанныеДляДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSДанныеИнвентаризации КАК итWMSДанныеИнвентаризации
	|		ПО ДанныеДляДвижений.Ячейка = итWMSДанныеИнвентаризации.Ячейка
	|			И ДанныеДляДвижений.ДатаИнвентаризации = итWMSДанныеИнвентаризации.ДатаИнвентаризации
	|			И (итWMSДанныеИнвентаризации.ДокументОбработки = &Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляДвижений.Ячейка,
	|	ДанныеДляДвижений.ДатаИнвентаризации,
	|	итWMSДанныеИнвентаризации.ИдентификаторУпаковки,
	|	итWMSДанныеИнвентаризации.Номенклатура,
	|	итWMSДанныеИнвентаризации.ДатаРозлива
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеИнвентаризации.Ячейка КАК Ячейка,
	|	ДанныеИнвентаризации.ДатаИнвентаризации КАК ДатаИнвентаризации,
	|	ДанныеИнвентаризации.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ДанныеИнвентаризации.Номенклатура КАК Номенклатура,
	|	ДанныеИнвентаризации.ДатаРозлива КАК ДатаРозлива,
	|	ДанныеИнвентаризации.Количество КАК Количество,
	|	ДанныеИнвентаризации.ПустаяЯчейка КАК ПустаяЯчейка
	|ИЗ
	|	ДанныеИнвентаризации КАК ДанныеИнвентаризации
	|ИТОГИ
	|	МАКСИМУМ(ДатаИнвентаризации),
	|	МАКСИМУМ(ПустаяЯчейка)
	|ПО
	|	Ячейка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	//Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	//Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
	Результат = Запрос.Выполнить();
	РезультатЗапросаИнвентаризации=Результат;
	НачатьЗаписьДанныхВТаблицуТовары(РезультатЗапросаИнвентаризации);
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура НачатьЗаписьДанныхВТаблицуТовары(РезультатЗапросаИнвентаризации)
	ВыборкаДанныхИнвентаризацииЯчейка = РезультатЗапросаИнвентаризации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Товары.Очистить();
	Пока ВыборкаДанныхИнвентаризацииЯчейка.Следующий() цикл
		Если ВыборкаДанныхИнвентаризацииЯчейка.ПустаяЯчейка Тогда
			ЗаполнитьДанныеПустойЯчейки(ВыборкаДанныхИнвентаризацииЯчейка);
		Иначе
		ТаблицаДанныхОстатков=ИнформацияПоЯчейке(ВыборкаДанныхИнвентаризацииЯчейка.Ячейка,ВыборкаДанныхИнвентаризацииЯчейка.ДатаИнвентаризации);
		ВыборкаДанныхИнвентаризацииДетально=ВыборкаДанныхИнвентаризацииЯчейка.Выбрать();
		Пока ВыборкаДанныхИнвентаризацииДетально.Следующий() цикл
		Если ЗаполнитьТоварыПриПолномНеСвопадении(ТаблицаДанныхОстатков,ВыборкаДанныхИнвентаризацииДетально) Тогда 
				Продолжить;
			КонецЕсли;
			Если ДанныеСходятсяПоРазрезуSSCCСерияСкладНоРазноеКоличество(ТаблицаДанныхОстатков,ВыборкаДанныхИнвентаризацииДетально) тогда
				Продолжить;
			КонецЕсли;
			Если ЗаполнитьТоварыПриЧастичномСоответсвии(ТаблицаДанныхОстатков,ВыборкаДанныхИнвентаризацииДетально) тогда
				Продолжить;
			КонецЕсли;	
			Если МногоДанныхНоКоличественноБъётсяВРазрезеSSCC(ТаблицаДанныхОстатков,ВыборкаДанныхИнвентаризацииДетально) тогда
				Продолжить;
			КонецЕсли;
			Если ДанныеРазбитыПоСкладамНоПринадлежатОднойСерии(ТаблицаДанныхОстатков,ВыборкаДанныхИнвентаризацииДетально) тогда
				Продолжить;
			КонецЕсли;
			ПроставитьФактИнвентаризацииБезСерииИСклада(ВыборкаДанныхИнвентаризацииДетально);	
		КонецЦикла;
		СписатьОставшийсяОстатокПоЯчейки(ВыборкаДанныхИнвентаризацииЯчейка,ТаблицаДанныхОстатков);	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьДанныеПустойЯчейки(Выборка)
	ТаблицаОстатковЯчейки=ИнформацияПоЯчейке(Выборка.Ячейка,Выборка.ДатаИнвентаризации);
	Для Каждого стр Из ТаблицаОстатковЯчейки Цикл
		НоваяСтрока=Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, стр);
		НоваяСтрока.ДатаИнвентаризации=Выборка.ДатаИнвентаризации;
		НоваяСтрока.КоличествоПлан=стр.КоличествоОстаток;
		НоваяСтрока.КоличествоФакт=0;
	КонецЦикла;
КонецПроцедуры

Функция ИнформацияПоЯчейке(Ячейка,ДатаОстатков)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	итТоварыВЯчейкахОстатки.Организация,
		|	итТоварыВЯчейкахОстатки.Склад,
		|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки,
		|	итТоварыВЯчейкахОстатки.Ячейка,
		|	итТоварыВЯчейкахОстатки.Номенклатура,
		|	итТоварыВЯчейкахОстатки.Характеристика,
		|	итТоварыВЯчейкахОстатки.СерияНоменклатуры,
		|	итТоварыВЯчейкахОстатки.ДатаРозлива,
		|	итТоварыВЯчейкахОстатки.Качество,
		|	итТоварыВЯчейкахОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.итТоварыВЯчейках.Остатки(&Период, Ячейка = &Ячейка) КАК итТоварыВЯчейкахОстатки
		|ГДЕ
		|	итТоварыВЯчейкахОстатки.КоличествоОстаток <> 0";
	
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	Запрос.УстановитьПараметр("Период", ДатаОстатков);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
КонецФункции

Процедура СписатьОставшийсяОстатокПоЯчейки(ВыборкаДанныхИнвентаризацииЯчейка,ТаблицаДанныхОстатков)
	МассивСтрок=ТаблицаДанныхОстатков.НайтиСтроки(новый Структура("Ячейка",ВыборкаДанныхИнвентаризацииЯчейка.Ячейка));
	для Каждого стр из МассивСтрок цикл
		НоваяСтрока=Товары.Добавить();
		НоваяСтрока.ДатаИнвентаризации=ВыборкаДанныхИнвентаризацииЯчейка.ДатаИнвентаризации;
		НоваяСтрока.Ячейка=стр.Ячейка;
		НоваяСтрока.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
		НоваяСтрока.Номенклатура=стр.Номенклатура;
		НоваяСтрока.ДатаРозлива=стр.ДатаРозлива;
		НоваяСтрока.СерияНоменклатуры=стр.СерияНоменклатуры;
		НоваяСтрока.Склад=стр.Склад;
		НоваяСтрока.Качество=стр.Качество;
		НоваяСтрока.КоличествоПлан=стр.КоличествоОстаток;
		НоваяСтрока.КоличествоФакт=0;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПроставитьФактИнвентаризацииБезСерииИСклада(ВыборкаДанныхИнвентаризацииДетально)
	НоваяСтрока=Товары.Добавить();
	НоваяСтрока.ДатаИнвентаризации=ВыборкаДанныхИнвентаризацииДетально.ДатаИнвентаризации;
	НоваяСтрока.Ячейка=ВыборкаДанныхИнвентаризацииДетально.Ячейка;
	НоваяСтрока.ИдентификаторУпаковки=ВыборкаДанныхИнвентаризацииДетально.ИдентификаторУпаковки;
	НоваяСтрока.Номенклатура=ВыборкаДанныхИнвентаризацииДетально.Номенклатура;
	НоваяСтрока.ДатаРозлива=ВыборкаДанныхИнвентаризацииДетально.ДатаРозлива;
	//НоваяСтрока.СерияНоменклатуры=МассивСтрок[0].СерияНоменклатуры;
	//НоваяСтрока.Склад=МассивСтрок[0].Склад;
	НоваяСтрока.КоличествоПлан=0;
	НоваяСтрока.КоличествоФакт=ВыборкаДанныхИнвентаризацииДетально.Количество;
КонецПроцедуры

Функция ДанныеСходятсяПоРазрезуSSCCСерияСкладНоРазноеКоличество(ТаблицаДанныхОстатков,ВыборкаДанныхИнвентаризацииДетально)
	МассивСтрок=ТаблицаДанныхОстатков.НайтиСтроки(новый Структура("ИдентификаторУпаковки,Ячейка,Номенклатура,ДатаРозлива",ВыборкаДанныхИнвентаризацииДетально.ИдентификаторУпаковки,ВыборкаДанныхИнвентаризацииДетально.Ячейка,ВыборкаДанныхИнвентаризацииДетально.Номенклатура,ВыборкаДанныхИнвентаризацииДетально.ДатаРозлива));
	Если МассивСтрок.Количество()=1 Тогда
		для Каждого Строка из МассивСтрок цикл
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ДатаИнвентаризации=ВыборкаДанныхИнвентаризацииДетально.ДатаИнвентаризации;
			НоваяСтрока.Ячейка=Строка.Ячейка;
			НоваяСтрока.ИдентификаторУпаковки=Строка.ИдентификаторУпаковки;
			НоваяСтрока.Номенклатура=Строка.Номенклатура;
			НоваяСтрока.ДатаРозлива=Строка.ДатаРозлива;
			НоваяСтрока.СерияНоменклатуры=Строка.СерияНоменклатуры;
			НоваяСтрока.Склад=Строка.Склад;
			НоваяСтрока.Качество=Строка.Качество;
			НоваяСтрока.Организация=Строка.Организация;
			НоваяСтрока.КоличествоПлан=Строка.КоличествоОстаток;
			НоваяСтрока.КоличествоФакт=ВыборкаДанныхИнвентаризацииДетально.Количество;
			ТаблицаДанныхОстатков.Удалить(Строка);
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	//КонецЕсли;
	Возврат Ложь;	
КонецФункции

Функция ДанныеРазбитыПоСкладамНоПринадлежатОднойСерии(ТаблицаДанныхОстатков,ВыборкаДанныхИнвентаризацииДетально)
	
	МассивСтрок=ТаблицаДанныхОстатков.НайтиСтроки(новый Структура("ИдентификаторУпаковки,Ячейка,Номенклатура,ДатаРозлива",ВыборкаДанныхИнвентаризацииДетально.ИдентификаторУпаковки,ВыборкаДанныхИнвентаризацииДетально.Ячейка,ВыборкаДанныхИнвентаризацииДетально.Номенклатура,ВыборкаДанныхИнвентаризацииДетально.ДатаРозлива));
	Если МассивСтрок.Количество()>1 Тогда
		ОбщееКоличество=0;
		МассивСерий=новый Массив;
		МассивКачество=новый Массив;
		МассивСкладов = новый Массив;
		МассивОрганизаций=новый Массив();
		МассивДанныхПоСкладам=новый Массив;	
		для Каждого стр из МассивСтрок цикл
			
			ОбщееКоличество=ОбщееКоличество+ стр.КоличествоОстаток;
			// формирую данные по количеству вирутальных складов и серий в ячейке
			Если  МассивСерий.Найти(стр.СерияНоменклатуры)= Неопределено тогда
				МассивСерий.Добавить(стр.СерияНоменклатуры);
			КонецЕсли;
			Если МассивСкладов.Найти(стр.Склад)= Неопределено тогда
				МассивСкладов.Добавить(стр.Склад);
			КонецЕсли;
			Если МассивКачество.Найти(стр.Качество)= Неопределено тогда
				МассивКачество.Добавить(стр.Качество);
			КонецЕсли;
			Если МассивКачество.Найти(стр.Организация)= Неопределено тогда
				МассивОрганизаций.Добавить(стр.Организация);
			КонецЕсли;
			
			
			//// формирую данные по кличеству номенклатуры на каждом складе
			МассивИндексов=НайтиДанныеВСтруктурированномМассиве(стр.Склад,МассивДанныхПоСкладам);
			Если МассивИндексов=Неопределено тогда
				МассивДанныхПоСкладам.Добавить(новый Структура("Склад,Количество",стр.Склад,стр.КоличествоОстаток));
			иначе
				для Каждого ИдексаМассива из МассивИндексов цикл
					МассивДанныхПоСкладам[ИдексаМассива].Количество=МассивДанныхПоСкладам[ИдексаМассива].Количество+стр.КоличествоОстаток;
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		/// если серий в ячейке больше 1 , тогда послать все нафиг. 
		Если МассивСерий.Количество()>1  тогда
			Возврат Ложь;
		КонецЕсли;
		/// если качества в ячейке больше 1 , тогда послать все нафиг. 
		Если МассивКачество.Количество()>1 тогда
			Возврат Ложь;
		КонецЕсли;	
		/// если организаций в ячейке больше 1 , тогда послать все нафиг. 
		Если МассивОрганизаций.Количество()>1 тогда
			Возврат Ложь;
		КонецЕсли;	
		//Если ОбщееКоличество=ВыборкаДанныхИнвентаризацииДетально.Количество тогда
		КоличествоОбходов=1;
		КоличествоРаспределено=0;
		КоличествоСтрокМассива=МассивСтрок.Количество();
		для Каждого СтрокаСклада из МассивДанныхПоСкладам цикл
			МассивСтрокПоСкладам=ТаблицаДанныхОстатков.НайтиСтроки(новый Структура("ИдентификаторУпаковки,Ячейка,Номенклатура,ДатаРозлива,Склад",ВыборкаДанныхИнвентаризацииДетально.ИдентификаторУпаковки,ВыборкаДанныхИнвентаризацииДетально.Ячейка,ВыборкаДанныхИнвентаризацииДетально.Номенклатура,ВыборкаДанныхИнвентаризацииДетально.ДатаРозлива,СтрокаСклада.Склад));
			для Каждого Строка из МассивСтрокПоСкладам цикл
				НоваяСтрока=Товары.Добавить();
				НоваяСтрока.ДатаИнвентаризации=ВыборкаДанныхИнвентаризацииДетально.ДатаИнвентаризации;
				НоваяСтрока.Ячейка=Строка.Ячейка;
				НоваяСтрока.ИдентификаторУпаковки=Строка.ИдентификаторУпаковки;
				НоваяСтрока.Номенклатура=Строка.Номенклатура;
				НоваяСтрока.ДатаРозлива=Строка.ДатаРозлива;
				НоваяСтрока.СерияНоменклатуры=Строка.СерияНоменклатуры;
				НоваяСтрока.Склад=Строка.Склад;
				НоваяСтрока.КоличествоПлан=Строка.КоличествоОстаток;
				НоваяСтрока.Качество=Строка.Качество;
				ДоляСкладаВОбщемКоличестве=СтрокаСклада.Количество/ОбщееКоличество;
				НоваяСтрока.КоличествоФакт=Окр(ВыборкаДанныхИнвентаризацииДетально.Количество*ДоляСкладаВОбщемКоличестве,0,РежимОкругления.Окр15как10);
				КоличествоРаспределено=	КоличествоРаспределено+НоваяСтрока.КоличествоФакт;
				Если КоличествоОбходов=КоличествоСтрокМассива тогда
					Если КоличествоРаспределено<ВыборкаДанныхИнвентаризацииДетально.Количество тогда
						НоваяСтрока.КоличествоФакт=НоваяСтрока.КоличествоФакт+(ВыборкаДанныхИнвентаризацииДетально.Количество-КоличествоРаспределено);
					КонецЕсли;
				КонецЕсли;
				ТаблицаДанныхОстатков.Удалить(Строка);
				КоличествоОбходов=КоличествоОбходов+1;
			КонецЦикла;
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
	
КонецФункции

Функция МногоДанныхНоКоличественноБъётсяВРазрезеSSCC(ТаблицаДанныхОстатков,ВыборкаДанныхИнвентаризацииДетально) 
	МассивСтрок=ТаблицаДанныхОстатков.НайтиСтроки(новый Структура("ИдентификаторУпаковки,Ячейка,Номенклатура,ДатаРозлива",ВыборкаДанныхИнвентаризацииДетально.ИдентификаторУпаковки,ВыборкаДанныхИнвентаризацииДетально.Ячейка,ВыборкаДанныхИнвентаризацииДетально.Номенклатура,ВыборкаДанныхИнвентаризацииДетально.ДатаРозлива));
	Если МассивСтрок.Количество()>1 Тогда
		ОбщееКоличество=0;
		для Каждого стр из МассивСтрок цикл
			ОбщееКоличество=ОбщееКоличество+ стр.КоличествоОстаток;
		КонецЦикла;
		Если ОбщееКоличество=ВыборкаДанныхИнвентаризацииДетально.Количество тогда
			для Каждого Строка из МассивСтрок цикл
				НоваяСтрока=Товары.Добавить();
				НоваяСтрока.ДатаИнвентаризации=ВыборкаДанныхИнвентаризацииДетально.ДатаИнвентаризации;
				НоваяСтрока.Ячейка=Строка.Ячейка;
				НоваяСтрока.ИдентификаторУпаковки=Строка.ИдентификаторУпаковки;
				НоваяСтрока.Номенклатура=Строка.Номенклатура;
				НоваяСтрока.ДатаРозлива=Строка.ДатаРозлива;
				НоваяСтрока.Организация=Строка.Организация;
				НоваяСтрока.СерияНоменклатуры=Строка.СерияНоменклатуры;
				НоваяСтрока.Склад=Строка.Склад;
				НоваяСтрока.Качество=Строка.Качество;
				НоваяСтрока.КоличествоПлан=Строка.КоличествоОстаток;
				НоваяСтрока.КоличествоФакт=Строка.КоличествоОстаток;
				ТаблицаДанныхОстатков.Удалить(Строка);
			КонецЦикла;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции


Функция ЗаполнитьТоварыПриПолномНеСвопадении(ТаблицаДанныхОстатков,ВыборкаДанныхИнвентаризацииДетально)
	МассивСтрок=ТаблицаДанныхОстатков.НайтиСтроки(новый Структура("Ячейка,Номенклатура,ДатаРозлива",ВыборкаДанныхИнвентаризацииДетально.Ячейка,ВыборкаДанныхИнвентаризацииДетально.Номенклатура,ВыборкаДанныхИнвентаризацииДетально.ДатаРозлива));
	Если МассивСтрок.Количество()=0 тогда
		НоваяСтрока=Товары.Добавить();
		НоваяСтрока.ДатаИнвентаризации=ВыборкаДанныхИнвентаризацииДетально.ДатаИнвентаризации;
		НоваяСтрока.Ячейка=ВыборкаДанныхИнвентаризацииДетально.Ячейка;
		НоваяСтрока.ИдентификаторУпаковки=ВыборкаДанныхИнвентаризацииДетально.ИдентификаторУпаковки;
		НоваяСтрока.Номенклатура=ВыборкаДанныхИнвентаризацииДетально.Номенклатура;
		НоваяСтрока.ДатаРозлива=ВыборкаДанныхИнвентаризацииДетально.ДатаРозлива;
		НоваяСтрока.СерияНоменклатуры=Справочники.СерииНоменклатуры.ПустаяСсылка();
		НоваяСтрока.Склад=Справочники.Склады.ПустаяСсылка();
		НоваяСтрока.Качество=Справочники.Качество.ПустаяСсылка();
		НоваяСтрока.КоличествоПлан=0;
		НоваяСтрока.КоличествоФакт=ВыборкаДанныхИнвентаризацииДетально.Количество;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ЗаполнитьТоварыПриЧастичномСоответсвии(ТаблицаДанныхОстатков,ВыборкаДанныхИнвентаризацииДетально)
	МассивСтрок=ТаблицаДанныхОстатков.НайтиСтроки(новый Структура("Ячейка,Номенклатура,ДатаРозлива",ВыборкаДанныхИнвентаризацииДетально.Ячейка,ВыборкаДанныхИнвентаризацииДетально.Номенклатура,ВыборкаДанныхИнвентаризацииДетально.ДатаРозлива));
	Если МассивСтрок.Количество()=1 тогда
		Если МассивСтрок[0].ИдентификаторУпаковки=ВыборкаДанныхИнвентаризацииДетально.ИдентификаторУпаковки тогда
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ДатаИнвентаризации=ВыборкаДанныхИнвентаризацииДетально.ДатаИнвентаризации;
			НоваяСтрока.Ячейка=ВыборкаДанныхИнвентаризацииДетально.Ячейка;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДанныхИнвентаризацииДетально.ИдентификаторУпаковки;
			НоваяСтрока.Номенклатура=ВыборкаДанныхИнвентаризацииДетально.Номенклатура;
			НоваяСтрока.ДатаРозлива=ВыборкаДанныхИнвентаризацииДетально.ДатаРозлива;
			НоваяСтрока.СерияНоменклатуры=МассивСтрок[0].СерияНоменклатуры;
			НоваяСтрока.Склад=МассивСтрок[0].Склад;
			НоваяСтрока.Организация=МассивСтрок[0].Организация;
			НоваяСтрока.КоличествоПлан=МассивСтрок[0].КоличествоОстаток;
			НоваяСтрока.Качество=МассивСтрок[0].Качество;
			НоваяСтрока.КоличествоФакт=ВыборкаДанныхИнвентаризацииДетально.Количество;
		иначе
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ДатаИнвентаризации=ВыборкаДанныхИнвентаризацииДетально.ДатаИнвентаризации;
			НоваяСтрока.Ячейка=ВыборкаДанныхИнвентаризацииДетально.Ячейка;
			НоваяСтрока.ИдентификаторУпаковки=МассивСтрок[0].ИдентификаторУпаковки;
			НоваяСтрока.Номенклатура=ВыборкаДанныхИнвентаризацииДетально.Номенклатура;
			НоваяСтрока.ДатаРозлива=ВыборкаДанныхИнвентаризацииДетально.ДатаРозлива;
			НоваяСтрока.СерияНоменклатуры=МассивСтрок[0].СерияНоменклатуры;
			НоваяСтрока.Склад=МассивСтрок[0].Склад;
			НоваяСтрока.Организация=МассивСтрок[0].Организация;
			НоваяСтрока.КоличествоПлан=МассивСтрок[0].КоличествоОстаток;
			НоваяСтрока.Качество=МассивСтрок[0].Качество;
			НоваяСтрока.КоличествоФакт=0;
			
			
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ДатаИнвентаризации=ВыборкаДанныхИнвентаризацииДетально.ДатаИнвентаризации;
			НоваяСтрока.Ячейка=ВыборкаДанныхИнвентаризацииДетально.Ячейка;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДанныхИнвентаризацииДетально.ИдентификаторУпаковки;
			НоваяСтрока.Номенклатура=ВыборкаДанныхИнвентаризацииДетально.Номенклатура;
			НоваяСтрока.ДатаРозлива=ВыборкаДанныхИнвентаризацииДетально.ДатаРозлива;
			НоваяСтрока.СерияНоменклатуры=МассивСтрок[0].СерияНоменклатуры;
			НоваяСтрока.Склад=МассивСтрок[0].Склад;
			НоваяСтрока.Организация=МассивСтрок[0].Организация;
			НоваяСтрока.Качество=МассивСтрок[0].Качество;
			НоваяСтрока.КоличествоПлан=0;
			НоваяСтрока.КоличествоФакт=ВыборкаДанныхИнвентаризацииДетально.Количество;
		КонецЕсли;
		ТаблицаДанныхОстатков.Удалить(МассивСтрок[0]);	
		Возврат Истина;
		
	КонецЕсли;
	Возврат Ложь;	
КонецФункции


Процедура ЧтениеБлокировкаИФиксацияДанных(МенеджерВТ,ДатаНачала,ДатаОкончания,МассивЯчеек)
	Если МассивЯчеек=Неопределено тогда
		МассивЯчеек=новый Массив;
		ОтборПоЯчейкам=Ложь
	иначе
		ОтборПоЯчейкам=Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSДанныеИнвентаризации.Ячейка,
	|	итWMSДанныеИнвентаризации.ДатаИнвентаризации
	|ПОМЕСТИТЬ ВтБлокированныхДанных
	|ИЗ
	|	РегистрСведений.итWMSДанныеИнвентаризации КАК итWMSДанныеИнвентаризации
	|ГДЕ
	|	(итWMSДанныеИнвентаризации.ДокументОбработки = ЗНАЧЕНИЕ(Документ.итWMSДанныеИнвентаризации.ПустаяСсылка)
	|			ИЛИ итWMSДанныеИнвентаризации.ДокументОбработки = &Ссылка)
	|	И ВЫБОР
	|			КОГДА &ОтборПоЯчейкам
	|				ТОГДА итWMSДанныеИнвентаризации.Ячейка В (&МассивЯчеек)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSДанныеИнвентаризации.Ячейка,
	|	итWMSДанныеИнвентаризации.ДатаИнвентаризации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтБлокированныхДанных.Ячейка,
	|	ВтБлокированныхДанных.ДатаИнвентаризации
	|ИЗ
	|	ВтБлокированныхДанных КАК ВтБлокированныхДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВтБлокированныхДанных.ДатаИнвентаризации) КАК Максимум,
	|	МИНИМУМ(ВтБлокированныхДанных.ДатаИнвентаризации) КАК Мнимум
	|ИЗ
	|	ВтБлокированныхДанных КАК ВтБлокированныхДанных";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ОтборПоЯчейкам",ОтборПоЯчейкам);
	Запрос.УстановитьПараметр("МассивЯчеек",МассивЯчеек);
	
	МассивРезультатов= Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[1];	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSДанныеИнвентаризации");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса; 
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ячейка", "Ячейка");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДатаИнвентаризации","ДатаИнвентаризации");
	ЭлементБлокировки2 = БлокировкаДанных.Добавить("РегистрНакопления.итТоварыВЯчейках");
	ЭлементБлокировки2.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки2.ИсточникДанных = РезультатЗапроса; 
	ЭлементБлокировки2.ИспользоватьИзИсточникаДанных("Ячейка", "Ячейка");
	БлокировкаДанных.Заблокировать();
	
	
	
	ВыборкаДанныеФиксацииЗаДокументом=РезультатЗапроса.Выбрать();
	пока ВыборкаДанныеФиксацииЗаДокументом.Следующий() цикл
		НаборЗаписей=РегистрыСведений.итWMSДанныеИнвентаризации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ячейка.Установить(ВыборкаДанныеФиксацииЗаДокументом.Ячейка);
		НаборЗаписей.Отбор.ДатаИнвентаризации.Установить(ВыборкаДанныеФиксацииЗаДокументом.ДатаИнвентаризации);
		НаборЗаписей.Прочитать();
		для Каждого Запись из НаборЗаписей цикл
			Если Запись.ДокументОбработки.Пустая() или Запись.ДокументОбработки=Ссылка тогда
				Запись.ДокументОбработки=Ссылка;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	ВыборкаРезультатаЗапросаДат=МассивРезультатов[2].Выбрать();;
	Если ВыборкаРезультатаЗапросаДат.Следующий() Тогда
		Если ВыборкаРезультатаЗапросаДат.Мнимум=null или
			ВыборкаРезультатаЗапросаДат.Максимум=null тогда
			Возврат
		КонецЕсли;		
		ДатаНачала=ВыборкаРезультатаЗапросаДат.Мнимум;
		ДатаОкончания=ВыборкаРезультатаЗапросаДат.Максимум;
	КонецЕсли;
КонецПроцедуры

Функция НайтиДанныеВСтруктурированномМассиве(ЗначениеПоиска,МассивДанных)
	МассивИндексовДанных=новый Массив;
	ИндексМассива=0;
	Для Каждого стр из МассивДанных цикл
		
		
		
		Если ТипЗнч(ЗначениеПоиска)=Тип("Структура") тогда
			ВсеДанныеСовпали=Истина;
			для Каждого СвойстваПоиска из ЗначениеПоиска цикл
				Если не стр.Свойство(СвойстваПоиска.Ключ) тогда
					ВсеДанныеСовпали=Ложь;
					Прервать;
				КонецЕсли;
				Если стр[СвойстваПоиска.Ключ]<> СвойстваПоиска.Значение тогда
					ВсеДанныеСовпали=Ложь;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			Если ВсеДанныеСовпали тогда
				Если МассивИндексовДанных.Найти(ИндексМассива)=Неопределено тогда
					МассивИндексовДанных.Добавить(ИндексМассива);
				КонецЕсли;	
			КонецЕсли;
			
		иначе
			
			для Каждого Свойство из стр цикл
				Если Свойство.Значение=ЗначениеПоиска тогда
					Если МассивИндексовДанных.Найти(ИндексМассива)=Неопределено тогда
						МассивИндексовДанных.Добавить(ИндексМассива);
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
		ИндексМассива=ИндексМассива+1;
	КонецЦикла;
	
	
	Если МассивИндексовДанных.Количество()=0 тогда
		Возврат Неопределено ;
	иначе
		Возврат МассивИндексовДанных ;
	КонецЕсли;	
	
КонецФункции


#КонецОбласти

#Область Печать

Процедура ВедомостьОтклонений(ТабличныйДокумент)Экспорт 
	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	ПолучитьДанныеСотрудниковПоПровереннымЯчейкам(МенеджерВременныхТаблиц);
	РезультатЗапроса=ПолучитьДанныеПаллетЯчеччногоУчета(Истина,МенеджерВременныхТаблиц);
    Заголовок="Инветоризационная ведомость отклонений";
    ЗаполнениеМакетаВедомости(РезультатЗапроса,ТабличныйДокумент,Заголовок,Истина);

КонецПроцедуры

Процедура Ведомость(ТабличныйДокумент)Экспорт 
	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	ПолучитьДанныеСотрудниковПоПровереннымЯчейкам(МенеджерВременныхТаблиц);
	РезультатЗапроса=ПолучитьДанныеПаллетЯчеччногоУчета(Ложь,МенеджерВременныхТаблиц);
    Заголовок="Инветоризационная ведомость отклонений";
    ЗаполнениеМакетаВедомости(РезультатЗапроса,ТабличныйДокумент,Заголовок,Истина);
КонецПроцедуры

Процедура ВедомостьОтклоненийЯчеечногоУчета(ТабличныйДокумент) Экспорт 
	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	ПолучитьДанныеСотрудниковПоПровереннымЯчейкам(МенеджерВременныхТаблиц);
	РезультатЗапроса=ПолучитьДанныеЯчеечногоУчета(Истина,МенеджерВременныхТаблиц);
	Заголовок="Инветоризационная ведомость отклонений ячеечного учета";
	ЗаполнениеМакетаВедомости(РезультатЗапроса,ТабличныйДокумент,Заголовок);
КонецПроцедуры

Процедура ВедомостьЯчеечногоУчета(ТабличныйДокумент) Экспорт 
	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	ПолучитьДанныеСотрудниковПоПровереннымЯчейкам(МенеджерВременныхТаблиц);
	РезультатЗапроса=ПолучитьДанныеЯчеечногоУчета(Ложь,МенеджерВременныхТаблиц);
	Заголовок="Инветоризационная ведомость  ячеечного учета";
	ЗаполнениеМакетаВедомости(РезультатЗапроса,ТабличныйДокумент,Заголовок);
КонецПроцедуры

Процедура ЗаполнениеМакетаВедомости(РезультатЗапроса,ТабличныйДокумент,Заголовок,ПоИдентификаторамУпаковок=Ложь)
	ВыборкаПоСотрудникуСклада=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Макет=ПолучитьМакет("МакетВедомость");
	ОбластьЗаголовка=Макет.ПолучитьОбласть("Заголовок");
	НомерСтраницы=1;
	Пока  ВыборкаПоСотрудникуСклада.Следующий() цикл
		НомерПоПорядку=1;
		ОбластьЗаголовка.Параметры.Заголовок=Заголовок;
		ТабличныйДокумент.Вывести(ОбластьЗаголовка);
		ОбластьШапки=Макет.ПолучитьОбласть("Шапка");
		ОбластьШапки.Параметры.Номер=Номер;
		ОбластьШапки.Параметры.ДатаДокумента = Дата;
		ОбластьШапки.Параметры.ДолжностьПодсчет=ВыборкаПоСотрудникуСклада.Роль;
		ОбластьШапки.Параметры.ФИОПодсчет=ВыборкаПоСотрудникуСклада.РаботникСклада;
		ОбластьШапки.Параметры.ФиоВводДанных=Ответственный;
		ОбластьШапки.Параметры.НомерСтраницы=НомерСтраницы;
		ТабличныйДокумент.Вывести(ОбластьШапки);
		Если ПоИдентификаторамУпаковок тогда
			ОбластьШапкаСтроки=Макет.ПолучитьОбласть("ТоварыШапка");
		иначе
			ОбластьШапкаСтроки=Макет.ПолучитьОбласть("ТоварыШапка1");
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьШапкаСтроки);
		ОбластьПодвала=Макет.ПолучитьОбласть("Подвал");
		ВыборкаДетальныхЗаписей=ВыборкаПоСотрудникуСклада.Выбрать();
		
		Пока  ВыборкаДетальныхЗаписей.Следующий() цикл
			Если ПоИдентификаторамУпаковок тогда
			ОбластьСтрока=Макет.ПолучитьОбласть("Товары");
			ОбластьСтрока.Параметры.ИдентификаторУпаковки=ВыборкаДетальныхЗаписей.ИдентификаторУпаковки;
            иначе
			ОбластьСтрока=Макет.ПолучитьОбласть("Товары1");
			КонецЕсли;
			ОбластьСтрока.Параметры.НомерПП=НомерПоПорядку;
			ОбластьСтрока.Параметры.ДатаВремя=Формат(ВыборкаДетальныхЗаписей.ДатаПроверкиЯчейки,"ДЛФ=DT");
			ОбластьСтрока.Параметры.Ячейка=ВыборкаДетальныхЗаписей.Ячейка;
			ОбластьСтрока.Параметры.Номенклатура=ВыборкаДетальныхЗаписей.Номенклатура;
			ОбластьСтрока.Параметры.СерияНоменклатуры=ВыборкаДетальныхЗаписей.СерияНоменклатуры;
			ОбластьСтрока.Параметры.Качество=ВыборкаДетальныхЗаписей.Качество;
			ОбластьСтрока.Параметры.ЕдИзм=ВыборкаДетальныхЗаписей.ЕдиницаХраненияОстатков;
			ОбластьСтрока.Параметры.Емкость=ВыборкаДетальныхЗаписей.алкЕмкость;
			ОбластьСтрока.Параметры.ШтВУпаковке=ВыборкаДетальныхЗаписей.МестКоэффициент;
			ОбластьСтрока.Параметры.КоличествоУчетное=ВыборкаДетальныхЗаписей.КоличествоПлан;
			ОбластьСтрока.Параметры.КоличествоФактическое=ВыборкаДетальныхЗаписей.КоличествоФакт;
			ОбластьСтрока.Параметры.Отклонения=ВыборкаДетальныхЗаписей.Отклонение;
			НомерПоПорядку=НомерПоПорядку+1;
			МассивОбластей=новый Массив;
			МассивОбластей.Добавить(ОбластьПодвала);
			МассивОбластей.Добавить(ОбластьСтрока);
			Если  не ТабличныйДокумент.ПроверитьВывод(МассивОбластей) тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				НомерСтраницы=НомерСтраницы+1;
				ТабличныйДокумент.Вывести(ОбластьЗаголовка);
				
				ОбластьШапки=Макет.ПолучитьОбласть("Шапка");
				ОбластьШапки.Параметры.Номер=Номер;
				ОбластьШапки.Параметры.ДатаДокумента = Дата;
				ОбластьШапки.Параметры.ДолжностьПодсчет=ВыборкаПоСотрудникуСклада.Роль;
				ОбластьШапки.Параметры.ФИОПодсчет=ВыборкаПоСотрудникуСклада.РаботникСклада;
				ОбластьШапки.Параметры.ФиоВводДанных=Ответственный;
				ОбластьШапки.Параметры.НомерСтраницы=НомерСтраницы;
				
				ТабличныйДокумент.Вывести(ОбластьШапки);
				ТабличныйДокумент.Вывести(ОбластьШапкаСтроки);
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			иначе
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			КонецЕсли;
		КонецЦикла;
		ТабличныйДокумент.Вывести(ОбластьПодвала);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		НомерСтраницы=НомерСтраницы+1;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПечатьПустыхЯчеек(ТабличныйДокумент) Экспорт 
    МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	ПолучитьДанныеСотрудниковПоПровереннымЯчейкам(МенеджерВременныхТаблиц);
	РезультатЗапроса=ПолучитьДанныеПустыхЯчеекДокумента(МенеджерВременныхТаблиц);
	Заголовок="Инветоризационная ведомость  пустые ячейки";
	ЗаполнениеМакетаВедомости(РезультатЗапроса,ТабличныйДокумент,Заголовок);

	КонецПроцедуры
#КонецОбласти

Функция  ПолучитьДанныеЯчеечногоУчета(ТолькоОтклонения=Ложь,МенеджерВременныхТаблиц)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSДанныеИнвентаризацииТовары.Ячейка,
	|	итWMSДанныеИнвентаризацииТовары.Номенклатура,
	|	итWMSДанныеИнвентаризацииТовары.СерияНоменклатуры,
	|	итWMSДанныеИнвентаризацииТовары.Склад,
	|	итWMSДанныеИнвентаризацииТовары.Качество,
	|	итWMSДанныеИнвентаризацииТовары.КоличествоПлан,
	|	итWMSДанныеИнвентаризацииТовары.КоличествоФакт
	|ПОМЕСТИТЬ ВтДанныеТовары
	|ИЗ
	|	&Товары КАК итWMSДанныеИнвентаризацииТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеТовары.Ячейка,
	|	ВтДанныеТовары.Номенклатура,
	|	ВтДанныеТовары.СерияНоменклатуры,
	|	ВтДанныеТовары.Склад,
	|	ВтДанныеТовары.Качество,
	|	СУММА(ВтДанныеТовары.КоличествоПлан) КАК КоличествоПлан,
	|	СУММА(ВтДанныеТовары.КоличествоФакт) КАК КоличествоФакт
	|ПОМЕСТИТЬ ГруппированныеДанные
	|ИЗ
	|	ВтДанныеТовары КАК ВтДанныеТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеТовары.Ячейка,
	|	ВтДанныеТовары.Номенклатура,
	|	ВтДанныеТовары.СерияНоменклатуры,
	|	ВтДанныеТовары.Склад,
	|	ВтДанныеТовары.Качество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппированныеДанные.Ячейка,
	|	ГруппированныеДанные.Номенклатура,
	|	ГруппированныеДанные.СерияНоменклатуры,
	|	ГруппированныеДанные.Склад,
	|	ГруппированныеДанные.Качество,
	|	ГруппированныеДанные.КоличествоПлан,
	|	ГруппированныеДанные.КоличествоФакт,
	|	ЕСТЬNULL(ГруппированныеДанные.КоличествоФакт, 0) - ЕСТЬNULL(ГруппированныеДанные.КоличествоПлан, 0) КАК Отклонение
	|ПОМЕСТИТЬ ДанныеСОтклонениями
	|ИЗ
	|	ГруппированныеДанные КАК ГруппированныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСОтклонениями.Ячейка,
	|	ДанныеСОтклонениями.Номенклатура,
	|	ДанныеСОтклонениями.СерияНоменклатуры,
	|	ДанныеСОтклонениями.Склад,
	|	ДанныеСОтклонениями.Качество,
	|	ДанныеСОтклонениями.КоличествоПлан,
	|	ДанныеСОтклонениями.КоличествоФакт,
	|	ДанныеСОтклонениями.Отклонение,
	|	ДанныеПроверкиЯчеек.РаботникСклада КАК РаботникСклада,
	|	ДанныеПроверкиЯчеек.Роль КАК Роль,
	|	ДанныеПроверкиЯчеек.ДатаИнвентаризации КАК ДатаПроверкиЯчейки,
	|	НМ.ЕдиницаХраненияОстатков,
	|	НМ.алкЕмкость,
	|	НМ.ЕдиницаИзмеренияМест.Коэффициент КАК МестКоэффициент
	|ИЗ
	|	ДанныеСОтклонениями КАК ДанныеСОтклонениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПроверкиЯчеек КАК ДанныеПроверкиЯчеек
	|		ПО ДанныеСОтклонениями.Ячейка = ДанныеПроверкиЯчеек.Ячейка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НМ
	|		ПО ДанныеСОтклонениями.Номенклатура = НМ.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТолькоОтклонения
	|				ТОГДА ДанныеСОтклонениями.Отклонение <> 0
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(ДанныеСОтклонениями.КоличествоПлан, 0) = 0
	|					И ЕСТЬNULL(ДанныеСОтклонениями.КоличествоФакт, 0) = 0
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|ИТОГИ
	|	МАКСИМУМ(Роль)
	|ПО
	|	РаботникСклада";
	
	Запрос.УстановитьПараметр("Товары",Товары.Выгрузить());
	Запрос.УстановитьПараметр("ТолькоОтклонения",ТолькоОтклонения);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

Функция ПолучитьДанныеПаллетЯчеччногоУчета(ТолькоОтклонения=Ложь,МенеджерВременныхТаблиц)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSДанныеИнвентаризацииТовары.Ячейка,
	|	итWMSДанныеИнвентаризацииТовары.Номенклатура,
	|	итWMSДанныеИнвентаризацииТовары.СерияНоменклатуры,
	|	итWMSДанныеИнвентаризацииТовары.Склад,
	|	итWMSДанныеИнвентаризацииТовары.Качество,
	|	итWMSДанныеИнвентаризацииТовары.КоличествоПлан,
	|	итWMSДанныеИнвентаризацииТовары.КоличествоФакт,
	|	итWMSДанныеИнвентаризацииТовары.ИдентификаторУпаковки
	|ПОМЕСТИТЬ ВтДанныеТовары
	|ИЗ
	|	&Товары КАК итWMSДанныеИнвентаризацииТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеТовары.Ячейка,
	|	ВтДанныеТовары.Номенклатура,
	|	ВтДанныеТовары.СерияНоменклатуры,
	|	ВтДанныеТовары.Склад,
	|	ВтДанныеТовары.Качество,
	|	СУММА(ВтДанныеТовары.КоличествоПлан) КАК КоличествоПлан,
	|	СУММА(ВтДанныеТовары.КоличествоФакт) КАК КоличествоФакт,
	|	ВтДанныеТовары.ИдентификаторУпаковки
	|ПОМЕСТИТЬ ГруппированныеДанные
	|ИЗ
	|	ВтДанныеТовары КАК ВтДанныеТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеТовары.Ячейка,
	|	ВтДанныеТовары.Номенклатура,
	|	ВтДанныеТовары.СерияНоменклатуры,
	|	ВтДанныеТовары.Склад,
	|	ВтДанныеТовары.Качество,
	|	ВтДанныеТовары.ИдентификаторУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппированныеДанные.Ячейка,
	|	ГруппированныеДанные.Номенклатура,
	|	ГруппированныеДанные.СерияНоменклатуры,
	|	ГруппированныеДанные.Склад,
	|	ГруппированныеДанные.Качество,
	|	ГруппированныеДанные.КоличествоПлан,
	|	ГруппированныеДанные.КоличествоФакт,
	|	ЕСТЬNULL(ГруппированныеДанные.КоличествоФакт, 0) - ЕСТЬNULL(ГруппированныеДанные.КоличествоПлан, 0) КАК Отклонение,
	|	ГруппированныеДанные.ИдентификаторУпаковки
	|ПОМЕСТИТЬ ДанныеСОтклонениями
	|ИЗ
	|	ГруппированныеДанные КАК ГруппированныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСОтклонениями.Ячейка,
	|	ДанныеСОтклонениями.Номенклатура,
	|	ДанныеСОтклонениями.СерияНоменклатуры,
	|	ДанныеСОтклонениями.Склад,
	|	ДанныеСОтклонениями.Качество,
	|	ДанныеСОтклонениями.КоличествоПлан,
	|	ДанныеСОтклонениями.КоличествоФакт,
	|	ДанныеСОтклонениями.Отклонение,
	|	ДанныеПроверкиЯчеек.РаботникСклада КАК РаботникСклада,
	|	ДанныеПроверкиЯчеек.Роль КАК Роль,
	|	ДанныеПроверкиЯчеек.ДатаИнвентаризации КАК ДатаПроверкиЯчейки,
	|	НМ.ЕдиницаХраненияОстатков,
	|	НМ.алкЕмкость,
	|	НМ.ЕдиницаИзмеренияМест.Коэффициент КАК МестКоэффициент,
	|	ДанныеСОтклонениями.ИдентификаторУпаковки
	|ИЗ
	|	ДанныеСОтклонениями КАК ДанныеСОтклонениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПроверкиЯчеек КАК ДанныеПроверкиЯчеек
	|		ПО ДанныеСОтклонениями.Ячейка = ДанныеПроверкиЯчеек.Ячейка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НМ
	|		ПО ДанныеСОтклонениями.Номенклатура = НМ.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТолькоОтклонения
	|				ТОГДА ДанныеСОтклонениями.Отклонение <> 0
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(ДанныеСОтклонениями.КоличествоПлан, 0) = 0
	|					И ЕСТЬNULL(ДанныеСОтклонениями.КоличествоФакт, 0) = 0
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|ИТОГИ
	|	МАКСИМУМ(Роль)
	|ПО
	|	РаботникСклада";
	
	Запрос.УстановитьПараметр("Товары",Товары.Выгрузить());
	Запрос.УстановитьПараметр("ТолькоОтклонения",ТолькоОтклонения);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;	
	
КонецФункции

Функция ПолучитьДанныеПустыхЯчеекДокумента(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSДанныеИнвентаризации.Ячейка КАК Ячейка,
	|	""-"" КАК Номенклатура,
	|	""-"" КАК СерияНоменклатуры,
	|	""-"" КАК Склад,
	|	""-"" КАК Качество,
	|	""-"" КАК КоличествоПлан,
	|	""-"" КАК КоличествоФакт
	|ПОМЕСТИТЬ ВтДанныеТовары
	|ИЗ
	|	(ВЫБРАТЬ
	|		итWMSДанныеИнвентаризации.Ячейка КАК Ячейка,
	|		МАКСИМУМ(итWMSДанныеИнвентаризации.ДатаИнвентаризации) КАК ДатаИнвентаризации,
	|		МАКСИМУМ(итWMSДанныеИнвентаризации.ДокументОбработки) КАК ДокументОбработки
	|	ИЗ
	|		РегистрСведений.итWMSДанныеИнвентаризации КАК итWMSДанныеИнвентаризации
	|	ГДЕ
	|		итWMSДанныеИнвентаризации.ПустаяЯчейка = ИСТИНА
	|		И итWMSДанныеИнвентаризации.ДокументОбработки = &Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		итWMSДанныеИнвентаризации.Ячейка) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSДанныеИнвентаризации КАК итWMSДанныеИнвентаризации
	|		ПО ВложенныйЗапрос.Ячейка = итWMSДанныеИнвентаризации.Ячейка
	|			И ВложенныйЗапрос.ДокументОбработки = итWMSДанныеИнвентаризации.ДокументОбработки
	|			И ВложенныйЗапрос.ДатаИнвентаризации = итWMSДанныеИнвентаризации.ДатаИнвентаризации
	|			И (итWMSДанныеИнвентаризации.ПустаяЯчейка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеТовары.Ячейка,
	|	ВтДанныеТовары.Номенклатура,
	|	ВтДанныеТовары.СерияНоменклатуры,
	|	ВтДанныеТовары.Склад,
	|	ВтДанныеТовары.Качество,
	|	ВтДанныеТовары.КоличествоПлан КАК КоличествоПлан,
	|	ВтДанныеТовары.КоличествоФакт КАК КоличествоФакт
	|ПОМЕСТИТЬ ГруппированныеДанные
	|ИЗ
	|	ВтДанныеТовары КАК ВтДанныеТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеТовары.Ячейка,
	|	ВтДанныеТовары.Номенклатура,
	|	ВтДанныеТовары.СерияНоменклатуры,
	|	ВтДанныеТовары.Склад,
	|	ВтДанныеТовары.Качество,
	|	ВтДанныеТовары.КоличествоПлан,
	|	ВтДанныеТовары.КоличествоФакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппированныеДанные.Ячейка,
	|	ГруппированныеДанные.Номенклатура,
	|	ГруппированныеДанные.СерияНоменклатуры,
	|	ГруппированныеДанные.Склад,
	|	ГруппированныеДанные.Качество,
	|	ГруппированныеДанные.КоличествоПлан,
	|	ГруппированныеДанные.КоличествоФакт
	|ПОМЕСТИТЬ ДанныеСОтклонениями
	|ИЗ
	|	ГруппированныеДанные КАК ГруппированныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСОтклонениями.Ячейка,
	|	ДанныеСОтклонениями.Номенклатура,
	|	ДанныеСОтклонениями.СерияНоменклатуры,
	|	ДанныеСОтклонениями.Склад,
	|	ДанныеСОтклонениями.Качество,
	|	ДанныеСОтклонениями.КоличествоПлан,
	|	ДанныеСОтклонениями.КоличествоФакт,
	|	ДанныеПроверкиЯчеек.РаботникСклада КАК РаботникСклада,
	|	ДанныеПроверкиЯчеек.Роль КАК Роль,
	|	ДанныеПроверкиЯчеек.ДатаИнвентаризации КАК ДатаПроверкиЯчейки,
	|	""-"" КАК ЕдиницаХраненияОстатков,
	|	""-"" КАК алкЕмкость,
	|	""-"" КАК МестКоэффициент,
	|	""-"" КАК Отклонение
	|ИЗ
	|	ДанныеСОтклонениями КАК ДанныеСОтклонениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПроверкиЯчеек КАК ДанныеПроверкиЯчеек
	|		ПО ДанныеСОтклонениями.Ячейка = ДанныеПроверкиЯчеек.Ячейка
	|ИТОГИ
	|	МАКСИМУМ(Роль)
	|ПО
	|	РаботникСклада";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	//Запрос.УстановитьПараметр("ТолькоОтклонения",ТолькоОтклонения);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;	
	
	КонецФункции

Процедура ПолучитьДанныеСотрудниковПоПровереннымЯчейкам(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(итWMSДанныеИнвентаризации.ДатаИнвентаризации) КАК ДатаИнвентаризации,
	|	итWMSДанныеИнвентаризации.Ячейка,
	|	МАКСИМУМ(итWMSДанныеИнвентаризации.ДокументОбработки) КАК ДокументОбработки
	|ПОМЕСТИТЬ ДатаПроверкиЯчейки
	|ИЗ
	|	РегистрСведений.итWMSДанныеИнвентаризации КАК итWMSДанныеИнвентаризации
	|ГДЕ
	|	итWMSДанныеИнвентаризации.ДокументОбработки = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSДанныеИнвентаризации.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаПроверкиЯчейки.ДатаИнвентаризации,
	|	ДатаПроверкиЯчейки.Ячейка,
	|	ДатаПроверкиЯчейки.ДокументОбработки,
	|	итWMSДанныеИнвентаризации.ТСД
	|ПОМЕСТИТЬ ТСДПроверкиЯчейки
	|ИЗ
	|	ДатаПроверкиЯчейки КАК ДатаПроверкиЯчейки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSДанныеИнвентаризации КАК итWMSДанныеИнвентаризации
	|		ПО ДатаПроверкиЯчейки.ДатаИнвентаризации = итWMSДанныеИнвентаризации.ДатаИнвентаризации
	|			И ДатаПроверкиЯчейки.Ячейка = итWMSДанныеИнвентаризации.Ячейка
	|			И ДатаПроверкиЯчейки.ДокументОбработки = итWMSДанныеИнвентаризации.ДокументОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДатаИнвентаризации,
	|	ВложенныйЗапрос.Ячейка,
	|	ВложенныйЗапрос.ДокументОбработки,
	|	ВложенныйЗапрос.ТСД,
	|	ВложенныйЗапрос.ДатаДанныхТСД,
	|	МАКСИМУМ(итWMSСостояниеТСД.РаботникСклада) КАК РаботникСклада,
	|	МАКСИМУМ(итWMSСостояниеТСД.Роль) КАК Роль
	|ПОМЕСТИТЬ ДанныеПроверкиЯчеек
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТСДПроверкиЯчейки.ДатаИнвентаризации КАК ДатаИнвентаризации,
	|		ТСДПроверкиЯчейки.Ячейка КАК Ячейка,
	|		ТСДПроверкиЯчейки.ДокументОбработки КАК ДокументОбработки,
	|		ТСДПроверкиЯчейки.ТСД КАК ТСД,
	|		МАКСИМУМ(итWMSСостояниеТСД.Период) КАК ДатаДанныхТСД
	|	ИЗ
	|		ТСДПроверкиЯчейки КАК ТСДПроверкиЯчейки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСостояниеТСД КАК итWMSСостояниеТСД
	|			ПО ТСДПроверкиЯчейки.ТСД = итWMSСостояниеТСД.ТСД
	|				И ТСДПроверкиЯчейки.ДатаИнвентаризации >= итWMSСостояниеТСД.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТСДПроверкиЯчейки.ДатаИнвентаризации,
	|		ТСДПроверкиЯчейки.Ячейка,
	|		ТСДПроверкиЯчейки.ДокументОбработки,
	|		ТСДПроверкиЯчейки.ТСД) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСостояниеТСД КАК итWMSСостояниеТСД
	|		ПО ВложенныйЗапрос.ТСД = итWMSСостояниеТСД.ТСД
	|			И ВложенныйЗапрос.ДатаДанныхТСД = итWMSСостояниеТСД.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДатаИнвентаризации,
	|	ВложенныйЗапрос.Ячейка,
	|	ВложенныйЗапрос.ДокументОбработки,
	|	ВложенныйЗапрос.ТСД,
	|	ВложенныйЗапрос.ДатаДанныхТСД";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
    Запрос.Выполнить();
	
КонецПроцедуры