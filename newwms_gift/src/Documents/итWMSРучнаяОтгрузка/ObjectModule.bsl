Перем ИгнорироватьОтказПриПроверках Экспорт ;

#Область ПередЗаписью
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	
	Если Проведен и РежимЗаписи=РежимЗаписиДокумента.Запись Тогда 
		Если ОбменДанными.Загрузка Тогда 
			РежимЗаписи=РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	ИначеЕсли РежимЗаписи=РежимЗаписиДокумента.Запись и не Проведен Тогда 
		 СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;	
	КонецЕсли;
	
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение тогда
		ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;
	Если РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения тогда
		ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;
	Если ОбменДанными.Загрузка Тогда 
		Отказ=Ложь;
	КонецЕсли;	
КонецПроцедуры

Процедура ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения)
	СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен;
	ПроверитьОснованиеНаНесколькоПодчиненныхДокументов(Отказ);
	ПроверкаНаСоответствиеОснованию(Отказ);
	////////Гифт гвоздовая проверка на КА
//	ПроверкаУсловийКА(Отказ);
	////////////////
	ПроверкаНаДвижениеНеКратноУпаковки(Отказ, РежимЗаписи, РежимПроведения);

КонецПроцедуры

Процедура ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения)
	СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
	ОбработчикПриОтменеПроведенияОснование();
КонецПроцедуры

Процедура ПроверитьОснованиеНаНесколькоПодчиненныхДокументов(Отказ) Экспорт 
	Если итОснование=Неопределено Тогда 
		Возврат
	КонецЕсли;	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSРучнаяОтгрузка.Ссылка
	|ИЗ
	|	Документ.итWMSРучнаяОтгрузка КАК итWMSРучнаяОтгрузка
	|ГДЕ
	|	итWMSРучнаяОтгрузка.итОснование = &итОснование
	|	И итWMSРучнаяОтгрузка.Проведен = ИСТИНА
	|	И итWMSРучнаяОтгрузка.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	итОтгрузкаРазмещениеТоваров.Ссылка
	|ИЗ
	|	Документ.итОтгрузкаРазмещениеТоваров КАК итОтгрузкаРазмещениеТоваров
	|ГДЕ
	|	итОтгрузкаРазмещениеТоваров.Основание = &итОснование
	|	И итОтгрузкаРазмещениеТоваров.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	итWMSНаборка.Ссылка
	|ИЗ
	|	Документ.итWMSНаборка КАК итWMSНаборка
	|ГДЕ
	|	итWMSНаборка.итОснование = &итОснование
	|	И итWMSНаборка.Проведен";
	
	Запрос.УстановитьПараметр("итОснование", итОснование);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Отказ=Истина;
		Сообщить("У документа "+Строка(итОснование)+" уже есть складской документ "+ Строка(ВыборкаДетальныеЗаписи.Ссылка));
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Процедура ПроверкаНаСоответствиеОснованию(Отказ)
	Если итОснование=Неопределено Тогда 
		Возврат
	КонецЕсли;
	Если ТипЗнч(итОснование)=Тип("ДокументСсылка.СписаниеТоваров") Тогда 
		Если не итОснование.Пустая() Тогда 
		ПроверкаНаСоответствиеСписаниюТоваров(Отказ);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(итОснование)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если не итОснование.Пустая() Тогда 
		ПроверкаНаСоответствиеЗаказуПокупателя(Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверкаНаДвижениеНеКратноУпаковки(Отказ, РежимЗаписи, РежимПроведения)

	
	Если  не Константы.ВыдаватьПредупреждениеПриДвиженииНеКратноЕдМест.Получить() Тогда
		Возврат
	КонецЕсли;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSПеремещениеТовары.ИдентификаторУпаковки,
	|	итWMSПеремещениеТовары.Номенклатура,
	|	итWMSПеремещениеТовары.Характеристика,
	|	итWMSПеремещениеТовары.СерияНоменклатуры,
	|	итWMSПеремещениеТовары.Качество,
	|	итWMSПеремещениеТовары.ДатаРозлива,
	|	ЕСТЬNULL(итWMSПеремещениеТовары.Количество, 0) КАК Количество,
	|	итWMSПеремещениеТовары.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ ВтДанныеДокумента
	|ИЗ
	|	&Товары КАК итWMSПеремещениеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеДокумента.ИдентификаторУпаковки,
	|	НоменклатураДанные.Ссылка КАК Номенклатура,
	|	ВтДанныеДокумента.Характеристика,
	|	ВтДанныеДокумента.СерияНоменклатуры,
	|	ВтДанныеДокумента.Качество,
	|	ВтДанныеДокумента.ДатаРозлива,
	|	СУММА(ВтДанныеДокумента.Количество) КАК Количество,
	|	ВтДанныеДокумента.Ячейка
	|ПОМЕСТИТЬ ВтДанныеДокументаГруппировка
	|ИЗ
	|	ВтДанныеДокумента КАК ВтДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураДанные
	|		ПО ВтДанныеДокумента.Номенклатура = НоменклатураДанные.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеДокумента.ИдентификаторУпаковки,
	|	ВтДанныеДокумента.Характеристика,
	|	ВтДанныеДокумента.СерияНоменклатуры,
	|	ВтДанныеДокумента.Качество,
	|	ВтДанныеДокумента.ДатаРозлива,
	|	НоменклатураДанные.Ссылка,
	|	ВтДанныеДокумента.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеДокументаГруппировка.ИдентификаторУпаковки,
	|	ВтДанныеДокументаГруппировка.Номенклатура,
	|	ВтДанныеДокументаГруппировка.Характеристика,
	|	ВтДанныеДокументаГруппировка.СерияНоменклатуры,
	|	ВтДанныеДокументаГруппировка.Качество,
	|	ВтДанныеДокументаГруппировка.ДатаРозлива,
	|	ВтДанныеДокументаГруппировка.Количество,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(ВтДанныеДокументаГруппировка.Количество, 0) / ВЫБОР
	|					КОГДА ЕСТЬNULL(ВтДанныеДокументаГруппировка.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 0) = 0
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(ВтДанныеДокументаГруппировка.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 0)
	|				КОНЕЦ КАК ЧИСЛО(15, 2))) <> ЕСТЬNULL(ВтДанныеДокументаГруппировка.Количество, 0) / ВЫБОР
	|				КОГДА ЕСТЬNULL(ВтДанныеДокументаГруппировка.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 0) = 0
	|					ТОГДА 1
	|				ИНАЧЕ ЕСТЬNULL(ВтДанныеДокументаГруппировка.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 0)
	|			КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеКратноУпаковке,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВтДанныеДокументаГруппировка.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 0) = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаданыДанныеЕдМест,
	|	ВтДанныеДокументаГруппировка.Ячейка
	|ПОМЕСТИТЬ ИтоговыеДанные
	|ИЗ
	|	ВтДанныеДокументаГруппировка КАК ВтДанныеДокументаГруппировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговыеДанные.ИдентификаторУпаковки,
	|	ИтоговыеДанные.Номенклатура,
	|	ИтоговыеДанные.Характеристика,
	|	ИтоговыеДанные.СерияНоменклатуры,
	|	ИтоговыеДанные.Качество,
	|	ИтоговыеДанные.ДатаРозлива,
	|	ИтоговыеДанные.Количество,
	|	ИтоговыеДанные.НеКратноУпаковке,
	|	ИтоговыеДанные.НеЗаданыДанныеЕдМест,
	|	ИтоговыеДанные.Ячейка
	|ИЗ
	|	ИтоговыеДанные КАК ИтоговыеДанные
	|ГДЕ
	|	(ИтоговыеДанные.НеКратноУпаковке
	|			ИЛИ ИтоговыеДанные.НеЗаданыДанныеЕдМест)";
	
	Запрос.УстановитьПараметр("Товары",Товары);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НеКратноУпаковке Тогда 	
				Сообщить("в индентификаторе "+ВыборкаДетальныеЗаписи.ИдентификаторУпаковки +" из ячейки " + ВыборкаДетальныеЗаписи.Ячейка +" забирается количество номенклатуры "+ВыборкаДетальныеЗаписи.Номенклатура+" не кратное упаковке ");
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.НеЗаданыДанныеЕдМест Тогда 
				Сообщить("в индентификаторе "+ВыборкаДетальныеЗаписи.ИдентификаторУпаковки +" из ячейки " + ВыборкаДетальныеЗаписи.Ячейка +" для номенклатуры "+ВыборкаДетальныеЗаписи.Номенклатура+" не заданы параметры ед. мест ");
		КонецЕсли;
		
		Если Константы.БлокироватьПриДвиженииНеКратноЕдМест.Получить() Тогда 
			Отказ=Истина;
		КонецЕсли;	
	КонецЦикла;
	

	
КонецПроцедуры

Процедура ОбработчикПриОтменеПроведенияОснование()
	Если ТипЗнч(итОснование)=Тип("ДокументСсылка.итWMSНаборка") Тогда 
		ОбъектИзменения=итОснование.ПолучитьОбъект();
		ОбъектИзменения.ПроведениеБезИзмененияДатыЗавршения=Истина;
		ОбъектИзменения.ДействияПриФиксацииЗадачДокумента();
		ОбъектИзменения.Записать();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработкаПроведения
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	УстановитьБлокировкиДанныхИОчиститьРегистры();
	ПроведениеПоРегистрамНакопления(Отказ, РежимПроведения);
	ПроверкаНаСоответсвиеДанныхЯчеек(Отказ, РежимПроведения);
	Если Отказ Тогда 
		ОтменитьТранзакцию();
	КонецЕсли;	
	ЗафиксироватьТранзакцию();
	ОбработчикПриПроведенииОснование();
КонецПроцедуры

Процедура ОбработчикПриПроведенииОснование()
	Если ТипЗнч(итОснование)=Тип("ДокументСсылка.итWMSНаборка") Тогда 
		ОбъектИзменения=итОснование.ПолучитьОбъект();
		ОбъектИзменения.СуммаДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен;
		ОбъектИзменения.Записать();
	КонецЕсли;
	Если ТипЗнч(итОснование)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
		Если не  итОснование.Набран Тогда
			итОснованиеОбъект=итОснование.ПолучитьОбъект();
			итОснованиеОбъект.Набран=Истина;
			итОснованиеОбъект.итДатаЗавершенияНаборки=ТекущаяДата();
			итОснованиеОбъект.Записать();
		КонецЕсли;
		Если не Отгрузил.Пустая() Тогда
			
			//@skip-warning
			Если не итОснование.Отгружен Тогда    	
			ОбъектЗаказа=итОснование.ПолучитьОбъект();
			ОбъектЗаказа.Отгружен=Истина;
			ОбъектЗаказа.итДатаФактическойОтгрузки=ТекущаяДата();
			ОбъектЗаказа.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура  ПроведениеПоРегистрамНакопления(Отказ, РежимПроведения)
	ПроведениеПоТоварамВЯчейках(Отказ, РежимПроведения);
КонецПроцедуры

Процедура ПроведениеПоТоварамВЯчейках(Отказ, РежимПроведения)
	итТоварыВЯчейках=Движения.итТоварыВЯчейках;
	
	Для Каждого стр из Товары цикл
		////////////Расход
		НоваяЗапись=итТоварыВЯчейках.Добавить();
		НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Расход;
		НоваяЗапись.Регистратор=Ссылка;
		НоваяЗапись.Организация=Организация;
		НоваяЗапись.Период=Дата;
		НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
		НоваяЗапись.Номенклатура=стр.Номенклатура;
		НоваяЗапись.Склад=Склад;
		НоваяЗапись.Ячейка=стр.Ячейка;
		НоваяЗапись.СерияНоменклатуры=стр.СерияНоменклатуры;
		НоваяЗапись.Качество=?(стр.Качество=Справочники.Качество.ПустаяСсылка(),Справочники.Качество.Новый,стр.Качество);
		НоваяЗапись.Характеристика=стр.Характеристика;
		НоваяЗапись.ДатаРозлива=стр.ДатаРозлива;
		НоваяЗапись.Количество=стр.Количество;	
		///////////Приход
		//__________________________
	КонецЦикла;
	итТоварыВЯчейках.Записать();
КонецПроцедуры




Процедура ПроверкаНаСоответсвиеДанныхЯчеек(Отказ, РежимПроведения)

	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSРучнаяОтгрузкаТовары.ИдентификаторУпаковки,
	|	итWMSРучнаяОтгрузкаТовары.ДатаРозлива,
	|	ВЫБОР
	|		КОГДА итWMSРучнаяОтгрузкаТовары.Качество = ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Качество.Новый)
	|		ИНАЧЕ итWMSРучнаяОтгрузкаТовары.Качество
	|	КОНЕЦ КАК Качество,
	|	итWMSРучнаяОтгрузкаТовары.Номенклатура,
	|	итWMSРучнаяОтгрузкаТовары.СерияНоменклатуры,
	|	итWMSРучнаяОтгрузкаТовары.Характеристика,
	|	итWMSРучнаяОтгрузкаТовары.Ячейка,
	|	итWMSРучнаяОтгрузкаТовары.Ссылка.Организация
	|ПОМЕСТИТЬ ДанныеОтгрузки
	|ИЗ
	|	Документ.итWMSРучнаяОтгрузка.Товары КАК итWMSРучнаяОтгрузкаТовары
	|ГДЕ
	|	итWMSРучнаяОтгрузкаТовары.Ссылка = &Ссылка
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Организация,
	|	итТоварыВЯчейкахОстатки.Склад,
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.Ячейка,
	|	итТоварыВЯчейкахОстатки.Номенклатура,
	|	итТоварыВЯчейкахОстатки.Характеристика,
	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.ДатаРозлива,
	|	итТоварыВЯчейкахОстатки.Качество,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток КАК КоличествоОстаток
	|ИЗ
	|	ДанныеОтгрузки КАК ДанныеОтгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(&Период,) КАК итТоварыВЯчейкахОстатки
	|		ПО ДанныеОтгрузки.ИдентификаторУпаковки = итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
	|		И ДанныеОтгрузки.ДатаРозлива = итТоварыВЯчейкахОстатки.ДатаРозлива
	|		И ДанныеОтгрузки.Качество = итТоварыВЯчейкахОстатки.Качество
	|		И ДанныеОтгрузки.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|		И ДанныеОтгрузки.СерияНоменклатуры = итТоварыВЯчейкахОстатки.СерияНоменклатуры
	|		И ДанныеОтгрузки.Характеристика = итТоварыВЯчейкахОстатки.Характеристика
	|		И ДанныеОтгрузки.Ячейка = итТоварыВЯчейкахОстатки.Ячейка
	|		И ДанныеОтгрузки.Организация = итТоварыВЯчейкахОстатки.Организация
	|ГДЕ
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток < 0";
	
	Запрос.УстановитьПараметр("Период", новый Граница(новый МоментВремени(Дата,Ссылка),ВидГраницы.Включая));
	//Запрос.УстановитьПараметр("ПериодПроверкиРезирвирования",новый Граница(новый МоментВремени(ПериодПроверкиРезирвирования,Ссылка),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка",Ссылка);	
	
	РезультатЗапроса = Запрос.Выполнить();
	РезультатПроверкиПриЗабореТовараИзЯчейки=РезультатЗапроса.Выбрать();
	
	
	Пока  РезультатПроверкиПриЗабореТовараИзЯчейки.Следующий() цикл
		 Отказ=Истина;
		 Сообщить("Превышен остаток номенклатуры "+Строка(РезультатПроверкиПриЗабореТовараИзЯчейки.Номенклатура)+"в идентификаторе "+
		 РезультатПроверкиПриЗабореТовараИзЯчейки.ИдентификаторУпаковки+" серии с кодом "+РезультатПроверкиПриЗабореТовараИзЯчейки.СерияНоменклатуры.Код+" на "+
		 Строка(-РезультатПроверкиПриЗабореТовараИзЯчейки.КоличествоОстаток)+" ед."+" Ячейка идентификатора: "+Строка(РезультатПроверкиПриЗабореТовараИзЯчейки.Ячейка));
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьБлокировкиДанныхИОчиститьРегистры()
	
БлокировкаДанных = новый БлокировкаДанных;
	
#Область БлокировкаитТоварыВЯчейках	
	СтруктураПараметров=итWMSСлужебныеПроцедурыИФункции.СоздатьСтруктуруПараметровБлокировкиДанных(Товары,БлокировкаДанных);
	СтруктураПараметров.ПолеПространствоБлокировок="Номенклатура,Ячейка,ИдентификаторУпаковки";
	СтруктураПараметров.ПолеИсточника="Номенклатура,Ячейка,ИдентификаторУпаковки";
	СтруктураПараметров.ПространствоБлокировки="РегистрНакопления.итТоварыВЯчейках";
	итWMSСлужебныеПроцедурыИФункции.УстановкаЭлементаБлокировокДанныхWMS(СтруктураПараметров);
#КонецОбласти

	
	
БлокировкаДанных.Заблокировать();
	
	
	НаборЗаписей=РегистрыНакопления.итТоварыВЯчейках.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	
	
КонецПроцедуры


#КонецОбласти









#Область ЗаполнениеНаОсновании
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
       Если ДанныеЗаполнения.ИмеютсяНеЗарезервированныеТовары тогда 
       	ВызватьИсключение "Запрещено формировать наборку на заказ с отменой резервирования!";
       КонецЕсли;		
		ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения,ТекстЗаполнения, СтандартнаяОбработка);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения,ТекстЗаполнения, СтандартнаяОбработка)
	Если НЕ ДанныеЗаполнения.Проведен Тогда 
		СтандартнаяОбработка = Ложь;
		ВызватьИсключение "Заказ не проведен.";
	КонецЕсли;	
	Склад = ДанныеЗаполнения.Склад;
	//ВидОперации = Перечисления.итВидыОперацийОтгрузкиРазмещенияТоваров.Отгрузка;
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	итОснование = ДанныеЗаполнения.Ссылка;
	Контрагент = ДанныеЗаполнения.Контрагент; 
	Организация = ДанныеЗаполнения.Организация;
	СозданНаОснованиСерверногоВызова=Истина;
	РозничныйВидДеятельности=Контрагент.ит_WMS_ВидСкладскойДеятельности=Перечисления.ит_WMS_ВидыСкладскойДеятельности.Розничная;
	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	//////////// Получение данных настроек wms
	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам("СкладскиеПомещенияПриоритет");
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(НастройкиWMS) Тогда
		итWMSСлужебныеПроцедурыИФункции.WMSОповещениеОТиповыхОшибках(НастройкиWMS);
		ВызватьИсключение "Исключительная ошибка" ;
	КонецЕсли;
	//////////////////////////////////
	Если РозничныйВидДеятельности Тогда
		ЗапросДанныхПоТоварамВЯчейкахРозница(МенеджерВременныхТаблиц,ДанныеЗаполнения);
		//@skip-warning
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			Выполнить(ПолучитьСтратегиюНаОснованииРозница().ИмяМетода);		
		КонецЦикла;	
	Иначе 
		ЗапросДанныхПоТоварамВЯчейках(МенеджерВременныхТаблиц,ДанныеЗаполнения);
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			Выполнить(ПолучитьСтратегиюНаОснованииОпт().ИмяМетода);
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры

//@skip-warning
Процедура ОбработчикЗаполненияПоПриоритету(ТекСтрокаТовары,МенеджерВременныхТаблиц,ДанныеЗаполнения)
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	|	ДанныеПоискаНМ.Склад,
	|	ДанныеПоискаНМ.Ячейка,
	|	ДанныеПоискаНМ.Номенклатура,
	|	ДанныеПоискаНМ.Характеристика,
	|	ДанныеПоискаНМ.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеПоискаНМ.КоличествоОстаток КАК КоличествоОстаток,
	|	ДанныеПоискаНМ.Коэффициент,
	|	ДанныеПоискаНМ.Предрасчет,
	|	ДанныеПоискаНМ.Количество КАК Количество,
	|	ДанныеПоискаНМ.Качество,
	|	ДанныеПоискаНМ.ДатаРозлива КАК ДатаРозлива,
	|	ДанныеПоискаНМ.Ячейка.Ярус КАК Ярус,
	|	ДанныеПоискаНМ.ИдентификаторУпаковки,
	|	ДанныеПоискаНМ.Приоритет КАК Приоритет
	|ИЗ
	|	ДанныеПоискаНМ КАК ДанныеПоискаНМ
	|ГДЕ
	|	ДанныеПоискаНМ.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ДатаРозлива,
	|	КоличествоОстаток УБЫВ,
	|	СерияНоменклатуры,
	|	Ярус";					
	
	Запрос.УстановитьПараметр("Номенклатура",ТекСтрокаТовары.Номенклатура);
	
	
	
	Результат = Запрос.Выполнить();
	
	// **************************************************************************************************
	Таб = Результат.Выгрузить();
	
	_ОсталосьОтобрать = ТекСтрокаТовары.Количество;
	_КоличествоНаПаллете = ТекСтрокаТовары.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	Если ДанныеЗаполнения.Контрагент.итОтгрузкаПолнымиПалетами Тогда
		Если _КоличествоНаПаллете <> 0 Тогда
			// первый проход - подбор полных паллет
			Таб.Сортировать( "ДатаРозлива Возр, Количество Убыв, СерияНоменклатуры Возр, Ярус Возр" );
			Для каждого стр из Таб цикл
				// Все списано или остаток меньше паллеты
				Если _ОсталосьОтобрать < _КоличествоНаПаллете  Тогда
					Прервать;
				КонецЕсли;	
				// Остались остатки меньше паллеты (сортировка по убыванию)
				Если стр.Количество < _КоличествоНаПаллете Тогда
					Продолжить;
				КонецЕсли;	
				
				_КоличествоКОтгрузке = МИН( Цел(_ОсталосьОтобрать/_КоличествоНаПаллете)*_КоличествоНаПаллете,
				Цел((стр.Количество)/_КоличествоНаПаллете)*_КоличествоНаПаллете);
				
				// сформировать строку							
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
				НоваяСтрока.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
				НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
				НоваяСтрока.ДатаРозлива=стр.ДатаРозлива;
				//НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
				//НоваяСтрока.ЕдиницаИзмеренияМест = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
				//НоваяСтрока.Коэффициент = ТекСтрокаТовары.Коэффициент;
				//НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
				НоваяСтрока.СерияНоменклатуры = стр.СерияНоменклатуры;
				НоваяСтрока.Характеристика = стр.Характеристика;
				НоваяСтрока.Ячейка = стр.Ячейка;
				НоваяСтрока.Качество = стр.Качество;
				НоваяСтрока.Количество = _КоличествоКОтгрузке;
				//ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект, Истина);
				////НоваяСтрока.ОбъемУпаковки = ТекСтрокаТовары.ЕдиницаИзмеренияМест.Объем * ТекСтрокаТовары.КоличествоМест;
				////НоваяСтрока.ВесУпаковки = ТекСтрокаТовары.ЕдиницаИзмеренияМест.Вес * ТекСтрокаТовары.КоличествоМест;
				
				_ОсталосьОтобрать = _ОсталосьОтобрать - _КоличествоКОтгрузке;
				стр.Количество = стр.Количество - _КоличествоКОтгрузке;
				
			КонецЦикла;	
		Иначе
			Сообщить( "Для "+Строка(ТекСтрокаТовары.Номенклатура)+", ед.изм.мест "+ТекСтрокаТовары.ЕдиницаИзмеренияМест+" не указано количество в паллете." )	
		КонецЕсли; 		
		
		//// Второй проход - набрать остатки целым куском. Пересортировываем с учетом уже набранных паллет
		//Таб.Сортировать( "ДатаРозлива Возр, Количество Возр, Ярус Возр" );
		//Для каждого стр из Таб цикл
		//	// Все списано или остаток меньше паллеты
		//	Если _ОсталосьОтобрать = 0  Тогда
		//		Прервать;
		//	КонецЕсли;	
		//	Если стр.Количество >= _ОсталосьОтобрать Тогда 
		//		
		//		НоваяСтрока = Товары.Добавить();
		//		НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
		//		НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
		//		НоваяСтрока.ЕдиницаИзмеренияМест = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
		//		НоваяСтрока.Коэффициент = ТекСтрокаТовары.Коэффициент;
		//		НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
		//		НоваяСтрока.СерияНоменклатуры = стр.СерияНоменклатуры;
		//		НоваяСтрока.Характеристика = стр.Характеристика;
		//		НоваяСтрока.ЯчейкаОтправитель = стр.Ячейка;
		//		НоваяСтрока.Качество = стр.Качество;
		//		_КоличествоКОтгрузке = _ОсталосьОтобрать;
		//		НоваяСтрока.Количество = _КоличествоКОтгрузке;
		//		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект, Истина);
		//		НоваяСтрока.ОбъемУпаковки = ТекСтрокаТовары.ЕдиницаИзмеренияМест.Объем * ТекСтрокаТовары.КоличествоМест;
		//		НоваяСтрока.ВесУпаковки = ТекСтрокаТовары.ЕдиницаИзмеренияМест.Вес * ТекСтрокаТовары.КоличествоМест;
		//		_ОсталосьОтобрать = _ОсталосьОтобрать - _КоличествоКОтгрузке;
		//		стр.Количество = стр.Количество - _КоличествоКОтгрузке;
		//		Прервать;
		//		
		//	КонецЕсли;	
		//КонецЦикла;	
		
		// Третий подбор - подбор "где, сколько есть", но максимально большими кусками.
		Таб.Сортировать( "ДатаРозлива Возр, Количество Убыв, СерияНоменклатуры Возр, Ярус Возр" );
	КонецЕсли;	
	
	// Третий подбор или первый для набора по датам розлива
	Для каждого стр из Таб цикл
		// Все списано
		Если _ОсталосьОтобрать = 0 Тогда
			Прервать;
		КонецЕсли;	
		Если стр.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
		НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
		НоваяСтрока.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
		//НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
		//НоваяСтрока.ЕдиницаИзмеренияМест = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
		//НоваяСтрока.Коэффициент = ТекСтрокаТовары.Коэффициент;
		//НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
		НоваяСтрока.ДатаРозлива=стр.ДатаРозлива;
		НоваяСтрока.СерияНоменклатуры = стр.СерияНоменклатуры;
		НоваяСтрока.Характеристика = стр.Характеристика;
		НоваяСтрока.Ячейка = стр.Ячейка;
		НоваяСтрока.Качество = стр.Качество;
		
		_КоличествоКОтгрузке = МИН(стр.Количество, _ОсталосьОтобрать);
		НоваяСтрока.Количество = _КоличествоКОтгрузке;
		//ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект, Истина);
		
		//НоваяСтрока.ОбъемУпаковки = ТекСтрокаТовары.ЕдиницаИзмеренияМест.Объем * ТекСтрокаТовары.КоличествоМест;
		//НоваяСтрока.ВесУпаковки = ТекСтрокаТовары.ЕдиницаИзмеренияМест.Вес * ТекСтрокаТовары.КоличествоМест;
		_ОсталосьОтобрать = _ОсталосьОтобрать - _КоличествоКОтгрузке;
		стр.Количество = стр.Количество - _КоличествоКОтгрузке;
		
	КонецЦикла;
	
	// проверка на нехватку количества!!!
	Если _ОсталосьОтобрать>0 Тогда
		Сообщить("Внимание! Не хватило количество в ячейках для "+СТРОКА(ТекСтрокаТовары.Номенклатура),СтатусСообщения.Важное);	
	КонецЕсли;	
	
	
КонецПроцедуры

#Область СтратегияЗаполненияПоЗонам
#Область СтратегияОбработчикЗаполненияПоЗонам 

//@skip-warning
Процедура ОбработчикЗаполненияПоЗонам(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения )
	_ОсталосьОтобрать = СтрокаОбхода.Количество;
	_КоличествоНаПаллете = СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	СтруктураПараметров=СтруктураПараметровЗаполненияПоЗонам(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения);
	Если _КоличествоНаПаллете=0 Тогда 
		Сообщить( "Для "+Строка(СтрокаОбхода.Номенклатура)+", ед.изм.мест "+СтрокаОбхода.ЕдиницаИзмеренияМест+" не указано количество в паллете." );
		Товары.Очистить();
		Возврат
	КонецЕсли;
	Если _ОсталосьОтобрать<=_КоличествоНаПаллете  Тогда
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров,_ОсталосьОтобрать);
		Возврат
	КонецЕсли;
	
	Если КоличествоТовараВПикингеБольшеСтока(СтруктураПараметров) Тогда 
		СтруктураПараметров.Вставить("ОтключитьСообщениеПользователю",Истина);
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров,_ОсталосьОтобрать);
		СтруктураПараметров.Удалить("ОтключитьСообщениеПользователю");
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ОтборПолностьюИзПикинга") Тогда 
		Возврат
	КонецЕсли;	
	СтруктураПараметров.НомерОбхода=1;
	ЗаполнитьТоварИзЗонаХранения(СтруктураПараметров);	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикЗаполненияПоЗонамСУчетомПриорететаСП 

//@skip-warning
Процедура ОбработчикЗаполненияПоЗонамСУчетомПриорететаСП(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения,НастройкиWMS)
	Если СтрокаОбхода.НомерСтроки=1 Тогда 
		Если не НастройкиWMS.Свойство("СкладскиеПомещенияПриоритет") Тогда 
			ВызватьИсключение "Отсутствуютданные по приоритету <<СкладскиеПомещенияПриоритет>> ";
		КонецЕсли;
		ИзменитьПриорететДанныеНМ(МенеджерВременныхТаблиц,НастройкиWMS);
	КонецЕсли;
	_ОсталосьОтобрать = СтрокаОбхода.Количество;
	_КоличествоНаПаллете = СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	СтруктураПараметров=СтруктураПараметровЗаполненияПоЗонам(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения);
	Если _КоличествоНаПаллете=0 Тогда 
		Сообщить( "Для "+Строка(СтрокаОбхода.Номенклатура)+", ед.изм.мест "+СтрокаОбхода.ЕдиницаИзмеренияМест+" не указано количество в паллете." );
		Товары.Очистить();
		Возврат
	КонецЕсли;
	Если _ОсталосьОтобрать<=_КоличествоНаПаллете  Тогда
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров,_ОсталосьОтобрать);
		Возврат
	КонецЕсли;
	
	Если КоличествоТовараВПикингеБольшеСтока(СтруктураПараметров) Тогда 
		СтруктураПараметров.Вставить("ОтключитьСообщениеПользователю",Истина);
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров,_ОсталосьОтобрать);
		СтруктураПараметров.Удалить("ОтключитьСообщениеПользователю");
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ОтборПолностьюИзПикинга") Тогда 
		Возврат
	КонецЕсли;	
	СтруктураПараметров.НомерОбхода=1;
	ЗаполнитьТоварИзЗонаХранения(СтруктураПараметров);	
	
КонецПроцедуры
Процедура ИзменитьПриорететДанныеНМ(МенеджерВременныхТаблиц,НастройкиWMS)
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаПриоритетовСП.СкладскоеПомещение,
	|	ТаблицаПриоритетовСП.Приоритет
	|ПОМЕСТИТЬ ТаблицаПриоритетов
	|ИЗ
	|	&ТаблицаПриоритетовСП КАК ТаблицаПриоритетовСП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПриоритетов.СкладскоеПомещение,
	|	МАКСИМУМ(ТаблицаПриоритетов.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаПриоритетовГруппировка
	|ИЗ
	|	ТаблицаПриоритетов КАК ТаблицаПриоритетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПриоритетов.СкладскоеПомещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоискаНМ.Склад,
	|	ДанныеПоискаНМ.Ячейка КАК Ячейка,
	|	ДанныеПоискаНМ.Номенклатура,
	|	ДанныеПоискаНМ.Характеристика,
	|	ДанныеПоискаНМ.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеПоискаНМ.КоличествоОстаток КАК КоличествоОстаток,
	|	ДанныеПоискаНМ.Коэффициент,
	|	ДанныеПоискаНМ.Предрасчет,
	|	ДанныеПоискаНМ.Количество КАК Количество,
	|	ДанныеПоискаНМ.Качество,
	|	ДанныеПоискаНМ.ДатаРозлива КАК ДатаРозлива,
	|	ДанныеПоискаНМ.Ячейка.Ярус КАК Ярус,
	|	ДанныеПоискаНМ.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ЕСТЬNULL(ТаблицаПриоритетовГруппировка.Приоритет, 99) КАК Приоритет,
	|	ДанныеПоискаНМ.ЯчейкаЗона КАК ЯчейкаЗона
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	ДанныеПоискаНМ КАК ДанныеПоискаНМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПриоритетовГруппировка КАК ТаблицаПриоритетовГруппировка
	|		ПО ДанныеПоискаНМ.Ячейка.СкладскоеПомещение = ТаблицаПриоритетовГруппировка.СкладскоеПомещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеПоискаНМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Склад,
	|	ВТ.Ячейка,
	|	ВТ.Номенклатура,
	|	ВТ.Характеристика,
	|	ВТ.СерияНоменклатуры,
	|	ВТ.КоличествоОстаток,
	|	ВТ.Коэффициент,
	|	ВТ.Предрасчет,
	|	ВТ.Количество,
	|	ВТ.Качество,
	|	ВТ.ДатаРозлива,
	|	ВТ.Ярус,
	|	ВТ.ИдентификаторУпаковки,
	|	ВТ.Приоритет,
	|	ВТ.ЯчейкаЗона
	|ПОМЕСТИТЬ ДанныеПоискаНМ
	|ИЗ
	|	ВТ КАК ВТ";	
	
	Запрос.УстановитьПараметр("ТаблицаПриоритетовСП",НастройкиWMS.СкладскиеПомещенияПриоритет);	
	Запрос.Выполнить();
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикЗаполненияПоПриорететамСПИЗонамБезИсИзлишкамиПаллет

//@skip-warning
Процедура ОбработчикЗаполненияПоПриорететамСПИЗонам(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения,НастройкиWMS)
	Если не НастройкиWMS.Свойство("СкладскиеПомещенияПриоритет") Тогда 
		ВызватьИсключение "Отсутствуютданные по приоритету <<СкладскиеПомещенияПриоритет>> ";
	КонецЕсли;
	НастройкиWMS.СкладскиеПомещенияПриоритет.Сортировать("Приоритет");
	_ОсталосьОтобрать = СтрокаОбхода.Количество;
	_КоличествоНаПаллете = СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	СтруктураПараметров=СтруктураПараметровЗаполненияПоЗонам(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения);
	Если _КоличествоНаПаллете=0 Тогда 
		Сообщить( "Для "+Строка(СтрокаОбхода.Номенклатура)+", ед.изм.мест "+СтрокаОбхода.ЕдиницаИзмеренияМест+" не указано количество в паллете." );
		Товары.Очистить();
		Возврат
	КонецЕсли;
	Для Каждого стр из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
		Если _ОсталосьОтобрать=0 Тогда 
			Возврат;
		КонецЕсли;	
		СтруктураПараметров.Вставить("СкладскоеПомещение",стр.СкладскоеПомещение);
		Если _ОсталосьОтобрать<=_КоличествоНаПаллете  Тогда
			ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров,_ОсталосьОтобрать);
			СтруктураПараметров.НомерОбхода=1;
			Продолжить;
		КонецЕсли;
		Если _ОсталосьОтобрать=0 Тогда 
			Возврат;
		КонецЕсли;	
		Если КоличествоТовараВПикингеБольшеСтока(СтруктураПараметров) Тогда 
			_ОсталосьОтобратьБуфер=_ОсталосьОтобрать;
			СтруктураПараметров.Вставить("ИзлишекОтобрано",0);
			ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров,_ОсталосьОтобрать);
			_ОсталосьОтобрать=_ОсталосьОтобратьБуфер-СтруктураПараметров.ИзлишекОтобрано;
			СтруктураПараметров.Удалить("ИзлишекОтобрано");
			Если _ОсталосьОтобрать=0 Тогда 
				Возврат
			КонецЕсли;	
		КонецЕсли;
		СтруктураПараметров.НомерОбхода=1;
		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениям(СтруктураПараметров,_ОсталосьОтобрать);
		СтруктураПараметров.НомерОбхода=1;
	КонецЦикла;
	Если _ОсталосьОтобрать=0 Тогда 
		Возврат;
	КонецЕсли;	
	Если _ОсталосьОтобрать<=_КоличествоНаПаллете  Тогда
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров,_ОсталосьОтобрать);
		Возврат
	КонецЕсли;
	
	Если КоличествоТовараВПикингеБольшеСтока(СтруктураПараметров) Тогда 
		СтруктураПараметров.Вставить("ОтключитьСообщениеПользователю",Истина);
		_ОсталосьОтобратьБуфер=_ОсталосьОтобрать;
		СтруктураПараметров.Вставить("ИзлишекОтобрано",0);
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров,_ОсталосьОтобрать);
		_ОсталосьОтобрать=_ОсталосьОтобратьБуфер-СтруктураПараметров.ИзлишекОтобрано;
		СтруктураПараметров.Удалить("ИзлишекОтобрано");
		СтруктураПараметров.Удалить("ОтключитьСообщениеПользователю");
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ОтборПолностьюИзПикинга") Тогда 
		Возврат
	КонецЕсли;	
	СтруктураПараметров.НомерОбхода=1;
	ЗаполнитьТоварИзЗонаХранения(СтруктураПараметров,_ОсталосьОтобрать);	
	
КонецПроцедуры

//@skip-warning
Процедура ОбработчикЗаполненияПоПриорететамСПИЗонамБезИзлишковИПаллеты(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения,НастройкиWMS)
	Если не НастройкиWMS.Свойство("СкладскиеПомещенияПриоритет") Тогда 
		ВызватьИсключение "Отсутствуютданные по приоритету <<СкладскиеПомещенияПриоритет>> ";
	КонецЕсли;
	НастройкиWMS.СкладскиеПомещенияПриоритет.Сортировать("Приоритет");
	_ОсталосьОтобрать = СтрокаОбхода.Количество;
	_КоличествоНаПаллете = СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	СтруктураПараметров=СтруктураПараметровЗаполненияПоЗонам(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения);
	Если _КоличествоНаПаллете=0 Тогда 
		Сообщить( "Для "+Строка(СтрокаОбхода.Номенклатура)+", ед.изм.мест "+СтрокаОбхода.ЕдиницаИзмеренияМест+" не указано количество в паллете." );
		Товары.Очистить();
		Возврат
	КонецЕсли;
	Для Каждого стр из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
		Если _ОсталосьОтобрать=0 Тогда 
			Возврат;
		КонецЕсли;	
		СтруктураПараметров.Вставить("СкладскоеПомещение",стр.СкладскоеПомещение);
		Если _ОсталосьОтобрать<_КоличествоНаПаллете  Тогда
			ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров,_ОсталосьОтобрать);
			СтруктураПараметров.НомерОбхода=1;
			Продолжить;
		КонецЕсли;
		Если _ОсталосьОтобрать=0 Тогда 
			Возврат;
		КонецЕсли;	
		
		СтруктураПараметров.НомерОбхода=1;
		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениям(СтруктураПараметров,_ОсталосьОтобрать);
		СтруктураПараметров.НомерОбхода=1;
	КонецЦикла;
	Если _ОсталосьОтобрать=0 Тогда 
		Возврат;
	КонецЕсли;	
	Если _ОсталосьОтобрать<_КоличествоНаПаллете  Тогда
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров,_ОсталосьОтобрать);
		Возврат
	КонецЕсли;
	
	СтруктураПараметров.НомерОбхода=1;
	ЗаполнитьТоварИзЗонаХранения(СтруктураПараметров,_ОсталосьОтобрать);	
	
КонецПроцедуры

Процедура ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров,_ОсталосьОтобрать=0)
	_КоличествоНаПаллете = СтруктураПараметров.СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	ОтгрузкаКлиентуЦелымиПаллетами= СтруктураПараметров.ДанныеЗаполнения.Контрагент.итОтгрузкаПолнымиПалетами;
	ЗаполнятьИзлишекОтобрано=Ложь;
	Если _ОсталосьОтобрать< _КоличествоНаПаллете Тогда
		ОтгрузкаКлиентуЦелымиПаллетами=Ложь;
	КонецЕсли;
	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонамИСкладскимПомещениям(СтруктураПараметров.МенеджерВременныхТаблиц,СтруктураПараметров.СтрокаОбхода.Номенклатура,Перечисления.итWMSЗоныСклада.Пикинга,
	СтруктураПараметров.СкладскоеПомещение);
	ТаблицаЗарезервированныхДанных=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоговПоЗоне.Следующий() цикл
		Если СтруктураПараметров.Свойство("ОтборИзлишкаПаллетПикинга") Тогда 
			Если  СтруктураПараметров.ОтборИзлишкаПаллетПикинга Тогда 
				Если СтруктураПараметров.РазрешенноеКоличествоОтбораПикинга<_ОсталосьОтобрать Тогда 
					_ОсталосьОтобрать=СтруктураПараметров.РазрешенноеКоличествоОтбораПикинга;
				КонецЕсли;
				ЗаполнятьИзлишекОтобрано=Истина;
			КонецЕсли;
		КонецЕсли;
		ОстатокИтогоПоЗоне=ВыборкаИтоговПоЗоне.Количество;
		ВыборкаДетальныхЗаписей=ВыборкаИтоговПоЗоне.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() цикл
			Если _ОсталосьОтобрать<=0 Тогда 
				Прервать;
			КонецЕсли;	
			Если ВыборкаДетальныхЗаписей.Количество<_КоличествоНаПаллете и ОтгрузкаКлиентуЦелымиПаллетами и СтруктураПараметров.НомерОбхода=1 Тогда
				ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне-ВыборкаДетальныхЗаписей.Количество;
				Продолжить;
			КонецЕсли;
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
			НоваяСтрока.Номенклатура=ВыборкаДетальныхЗаписей.Номенклатура;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДетальныхЗаписей.ИдентификаторУпаковки;
			НоваяСтрока.Качество=ВыборкаДетальныхЗаписей.Качество;
			НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныхЗаписей.СерияНоменклатуры;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.ДатаРозлива;
			НоваяСтрока.Характеристика=ВыборкаДетальныхЗаписей.Характеристика;
			НоваяСтрока.Ячейка=ВыборкаДетальныхЗаписей.Ячейка;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.СерияНоменклатуры.ДатаПроизводства;
			Если _ОсталосьОтобрать<=ВыборкаДетальныхЗаписей.Количество Тогда 
				НоваяСтрока.Количество=_ОсталосьОтобрать;
			иначе
				НоваяСтрока.Количество=ВыборкаДетальныхЗаписей.Количество;
			КонецЕсли;
			Если ЗаполнятьИзлишекОтобрано Тогда 
				СтруктураПараметров.ИзлишекОтобрано=СтруктураПараметров.ИзлишекОтобрано+НоваяСтрока.Количество;
			КонецЕсли;	
			_ОсталосьОтобрать=_ОсталосьОтобрать-НоваяСтрока.Количество;
			НоваяСтрокаРезерва=ТаблицаЗарезервированныхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва,ВыборкаДетальныхЗаписей);
			НоваяСтрокаРезерва.Количество=НоваяСтрока.Количество;
			ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне-НоваяСтрока.Количество;
		КонецЦикла;
		ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц,ТаблицаЗарезервированныхДанных);
	КонецЦикла;
	Если _ОсталосьОтобрать >0 Тогда
		Если СтруктураПараметров.НомерОбхода=1 и ОтгрузкаКлиентуЦелымиПаллетами Тогда
			СтруктураПараметров.НомерОбхода=2;
			ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров,_ОсталосьОтобрать);
			Возврат
		КонецЕсли;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ОтборИзлишкаПаллетПикинга") Тогда 
		СтруктураПараметров.Удалить("ОтборИзлишкаПаллетПикинга");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениям(СтруктураПараметров,_ОсталосьОтобрать)
	
	_КоличествоНаПаллете = СтруктураПараметров.СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	ОтгрузкаКлиентуЦелымиПаллетами= СтруктураПараметров.ДанныеЗаполнения.Контрагент.итОтгрузкаПолнымиПалетами;
	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонамИСкладскимПомещениям(СтруктураПараметров.МенеджерВременныхТаблиц,СтруктураПараметров.СтрокаОбхода.Номенклатура,Перечисления.итWMSЗоныСклада.Хранения,
	СтруктураПараметров.СкладскоеПомещение);
	ТаблицаЗарезервированныхДанных=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоговПоЗоне.Следующий() цикл
		
		Если ВыборкаИтоговПоЗоне.Количество<_КоличествоНаПаллете и ОтгрузкаКлиентуЦелымиПаллетами Тогда 
			СтруктураПараметров.НомерОбхода=2;
		КонецЕсли;	
		ОстатокИтогоПоЗоне=ВыборкаИтоговПоЗоне.Количество;
		
		ВыборкаДетальныхЗаписей=ВыборкаИтоговПоЗоне.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() цикл
			Если _ОсталосьОтобрать<=0 Тогда 
				Прервать;
			КонецЕсли;	
			Если ВыборкаДетальныхЗаписей.Количество<_КоличествоНаПаллете и ОтгрузкаКлиентуЦелымиПаллетами и СтруктураПараметров.НомерОбхода=1 Тогда 
				ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне-ВыборкаДетальныхЗаписей.Количество;
				Продолжить;
			КонецЕсли;
			Если _ОсталосьОтобрать< _КоличествоНаПаллете Тогда
				ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц,ТаблицаЗарезервированныхДанных);
				СтруктураПараметров.НомерОбхода=1;
				ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров,_ОсталосьОтобрать);
				Возврат
			КонецЕсли;
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
			НоваяСтрока.Номенклатура=ВыборкаДетальныхЗаписей.Номенклатура;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДетальныхЗаписей.ИдентификаторУпаковки;
			НоваяСтрока.Качество=ВыборкаДетальныхЗаписей.Качество;
			НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныхЗаписей.СерияНоменклатуры;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.ДатаРозлива;
			НоваяСтрока.Характеристика=ВыборкаДетальныхЗаписей.Характеристика;
			НоваяСтрока.Ячейка=ВыборкаДетальныхЗаписей.Ячейка;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.СерияНоменклатуры.ДатаПроизводства;
			Если _ОсталосьОтобрать<=ВыборкаДетальныхЗаписей.Количество Тогда 
				НоваяСтрока.Количество=_ОсталосьОтобрать;
			иначе
				НоваяСтрока.Количество=ВыборкаДетальныхЗаписей.Количество;
			КонецЕсли;
			_ОсталосьОтобрать=_ОсталосьОтобрать-НоваяСтрока.Количество;
			НоваяСтрокаРезерва=ТаблицаЗарезервированныхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва,ВыборкаДетальныхЗаписей);
			НоваяСтрокаРезерва.Количество=НоваяСтрока.Количество;
			ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне-НоваяСтрока.Количество;
		КонецЦикла;
		ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц,ТаблицаЗарезервированныхДанных);
	КонецЦикла;
	Если  _ОсталосьОтобрать >0  Тогда
		Если СтруктураПараметров.НомерОбхода=1 и ОтгрузкаКлиентуЦелымиПаллетами Тогда
			СтруктураПараметров.НомерОбхода=2;
			ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениям(СтруктураПараметров,_ОсталосьОтобрать);
			Возврат
		КонецЕсли;
		СтруктураПараметров.НомерОбхода=1;
		ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров,_ОсталосьОтобрать)
	КонецЕсли;
КонецПроцедуры

#КонецОбласти




Процедура ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров,_ОсталосьОтобрать=0)
	_КоличествоНаПаллете = СтруктураПараметров.СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	ОтгрузкаКлиентуЦелымиПаллетами= СтруктураПараметров.ДанныеЗаполнения.Контрагент.итОтгрузкаПолнымиПалетами;
	ЗаполнятьИзлишекОтобрано=Ложь;
	Если _ОсталосьОтобрать< _КоличествоНаПаллете Тогда
		ОтгрузкаКлиентуЦелымиПаллетами=Ложь;
	КонецЕсли;
	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонам(СтруктураПараметров.МенеджерВременныхТаблиц,СтруктураПараметров.СтрокаОбхода.Номенклатура,Перечисления.итWMSЗоныСклада.Пикинга);
	ТаблицаЗарезервированныхДанных=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоговПоЗоне.Следующий() цикл
		Если ВыборкаИтоговПоЗоне.Количество<_ОсталосьОтобрать и не СтруктураПараметров.Свойство("ОтборИзлишкаПаллетПикинга")  Тогда 
			Если не СтруктураПараметров.Свойство("ОтключитьСообщениеПользователю") Тогда 
				Сообщить("не хватает товара "+СтруктураПараметров.СтрокаОбхода.Номенклатура+" в количестве " + Строка(_ОсталосьОтобрать-ВыборкаИтоговПоЗоне.Количество));
			КонецЕсли;
			Возврат
		КонецЕсли;
		Если СтруктураПараметров.Свойство("ОтборИзлишкаПаллетПикинга") Тогда 
			Если  СтруктураПараметров.ОтборИзлишкаПаллетПикинга Тогда 
				Если СтруктураПараметров.РазрешенноеКоличествоОтбораПикинга<_ОсталосьОтобрать Тогда 
					_ОсталосьОтобрать=СтруктураПараметров.РазрешенноеКоличествоОтбораПикинга;
					СтруктураПараметров.Вставить("ОтборРазрешенногоКоличество",Истина);
				иначе
					СтруктураПараметров.Вставить("ОтборПолностьюИзПикинга",Истина);
				КонецЕсли;
				Если СтруктураПараметров.Свойство("ИзлишекОтобрано") Тогда 
					ЗаполнятьИзлишекОтобрано=Истина;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		ОстатокИтогоПоЗоне=ВыборкаИтоговПоЗоне.Количество;
		ВыборкаДетальныхЗаписей=ВыборкаИтоговПоЗоне.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() цикл
			Если _ОсталосьОтобрать<=0 Тогда 
				Прервать;
			КонецЕсли;	
			Если ВыборкаДетальныхЗаписей.Количество<_КоличествоНаПаллете и ОтгрузкаКлиентуЦелымиПаллетами и СтруктураПараметров.НомерОбхода=1 Тогда
				ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне-ВыборкаДетальныхЗаписей.Количество;
				Продолжить;
			КонецЕсли;
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
			НоваяСтрока.Номенклатура=ВыборкаДетальныхЗаписей.Номенклатура;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДетальныхЗаписей.ИдентификаторУпаковки;
			НоваяСтрока.Качество=ВыборкаДетальныхЗаписей.Качество;
			НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныхЗаписей.СерияНоменклатуры;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.ДатаРозлива;
			НоваяСтрока.Характеристика=ВыборкаДетальныхЗаписей.Характеристика;
			НоваяСтрока.Ячейка=ВыборкаДетальныхЗаписей.Ячейка;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.СерияНоменклатуры.ДатаПроизводства;
			Если _ОсталосьОтобрать<=ВыборкаДетальныхЗаписей.Количество Тогда 
				НоваяСтрока.Количество=_ОсталосьОтобрать;
			иначе
				НоваяСтрока.Количество=ВыборкаДетальныхЗаписей.Количество;
			КонецЕсли;
			Если ЗаполнятьИзлишекОтобрано Тогда 
				СтруктураПараметров.ИзлишекОтобрано=СтруктураПараметров.ИзлишекОтобрано+НоваяСтрока.Количество;
			КонецЕсли;
			_ОсталосьОтобрать=_ОсталосьОтобрать-НоваяСтрока.Количество;
			НоваяСтрокаРезерва=ТаблицаЗарезервированныхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва,ВыборкаДетальныхЗаписей);
			НоваяСтрокаРезерва.Количество=НоваяСтрока.Количество;
			ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне-НоваяСтрока.Количество;
		КонецЦикла;
		ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц,ТаблицаЗарезервированныхДанных);
	КонецЦикла;
	Если _ОсталосьОтобрать >0 Тогда
		Если СтруктураПараметров.НомерОбхода=1 и ОтгрузкаКлиентуЦелымиПаллетами Тогда
			СтруктураПараметров.НомерОбхода=2;
			ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров,_ОсталосьОтобрать);
			Возврат
		КонецЕсли;
		Если не СтруктураПараметров.Свойство("ОтключитьСообщениеПользователю") Тогда 
			Сообщить(" не хватает  товара  "+СтруктураПараметров.СтрокаОбхода.Номенклатура +" в количестве "+Строка(_ОсталосьОтобрать));
		КонецЕсли;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ОтборИзлишкаПаллетПикинга") Тогда 
		СтруктураПараметров.Удалить("ОтборИзлишкаПаллетПикинга");
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТоварИзЗонаХранения(СтруктураПараметров,_ОсталосьОтобрать=Неопределено) 
	Если _ОсталосьОтобрать=Неопределено Тогда
		Если СтруктураПараметров.Свойство("ОтборРазрешенногоКоличество") Тогда 
			_ОсталосьОтобрать = СтруктураПараметров.СтрокаОбхода.Количество -СтруктураПараметров.РазрешенноеКоличествоОтбораПикинга ;
		иначе
			_ОсталосьОтобрать = СтруктураПараметров.СтрокаОбхода.Количество;
		КонецЕсли;	
	КонецЕсли;
	
	_КоличествоНаПаллете = СтруктураПараметров.СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	ОтгрузкаКлиентуЦелымиПаллетами= СтруктураПараметров.ДанныеЗаполнения.Контрагент.итОтгрузкаПолнымиПалетами;
	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонам(СтруктураПараметров.МенеджерВременныхТаблиц,СтруктураПараметров.СтрокаОбхода.Номенклатура,Перечисления.итWMSЗоныСклада.Хранения);
	ТаблицаЗарезервированныхДанных=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоговПоЗоне.Следующий() цикл
		//Если ВыборкаИтоговПоЗоне.Количество<_ОсталосьОтобрать Тогда 
		//	ЗаполненитьТовараИзЗонаПикинга(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения,_ОсталосьОтобрать);
		//	Возврат
		//КонецЕсли;	
		Если ВыборкаИтоговПоЗоне.Количество<_КоличествоНаПаллете и ОтгрузкаКлиентуЦелымиПаллетами Тогда 
			//ЗаполнитьТоварИзЗонаПикинга(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения,_ОсталосьОтобрать);
			//Возврат
			СтруктураПараметров.НомерОбхода=2;
		КонецЕсли;	
		ОстатокИтогоПоЗоне=ВыборкаИтоговПоЗоне.Количество;
		
		ВыборкаДетальныхЗаписей=ВыборкаИтоговПоЗоне.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() цикл
			Если _ОсталосьОтобрать<=0 Тогда 
				Прервать;
			КонецЕсли;	
			Если ВыборкаДетальныхЗаписей.Количество<_КоличествоНаПаллете и ОтгрузкаКлиентуЦелымиПаллетами и СтруктураПараметров.НомерОбхода=1 Тогда 
				ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне-ВыборкаДетальныхЗаписей.Количество;
				Продолжить;
			КонецЕсли;
			Если _ОсталосьОтобрать< _КоличествоНаПаллете Тогда
				ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц,ТаблицаЗарезервированныхДанных);
				СтруктураПараметров.НомерОбхода=1;
				ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров,_ОсталосьОтобрать);
				Возврат
			КонецЕсли;
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
			НоваяСтрока.Номенклатура=ВыборкаДетальныхЗаписей.Номенклатура;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДетальныхЗаписей.ИдентификаторУпаковки;
			НоваяСтрока.Качество=ВыборкаДетальныхЗаписей.Качество;
			НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныхЗаписей.СерияНоменклатуры;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.ДатаРозлива;
			НоваяСтрока.Характеристика=ВыборкаДетальныхЗаписей.Характеристика;
			НоваяСтрока.Ячейка=ВыборкаДетальныхЗаписей.Ячейка;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.СерияНоменклатуры.ДатаПроизводства;
			Если _ОсталосьОтобрать<=ВыборкаДетальныхЗаписей.Количество Тогда 
				НоваяСтрока.Количество=_ОсталосьОтобрать;
			иначе
				НоваяСтрока.Количество=ВыборкаДетальныхЗаписей.Количество;
			КонецЕсли;
			_ОсталосьОтобрать=_ОсталосьОтобрать-НоваяСтрока.Количество;
			НоваяСтрокаРезерва=ТаблицаЗарезервированныхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва,ВыборкаДетальныхЗаписей);
			НоваяСтрокаРезерва.Количество=НоваяСтрока.Количество;
			ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне-НоваяСтрока.Количество;
		КонецЦикла;
		ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц,ТаблицаЗарезервированныхДанных);
	КонецЦикла;
	Если  _ОсталосьОтобрать >0  Тогда
		Если СтруктураПараметров.НомерОбхода=1 и ОтгрузкаКлиентуЦелымиПаллетами Тогда
			СтруктураПараметров.НомерОбхода=2;
			ЗаполнитьТоварИзЗонаХранения(СтруктураПараметров,_ОсталосьОтобрать);
			Возврат
		КонецЕсли;
		СтруктураПараметров.НомерОбхода=1;
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров,_ОсталосьОтобрать)
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СквозныеСтратегии

#Область ОбработчикЗаполненияСквознойПоСПиЗонам

//@skip-warning
Процедура ОбработчикЗаполненияСквознойПоСПиЗонам(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения,НастройкиWMS)
	Если не НастройкиWMS.Свойство("СкладскиеПомещенияПриоритет") Тогда 
		ВызватьИсключение "Отсутствуютданные по приоритету <<СкладскиеПомещенияПриоритет>> ";
	КонецЕсли;
	НастройкиWMS.СкладскиеПомещенияПриоритет.Сортировать("Приоритет");
	_ОсталосьОтобрать = СтрокаОбхода.Количество;
	_КоличествоНаПаллете = СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	Если _КоличествоНаПаллете=0 Тогда 
		Сообщить( "Для "+Строка(СтрокаОбхода.Номенклатура)+", ед.изм.мест "+СтрокаОбхода.ЕдиницаИзмеренияМест+" не указано количество в паллете." );
		Товары.Очистить();
		Возврат
	КонецЕсли;
	СтруктураПараметров=СтруктураПараметровЗаполненияПоЗонам(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения);
	СтруктураПараметров.Вставить("ОтгрузкаКлиентуЦелымиПаллетами",СтруктураПараметров.ДанныеЗаполнения.Контрагент.итОтгрузкаПолнымиПалетами);
	СтруктураПараметров.Вставить("КоличествоНаПаллете",_КоличествоНаПаллете);
	Если _ОсталосьОтобрать<_КоличествоНаПаллете  Тогда
		АлгоритмСтрокиСковознойСПМеньшеПаллеты(СтруктураПараметров,НастройкиWMS,_ОсталосьОтобрать);
	Иначе 
		АлгоритсСквознойСПБольшеПаллеты(СтруктураПараметров,НастройкиWMS,_ОсталосьОтобрать);
	КонецЕсли;
	Если _ОсталосьОтобрать>0 Тогда
		СтруктураПараметров.НомерОбхода=1;
		МассивСкладскихПомещений=ПолучитьМассивСкладсихПомещений();
		СтруктураПараметров.Вставить("МассивСкладскихПомещений",МассивСкладскихПомещений);
		Если _ОсталосьОтобрать<_КоличествоНаПаллете  Тогда
			АлгоритмСтрокиСковознойМеньшеПаллетыМассивСП(СтруктураПараметров,НастройкиWMS,_ОсталосьОтобрать);
		Иначе 
			АлгоритсСквознойБольшеПаллетыМассивСП(СтруктураПараметров,НастройкиWMS,_ОсталосьОтобрать);
		КонецЕсли;
	КонецЕсли;
	Если _ОсталосьОтобрать>0 Тогда 
		Сообщить("Для номенклатуры "+Строка(СтрокаОбхода.Номенклатура)+ " не удалось найти "+ Строка(_ОсталосьОтобрать));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


Процедура АлгоритмСтрокиСковознойМеньшеПаллетыМассивСП(СтруктураПараметров,НастройкиWMS,_ОсталосьОтобрать)
	СтруктураПараметров.НомерОбхода=3;	
	СтруктураПараметров.Вставить("СкладскоеПомещение",СтруктураПараметров.МассивСкладскихПомещений);
	ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров,_ОсталосьОтобрать);
	Если _ОсталосьОтобрать>0 Тогда 
		СтруктураПараметров.Вставить("СкладскоеПомещение",СтруктураПараметров.МассивСкладскихПомещений);
		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров,_ОсталосьОтобрать);
	КонецЕсли;
КонецПроцедуры

Процедура АлгоритсСквознойБольшеПаллетыМассивСП(СтруктураПараметров,НастройкиWMS,_ОсталосьОтобрать)
	
	СтруктураПараметров.Вставить("СкладскоеПомещение",СтруктураПараметров.МассивСкладскихПомещений);
	ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров,_ОсталосьОтобрать);		
	Если _ОсталосьОтобрать >0 Тогда
		СтруктураПараметров.Вставить("СкладскоеПомещение",СтруктураПараметров.МассивСкладскихПомещений);
		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров,_ОсталосьОтобрать);
		//СтруктураПараметров.Вставить("СкладскоеПомещение",СтруктураПараметров.МассивСкладскихПомещений);
		//ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров,_ОсталосьОтобрать);
	КонецЕсли;
	СтруктураПараметров.НомерОбхода=2;
	Если _ОсталосьОтобрать >0 Тогда
		СтруктураПараметров.Вставить("СкладскоеПомещение",СтруктураПараметров.МассивСкладскихПомещений);
		ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров,_ОсталосьОтобрать);
	КонецЕсли;
	//Если СтруктураПараметров.ОтгрузкаКлиентуЦелымиПаллетами Тогда 
	//	Если _ОсталосьОтобрать >0 и _ОсталосьОтобрать>СтруктураПараметров.КоличествоНаПаллете Тогда
	//		СтруктураПараметров.Вставить("СкладскоеПомещение",СтруктураПараметров.МассивСкладскихПомещений);
	//		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров,_ОсталосьОтобрать);
	//	КонецЕсли;
	//КонецЕсли;
	Если _ОсталосьОтобрать >0 Тогда
		СтруктураПараметров.НомерОбхода=3;
		СтруктураПараметров.Вставить("СкладскоеПомещение",СтруктураПараметров.МассивСкладскихПомещений);
		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров,_ОсталосьОтобрать);	
	КонецЕсли;
	
КонецПроцедуры

Процедура АлгоритсСквознойСПБольшеПаллеты(СтруктураПараметров,НастройкиWMS,_ОсталосьОтобрать)
	Для Каждого стр из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
		Если _ОсталосьОтобрать <СтруктураПараметров.КоличествоНаПаллете Тогда 
			Прервать;
		КонецЕсли;
		СтруктураПараметров.Вставить("СкладскоеПомещение",стр.СкладскоеПомещение);
		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров,_ОсталосьОтобрать);
	КонецЦикла;
	Если _ОсталосьОтобрать >0 Тогда
		Для Каждого стр из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
			Если _ОсталосьОтобрать <= 0 Тогда 
				Прервать;
			КонецЕсли;
			СтруктураПараметров.Вставить("СкладскоеПомещение",стр.СкладскоеПомещение);
			ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров,_ОсталосьОтобрать);
		КонецЦикла;
	КонецЕсли;
	СтруктураПараметров.НомерОбхода=2;
	Если _ОсталосьОтобрать >0 Тогда
		Для Каждого стр из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
			Если _ОсталосьОтобрать <= 0 Тогда 
				Прервать;
			КонецЕсли;
			СтруктураПараметров.Вставить("СкладскоеПомещение",стр.СкладскоеПомещение);
			ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров,_ОсталосьОтобрать);
		КонецЦикла;
	КонецЕсли;
	Если СтруктураПараметров.ОтгрузкаКлиентуЦелымиПаллетами Тогда 
		Если _ОсталосьОтобрать >0 и _ОсталосьОтобрать>СтруктураПараметров.КоличествоНаПаллете Тогда
			Для Каждого стр из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
				Если _ОсталосьОтобрать <СтруктураПараметров.КоличествоНаПаллете Тогда 
					Прервать;
				КонецЕсли;
				СтруктураПараметров.Вставить("СкладскоеПомещение",стр.СкладскоеПомещение);
				ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров,_ОсталосьОтобрать);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если _ОсталосьОтобрать >0 Тогда
		СтруктураПараметров.НомерОбхода=3;
		Для Каждого стр из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
			СтруктураПараметров.Вставить("СкладскоеПомещение",стр.СкладскоеПомещение);
			ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров,_ОсталосьОтобрать);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура АлгоритмСтрокиСковознойСПМеньшеПаллеты(СтруктураПараметров,НастройкиWMS,_ОсталосьОтобрать)
	СтруктураПараметров.НомерОбхода=3;
	Для Каждого стр из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
		Если _ОсталосьОтобрать <=0 Тогда 
			Прервать;
		КонецЕсли;	
		СтруктураПараметров.Вставить("СкладскоеПомещение",стр.СкладскоеПомещение);
		ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров,_ОсталосьОтобрать);
	КонецЦикла;
	Если _ОсталосьОтобрать>0 Тогда 
		Для Каждого стр из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
			СтруктураПараметров.Вставить("СкладскоеПомещение",стр.СкладскоеПомещение);
			ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров,_ОсталосьОтобрать);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров,_ОсталосьОтобрать)
	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонамИСкладскимПомещениям(СтруктураПараметров.МенеджерВременныхТаблиц,СтруктураПараметров.СтрокаОбхода.Номенклатура,Перечисления.итWMSЗоныСклада.Пикинга,
	СтруктураПараметров.СкладскоеПомещение);
	ТаблицаЗарезервированныхДанных=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоговПоЗоне.Следующий() цикл
		ОстатокИтогоПоЗоне=ВыборкаИтоговПоЗоне.Количество;
		ВыборкаДетальныхЗаписей=ВыборкаИтоговПоЗоне.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() цикл
			Если _ОсталосьОтобрать<=0 Тогда 
				Прервать;
			КонецЕсли;	
			Если ВыборкаДетальныхЗаписей.Количество<СтруктураПараметров.КоличествоНаПаллете и СтруктураПараметров.ОтгрузкаКлиентуЦелымиПаллетами 
				и СтруктураПараметров.НомерОбхода=1 Тогда
				ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне-ВыборкаДетальныхЗаписей.Количество;
				Продолжить;
			КонецЕсли;
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
			НоваяСтрока.Номенклатура=ВыборкаДетальныхЗаписей.Номенклатура;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДетальныхЗаписей.ИдентификаторУпаковки;
			НоваяСтрока.Качество=ВыборкаДетальныхЗаписей.Качество;
			НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныхЗаписей.СерияНоменклатуры;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.ДатаРозлива;
			НоваяСтрока.Характеристика=ВыборкаДетальныхЗаписей.Характеристика;
			НоваяСтрока.Ячейка=ВыборкаДетальныхЗаписей.Ячейка;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.СерияНоменклатуры.ДатаПроизводства;
			Если _ОсталосьОтобрать<=ВыборкаДетальныхЗаписей.Количество Тогда 
				НоваяСтрока.Количество=_ОсталосьОтобрать;
			иначе
				НоваяСтрока.Количество=ВыборкаДетальныхЗаписей.Количество;
			КонецЕсли;
			_ОсталосьОтобрать=_ОсталосьОтобрать-НоваяСтрока.Количество;
			НоваяСтрокаРезерва=ТаблицаЗарезервированныхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва,ВыборкаДетальныхЗаписей);
			НоваяСтрокаРезерва.Количество=НоваяСтрока.Количество;
			ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне-НоваяСтрока.Количество;
		КонецЦикла;
		ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц,ТаблицаЗарезервированныхДанных);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров,_ОсталосьОтобрать)
	
	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонамИСкладскимПомещениям(СтруктураПараметров.МенеджерВременныхТаблиц,СтруктураПараметров.СтрокаОбхода.Номенклатура,Перечисления.итWMSЗоныСклада.Хранения,
	СтруктураПараметров.СкладскоеПомещение);
	ТаблицаЗарезервированныхДанных=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоговПоЗоне.Следующий() цикл
		
		ОстатокИтогоПоЗоне=ВыборкаИтоговПоЗоне.Количество;
		
		ВыборкаДетальныхЗаписей=ВыборкаИтоговПоЗоне.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() цикл
			Если _ОсталосьОтобрать<=0 Тогда 
				Прервать;
			КонецЕсли;	
			Если ВыборкаДетальныхЗаписей.Количество<СтруктураПараметров.КоличествоНаПаллете и СтруктураПараметров.ОтгрузкаКлиентуЦелымиПаллетами и СтруктураПараметров.НомерОбхода=1 Тогда 
				ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне-ВыборкаДетальныхЗаписей.Количество;
				Продолжить;
			КонецЕсли;
			Если _ОсталосьОтобрать< СтруктураПараметров.КоличествоНаПаллете и СтруктураПараметров.НомерОбхода<>3  Тогда
				ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц,ТаблицаЗарезервированныхДанных);
				Возврат
			КонецЕсли;
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
			НоваяСтрока.Номенклатура=ВыборкаДетальныхЗаписей.Номенклатура;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДетальныхЗаписей.ИдентификаторУпаковки;
			НоваяСтрока.Качество=ВыборкаДетальныхЗаписей.Качество;
			НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныхЗаписей.СерияНоменклатуры;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.ДатаРозлива;
			НоваяСтрока.Характеристика=ВыборкаДетальныхЗаписей.Характеристика;
			НоваяСтрока.Ячейка=ВыборкаДетальныхЗаписей.Ячейка;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.СерияНоменклатуры.ДатаПроизводства;
			Если _ОсталосьОтобрать<=ВыборкаДетальныхЗаписей.Количество Тогда 
				НоваяСтрока.Количество=_ОсталосьОтобрать;
			иначе
				НоваяСтрока.Количество=ВыборкаДетальныхЗаписей.Количество;
			КонецЕсли;
			_ОсталосьОтобрать=_ОсталосьОтобрать-НоваяСтрока.Количество;
			НоваяСтрокаРезерва=ТаблицаЗарезервированныхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва,ВыборкаДетальныхЗаписей);
			НоваяСтрокаРезерва.Количество=НоваяСтрока.Количество;
			ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне-НоваяСтрока.Количество;
		КонецЦикла;
		ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц,ТаблицаЗарезервированныхДанных);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросДанныхДляЗаполненияПоЗонамИСкладскимПомещениям(МенеджерВременныхТаблиц,Номенклатура,ЗонаЯчеек,СкладскоеПомещение)
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	|	ДанныеПоискаНМ.Склад,
	|	ДанныеПоискаНМ.Ячейка КАК Ячейка,
	|	ДанныеПоискаНМ.Номенклатура,
	|	ДанныеПоискаНМ.Характеристика,
	|	ДанныеПоискаНМ.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеПоискаНМ.КоличествоОстаток КАК КоличествоОстаток,
	|	ДанныеПоискаНМ.Коэффициент,
	|	ДанныеПоискаНМ.Предрасчет,
	|	ДанныеПоискаНМ.Количество КАК Количество,
	|	ДанныеПоискаНМ.Качество,
	|	ДанныеПоискаНМ.ДатаРозлива КАК ДатаРозлива,
	|	ДанныеПоискаНМ.Ячейка.Ярус КАК Ярус,
	|	ДанныеПоискаНМ.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ДанныеПоискаНМ.Приоритет КАК Приоритет,
	|	ДанныеПоискаНМ.ЯчейкаЗона КАК ЯчейкаЗона
	|ИЗ
	|	ДанныеПоискаНМ КАК ДанныеПоискаНМ
	|ГДЕ
	|	ДанныеПоискаНМ.Номенклатура = &Номенклатура
	|	И ДанныеПоискаНМ.ЯчейкаЗона = &ЯчейкаЗона
	|	И ДанныеПоискаНМ.Ячейка.СкладскоеПомещение В(&СкладскоеПомещение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ДатаРозлива,
	|	СерияНоменклатуры,
	|	КоличествоОстаток,
	|	Ярус,
	|	Ячейка,
	|	ИдентификаторУпаковки
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	ЯчейкаЗона";
	
	Если ТипЗнч(СкладскоеПомещение)<>  Тип("Массив") Тогда 
		МассивСкладскихПомещений=новый Массив;
		МассивСкладскихПомещений.Добавить(СкладскоеПомещение);
	иначе
		МассивСкладскихПомещений=СкладскоеПомещение;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("ЯчейкаЗона",ЗонаЯчеек);
	Запрос.УстановитьПараметр("СкладскоеПомещение",МассивСкладскихПомещений);
	
	РезультатЗапроса=Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

#КонецОбласти

#Область РозничныеСтратегии

//Процедура ЗапросДанныхПоТоварамВЯчейкахРозница(МенеджерВременныхТаблиц,ДанныеЗаполнения,НастройкиWMS)
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЗаказПокупателяТовары.Номенклатура,
//	|	ЗаказПокупателяТовары.Ссылка.СкладГруппа
//	|ПОМЕСТИТЬ ВТЗаказ
//	|ИЗ
//	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
//	|ГДЕ
//	|	ЗаказПокупателяТовары.Ссылка = &Ссылка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	итТоварыВЯчейкахОстатки.Склад,
//	|	итТоварыВЯчейкахОстатки.Ячейка,
//	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки,
//	|	итТоварыВЯчейкахОстатки.Номенклатура,
//	|	итТоварыВЯчейкахОстатки.Характеристика,
//	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры,
//	|	итТоварыВЯчейкахОстатки.ДатаРозлива,
//	|	итТоварыВЯчейкахОстатки.Качество,
//	|	итТоварыВЯчейкахОстатки.КоличествоОстаток
//	|ПОМЕСТИТЬ ВТОстаткиПодготовка
//	|ИЗ
//	|	ВТЗаказ КАК ВТЗаказ
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
//	|		ПО ВТЗаказ.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
//	|			И ВТЗаказ.СкладГруппа = итТоварыВЯчейкахОстатки.Склад
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	итТоварыВЯчейкахРезервОстатки.Склад,
//	|	итТоварыВЯчейкахРезервОстатки.ЯчейкаОтправитель,
//	|	итТоварыВЯчейкахРезервОстатки.ИдентификаторУпаковки,
//	|	итТоварыВЯчейкахРезервОстатки.Номенклатура,
//	|	итТоварыВЯчейкахРезервОстатки.Характеристика,
//	|	итТоварыВЯчейкахРезервОстатки.СерияНоменклатуры,
//	|	итТоварыВЯчейкахРезервОстатки.ДатаРозлива,
//	|	итТоварыВЯчейкахРезервОстатки.Качество,
//	|	-итТоварыВЯчейкахРезервОстатки.КоличествоОстаток
//	|ИЗ
//	|	ВТЗаказ КАК ВТЗаказ
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейкахРезерв.Остатки(, ЯчейкаОтправитель <> &СистемнаяЯчейка) КАК итТоварыВЯчейкахРезервОстатки
//	|		ПО ВТЗаказ.Номенклатура = итТоварыВЯчейкахРезервОстатки.Номенклатура
//	|			И ВТЗаказ.СкладГруппа = итТоварыВЯчейкахРезервОстатки.Склад
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТОстаткиПодготовка.Склад,
//	|	ВТОстаткиПодготовка.Ячейка,
//	|	ВТОстаткиПодготовка.ИдентификаторУпаковки,
//	|	ВТОстаткиПодготовка.Номенклатура,
//	|	ВТОстаткиПодготовка.Характеристика,
//	|	ВТОстаткиПодготовка.СерияНоменклатуры,
//	|	ВТОстаткиПодготовка.ДатаРозлива,
//	|	ВТОстаткиПодготовка.Качество,
//	|	СУММА(ВТОстаткиПодготовка.КоличествоОстаток) КАК КоличествоОстаток,
//	|	ВТОстаткиПодготовка.Ячейка.КоличествоПалет КАК КоличествоПаллетоМест
//	|ПОМЕСТИТЬ ВТОстаткиПодготовкаГруппировка
//	|ИЗ
//	|	ВТОстаткиПодготовка КАК ВТОстаткиПодготовка
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТОстаткиПодготовка.Склад,
//	|	ВТОстаткиПодготовка.Ячейка,
//	|	ВТОстаткиПодготовка.ИдентификаторУпаковки,
//	|	ВТОстаткиПодготовка.Номенклатура,
//	|	ВТОстаткиПодготовка.Характеристика,
//	|	ВТОстаткиПодготовка.СерияНоменклатуры,
//	|	ВТОстаткиПодготовка.ДатаРозлива,
//	|	ВТОстаткиПодготовка.Качество,
//	|	ВТОстаткиПодготовка.Ячейка.КоличествоПалет
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	итТоварыВЯчейкахРезервОстатки.Ячейка
//	|ПОМЕСТИТЬ ЯчейкиИсключенияПодбора
//	|ИЗ
//	|	ВТЗаказ КАК ВТЗаказ
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейкахРезерв.Остатки КАК итТоварыВЯчейкахРезервОстатки
//	|		ПО ВТЗаказ.Номенклатура = итТоварыВЯчейкахРезервОстатки.Номенклатура
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТОстаткиПодготовкаГруппировка.Склад,
//	|	ВТОстаткиПодготовкаГруппировка.Ячейка,
//	|	ВТОстаткиПодготовкаГруппировка.ИдентификаторУпаковки,
//	|	ВТОстаткиПодготовкаГруппировка.Номенклатура,
//	|	ВТОстаткиПодготовкаГруппировка.Характеристика,
//	|	ВТОстаткиПодготовкаГруппировка.СерияНоменклатуры,
//	|	ВТОстаткиПодготовкаГруппировка.ДатаРозлива,
//	|	ВТОстаткиПодготовкаГруппировка.Качество,
//	|	СУММА(ВТОстаткиПодготовкаГруппировка.КоличествоОстаток) КАК КоличествоОстаток,
//	|	ВТОстаткиПодготовкаГруппировка.Ячейка.КоличествоПалет КАК КоличествоПаллетоМест,
//	|	ВТОстаткиПодготовкаГруппировка.Ячейка.ПорядокОбхода КАК ПорядокОбхода
//	|ПОМЕСТИТЬ ДанныеПоискаНМ
//	|ИЗ
//	|	ВТОстаткиПодготовкаГруппировка КАК ВТОстаткиПодготовкаГруппировка
//	|ГДЕ
//	|	ВТОстаткиПодготовкаГруппировка.КоличествоОстаток > 0
//	|	И НЕ ВТОстаткиПодготовкаГруппировка.Ячейка В
//	|				(ВЫБРАТЬ
//	|					ЯчейкиИсключенияПодбора.Ячейка
//	|				ИЗ
//	|					ЯчейкиИсключенияПодбора КАК ЯчейкиИсключенияПодбора)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТОстаткиПодготовкаГруппировка.Склад,
//	|	ВТОстаткиПодготовкаГруппировка.Ячейка,
//	|	ВТОстаткиПодготовкаГруппировка.ИдентификаторУпаковки,
//	|	ВТОстаткиПодготовкаГруппировка.Номенклатура,
//	|	ВТОстаткиПодготовкаГруппировка.Характеристика,
//	|	ВТОстаткиПодготовкаГруппировка.СерияНоменклатуры,
//	|	ВТОстаткиПодготовкаГруппировка.ДатаРозлива,
//	|	ВТОстаткиПодготовкаГруппировка.Качество,
//	|	ВТОстаткиПодготовкаГруппировка.Ячейка.КоличествоПалет,
//	|	ВТОстаткиПодготовкаГруппировка.Ячейка.ПорядокОбхода
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ВТОстаткиПодготовка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ВТЗаказ
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ВТОстаткиПодготовкаГруппировка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ЯчейкиИсключенияПодбора";
//	
//	Запрос.УстановитьПараметр("СистемнаяЯчейка",НастройкиWMS.СистемнаяЯчейка);
//	Запрос.УстановитьПараметр("Ссылка",ДанныеЗаполнения.Ссылка);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//КонецПроцедуры

Процедура ЗапросДанныхПоТоварамВЯчейкахРозница(МенеджерВременныхТаблиц,ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Ссылка.Склад,
	|	ЗаказПокупателяТовары.Ссылка.Организация
	|ПОМЕСТИТЬ ВТЗаказ
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|
	|	итТоварыВЯчейкахОстатки.Склад,
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.Ячейка,
	|	итТоварыВЯчейкахОстатки.Номенклатура,
	|	итТоварыВЯчейкахОстатки.Характеристика,
	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.ДатаРозлива,
	|	итТоварыВЯчейкахОстатки.Качество,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток КАК КоличествоОстаток,
	|	итТоварыВЯчейкахОстатки.Ячейка.КоличествоПалет КАК КоличествоПаллетоМест,
	|	итТоварыВЯчейкахОстатки.Ячейка.ПорядокОбхода КАК ПорядокОбхода
	|ПОМЕСТИТЬ ДанныеПоискаНМ
	|ИЗ
	|	ВТЗаказ КАК ВТЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	|		ПО ВТЗаказ.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|		И итТоварыВЯчейкахОстатки.Склад = ВТЗаказ.Склад
	|		И ВТЗаказ.Организация = итТоварыВЯчейкахОстатки.Организация
	|ГДЕ
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток > 0";
	
	Запрос.УстановитьПараметр("Ссылка",ДанныеЗаполнения.Ссылка);
	
	 Запрос.Выполнить();
	
КонецПроцедуры

//@skip-warning
Процедура ЗаполнитьТоварСогласноРозничнымПравилам(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения,НастройкиWMS)
СтруктураПараметров=новый Структура;	
СтруктураПараметров.Вставить("ОсталосьОтобрать",СтрокаОбхода.Количество);
СтруктураПараметров.Вставить("КоличествоНаПаллете",СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете);
СтруктураПараметров.Вставить("КоличествоВКоробе",СтрокаОбхода.ЕдиницаИзмеренияМест.Коэффициент);
СтруктураПараметров.Вставить("Номенклатура",СтрокаОбхода.Номенклатура);
СтруктураПараметров.Вставить("СтрокаОбхода",СтрокаОбхода);	
СтруктураПараметров.Вставить("МенеджерВременныхТаблиц",МенеджерВременныхТаблиц);
СтруктураПараметров.Вставить("МеньшеКороба",Ложь);
СтруктураПараметров.Вставить("МеньшеПаллеты",Ложь);
ЗаполнитьДокументДаннымНабораРозница(СтруктураПараметров);

Если СтруктураПараметров.ОсталосьОтобрать>0 Тогда 
	Сообщить("не хватает номенклатуры: " +Строка(СтруктураПараметров.Номенклатура)+" в количестве "+Строка(СтруктураПараметров.ОсталосьОтобрать)); 
КонецЕсли;

КонецПроцедуры
Процедура ЗаполнитьДокументДаннымНабораРозница(СтруктураПараметров)
	СтруктураПараметров.МеньшеКороба=Ложь;
	СтруктураПараметров.МеньшеПаллеты=Ложь;
	Если СтруктураПараметров.ОсталосьОтобрать<СтруктураПараметров.КоличествоВКоробе Тогда 
		СтруктураПараметров.МеньшеКороба=Истина;
	ИначеЕсли СтруктураПараметров.ОсталосьОтобрать<СтруктураПараметров.КоличествоНаПаллете Тогда 
		СтруктураПараметров.МеньшеПаллеты=Истина;
	КонецЕсли;
	РезультатЗапроса= ЗапросДанныхТовараНаСкладе(СтруктураПараметров);
	ТаблицаАнализа=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	Выборка=РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока=Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		НоваяСтрока.Ячейка=Выборка.Ячейка;
		Если Выборка.КоличествоОстаток>=СтруктураПараметров.ОсталосьОтобрать Тогда 
			НоваяСтрока.Количество=СтруктураПараметров.ОсталосьОтобрать
		Иначе
			НоваяСтрока.Количество=Выборка.КоличествоОстаток;
		КонецЕсли;
		НоваяСтрокаРезерва=ТаблицаАнализа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва,Выборка);
		НоваяСтрокаРезерва.КоличествоОстаток=НоваяСтрока.Количество;
		СтруктураПараметров.ОсталосьОтобрать=СтруктураПараметров.ОсталосьОтобрать-НоваяСтрока.Количество;
		Если СтруктураПараметров.ОсталосьОтобрать=0 Тогда 
			Прервать;
		КонецЕсли;
		Если  СтруктураПараметров.ОсталосьОтобрать<СтруктураПараметров.КоличествоВКоробе и не СтруктураПараметров.МеньшеКороба Тогда 
			ИзъятьЗарезервированноеКоличествоРозница(СтруктураПараметров,ТаблицаАнализа);
			ЗаполнитьДокументДаннымНабораРозница(СтруктураПараметров);
			Возврат;
		КонецЕсли; 
		Если  СтруктураПараметров.ОсталосьОтобрать<СтруктураПараметров.КоличествоНаПаллете и не СтруктураПараметров.МеньшеПаллеты Тогда 
			ИзъятьЗарезервированноеКоличествоРозница(СтруктураПараметров,ТаблицаАнализа);
			ЗаполнитьДокументДаннымНабораРозница(СтруктураПараметров);
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	ИзъятьЗарезервированноеКоличествоРозница(СтруктураПараметров,ТаблицаАнализа);
		КонецПроцедуры
Процедура ИзъятьЗарезервированноеКоличествоРозница(СтруктураПараметров,ТаблицаАнализа)
	Запрос=новый Запрос;
	Запрос.МенеджерВременныхТаблиц=СтруктураПараметров.МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	             |	ТаблицаАнализа.Склад,
	             |	ТаблицаАнализа.Ячейка,
	             |	ТаблицаАнализа.ИдентификаторУпаковки,
	             |	ТаблицаАнализа.Номенклатура,
	             |	ТаблицаАнализа.Характеристика,
	             |	ТаблицаАнализа.СерияНоменклатуры,
	             |	ТаблицаАнализа.ДатаРозлива,
	             |	ТаблицаАнализа.Качество,
	             |	ТаблицаАнализа.КоличествоОстаток
	             |ПОМЕСТИТЬ Вт
	             |ИЗ
	             |	&ТаблицаАнализа КАК ТаблицаАнализа
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ДанныеПоискаНМ.Склад,
	             |	ДанныеПоискаНМ.Ячейка,
	             |	ДанныеПоискаНМ.ИдентификаторУпаковки,
	             |	ДанныеПоискаНМ.Номенклатура,
	             |	ДанныеПоискаНМ.Характеристика,
	             |	ДанныеПоискаНМ.СерияНоменклатуры,
	             |	ДанныеПоискаНМ.ДатаРозлива,
	             |	ДанныеПоискаНМ.Качество,
	             |	СУММА(ДанныеПоискаНМ.КоличествоОстаток - ЕСТЬNULL(Вт.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	             |	ДанныеПоискаНМ.КоличествоПаллетоМест,
	             |	ДанныеПоискаНМ.ПорядокОбхода
	             |ПОМЕСТИТЬ ВтДанныеНМ
	             |ИЗ
	             |	ДанныеПоискаНМ КАК ДанныеПоискаНМ
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Вт КАК Вт
	             |		ПО ДанныеПоискаНМ.Склад = Вт.Склад
	             |			И ДанныеПоискаНМ.Ячейка = Вт.Ячейка
	             |			И ДанныеПоискаНМ.ИдентификаторУпаковки = Вт.ИдентификаторУпаковки
	             |			И ДанныеПоискаНМ.Номенклатура = Вт.Номенклатура
	             |			И ДанныеПоискаНМ.Характеристика = Вт.Характеристика
	             |			И ДанныеПоискаНМ.ДатаРозлива = Вт.ДатаРозлива
	             |			И ДанныеПоискаНМ.Качество = Вт.Качество
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ДанныеПоискаНМ.Склад,
	             |	ДанныеПоискаНМ.Ячейка,
	             |	ДанныеПоискаНМ.ИдентификаторУпаковки,
	             |	ДанныеПоискаНМ.Номенклатура,
	             |	ДанныеПоискаНМ.Характеристика,
	             |	ДанныеПоискаНМ.СерияНоменклатуры,
	             |	ДанныеПоискаНМ.ДатаРозлива,
	             |	ДанныеПоискаНМ.Качество,
	             |	ДанныеПоискаНМ.КоличествоПаллетоМест,
	             |	ДанныеПоискаНМ.ПорядокОбхода
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ ДанныеПоискаНМ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ Вт
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВтДанныеНМ.Склад,
	             |	ВтДанныеНМ.Ячейка,
	             |	ВтДанныеНМ.ИдентификаторУпаковки,
	             |	ВтДанныеНМ.Номенклатура,
	             |	ВтДанныеНМ.Характеристика,
	             |	ВтДанныеНМ.СерияНоменклатуры,
	             |	ВтДанныеНМ.ДатаРозлива,
	             |	ВтДанныеНМ.Качество,
	             |	ВтДанныеНМ.КоличествоОстаток,
	             |	ВтДанныеНМ.КоличествоПаллетоМест,
	             |	ВтДанныеНМ.ПорядокОбхода
	             |ПОМЕСТИТЬ ДанныеПоискаНМ
	             |ИЗ
	             |	ВтДанныеНМ КАК ВтДанныеНМ
	             |ГДЕ
	             |	ВтДанныеНМ.КоличествоОстаток > 0
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ ВтДанныеНМ";
	Запрос.УстановитьПараметр("ТаблицаАнализа",ТаблицаАнализа);
	Запрос.Выполнить();

	КонецПроцедуры

Функция ЗапросДанныхТовараНаСкладе(СтруктураПараметров)
	
	Запрос=новый Запрос;
	Запрос.МенеджерВременныхТаблиц=СтруктураПараметров.МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДанныеПоискаНМ.Склад,
	             |	ДанныеПоискаНМ.Ячейка,
	             |	ДанныеПоискаНМ.ИдентификаторУпаковки,
	             |	ДанныеПоискаНМ.Номенклатура,
	             |	ДанныеПоискаНМ.Характеристика,
	             |	ДанныеПоискаНМ.СерияНоменклатуры,
	             |	ДанныеПоискаНМ.ДатаРозлива,
	             |	ДанныеПоискаНМ.Качество,
	             |	ДанныеПоискаНМ.КоличествоОстаток,
	             |	ДанныеПоискаНМ.КоличествоПаллетоМест,
	             |	ДанныеПоискаНМ.ПорядокОбхода
	             |ПОМЕСТИТЬ ВтДанныеНМ
	             |ИЗ
	             |	ДанныеПоискаНМ КАК ДанныеПоискаНМ
	             |ГДЕ
	             |	ДанныеПоискаНМ.Номенклатура = &Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.АссортиментныйУчастокСклада КАК АссортиментныйУчастокСклада
	             |ПОМЕСТИТЬ АссортиметныйУчастокНМ
	             |ИЗ
	             |	РегистрСведений.ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчастка.СрезПоследних(, Номенклатура = &Номенклатура) КАК ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка
	             |ПОМЕСТИТЬ ЯчейкаКОтбору
	             |ИЗ
	             |	АссортиметныйУчастокНМ КАК АссортиметныйУчастокНМ
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ит_WMS_АссортиментныеУчасткиСклада.СоставЯчеек КАК ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек
	             |		ПО АссортиметныйУчастокНМ.АссортиментныйУчастокСклада = ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ссылка
	             |			И (ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная))
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВложенныйЗапрос.Склад,
	             |	ВложенныйЗапрос.Ячейка,
	             |	ВложенныйЗапрос.ИдентификаторУпаковки,
	             |	ВложенныйЗапрос.Номенклатура,
	             |	ВложенныйЗапрос.Характеристика,
	             |	ВложенныйЗапрос.СерияНоменклатуры,
	             |	ВложенныйЗапрос.ДатаРозлива КАК ДатаРозлива,
	             |	ВложенныйЗапрос.Качество,
	             |	ВложенныйЗапрос.КоличествоОстаток,
	             |	ВложенныйЗапрос.КоличествоПаллетоМест,
	             |	ВЫБОР
	             |		КОГДА &МеньшеКороба
	             |				И ВложенныйЗапрос.КоличествоОстаток <= &КоличествоКороба
	             |			ТОГДА 0
	             |		КОГДА &МеньшеКороба
	             |				И ВложенныйЗапрос.КоличествоОстаток > &КоличествоКороба
	             |			ТОГДА &КоличествоКороба - ВложенныйЗапрос.КоличествоОстаток
	             |		КОГДА &МеньшеПаллеты
	             |				И ВложенныйЗапрос.КоличествоОстаток >= &КоличествоКороба
	             |				И ВложенныйЗапрос.КоличествоОстаток < &КоличествоВПаллете
	             |			ТОГДА 0
	             |		КОГДА &МеньшеПаллеты
	             |				И ВложенныйЗапрос.КоличествоОстаток < &КоличествоКороба
	             |			ТОГДА 9999999
	             |		КОГДА &МеньшеПаллеты
	             |				И ВложенныйЗапрос.КоличествоОстаток >= &КоличествоВПаллете
	             |			ТОГДА ВложенныйЗапрос.КоличествоОстаток
	             |		ИНАЧЕ 1
	             |	КОНЕЦ КАК ПорядокПоКоличественномуУсловию,
	             |	ВложенныйЗапрос.ПорядокОбхода КАК ПорядокОбхода,
	             |	ВЫБОР
	             |		КОГДА &МеньшеКороба
	             |				И ВложенныйЗапрос.КоличествоПаллетоМест < 0.2
	             |			ТОГДА 0
	             |		КОГДА &МеньшеКороба
	             |				И ВложенныйЗапрос.КоличествоПаллетоМест < 1
	             |			ТОГДА 1
	             |		КОГДА &МеньшеПаллеты
	             |				И ВложенныйЗапрос.КоличествоПаллетоМест < 1
	             |				И ВложенныйЗапрос.КоличествоПаллетоМест > 0.2
	             |			ТОГДА 0
	             |		КОГДА &МеньшеПаллеты
	             |				И ВложенныйЗапрос.КоличествоПаллетоМест < 1
	             |			ТОГДА 1
	             |		ИНАЧЕ 3
	             |	КОНЕЦ КАК ПорядокПоКоэффициентуЯчейки
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ВтДанныеНМ.Склад КАК Склад,
	             |		ВтДанныеНМ.Ячейка КАК Ячейка,
	             |		ВтДанныеНМ.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	             |		ВтДанныеНМ.Номенклатура КАК Номенклатура,
	             |		ВтДанныеНМ.Характеристика КАК Характеристика,
	             |		ВтДанныеНМ.СерияНоменклатуры КАК СерияНоменклатуры,
	             |		ВтДанныеНМ.ДатаРозлива КАК ДатаРозлива,
	             |		ВтДанныеНМ.Качество КАК Качество,
	             |		ВтДанныеНМ.КоличествоОстаток КАК КоличествоОстаток,
	             |		ВтДанныеНМ.КоличествоПаллетоМест КАК КоличествоПаллетоМест,
	             |		ВтДанныеНМ.ПорядокОбхода КАК ПорядокОбхода
	             |	ИЗ
	             |		ВтДанныеНМ КАК ВтДанныеНМ
	             |	ГДЕ
	             |		ВтДанныеНМ.Ячейка В
	             |				(ВЫБРАТЬ
	             |					ЯчейкаКОтбору.Ячейка
	             |				ИЗ
	             |					ЯчейкаКОтбору КАК ЯчейкаКОтбору)) КАК ВложенныйЗапрос
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ДатаРозлива,
	             |	ПорядокПоКоэффициентуЯчейки,
	             |	ПорядокОбхода,
	             |	ПорядокПоКоличественномуУсловию
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ АссортиметныйУчастокНМ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ ЯчейкаКОтбору
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ ВтДанныеНМ";
	Запрос.УстановитьПараметр("Номенклатура",СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("МеньшеКороба",СтруктураПараметров.МеньшеКороба);
	Запрос.УстановитьПараметр("КоличествоВПаллете",СтруктураПараметров.КоличествоНаПаллете);
	Запрос.УстановитьПараметр("КоличествоКороба",СтруктураПараметров.КоличествоВКоробе);
    Запрос.УстановитьПараметр("МеньшеПаллеты",СтруктураПараметров.МеньшеПаллеты);
    Возврат Запрос.Выполнить();

	КонецФункции
#КонецОбласти

#Область СтрагеииОбщиеФункцииИПроцедуры

Функция ЗапросДанныхДляЗаполненияПоЗонам(МенеджерВременныхТаблиц,Номенклатура,ЗонаЯчеек)
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	|	ДанныеПоискаНМ.Склад,
	|	ДанныеПоискаНМ.Ячейка КАК Ячейка,
	|	ДанныеПоискаНМ.Номенклатура,
	|	ДанныеПоискаНМ.Характеристика,
	|	ДанныеПоискаНМ.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеПоискаНМ.КоличествоОстаток КАК КоличествоОстаток,
	|	ДанныеПоискаНМ.Коэффициент,
	|	ДанныеПоискаНМ.Предрасчет,
	|	ДанныеПоискаНМ.Количество КАК Количество,
	|	ДанныеПоискаНМ.Качество,
	|	ДанныеПоискаНМ.ДатаРозлива КАК ДатаРозлива,
	|	ДанныеПоискаНМ.Ячейка.Ярус КАК Ярус,
	|	ДанныеПоискаНМ.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ДанныеПоискаНМ.Приоритет КАК Приоритет,
	|	ДанныеПоискаНМ.ЯчейкаЗона КАК ЯчейкаЗона
	|ИЗ
	|	ДанныеПоискаНМ КАК ДанныеПоискаНМ
	|ГДЕ
	|	ДанныеПоискаНМ.Номенклатура = &Номенклатура
	|	И ДанныеПоискаНМ.ЯчейкаЗона = &ЯчейкаЗона
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ДатаРозлива,
	|	СерияНоменклатуры,
	|	КоличествоОстаток,
	|	Ярус,
	|	Ячейка,
	|	ИдентификаторУпаковки
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	ЯчейкаЗона";					
	
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("ЯчейкаЗона",ЗонаЯчеек);
	
	РезультатЗапроса=Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция СтруктураПараметровЗаполненияПоЗонам(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения)
	СтруктураПараметров=новый Структура;
	СтруктураПараметров.Вставить("МенеджерВременныхТаблиц",МенеджерВременныхТаблиц);
	СтруктураПараметров.Вставить("СтрокаОбхода",СтрокаОбхода);
	СтруктураПараметров.Вставить("ДанныеЗаполнения",ДанныеЗаполнения);
	СтруктураПараметров.Вставить("НомерОбхода",1);
	Возврат СтруктураПараметров;
КонецФункции

Функция КоличествоТовараВПикингеБольшеСтока(СтруктураПараметров)
	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонам(СтруктураПараметров.МенеджерВременныхТаблиц,СтруктураПараметров.СтрокаОбхода.Номенклатура,Перечисления.итWMSЗоныСклада.Пикинга);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураПараметров.Вставить("ОтборИзлишкаПаллетПикинга",Ложь);
	Пока ВыборкаИтоговПоЗоне.Следующий() цикл
		ИтНормыХраненияСтока=СтруктураПараметров.СтрокаОбхода.Номенклатура.ИтНормыХраненияСтока;
		КоэффициентПаллеты=СтруктураПараметров.СтрокаОбхода.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете;
		КоличествоПаллетВОстатке=ВыборкаИтоговПоЗоне.Количество/?(КоэффициентПаллеты = 0 ,1,КоэффициентПаллеты);
		СтруктураПараметров.Вставить("РазрешенноеКоличествоОтбораПикинга",(Цел(КоличествоПаллетВОстатке-ИтНормыХраненияСтока)*КоэффициентПаллеты));
		СтруктураПараметров.Вставить("ОтборИзлишкаПаллетПикинга",КоличествоПаллетВОстатке>ИтНормыХраненияСтока);
	КонецЦикла;
	Возврат  СтруктураПараметров.ОтборИзлишкаПаллетПикинга;
КонецФункции


//@skip-warning
Функция ПолучитьСтратегиюНаОснованииРозница()
	ТекущийПользователь=ПараметрыСеанса.ТекущийПользователь;
	СтратегияНаОснованииРозница=Неопределено;
	СтрокаНастроек=ТекущийПользователь.НастройкиПоУмолчанию.Найти("Стратегия наборки при создании на основании (Розница)");
	Если СтрокаНастроек <> Неопределено Тогда

		СтратегияНаОснованииРозница=СтрокаНастроек.Значение;
	КонецЕсли;
	Если СтратегияНаОснованииРозница = Неопределено И Организация <> Неопределено Тогда
		СтрокаНастроек=Организация.НастройкиПоУмолчанию.Найти("Стратегия наборки при создании на основании (Розница)");
		Если СтрокаНастроек <> Неопределено Тогда
			СтратегияНаОснованииРозница=СтрокаНастроек.Значение;
		КонецЕсли;
	КонецЕсли;
	Если СтратегияНаОснованииРозница = Неопределено Тогда
		СтратегияНаОснованииРозница=Константы.СтратегияСозданияНаборкиРозница.Получить();
	КонецЕсли;
	Возврат СтратегияНаОснованииРозница;
КонецФункции

Функция ПолучитьСтратегиюНаОснованииОпт()
	ТекущийПользователь=ПараметрыСеанса.ТекущийПользователь;
	СтратегияНаОснованииОпт=Неопределено;
	СтрокаНастроек=ТекущийПользователь.НастройкиПоУмолчанию.Найти("Стратегия наборки при создании на основании");
	Если СтрокаНастроек <> Неопределено Тогда

		СтратегияНаОснованииОпт=СтрокаНастроек.Значение;
	КонецЕсли;
	Если СтратегияНаОснованииОпт = Неопределено И Организация <> Неопределено Тогда
		СтрокаНастроек=Организация.НастройкиПоУмолчанию.Найти("Стратегия наборки при создании на основании");
		Если СтрокаНастроек <> Неопределено Тогда
			СтратегияНаОснованииОпт=СтрокаНастроек.Значение;
		КонецЕсли;
	КонецЕсли;
	Если СтратегияНаОснованииОпт = Неопределено Тогда
		СтратегияНаОснованииОпт=Константы.СтратегияСозданияНаборкиРозница.Получить();
	КонецЕсли;
	Возврат СтратегияНаОснованииОпт;
КонецФункции
//Процедура  ЗапросДанныхПоТоварамВЯчейках(МенеджерВременныхТаблиц,ДанныеЗаполнения,НастройкиWMS)
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;			
//	// Получить данные о размещении
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	итТоварыВЯчейкахРезервОстатки.Склад,
//	|	итТоварыВЯчейкахРезервОстатки.ЯчейкаОтправитель,
//	|	итТоварыВЯчейкахРезервОстатки.Номенклатура,
//	|	итТоварыВЯчейкахРезервОстатки.Характеристика,
//	|	итТоварыВЯчейкахРезервОстатки.СерияНоменклатуры,
//	|	итТоварыВЯчейкахРезервОстатки.ДатаРозлива,
//	|	итТоварыВЯчейкахРезервОстатки.Качество,
//	|	итТоварыВЯчейкахРезервОстатки.ИдентификаторУпаковки,
//	|	итТоварыВЯчейкахРезервОстатки.КоличествоОстаток
//	|ПОМЕСТИТЬ ВтДанныеРезервирования
//	|ИЗ
//	|	РегистрНакопления.итТоварыВЯчейкахРезерв.Остатки(, ЯчейкаОтправитель <> &СистемнаяЯчейка) КАК итТоварыВЯчейкахРезервОстатки
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЗаказПокупателяТовары.Ссылка,
//	|	ЗаказПокупателяТовары.Номенклатура,
//	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.Коэффициент, 0)) КАК Коэффициент,
//	|	ЗаказПокупателяТовары.Ссылка.СкладГруппа
//	|ПОМЕСТИТЬ ДанныеЗаказаДляПоиска
//	|ИЗ
//	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
//	|ГДЕ
//	|	ЗаказПокупателяТовары.Ссылка = &Ссылка
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ЗаказПокупателяТовары.Номенклатура,
//	|	ЗаказПокупателяТовары.Ссылка,
//	|	ЗаказПокупателяТовары.Ссылка.СкладГруппа
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.АссортиментныйУчастокСклада,
//	|	ДанныеЗаказаДляПоиска.Номенклатура
//	|ПОМЕСТИТЬ ВтАссортиментныеУчасткиНМ
//	|ИЗ
//	|	ДанныеЗаказаДляПоиска КАК ДанныеЗаказаДляПоиска
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчастка.СрезПоследних КАК ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних
//	|		ПО ДанныеЗаказаДляПоиска.Номенклатура = ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.Номенклатура
//	|			И (ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.Организация = &Организация)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка,
//	|	ВтАссортиментныеУчасткиНМ.Номенклатура
//	|ПОМЕСТИТЬ ЯчейкиНоменклатуры
//	|ИЗ
//	|	ВтАссортиментныеУчасткиНМ КАК ВтАссортиментныеУчасткиНМ
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ит_WMS_АссортиментныеУчасткиСклада.СоставЯчеек КАК ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек
//	|		ПО ВтАссортиментныеУчасткиНМ.АссортиментныйУчастокСклада = ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ссылка
//	|			И (ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Оптовая))
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВтАссортиментныеУчасткиНМ.Номенклатура,
//	|	ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ДанныеЗаказаДляПоиска.Ссылка,
//	|	ДанныеЗаказаДляПоиска.Номенклатура,
//	|	ДанныеЗаказаДляПоиска.Коэффициент,
//	|	ДанныеЗаказаДляПоиска.СкладГруппа,
//	|	ЯчейкиНоменклатуры.Ячейка
//	|ПОМЕСТИТЬ ДанныеЯчеекИНоменклатурыЗаказа
//	|ИЗ
//	|	ДанныеЗаказаДляПоиска КАК ДанныеЗаказаДляПоиска
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЯчейкиНоменклатуры КАК ЯчейкиНоменклатуры
//	|		ПО ДанныеЗаказаДляПоиска.Номенклатура = ЯчейкиНоменклатуры.Номенклатура
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ДанныеЗаказаДляПоиска.Ссылка,
//	|	ДанныеЗаказаДляПоиска.Номенклатура,
//	|	ДанныеЗаказаДляПоиска.Коэффициент,
//	|	ДанныеЗаказаДляПоиска.СкладГруппа,
//	|	ЯчейкиНоменклатуры.Ячейка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	итТоварыВЯчейкахОстатки.Склад,
//	|	итТоварыВЯчейкахОстатки.Ячейка,
//	|	итТоварыВЯчейкахОстатки.Номенклатура,
//	|	итТоварыВЯчейкахОстатки.Характеристика,
//	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры,
//	|	итТоварыВЯчейкахОстатки.КоличествоОстаток,
//	|	ВЫБОР
//	|		КОГДА ДанныеЯчеекИНоменклатурыЗаказа.Коэффициент = 0
//	|			ТОГДА 1
//	|		ИНАЧЕ ДанныеЯчеекИНоменклатурыЗаказа.Коэффициент
//	|	КОНЕЦ КАК Коэффициент,
//	|	итТоварыВЯчейкахОстатки.Качество,
//	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
//	|ПОМЕСТИТЬ ВТ_РеальныеОстатки
//	|ИЗ
//	|	ДанныеЯчеекИНоменклатурыЗаказа КАК ДанныеЯчеекИНоменклатурыЗаказа
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(
//	|				,
//	|				Ячейка <> &СистемнаяЯчейка
//	|					И НЕ Ячейка.Заблокирована
//	|					И Качество = ЗНАЧЕНИЕ(Справочник.Качество.новый)) КАК итТоварыВЯчейкахОстатки
//	|		ПО ДанныеЯчеекИНоменклатурыЗаказа.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
//	|			И ДанныеЯчеекИНоменклатурыЗаказа.СкладГруппа = итТоварыВЯчейкахОстатки.Склад
//	|			И ДанныеЯчеекИНоменклатурыЗаказа.Ячейка = итТоварыВЯчейкахОстатки.Ячейка
//	|ГДЕ
//	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки <> """"
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ_РеальныеОстатки.Склад,
//	|	ВТ_РеальныеОстатки.Ячейка,
//	|	ВТ_РеальныеОстатки.Номенклатура,
//	|	ВТ_РеальныеОстатки.Характеристика,
//	|	ВТ_РеальныеОстатки.СерияНоменклатуры,
//	|	СУММА(ЕСТЬNULL(ВТ_РеальныеОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ВтДанныеРезервирования.КоличествоОстаток, 0)) КАК КоличествоОстаток,
//	|	ВТ_РеальныеОстатки.Коэффициент,
//	|	ВТ_РеальныеОстатки.Качество,
//	|	ВТ_РеальныеОстатки.ИдентификаторУпаковки
//	|ПОМЕСТИТЬ РеальныеОстаткиЗаМинусомРезерваГруппировка
//	|ИЗ
//	|	ВТ_РеальныеОстатки КАК ВТ_РеальныеОстатки
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеРезервирования КАК ВтДанныеРезервирования
//	|		ПО ВТ_РеальныеОстатки.Склад = ВтДанныеРезервирования.Склад
//	|			И ВТ_РеальныеОстатки.Ячейка = ВтДанныеРезервирования.ЯчейкаОтправитель
//	|			И ВТ_РеальныеОстатки.Номенклатура = ВтДанныеРезервирования.Номенклатура
//	|			И ВТ_РеальныеОстатки.Характеристика = ВтДанныеРезервирования.Характеристика
//	|			И ВТ_РеальныеОстатки.СерияНоменклатуры = ВтДанныеРезервирования.СерияНоменклатуры
//	|			И ВТ_РеальныеОстатки.Качество = ВтДанныеРезервирования.Качество
//	|			И ВТ_РеальныеОстатки.ИдентификаторУпаковки = ВтДанныеРезервирования.ИдентификаторУпаковки
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТ_РеальныеОстатки.Склад,
//	|	ВТ_РеальныеОстатки.Ячейка,
//	|	ВТ_РеальныеОстатки.Номенклатура,
//	|	ВТ_РеальныеОстатки.Характеристика,
//	|	ВТ_РеальныеОстатки.СерияНоменклатуры,
//	|	ВТ_РеальныеОстатки.Коэффициент,
//	|	ВТ_РеальныеОстатки.Качество,
//	|	ВТ_РеальныеОстатки.ИдентификаторУпаковки
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.Склад,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.Ячейка,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.Номенклатура,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.Характеристика,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.СерияНоменклатуры,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.КоличествоОстаток,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.Коэффициент,
//	|	(ВЫРАЗИТЬ(РеальныеОстаткиЗаМинусомРезерваГруппировка.КоличествоОстаток / РеальныеОстаткиЗаМинусомРезерваГруппировка.Коэффициент КАК ЧИСЛО(15, 0))) * РеальныеОстаткиЗаМинусомРезерваГруппировка.Коэффициент КАК Предрасчет,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.Качество,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.ИдентификаторУпаковки
//	|ПОМЕСТИТЬ ВТ2
//	|ИЗ
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка КАК РеальныеОстаткиЗаМинусомРезерваГруппировка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ2.Склад,
//	|	ВТ2.Ячейка,
//	|	ВТ2.Номенклатура,
//	|	ВТ2.Характеристика,
//	|	ВТ2.СерияНоменклатуры,
//	|	ВТ2.КоличествоОстаток,
//	|	ВТ2.Коэффициент,
//	|	ВТ2.Предрасчет,
//	|	ВЫБОР
//	|		КОГДА ВТ2.Предрасчет <= ВТ2.КоличествоОстаток
//	|			ТОГДА ВТ2.Предрасчет
//	|		ИНАЧЕ ВЫБОР
//	|				КОГДА ВТ2.Предрасчет > ВТ2.КоличествоОстаток
//	|						И ВТ2.Предрасчет > ВТ2.Коэффициент
//	|					ТОГДА ВТ2.Предрасчет - ВТ2.Коэффициент
//	|				ИНАЧЕ 0
//	|			КОНЕЦ
//	|	КОНЕЦ КАК Количество,
//	|	ВТ2.Качество,
//	|	ВТ2.ИдентификаторУпаковки
//	|ПОМЕСТИТЬ ВТ3
//	|ИЗ
//	|	ВТ2 КАК ВТ2
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	итТоварыВЯчейкахОстатки.Ячейка,
//	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итТоварыВЯчейкахОстатки.ИдентификаторУпаковки) КАК ИдентификаторУпаковки,
//	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Склад) КАК Склад,
//	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Номенклатура) КАК Номенклатура,
//	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Характеристика) КАК Характеристика,
//	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.ДатаРозлива) КАК ДатаРозлива,
//	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Качество) КАК Качество
//	|ПОМЕСТИТЬ КоличествоИдентификаторовВЯчейке
//	|ИЗ
//	|	РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	итТоварыВЯчейкахОстатки.Ячейка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	КоличествоИдентификаторовВЯчейке.Ячейка,
//	|	КоличествоИдентификаторовВЯчейке.ИдентификаторУпаковки
//	|ПОМЕСТИТЬ ОтборБитыхЯчеек
//	|ИЗ
//	|	КоличествоИдентификаторовВЯчейке КАК КоличествоИдентификаторовВЯчейке
//	|ГДЕ
//	|	КоличествоИдентификаторовВЯчейке.ИдентификаторУпаковки > 1
//	|	И КоличествоИдентификаторовВЯчейке.Ячейка.КоличествоПалет = 1
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ОтборБитыхЯчеек.Ячейка,
//	|	1 КАК Приоритет
//	|ПОМЕСТИТЬ ЯчейкиНеУдовлWMS
//	|ИЗ
//	|	ОтборБитыхЯчеек КАК ОтборБитыхЯчеек
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	итТоварыВЯчейкахОстатки.Ячейка,
//	|	2
//	|ИЗ
//	|	РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
//	|ГДЕ
//	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки = """"
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ3.Склад,
//	|	ВТ3.Ячейка,
//	|	ВТ3.Номенклатура,
//	|	ВТ3.Характеристика,
//	|	ВТ3.СерияНоменклатуры КАК СерияНоменклатуры,
//	|	ВТ3.КоличествоОстаток,
//	|	ВТ3.Коэффициент,
//	|	ВТ3.Предрасчет,
//	|	ВТ3.Количество КАК Количество,
//	|	ВТ3.Качество,
//	|	ВТ3.СерияНоменклатуры.алкДатаНачалаРозлива КАК ДатаРозлива,
//	|	ВТ3.Ячейка.Ярус КАК Ярус,
//	|	ВТ3.ИдентификаторУпаковки,
//	|	ВЫБОР
//	|		КОГДА ВТ3.Ячейка.Зона = ЗНАЧЕНИЕ(Перечисление.итWmsЗоныСклада.Пикинга)
//	|			ТОГДА 1
//	|		ИНАЧЕ 2
//	|	КОНЕЦ КАК Приоритет,
//	|	ВТ3.Ячейка.Зона
//	|ПОМЕСТИТЬ ДанныеПоискаНМ
//	|ИЗ
//	|	ВТ3 КАК ВТ3
//	|ГДЕ
//	|	ВТ3.Количество > 0
//	|	И (НЕ ВТ3.Ячейка.Заблокирована
//	|			ИЛИ &ПолныеПрава)
//	|	И НЕ ВТ3.Ячейка В
//	|				(ВЫБРАТЬ
//	|					ЯчейкиНеУдовлWMS.Ячейка
//	|				ИЗ
//	|					ЯчейкиНеУдовлWMS КАК ЯчейкиНеУдовлWMS)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ВтАссортиментныеУчасткиНМ
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ЯчейкиНоменклатуры
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ДанныеЯчеекИНоменклатурыЗаказа";
//	
//	Запрос.УстановитьПараметр("ПолныеПрава", РольДоступна("ПолныеПрава"));
//	Запрос.УстановитьПараметр("Организация", Организация);
//	Запрос.УстановитьПараметр("СистемнаяЯчейка",НастройкиWMS.СистемнаяЯчейка);
//	Запрос.УстановитьПараметр("Ссылка",ДанныеЗаполнения.Ссылка);
//	Запрос.Выполнить();
//КонецПроцедуры
Процедура  ЗапросДанныхПоТоварамВЯчейках(МенеджерВременныхТаблиц,ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;			
	// Получить данные о размещении
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Ссылка.Организация,
	|	ЗаказПокупателяТовары.Ссылка.Склад,
	|	ЗаказПокупателяТовары.Номенклатура,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.Коэффициент
	|	КОНЕЦ) КАК Коэффициент
	|ПОМЕСТИТЬ ВтДанныеЗаказа
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Ссылка.Организация,
	|	ЗаказПокупателяТовары.Ссылка.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.АссортиментныйУчастокСклада,
	|	ВтДанныеЗаказа.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВтАссортиментныеУчасткиНМ
	|ИЗ
	|	ВтДанныеЗаказа КАК ВтДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчастка.СрезПоследних КАК
	|			ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних
	|		ПО ВтДанныеЗаказа.Номенклатура = ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.Номенклатура
	|		И ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.Организация = ВтДанныеЗаказа.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка,
	|	ВтАссортиментныеУчасткиНМ.Номенклатура
	|ПОМЕСТИТЬ ЯчейкиНоменклатуры
	|ИЗ
	|	ВтАссортиментныеУчасткиНМ КАК ВтАссортиментныеУчасткиНМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ит_WMS_АссортиментныеУчасткиСклада.СоставЯчеек КАК
	|			ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек
	|		ПО ВтАссортиментныеУчасткиНМ.АссортиментныйУчастокСклада = ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ссылка
	|		И
	|			(ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Оптовая))
	|СГРУППИРОВАТЬ ПО
	|	ВтАссортиментныеУчасткиНМ.Номенклатура,
	|	ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеЗаказа.Организация,
	|	ВтДанныеЗаказа.Склад,
	|	ВтДанныеЗаказа.Номенклатура,
	|	ВтДанныеЗаказа.Коэффициент,
	|	ЯчейкиНоменклатуры.Ячейка
	|ПОМЕСТИТЬ ВтДанныеНмиУчастка
	|ИЗ
	|	ВтДанныеЗаказа КАК ВтДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЯчейкиНоменклатуры КАК ЯчейкиНоменклатуры
	|		ПО ВтДанныеЗаказа.Номенклатура = ЯчейкиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Организация,
	|	итТоварыВЯчейкахОстатки.Склад,
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.Ячейка,
	|	итТоварыВЯчейкахОстатки.Номенклатура,
	|	итТоварыВЯчейкахОстатки.Характеристика,
	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.ДатаРозлива,
	|	итТоварыВЯчейкахОстатки.Качество,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток КАК КоличествоОстаток,
	|	ВЫРАЗИТЬ(итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток /
	|		ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0)) * ВтДанныеНмиУчастка.Коэффициент КАК Предрасчет,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток /
	|			ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0)) *
	|			ВтДанныеНмиУчастка.Коэффициент <= итТоварыВЯчейкахОстатки.КоличествоОстаток -
	|			итТоварыВЯчейкахОстатки.КОтборуОстаток
	|			ТОГДА ВЫРАЗИТЬ(итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток /
	|				ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0)) * ВтДанныеНмиУчастка.Коэффициент
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток /
	|				ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0)) *
	|				ВтДанныеНмиУчастка.Коэффициент > итТоварыВЯчейкахОстатки.КоличествоОстаток -
	|				итТоварыВЯчейкахОстатки.КОтборуОстаток
	|			И ВЫРАЗИТЬ(итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток /
	|				ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0)) * ВтДанныеНмиУчастка.Коэффициент > ВтДанныеНмиУчастка.Коэффициент
	|				ТОГДА ВЫРАЗИТЬ(итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток /
	|					ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0)) * ВтДанныеНмиУчастка.Коэффициент -
	|					ВтДанныеНмиУчастка.Коэффициент
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА итТоварыВЯчейкахОстатки.Ячейка.Зона = ЗНАЧЕНИЕ(Перечисление.итWmsЗоныСклада.Пикинга)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет,
	|	итТоварыВЯчейкахОстатки.Ячейка.Ярус КАК Ярус,
	|	итТоварыВЯчейкахОстатки.Ячейка.Зона,
	|	ВтДанныеНмиУчастка.Коэффициент
	|ПОМЕСТИТЬ ДанныеПоискаНМ
	|ИЗ
	|	ВтДанныеНмиУчастка КАК ВтДанныеНмиУчастка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(,) КАК итТоварыВЯчейкахОстатки
	|		ПО итТоварыВЯчейкахОстатки.Организация = ВтДанныеНмиУчастка.Организация
	|		И ВтДанныеНмиУчастка.Склад = итТоварыВЯчейкахОстатки.Склад
	|		И ВтДанныеНмиУчастка.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|		И ВтДанныеНмиУчастка.Ячейка = итТоварыВЯчейкахОстатки.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтАссортиментныеУчасткиНМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЯчейкиНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеНмиУчастка";
	
	Запрос.УстановитьПараметр("Ссылка",ДанныеЗаполнения.Ссылка);
	Запрос.Выполнить();
КонецПроцедуры
Процедура ИзъятьЗарезервированныеДанные(МенеджерВременныхТаблиц,ТаблицаЗарезервированныхДанных)
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	|	ДанныеПоискаНМРерезв.Склад,
	|	ДанныеПоискаНМРерезв.Ячейка КАК Ячейка,
	|	ДанныеПоискаНМРерезв.Номенклатура,
	|	ДанныеПоискаНМРерезв.Характеристика,
	|	ДанныеПоискаНМРерезв.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеПоискаНМРерезв.КоличествоОстаток КАК КоличествоОстаток,
	|	ДанныеПоискаНМРерезв.Коэффициент,
	|	ДанныеПоискаНМРерезв.Предрасчет,
	|	ДанныеПоискаНМРерезв.Количество КАК Количество,
	|	ДанныеПоискаНМРерезв.Качество,
	|	ДанныеПоискаНМРерезв.ДатаРозлива КАК ДатаРозлива,
	|	ДанныеПоискаНМРерезв.Ярус КАК Ярус,
	|	ДанныеПоискаНМРерезв.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ДанныеПоискаНМРерезв.Приоритет КАК Приоритет,
	|	ДанныеПоискаНМРерезв.ЯчейкаЗона КАК ЯчейкаЗона
	|ПОМЕСТИТЬ РезервированныеДанные
	|ИЗ
	|	&ТаблицаЗарезервированныхДанных КАК ДанныеПоискаНМРерезв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоискаНМ.Склад,
	|	ДанныеПоискаНМ.Ячейка КАК Ячейка,
	|	ДанныеПоискаНМ.Номенклатура,
	|	ДанныеПоискаНМ.Характеристика,
	|	ДанныеПоискаНМ.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеПоискаНМ.КоличествоОстаток КАК КоличествоОстаток,
	|	ДанныеПоискаНМ.Коэффициент,
	|	ДанныеПоискаНМ.Предрасчет,
	|	ДанныеПоискаНМ.Количество КАК Количество,
	|	ДанныеПоискаНМ.Качество,
	|	ДанныеПоискаНМ.ДатаРозлива КАК ДатаРозлива,
	|	ДанныеПоискаНМ.Ячейка.Ярус КАК Ярус,
	|	ДанныеПоискаНМ.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ДанныеПоискаНМ.Приоритет КАК Приоритет,
	|	ДанныеПоискаНМ.ЯчейкаЗона КАК ЯчейкаЗона
	|ПОМЕСТИТЬ ДанныеПоискаНМ1
	|ИЗ
	|	ДанныеПоискаНМ КАК ДанныеПоискаНМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеПоискаНМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.Ячейка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.СерияНоменклатуры,
	|	МАКСИМУМ(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток,
	|	МАКСИМУМ(ВложенныйЗапрос.Коэффициент) КАК Коэффициент,
	|	МАКСИМУМ(ВложенныйЗапрос.Предрасчет) КАК Предрасчет,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	ВложенныйЗапрос.Качество,
	|	ВложенныйЗапрос.ДатаРозлива,
	|	ВложенныйЗапрос.Ярус,
	|	ВложенныйЗапрос.ИдентификаторУпаковки,
	|	ВложенныйЗапрос.Приоритет,
	|	ВложенныйЗапрос.ЯчейкаЗона
	|ПОМЕСТИТЬ ДанныеПоискаНМРассчет
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеПоискаНМ1.Склад КАК Склад,
	|		ДанныеПоискаНМ1.Ячейка КАК Ячейка,
	|		ДанныеПоискаНМ1.Номенклатура КАК Номенклатура,
	|		ДанныеПоискаНМ1.Характеристика КАК Характеристика,
	|		ДанныеПоискаНМ1.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ДанныеПоискаНМ1.КоличествоОстаток КАК КоличествоОстаток,
	|		ДанныеПоискаНМ1.Коэффициент КАК Коэффициент,
	|		ДанныеПоискаНМ1.Предрасчет КАК Предрасчет,
	|		ДанныеПоискаНМ1.Количество КАК Количество,
	|		ДанныеПоискаНМ1.Качество КАК Качество,
	|		ДанныеПоискаНМ1.ДатаРозлива КАК ДатаРозлива,
	|		ДанныеПоискаНМ1.Ярус КАК Ярус,
	|		ДанныеПоискаНМ1.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|		ДанныеПоискаНМ1.Приоритет КАК Приоритет,
	|		ДанныеПоискаНМ1.ЯчейкаЗона КАК ЯчейкаЗона
	|	ИЗ
	|		ДанныеПоискаНМ1 КАК ДанныеПоискаНМ1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РезервированныеДанные.Склад,
	|		РезервированныеДанные.Ячейка,
	|		РезервированныеДанные.Номенклатура,
	|		РезервированныеДанные.Характеристика,
	|		РезервированныеДанные.СерияНоменклатуры,
	|		-ЕСТЬNULL(РезервированныеДанные.КоличествоОстаток, 0),
	|		РезервированныеДанные.Коэффициент,
	|		РезервированныеДанные.Предрасчет,
	|		-ЕСТЬNULL(РезервированныеДанные.Количество, 0),
	|		РезервированныеДанные.Качество,
	|		РезервированныеДанные.ДатаРозлива,
	|		РезервированныеДанные.Ярус,
	|		РезервированныеДанные.ИдентификаторУпаковки,
	|		РезервированныеДанные.Приоритет,
	|		РезервированныеДанные.ЯчейкаЗона
	|	ИЗ
	|		РезервированныеДанные КАК РезервированныеДанные) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.Ячейка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.СерияНоменклатуры,
	|	ВложенныйЗапрос.Качество,
	|	ВложенныйЗапрос.ДатаРозлива,
	|	ВложенныйЗапрос.Ярус,
	|	ВложенныйЗапрос.ИдентификаторУпаковки,
	|	ВложенныйЗапрос.ЯчейкаЗона,
	|	ВложенныйЗапрос.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоискаНМРассчет.Склад,
	|	ДанныеПоискаНМРассчет.Ячейка,
	|	ДанныеПоискаНМРассчет.Номенклатура,
	|	ДанныеПоискаНМРассчет.Характеристика,
	|	ДанныеПоискаНМРассчет.СерияНоменклатуры,
	|	ДанныеПоискаНМРассчет.КоличествоОстаток,
	|	ДанныеПоискаНМРассчет.Коэффициент,
	|	ДанныеПоискаНМРассчет.Предрасчет,
	|	ДанныеПоискаНМРассчет.Количество,
	|	ДанныеПоискаНМРассчет.Качество,
	|	ДанныеПоискаНМРассчет.ДатаРозлива,
	|	ДанныеПоискаНМРассчет.Ярус,
	|	ДанныеПоискаНМРассчет.ИдентификаторУпаковки,
	|	ДанныеПоискаНМРассчет.Приоритет,
	|	ДанныеПоискаНМРассчет.ЯчейкаЗона
	|ПОМЕСТИТЬ ДанныеПоискаНМ
	|ИЗ
	|	ДанныеПоискаНМРассчет КАК ДанныеПоискаНМРассчет
	|ГДЕ
	|	ДанныеПоискаНМРассчет.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеПоискаНМ1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеПоискаНМРассчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РезервированныеДанные";					
	
	Запрос.УстановитьПараметр("ТаблицаЗарезервированныхДанных",ТаблицаЗарезервированныхДанных);
	Запрос.Выполнить();
	ТаблицаЗарезервированныхДанных.Очистить();
КонецПроцедуры


// Функция - Полчить таблицу по результата запроса
//
// Параметры:
//  РезультатЗапроса - РезультатЗапроса	- результат запроса с выходными данными
// 
// Возвращаемое значение:
// ТаблицаЗначений - пустая таблица значений структурой соотв. структуре результата запроса.
//
Функция ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса)
	ТаблицаЗначений=новый ТаблицаЗначений;
	для Каждого Колонка из РезультатЗапроса.Колонки цикл
		ТаблицаЗначений.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
	КонецЦикла;
	Возврат ТаблицаЗначений;
КонецФункции


// Функция - Получить массив складсих помещений
// 
// Возвращаемое значение:
// Массив  -  массив всех складских помещений из справочника
//
Функция ПолучитьМассивСкладсихПомещений()
	МассивСкладскихПомещений=новый Массив;
	Выборка=Справочники.итСкладскиеПомещения.Выбрать();
	Пока Выборка.Следующий() цикл
		МассивСкладскихПомещений.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат МассивСкладскихПомещений;
КонецФункции

#КонецОбласти


#КонецОбласти

#Область ГвоздиГифт
//
//Процедура ПроверкаУсловийКА(Отказ)
//	_Результат = итОбщийМодуль.ПроверитьОсобенностьКонтрагента_v2(Дата, Контрагент, Перечисления.итОсобенностиКонтрагентов.КонтрольРазныхСерийВ_ОРТ);
//	Если _Результат.Особенный Тогда
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	Товары.Номенклатура,
//		|	Товары.СерияНоменклатуры КАК СерияНоменклатуры
//		|ПОМЕСТИТЬ ВТ_10
//		|ИЗ
//		|	&Товары КАК Товары
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_10.Номенклатура,
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_10.СерияНоменклатуры) КАК СерияНоменклатуры
//		|ПОМЕСТИТЬ ВТ_20
//		|ИЗ
//		|	ВТ_10 КАК ВТ_10
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВТ_10.Номенклатура
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_20.Номенклатура,
//		|	ВТ_20.СерияНоменклатуры
//		|ИЗ
//		|	ВТ_20 КАК ВТ_20
//		|ГДЕ
//		|	ВТ_20.СерияНоменклатуры > &ДопустимоеКоличество";
//		
//		Запрос.УстановитьПараметр("Товары", Товары);
//		Запрос.УстановитьПараметр("ДопустимоеКоличество", _Результат.ПараметрЦелоеЧисло);
//		
//		РезультатЗапроса = Запрос.Выполнить();
//		
//		Выборка = РезультатЗапроса.Выбрать();
//		
//		Пока Выборка.Следующий() Цикл
//			Если НЕ РольДоступна("ПолныеПрава") Тогда
//				//Отказ = Истина;
//				Сообщить("Но если очень хочется то можно! "+СТРОКА(Отказ));
//			КонецЕсли;	
//			Сообщить("Недопустимое количество разных серий в одной ОРТ - "+СТРОКА(Выборка.СерияНоменклатуры)+", для номенклатуры: "+СТРОКА(Выборка.Номенклатура),СтатусСообщения.Важное);
//		КонецЦикла;
//		
//		// Контроль специфических серий
//		КонтрольСпецифическихСерий( Отказ );
//		
//	КонецЕсли;	
//	ПроверкаПоМаршруту(Отказ);
//КонецПроцедуры
//
//Процедура КонтрольСпецифическихСерий( Отказ )
//	Возврат;
//	СостояниеОтказаДоПроверки=Отказ;	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Товары.Номенклатура,
//	|	Товары.СерияНоменклатуры КАК СерияНоменклатуры
//	|ПОМЕСТИТЬ ВТ_10
//	|ИЗ
//	|	&Товары КАК Товары
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ_10.Номенклатура,
//	|	ВТ_10.СерияНоменклатуры
//	|ИЗ
//	|	ВТ_10 КАК ВТ_10
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТ_10.СерияНоменклатуры,
//	|	ВТ_10.Номенклатура";
//	
//	Запрос.УстановитьПараметр("Товары", Товары);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		
//		Запрос2 = Новый Запрос;
//		Запрос2.Текст = 
//		"ВЫБРАТЬ
//		|	итПравилаРеализацииСерий.Контрагент,
//		|	итПравилаРеализацииСерий.Номенклатура,
//		|	итПравилаРеализацииСерий.ДатаРозлива,
//		|	итПравилаРеализацииСерий.ЗапрещеноОтгружатьДругимКонтрагентам
//		|ИЗ
//		|	РегистрСведений.итПравилаРеализацииСерий КАК итПравилаРеализацииСерий
//		|ГДЕ
//		|	итПравилаРеализацииСерий.Контрагент = &Контрагент
//		|	И итПравилаРеализацииСерий.Номенклатура = &Номенклатура
//		|	И итПравилаРеализацииСерий.ДатаРозлива > &ДатаРозлива
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	итПравилаРеализацииСерий.Контрагент,
//		|	итПравилаРеализацииСерий.Номенклатура,
//		|	итПравилаРеализацииСерий.ДатаРозлива,
//		|	итПравилаРеализацииСерий.ЗапрещеноОтгружатьДругимКонтрагентам
//		|ИЗ
//		|	РегистрСведений.итПравилаРеализацииСерий КАК итПравилаРеализацииСерий
//		|ГДЕ
//		|	итПравилаРеализацииСерий.Контрагент <> &Контрагент
//		|	И итПравилаРеализацииСерий.Номенклатура = &Номенклатура
//		|	И итПравилаРеализацииСерий.ДатаРозлива <= &ДатаРозлива
//		|	И итПравилаРеализацииСерий.ЗапрещеноОтгружатьДругимКонтрагентам";
//		
//		Запрос2.УстановитьПараметр("ДатаРозлива", Выборка.СерияНоменклатуры.алкДатаНачалаРозлива);
//		Запрос2.УстановитьПараметр("Контрагент", Контрагент);
//		Запрос2.УстановитьПараметр("Номенклатура", Выборка.Номенклатура);
//		
//		РезультатЗапроса2 = Запрос2.Выполнить();
//		
//		Выборка2 = РезультатЗапроса2.Выбрать();
//		
//		Пока Выборка2.Следующий() Цикл
//			Если Выборка2.Контрагент = Контрагент Тогда
//				Сообщить("Продажа данному контрагенту номенклатуры:"+СТРОКА(Выборка2.Номенклатура)+"с датой розлива меньше "+ФОРМАТ(Выборка2.ДатаРозлива,"ДФ=dd.MM.yy")+" запрещена!",СтатусСообщения.Важное);
//			Иначе
//				Сообщить("Продажа номенклатуры:"+СТРОКА(Выборка2.Номенклатура)+"с датой розлива "+ФОРМАТ(Выборка2.ДатаРозлива,"ДФ=dd.MM.yy")+" и позже запрещена всем кроме "+СТРОКА(Выборка2.Контрагент),СтатусСообщения.Важное);
//			КонецЕсли;	
//			Отказ = Истина;
//		КонецЦикла;
//		
//	КонецЦикла;
//	Если РольДоступна("ПолныеПрава")  тогда
//		Отказ=СостояниеОтказаДоПроверки;
//	КонецЕсли;
//	
//КонецПроцедуры
//Процедура ПроверкаПоМаршруту(Отказ)
//	
//	СостояниеОтказаДоПроверки=Отказ;
//	// --- Проверка допустимости количества разных серий в маршруте -----------------------------------------
//	// Надо ли вообще проверять?
//	Если итОбщийМодуль.ПроверитьОсобенностьКонтрагента( Дата, Контрагент, Перечисления.итОсобенностиКонтрагентов.КонтрольРазныхСерийВ_Маршруте) Тогда
//		
//		// В основании заказ покупателя
//		Если ТипЗнч(итОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
//			
//			// Существует ли маршрут?
//			Запрос = Новый Запрос;
//			Запрос.Текст = 
//			"ВЫБРАТЬ
//			|	МаршрутизацияДокументыПодбора.Ссылка
//			|ИЗ
//			|	Документ.итМаршрутизация.ДокументыПодбора КАК МаршрутизацияДокументыПодбора
//			|ГДЕ
//			|	МаршрутизацияДокументыПодбора.Документ = &Заказ
//			|	И МаршрутизацияДокументыПодбора.Ссылка.Проведен";
//			
//			Запрос.УстановитьПараметр("Заказ", Ссылка.итОснование);
//			
//			РезультатЗапроса = Запрос.Выполнить();
//			
//			Если НЕ РезультатЗапроса.Пустой() Тогда 
//				Выборка = РезультатЗапроса.Выбрать();
//				Выборка.Следующий();
//				итОбщийМодуль.КонтрольКоличестваСерийВМаршруте( Отказ, Выборка.Ссылка );
//				Если РольДоступна("ПолныеПрава")  тогда
//					Отказ=СостояниеОтказаДоПроверки;
//				КонецЕсли;
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//КонецПроцедуры
//

#КонецОбласти




Процедура ПроверкаНаСоответствиеСписаниюТоваров(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.СерияНоменклатуры,
	|	Товары.Качество,
	|	Товары.Количество
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеТоваровТовары.СерияНоменклатуры,
	|	СписаниеТоваровТовары.Номенклатура,
	|	СписаниеТоваровТовары.Качество,
	|	СУММА(СписаниеТоваровТовары.Количество * СписаниеТоваровТовары.Коэффициент) КАК КоличествоСписания,
	|	0 КАК КоличествоWMSСписания
	|ПОМЕСТИТЬ ВтДанные
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	|ГДЕ
	|	СписаниеТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеТоваровТовары.Номенклатура,
	|	СписаниеТоваровТовары.СерияНоменклатуры,
	|	СписаниеТоваровТовары.Качество
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТовары.СерияНоменклатуры,
	|	ВтТовары.Номенклатура,
	|	ВтТовары.Качество,
	|	0,
	|	СУММА(ВтТовары.Количество)
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТовары.Номенклатура,
	|	ВтТовары.СерияНоменклатуры,
	|	ВтТовары.Качество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанные.СерияНоменклатуры,
	|	ВтДанные.Номенклатура,
	|	ВтДанные.Качество,
	|	СУММА(ВтДанные.КоличествоСписания) КАК КоличествоСписания,
	|	СУММА(ВтДанные.КоличествоWMSСписания) КАК КоличествоWMSСписания
	|ПОМЕСТИТЬ ВтГруппировка
	|ИЗ
	|	ВтДанные КАК ВтДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанные.СерияНоменклатуры,
	|	ВтДанные.Номенклатура,
	|	ВтДанные.Качество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтГруппировка.СерияНоменклатуры,
	|	ВтГруппировка.Номенклатура,
	|	ВтГруппировка.Качество,
	|	ВтГруппировка.КоличествоСписания,
	|	ВтГруппировка.КоличествоWMSСписания
	|ИЗ
	|	ВтГруппировка КАК ВтГруппировка
	|ГДЕ
	|	ВтГруппировка.КоличествоСписания <> ВтГруппировка.КоличествоWMSСписания";
	
	Запрос.УстановитьПараметр("Ссылка", итОснование);
	Запрос.УстановитьПараметр("Товары",Товары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Отказ=Истина;
		Сообщить("У номенклатуры "+Строка(ВыборкаДетальныеЗаписи.Номенклатура)+" серии "+Строка(ВыборкаДетальныеЗаписи.СерияНоменклатуры) +" качества "+ Строка(ВыборкаДетальныеЗаписи.Качество)+ 
		" количество основания "+ВыборкаДетальныеЗаписи.КоличествоСписания +" отличается от количества документа " + ВыборкаДетальныеЗаписи.КоличествоWMSСписания);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаНаСоответствиеЗаказуПокупателя(Отказ)
	     	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSРучнаяОтгрузкаТовары.Номенклатура,
		|	СУММА(итWMSРучнаяОтгрузкаТовары.Количество) КАК КоличествоОтгрузка,
		|	0 КАК КоличествоЗаказ
		|ПОМЕСТИТЬ ВтДанныеДокумента
		|ИЗ
		|	Документ.итWMSРучнаяОтгрузка.Товары КАК итWMSРучнаяОтгрузкаТовары
		|ГДЕ
		|	итWMSРучнаяОтгрузкаТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSРучнаяОтгрузкаТовары.Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Номенклатура,
		|	0,
		|	ЗаказПокупателяТовары.Количество / ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗаказПокупателяТовары.Коэффициент, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ЗаказПокупателяТовары.Коэффициент, 0)
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &итОснование
		|	И ЗаказПокупателяТовары.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеДокумента.Номенклатура,
		|	СУММА(ВтДанныеДокумента.КоличествоОтгрузка) КАК КоличествоОтгрузка,
		|	СУММА(ВтДанныеДокумента.КоличествоЗаказ) КАК КоличествоЗаказ
		|ПОМЕСТИТЬ Вт2
		|ИЗ
		|	ВтДанныеДокумента КАК ВтДанныеДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеДокумента.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт2.Номенклатура,
		|	Вт2.КоличествоОтгрузка,
		|	Вт2.КоличествоЗаказ
		|ИЗ
		|	Вт2 КАК Вт2
		|ГДЕ
		|	Вт2.КоличествоОтгрузка <> Вт2.КоличествоЗаказ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("итОснование",итОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Отказ=Истина;
			Сообщить("Номенклатура "+Строка(ВыборкаДетальныеЗаписи.Номенклатура)+" количество в отгрузке " + Строка(ВыборкаДетальныеЗаписи.КоличествоОтгрузка)+ " количество в заказе "+
			Строка(ВыборкаДетальныеЗаписи.КоличествоЗаказ));
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	КонецПроцедуры

