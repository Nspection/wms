

#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполненЧерезОснованиеКлиент=ложь;
	Если Параметры.Свойство("ОснованиеДокумента") тогда
		Данные=РеквизитФормыВЗначение("Объект");
		Данные.ЗаполнитьДокументИзДанныхОснования(Параметры.ОснованиеДокумента);
		ЗначениеВРеквизитФормы(Данные,"Объект");
		ЗаполненЧерезОснованиеКлиент=Истина;
	КонецЕсли;
	Если Параметры.Ключ.Пустая() тогда
		Если не ЗаполненЧерезОснованиеКлиент Тогда 
		Объект.итОснование=Неопределено;
		КонецЕсли;
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		Объект.Ответственный=ПараметрыСеанса.ТекущийПользователь;
		Если Объект.Товары.Количество()>0 тогда
			для Каждого стр из Объект.Товары цикл
				стр.ИдентификаторСтроки=новый УникальныйИдентификатор;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;	
	ПроставитьПредставлениеИдентификатора();
//	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
//		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен или
//		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой тогда
//		//ПроставитьИнформацияВСтрокахОБОшибки();
//КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ТоварыСостояниеЗадачиПриИзменении(Элемент)
 ГрупповоеИзменениеСпискаПоИдУпаковки("СостояниеЗадачи",Элемент.Родитель.ТекущиеДанные.СостояниеЗадачи,Элемент.Родитель.ТекущиеДанные.ИдентификаторУпаковки);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Картинка = новый Картинка(БиблиотекаКартинок.ВнешнийИсточникДанныхКуб.ПолучитьДвоичныеДанные());
	АдресКартинкиКуба=ПоместитьВоВременноеХранилище(Картинка,ЭтаФорма.УникальныйИдентификатор);
	ВидимостьДоступностьЭлементов();
	ВариантОтображенияПользователя();
КонецПроцедуры
&НаКлиенте
Процедура ТоварыИдентификаторУпаковкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	СписокИдентификаторУпаковки=ПолучитьСписокУпаковокДокумента();
	ОткрытьФорму("Документ.итWMSПриемка.Форма.ФормаЗапросаИдентификатораУпаковки",новый Структура("СписокИдентификаторУпаковки,Организация,Ответственный",СписокИдентификаторУпаковки,Объект.Организация,ПолучитьТекущегоПользователя()),Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыИдентификаторУпаковкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Элемент.Родитель.ТекущиеДанные.ИдентификаторУпаковки= ВыбранноеЗначение;
КонецПроцедуры
&НаКлиенте
Процедура ТоварыДеревоНоменклатураПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоХарактеристикаПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоКачествоПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоДатаРозливаПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры


&НаКлиенте
Процедура ТоварыДеревоКоличествоПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
	РассчетКоличестваВУпаковкеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоСостояниеЗадачиПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].СостояниеЗадачи=Элемент.Родитель.ТекущиеДанные.СостояниеЗадачи;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоПередУдалением(Элемент, Отказ)
	Если Элемент.ВыделенныеСтроки.Количество()>1 тогда
		Сообщить("В режиме дерева можно удалять 1 любую строку за раз");
		Отказ=Истина;
		Возврат
	КонецЕсли;	
	Если Элемент.ТекущиеДанные.СтрокаУпаковки тогда
		Оповещение = новый ОписаниеОповещения("ОбработчикДиалогов",ЭтаФорма," ОбработчикУдалениеУпаковки();");
		ПоказатьВопрос(Оповещение,"Если удалить паллету, то все строки в ней так же будут удалены",РежимДиалогаВопрос.ДаНет);
		Отказ=Истина;
		Возврат
	иначе
		МассивСтроки=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",Элемент.ТекущиеДанные.ИдентификаторСтрокиПредставление));
		Строка=МассивСтроки[0];
		Объект.Товары.Удалить(Строка);
	КонецЕсли;
	ЭтаФорма.Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтрокаПеретаскиванияКуда=Элементы.ТоварыДерево.ДанныеСтроки(Строка);
	Если не СтрокаПеретаскиванияКуда.СтрокаУпаковки тогда
		пока не СтрокаПеретаскиванияКуда.СтрокаУпаковки цикл
			СтрокаПеретаскиванияКуда=СтрокаПеретаскиванияКуда.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	СтандартнаяОбработка=Ложь;
	для Каждого стр из ПараметрыПеретаскивания.Значение цикл
		ТекущаяСтрокаОбработки=Элементы.ТоварыДерево.ДанныеСтроки(стр);
		Если ТекущаяСтрокаОбработки.СтрокаУпаковки тогда
			Продолжить;
		КонецЕсли;	
		ТекущаяСтрокаОбработки.ИдентификаторУпаковки=СтрокаПеретаскиванияКуда.ИдентификаторУпаковки;
		НоваяСтрока=СтрокаПеретаскиванияКуда.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрокаОбработки);
		НоваяСтрока.ЯчейкаПолучатель=СтрокаПеретаскиванияКуда.ЯчейкаПолучатель;
		СтарыйРодитель=ТекущаяСтрокаОбработки.ПолучитьРодителя();
		СтарыйРодитель.ПолучитьЭлементы().Удалить(ТекущаяСтрокаОбработки);
		
		/////Обработчики Изменения
		СтрукрутраДляИзменения=новый Структура;
		СтрукрутраДляИзменения.Вставить("Имя","ИдентификаторУпаковки");
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		ОбработчикТрансляцииПриИзменении(СтрукрутраДляИзменения);
		СтрукрутраДляИзменения.Имя="Количество";
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		РассчетКоличестваВУпаковкеПриИзменении(СтрукрутраДляИзменения) ;
		СтрукрутраДляИзменения.Имя="Количество";
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",СтарыйРодитель));
		РассчетКоличестваВУпаковкеПриИзменении(СтрукрутраДляИзменения) ;
		
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ВидимостьДоступностьЭлементов();
	ПроставитьПредставлениеИдентификатора();
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияДанных(Команда)
	ОткрытьФорму("Документ.итWMSКонтрольнаяОперацияАгрегации.Форма.ФормаРасхождений",новый Структура("ОбъектАнализа",Объект.Ссылка),ЭтаФорма);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура ВВидеДерева(Команда)
	ВВидеДереваНаСервере();
	Элементы.ТоварыДерево.Видимость=Истина;
	Элементы.Товары.Видимость=Ложь;
	ТригерОтображения=Истина;
КонецПроцедуры
&НаСервере
Процедура ВВидеДереваНаСервере()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	ТоварыДерево.ПолучитьЭлементы().Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтрокиПредставление,
	|	Товары.ИдентификаторУпаковки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Качество,
	|	Товары.ДатаРозлива,
	|	Товары.Количество,
	|	Товары.СостояниеЗадачи,
	|	Товары.СтрокаВозможнойОшибки
	|ПОМЕСТИТЬ ТчТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчТовары.ИдентификаторСтрокиПредставление,
	|	ТчТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТчТовары.Номенклатура,
	|	ТчТовары.Характеристика,
	|	ТчТовары.Качество,
	|	ТчТовары.ДатаРозлива,
	|	ТчТовары.Количество КАК Количество,
	|	ТчТовары.СостояниеЗадачи КАК СостояниеЗадачи,
	|	ВЫБОР
	|		КОГДА ТчТовары.СтрокаВозможнойОшибки
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтрокаВозможнойОшибки
	|ИЗ
	|	ТчТовары КАК ТчТовары
	|ИТОГИ
	|	СУММА(Количество),
	|	МАКСИМУМ(СостояниеЗадачи),
	|	МАКСИМУМ(СтрокаВозможнойОшибки)
	|ПО
	|	ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаУпаковка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	пока ВыборкаУпаковка.Следующий() цикл
		НоваяСтрокаУпаковкаДерево = ТоварыДерево.ПолучитьЭлементы().Добавить();
		НоваяСтрокаУпаковкаДерево.ИдентификаторУпаковки= ВыборкаУпаковка.ИдентификаторУпаковки;
		//НоваяСтрокаУпаковкаДерево.КоличествоПлан=ВыборкаУпаковка.КоличествоПлан;
		НоваяСтрокаУпаковкаДерево.Количество=ВыборкаУпаковка.Количество;
		НоваяСтрокаУпаковкаДерево.СостояниеЗадачи=ВыборкаУпаковка.СостояниеЗадачи;
		НоваяСтрокаУпаковкаДерево.Картинка=АдресКартинкиКуба;
		НоваяСтрокаУпаковкаДерево.СтрокаУпаковки=Истина;
		Если ВыборкаУпаковка.СтрокаВозможнойОшибки>0 тогда
			НоваяСтрокаУпаковкаДерево.СтрокаВозможнойОшибки=Истина;
		КонецЕсли; 
		ВыборкаДетальныеЗаписи=ВыборкаУпаковка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрокаНоменклатуры = НоваяСтрокаУпаковкаДерево.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатуры,ВыборкаДетальныеЗаписи);
			Если ВыборкаДетальныеЗаписи.СтрокаВозможнойОшибки>0 тогда
				НоваяСтрокаНоменклатуры.СтрокаВозможнойОшибки=Истина;
            КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
&НаКлиенте
Процедура ВВидеСписка(Команда)
	Элементы.ТоварыДерево.Видимость=Ложь;
	Элементы.Товары.Видимость=Истина;
	ТригерОтображения=Ложь;
КонецПроцедуры
&НаКлиенте
Процедура СкопироватьТовары(Команда)
	Если  Элементы.ГруппаТовары.ТолькоПросмотр тогда
		Возврат
	КонецЕсли;	
	Если ТекущийЭлемент.Имя="Товары" тогда
		НоваяСтрока=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущийЭлемент.ТекущиеДанные);
		НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
		НоваяСтрока.ИдентификаторСтрокиПредставление=Строка(НоваяСтрока.ИдентификаторСтроки);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ДобавитьТовары(Команда)
	Если  Элементы.ГруппаТовары.ТолькоПросмотр тогда
		Возврат
	КонецЕсли;	
	НоваяСтрока=Объект.Товары.Добавить();
	НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
	НоваяСтрока.ИдентификаторСтрокиПредставление= Строка(НоваяСтрока.ИдентификаторСтроки);
КонецПроцедуры
&НаКлиенте
Процедура Развернуть(Команда)
	//СтрокиПаллет=ПаллетМеста.ПолучитьЭлементы();
	//для Каждого Паллета из СтрокиПаллет цикл
	//	Элементы.ПаллетМеста.Развернуть(Паллета.ПолучитьИдентификатор());
	//КонецЦикла;
	Строки=ТоварыДерево.ПолучитьЭлементы();
	Если Строки.Количество()>0 тогда
		РазвернутьДанные(Строки);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура РазвернутьДанные(Строки)
	для Каждого Строка из Строки цикл
		Элементы.ТоварыДерево.Развернуть(Строка.ПолучитьИдентификатор());
		ПодчиненныеСтроки= Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество()>0 тогда
			РазвернутьДанные(ПодчиненныеСтроки);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура Свернуть(Команда)
	Строки=ТоварыДерево.ПолучитьЭлементы();
	Если Строки.Количество()>0 тогда
		СвернутьДанные(Строки);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте	
Процедура СвернутьДанные(Строки)
	для Каждого Строка из Строки цикл
		ПодчиненныеСтроки= Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество()>0 тогда
			СвернутьДанные(ПодчиненныеСтроки);
		КонецЕсли;	
		Элементы.ТоварыДерево.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОтображенияНаСервере()
	ЭтаФорма.Записать();
	//ПроставитьИнформацияВСтрокахОБОшибки();
	ПроставитьПредставлениеИдентификатора();
	ВВидеДереваНаСервере();
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьДанныеОтображения(Команда)
	ОбновитьДанныеОтображенияНаСервере();
	КонецПроцедуры
&НаКлиенте
Процедура СоздатьДокументПереупаковки(Команда)
	ФормаПереупаковки=ПолучитьФорму("Документ.алкПереупаковка.ФормаОбъекта");
	ФормаПереупаковки.Объект.ДокументОснование=Объект.Ссылка;
	ФормаПереупаковки.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПараматровТовараВЯчейке(Команда)
	ОткрытьФорму("ОбщаяФорма.ит_WMS_СозданияИзмененияПараметровТовараВЯчейках",новый Структура("Основание",Объект.Ссылка),ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ПроставитьПредставлениеИдентификатора()
	для Каждого  стр из Объект.Товары цикл
		стр.ИдентификаторСтрокиПредставление=Строка(стр.ИдентификаторСтроки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияПользователя()
	Если ТригерОтображения тогда
		ВВидеДерева("");
	иначе
		ВВидеСписка("");
	КонецЕсли;
КонецПроцедуры
&НаСервере
Функция ПолучитьТекущегоПользователя()
	Возврат	ПараметрыСеанса.ТекущийПользователь;
КонецФункции
&НаКлиенте
Процедура ОбработчикДиалогов(Результат,Параметры)Экспорт 
	Если Результат=КодВозвратаДиалога.Нет тогда
	Возврат;
	КонецЕсли;
	Если Параметры="ОбработчикУдалениеУпаковки();" Тогда
//		ОбработчикУдалениеУпаковки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьЭлементов()
	ВидимостьДоступностьЭлементовНаСервере();
КонецПроцедуры
&НаСервере
Процедура ВидимостьДоступностьЭлементовНаСервере()
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой тогда
		Элементы.РасхожденияДанных.Видимость=Истина;
	иначе
		Элементы.РасхожденияДанных.Видимость=Ложь;
	КонецЕсли;
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой или
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда 
		Элементы.ФормаСоздатьДокументПереупаковки.Видимость=Истина;
		Элементы.ФормаИзменениеПараматровТовараВЯчейке.Видимость=Истина;
	иначе
		Элементы.ФормаСоздатьДокументПереупаковки.Видимость=Ложь;
		Элементы.ФормаИзменениеПараматровТовараВЯчейке.Видимость=Ложь;
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Функция ПолучитьСписокУпаковокДокумента()
	Запрос = новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	|	Товары.ИдентификаторУпаковки
	|ПОМЕСТИТЬ ТчТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки
	|ИЗ
	|	ТчТовары КАК ТчТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТчТовары.ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());	
	Результат= Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку("ИдентификаторУпаковки");
КонецФункции

&НаКлиенте
Процедура ОбработчикТрансляцииПриИзменении(Элемент)
	СтрокаДерева=Элемент.Родитель.ТекущиеДанные;
	ПолеИзменения=СтрЗаменить(Элемент.Имя,"ТоварыДерево","");
	Если ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтрокиПредставление) тогда
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",СтрокаДерева.ИдентификаторСтрокиПредставление));
		Строка[0][ПолеИзменения]=Элемент.Родитель.ТекущиеДанные[ПолеИзменения];
		ЭтаФорма.Модифицированность=Истина;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура РассчетКоличестваВУпаковкеПриИзменении(Элемент)
	СтрокаИзменения=Элемент.Родитель.ТекущиеДанные;
	ПолеИзменения=СтрЗаменить(Элемент.Имя,"ТоварыДерево","");
	Если не СтрокаИзменения.СтрокаУпаковки тогда
		РодительСтрокиИзменения=СтрокаИзменения.ПолучитьРодителя();
	иначе
		РодительСтрокиИзменения=СтрокаИзменения;
	КонецЕсли;
	РодительСтрокиИзменения[ПолеИзменения]=0;
	СтрокиДляПересчета=РодительСтрокиИзменения.ПолучитьЭлементы();
	для Каждого стр из СтрокиДляПересчета цикл
		РодительСтрокиИзменения[ПолеИзменения]=РодительСтрокиИзменения[ПолеИзменения]+ стр[ПолеИзменения];
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ГрупповоеИзменениеСпискаПоИдУпаковки(ПолеИзменения,Значение,ИдентификаторУпаковки)
МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторУпаковки",ИдентификаторУпаковки));
для Каждого стр из МассивСтрок цикл
	стр[ПолеИзменения]=Значение;
КонецЦикла;	
КонецПроцедуры





#КонецОбласти




