Перем ИгнорироватьОтказПриПроверках Экспорт ;

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ТипЗнч(ИгнорироватьОтказПриПроверках)<>Тип("Булево") Тогда 
		ИгнорироватьОтказПриПроверках=Ложь;
	КонецЕсли;
	итWMSСлужебныеПроцедурыИФункции.УстановитьРежимПроведенияЗавершенногоДокумента(СтатусДокумента,РежимПроведения);
	Если ЭтотОбъект.Проведен и РежимЗаписи=РежимЗаписиДокумента.Запись тогда
		Если не ОбменДанными.Загрузка Тогда 
			РежимЗаписи=РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	КонецЕсли;	
    Если РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения тогда
		ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения);
	ИначеЕсли  РежимЗаписи= РежимЗаписиДокумента.Проведение тогда
		ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;
    Если ОбменДанными.Загрузка Тогда 
		Отказ=Ложь;
	КонецЕсли;	
    Если ПометкаУдаления  и не Отказ Тогда 
		ОчиститьДанныеМарок();
	КонецЕсли;	
	Если  РежимЗаписи=РежимЗаписиДокумента.Проведение  Тогда 
		//ОтложенноеПроведение=Ложь;   
		Если не Ссылка.Пустая() Тогда 
			итWMSСлужебныеПроцедурыИФункции.УдалитьЗаписьДопОбработкиОтложенногоПроведения(Ссылка);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры


Процедура ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения)
Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется или  СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован  тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		ОчиститьСписокЗадач(Отказ,РежимЗаписи,РежимПроведения);
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен тогда
		Отказ = Истина;
		Сообщить("Документ распределен на тсд и не может быть распроведен ");		
	КонецЕсли;	
КонецПроцедуры


Процедура ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения)
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан и НеРаспределятьНаТСД   тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован;
		ПроверкаНаФиксациюЗадачДокументаДоРаспределения();
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан и не НеРаспределятьНаТСД    тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
		для Каждого стр из Товары цикл
            Если не стр.ФиксацияСтроки  Тогда 
			стр.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
			КонецЕсли;
		КонецЦикла;
		Хранилище=новый ХранилищеЗначения(Товары.Выгрузить(),новый СжатиеДанных(9));
		СнимокТабличнойЧастиДоРаспределения=Хранилище;
		ПроверкаНаФиксациюЗадачДокументаДоРаспределения();
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован и не НеРаспределятьНаТСД   тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
		для Каждого стр из Товары цикл
		 Если не стр.ФиксацияСтроки  Тогда 
			стр.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
		 КонецЕсли;	
		КонецЦикла;
		Хранилище=новый ХранилищеЗначения(Товары.Выгрузить(),новый СжатиеДанных(9));
		СнимокТабличнойЧастиДоРаспределения=Хранилище;
		ПроверкаНаФиксациюЗадачДокументаДоРаспределения();
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой  тогда
		ВыборкаДетальныеЗаписи = ЗапросФиксацииЗадачДокумента();
		Пока   ВыборкаДетальныеЗаписи.Следующий() цикл 
			Если ВыборкаДетальныеЗаписи.КоличествоФиксированныхСтрок<>ВыборкаДетальныеЗаписи.КоличествоСтрок Тогда 
				СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
				для Каждого стр из Товары цикл
					Если не стр.ФиксацияСтроки  Тогда 
						стр.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
					КонецЕсли;
				КонецЦикла;
				Хранилище=новый ХранилищеЗначения(Товары.Выгрузить(),новый СжатиеДанных(9));
				СнимокТабличнойЧастиДоРаспределения=Хранилище;	
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда 
		ОчиститьДанныеМарок();
	КонецЕсли;

    ПроверкаНаКоличествоПроверокУДокументовОснований(Отказ, РежимЗаписи, РежимПроведения);	
КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда	
		РаспределениеДокументаНаЗадачиТСД(Отказ, РежимПроведения);
	КонецЕсли;

	Если Отказ тогда
		ОтменитьТранзакцию();
	иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;

КонецПроцедуры

Процедура РаспределениеДокументаНаЗадачиТСД(Отказ, РежимПроведения)
	ОчиститьСписокЗадач(Отказ,,РежимПроведения);
	Если Отказ Тогда 
		Возврат
	КонецЕсли;		
	НаборЗаписей= РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSПроверкаТовары.ИдентификаторСтроки,
	|	итWMSПроверкаТовары.ИдентификаторУпаковки,
	|	итWMSПроверкаТовары.Номенклатура,
	|	итWMSПроверкаТовары.Характеристика,
	|	итWMSПроверкаТовары.СерияНоменклатуры,
	|	итWMSПроверкаТовары.Качество,
	|	итWMSПроверкаТовары.ДатаРозлива,
	|	итWMSПроверкаТовары.Ячейка,
	|	итWMSПроверкаТовары.Количество,
	|	итWMSПроверкаТовары.СерияНоменклатуры.итПризнакПомарочногоУчета КАК ПризнакПомарочногоУчета,
	|	итWMSПроверкаТовары.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	|	итWMSПроверкаТовары.Номенклатура.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	итWMSПроверкаТовары.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент КАК КоэффициентКороба,
	|	итWMSПроверкаТовары.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете КАК КоличествоНаПаллете
	|ПОМЕСТИТЬ ВтДанныеПроверки
	|ИЗ
	|	Документ.итWMSПроверка.Товары КАК итWMSПроверкаТовары
	|ГДЕ
	|	итWMSПроверкаТовары.Ссылка = &Ссылка
	|	И НЕ итWMSПроверкаТовары.ФиксацияСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ИдентификаторУпаковки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ алкХранилищеАкцизныхМарокСрезПоследних.Марка) КАК Марка,
	|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция,
	|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ
	|ПОМЕСТИТЬ ПМУДанныеИдентификаторов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|		алкХранилищеУпаковокСрезПоследних.Упаковка КАК Упаковка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВтДанныеПроверки.ИдентификаторУпаковки КАК ИдентификаторУпаковки
	|		ИЗ
	|			ВтДанныеПроверки КАК ВтДанныеПроверки
	|		ГДЕ
	|			ВтДанныеПроверки.ПризнакПомарочногоУчета
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВтДанныеПроверки.ИдентификаторУпаковки) КАК ВложенныйЗапрос
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеУпаковок.СрезПоследних КАК алкХранилищеУпаковокСрезПоследних
	|			ПО ВложенныйЗапрос.ИдентификаторУпаковки = алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
	|		ПО ВложенныйЗапрос.Упаковка = алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ИдентификаторУпаковки,
	|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ,
	|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ШтрихкодыБутылок.Штрихкод) КАК ШтрихкодБутылки,
	|	МАКСИМУМ(ШтрихкодыКоробов.Штрихкод) КАК ШтрихкодКороба,
	|	ВтДанныеПроверки.ИдентификаторСтроки,
	|	ВтДанныеПроверки.ИдентификаторУпаковки,
	|	ВтДанныеПроверки.Номенклатура,
	|	ВтДанныеПроверки.Характеристика,
	|	ВтДанныеПроверки.СерияНоменклатуры,
	|	ВтДанныеПроверки.Качество,
	|	ВтДанныеПроверки.ДатаРозлива,
	|	ВтДанныеПроверки.Ячейка,
	|	ВтДанныеПроверки.Количество,
	|	ВтДанныеПроверки.ПризнакПомарочногоУчета,
	|	ВтДанныеПроверки.ЕдиницаХраненияОстатков,
	|	ВтДанныеПроверки.ЕдиницаИзмеренияМест,
	|	ВтДанныеПроверки.КоэффициентКороба,
	|	ВтДанныеПроверки.КоличествоНаПаллете
	|ПОМЕСТИТЬ ВтПодготовкаДанных
	|ИЗ
	|	ВтДанныеПроверки КАК ВтДанныеПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ШтрихкодыБутылок
	|		ПО ВтДанныеПроверки.Номенклатура = ШтрихкодыБутылок.Владелец
	|			И ВтДанныеПроверки.ЕдиницаХраненияОстатков = ШтрихкодыБутылок.ЕдиницаИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ШтрихкодыКоробов
	|		ПО ВтДанныеПроверки.Номенклатура = ШтрихкодыКоробов.Владелец
	|			И ВтДанныеПроверки.ЕдиницаИзмеренияМест = ШтрихкодыКоробов.ЕдиницаИзмерения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеПроверки.ИдентификаторСтроки,
	|	ВтДанныеПроверки.ИдентификаторУпаковки,
	|	ВтДанныеПроверки.Номенклатура,
	|	ВтДанныеПроверки.Характеристика,
	|	ВтДанныеПроверки.СерияНоменклатуры,
	|	ВтДанныеПроверки.Качество,
	|	ВтДанныеПроверки.ДатаРозлива,
	|	ВтДанныеПроверки.Ячейка,
	|	ВтДанныеПроверки.Количество,
	|	ВтДанныеПроверки.ПризнакПомарочногоУчета,
	|	ВтДанныеПроверки.ЕдиницаХраненияОстатков,
	|	ВтДанныеПроверки.ЕдиницаИзмеренияМест,
	|	ВтДанныеПроверки.КоэффициентКороба,
	|	ВтДанныеПроверки.КоличествоНаПаллете
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПМУДанныеИдентификаторов.ИдентификаторУпаковки,
	|	ПМУДанныеИдентификаторов.Марка,
	|	ПМУДанныеИдентификаторов.АлкогольнаяПродукция,
	|	ПМУДанныеИдентификаторов.СправкаБ,
	|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры) КАК СерияНоменклатуры
	|ПОМЕСТИТЬ ПМУДанныеПоСериям
	|ИЗ
	|	ПМУДанныеИдентификаторов КАК ПМУДанныеИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
	|		ПО ПМУДанныеИдентификаторов.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПМУДанныеИдентификаторов.ИдентификаторУпаковки,
	|	ПМУДанныеИдентификаторов.Марка,
	|	ПМУДанныеИдентификаторов.АлкогольнаяПродукция,
	|	ПМУДанныеИдентификаторов.СправкаБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПодготовкаДанных.ШтрихкодБутылки,
	|	ВтПодготовкаДанных.ШтрихкодКороба,
	|	ВтПодготовкаДанных.ИдентификаторСтроки,
	|	ВтПодготовкаДанных.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВтПодготовкаДанных.Номенклатура,
	|	ВтПодготовкаДанных.Характеристика,
	|	ВтПодготовкаДанных.СерияНоменклатуры,
	|	ВтПодготовкаДанных.Качество,
	|	ВтПодготовкаДанных.ДатаРозлива,
	|	ВтПодготовкаДанных.Ячейка КАК Ячейка,
	|	ВтПодготовкаДанных.Количество КАК Количество,
	|	ВтПодготовкаДанных.ПризнакПомарочногоУчета,
	|	ВтПодготовкаДанных.ЕдиницаХраненияОстатков,
	|	ВтПодготовкаДанных.ЕдиницаИзмеренияМест,
	|	ВтПодготовкаДанных.КоэффициентКороба,
	|	СУММА(ЕСТЬNULL(ПМУДанныеПоСериям.Марка, 0)) КАК КоличествоМарокПаллеты,
	|	ВтПодготовкаДанных.КоличествоНаПаллете КАК КоличествоНаПаллете
	|ПОМЕСТИТЬ ВтИтоговое
	|ИЗ
	|	ВтПодготовкаДанных КАК ВтПодготовкаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПМУДанныеПоСериям КАК ПМУДанныеПоСериям
	|		ПО ВтПодготовкаДанных.ИдентификаторУпаковки = ПМУДанныеПоСериям.ИдентификаторУпаковки
	|			И ВтПодготовкаДанных.СерияНоменклатуры = ПМУДанныеПоСериям.СерияНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтПодготовкаДанных.ШтрихкодБутылки,
	|	ВтПодготовкаДанных.ШтрихкодКороба,
	|	ВтПодготовкаДанных.ИдентификаторСтроки,
	|	ВтПодготовкаДанных.ИдентификаторУпаковки,
	|	ВтПодготовкаДанных.Номенклатура,
	|	ВтПодготовкаДанных.Характеристика,
	|	ВтПодготовкаДанных.СерияНоменклатуры,
	|	ВтПодготовкаДанных.Качество,
	|	ВтПодготовкаДанных.ДатаРозлива,
	|	ВтПодготовкаДанных.Ячейка,
	|	ВтПодготовкаДанных.Количество,
	|	ВтПодготовкаДанных.ПризнакПомарочногоУчета,
	|	ВтПодготовкаДанных.ЕдиницаХраненияОстатков,
	|	ВтПодготовкаДанных.ЕдиницаИзмеренияМест,
	|	ВтПодготовкаДанных.КоэффициентКороба,
	|	ВтПодготовкаДанных.КоличествоНаПаллете
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтоговое.ШтрихкодБутылки,
	|	ВтИтоговое.ШтрихкодКороба,
	|	ВтИтоговое.ИдентификаторСтроки,
	|	ВтИтоговое.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВтИтоговое.Номенклатура,
	|	ВтИтоговое.Характеристика,
	|	ВтИтоговое.СерияНоменклатуры,
	|	ВтИтоговое.Качество,
	|	ВтИтоговое.ДатаРозлива,
	|	ВтИтоговое.Ячейка КАК Ячейка,
	|	ВтИтоговое.Количество КАК Количество,
	|	ВтИтоговое.ПризнакПомарочногоУчета КАК ПризнакПомарочногоУчета,
	|	ВтИтоговое.ЕдиницаХраненияОстатков,
	|	ВтИтоговое.ЕдиницаИзмеренияМест,
	|	ВтИтоговое.КоэффициентКороба,
	|	ВтИтоговое.КоличествоМарокПаллеты КАК КоличествоМарокПаллеты,
	|	ВтИтоговое.КоличествоНаПаллете КАК КоличествоНаПаллете,
	|	ВЫБОР
	|		КОГДА ВтИтоговое.ПризнакПомарочногоУчета
	|				И ВтИтоговое.КоличествоНаПаллете <> ВтИтоговое.КоличествоМарокПаллеты
	|			ТОГДА 1
	|		КОГДА НЕ ВтИтоговое.ПризнакПомарочногоУчета
	|				И ВтИтоговое.Количество <> ВтИтоговое.КоличествоНаПаллете
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НеЦелыйПаллет
	|ИЗ
	|	ВтИтоговое КАК ВтИтоговое
	|ИТОГИ
	|	МАКСИМУМ(Ячейка),
	|	СУММА(Количество),
	|	МАКСИМУМ(ПризнакПомарочногоУчета),
	|	СУММА(КоличествоМарокПаллеты),
	|	СРЕДНЕЕ(КоличествоНаПаллете),
	|	МАКСИМУМ(НеЦелыйПаллет)
	|ПО
	|	ИдентификаторУпаковки";
	
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИдентификаторУпаковки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИдентификаторУпаковки.Следующий() Цикл
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.ДокументОснование=Ссылка;
		НоваяЗапись.ИдентификаторУпаковки=ВыборкаИдентификаторУпаковки.ИдентификаторУпаковки;
		НоваяЗапись.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Проверка;
		НоваяЗапись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
        НоваяЗапись.ИдЗадачи=новый УникальныйИдентификатор;
		НоваяЗапись.ЯчейкаОтправитель=ВыборкаИдентификаторУпаковки.Ячейка;
		НоваяЗапись.ЯчейкаПолучатель=ВыборкаИдентификаторУпаковки.Ячейка;

		ЗаполнитьСтрокиЗадачиТСД(Отказ, РежимПроведения, НоваяЗапись.ИдЗадачи,ВыборкаИдентификаторУпаковки);
		НоваяЗапись.ДополнительныеДанные=новый ХранилищеЗначения(новый Структура("НеЦелыйПаллет",ВыборкаИдентификаторУпаковки.НеЦелыйПаллет));
	КонецЦикла;
	НаборЗаписей.Записать();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры
Процедура ЗаполнитьСтрокиЗадачиТСД(Отказ, РежимПроведения,ИдЗадачи,ВыборкаИдентификаторУпаковки)
	ВыборкаДетальныеЗаписи = ВыборкаИдентификаторУпаковки.Выбрать();
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSСтрокиЗадачТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ИдЗадачи",ИдЗадачи);
	БлокировкаДанных.Заблокировать();
	НаборЗаписей= РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.ИдЗадачи=ИдЗадачи;
		НоваяЗапись.идСтроки=новый УникальныйИдентификатор(ВыборкаДетальныеЗаписи.ИдентификаторСтроки);
		НоваяЗапись.ДатаРозлива= ВыборкаДетальныеЗаписи.ДатаРозлива;
		НоваяЗапись.Номенклатура=ВыборкаДетальныеЗаписи.Номенклатура;
		НоваяЗапись.СерияНоменклатуры=ВыборкаДетальныеЗаписи.СерияНоменклатуры;
		НоваяЗапись.Количество=ВыборкаДетальныеЗаписи.Количество;
		СтруктураДополнительныхДанных=новый Структура;
		СтруктураДополнительныхДанных.Вставить("ПризнакПомарочногоУчета",ВыборкаДетальныеЗаписи.ПризнакПомарочногоУчета);
		СтруктураДополнительныхДанных.Вставить("ШтрихкодБутылки",ВыборкаДетальныеЗаписи.ШтрихкодБутылки);
        СтруктураДополнительныхДанных.Вставить("ШтрихкодКороба",ВыборкаДетальныеЗаписи.ШтрихкодКороба);
        СтруктураДополнительныхДанных.Вставить("КоэффициентКороба",ВыборкаДетальныеЗаписи.КоэффициентКороба);
        СтруктураДополнительныхДанных.Вставить("КоличествоМарокПаллеты",ВыборкаДетальныеЗаписи.КоличествоМарокПаллеты);
        СтруктураДополнительныхДанных.Вставить("КоличествоНаПаллете",ВыборкаДетальныеЗаписи.КоличествоНаПаллете);
		НоваяЗапись.ДополнительныеДанные=новый ХранилищеЗначения(СтруктураДополнительныхДанных);
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ЗаполнениеНаОсновании(Основание) Экспорт 
	Если ТипЗнч(Основание)=Тип("ДокументСсылка.итWMSНаборка") Тогда 
		 ЗаполнитьНаОснованииНаборки(Основание);
		КонецЕсли;
	КонецПроцедуры

Процедура ЗаполнитьНаОснованииНаборки(Основание)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковки,
	|	итWMSНаборкаТовары.Номенклатура,
	|	итWMSНаборкаТовары.Характеристика,
	|	итWMSНаборкаТовары.СерияНоменклатуры,
	|	итWMSНаборкаТовары.Качество,
	|	итWMSНаборкаТовары.ДатаРозлива,
	|	СУММА(ВЫБОР
	|			КОГДА итWMSНаборкаТовары.ИзъятиеТовара
	|				ТОГДА итWMSНаборкаТовары.КоличествоФакт - итWMSНаборкаТовары.КоличествоИзъятия
	|			ИНАЧЕ итWMSНаборкаТовары.КоличествоФакт
	|		КОНЕЦ) КАК Количество,
	|	итWMSНаборкаТовары.ЯчейкаПолучатель КАК Ячейка
	|ПОМЕСТИТЬ Вт
	|ИЗ
	|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
	|ГДЕ
	|	итWMSНаборкаТовары.ФиксацияСтроки
	|	И итWMSНаборкаТовары.Ссылка.Проведен
	|	И итWMSНаборкаТовары.Ссылка = &Ссылка
	|	И итWMSНаборкаТовары.СостояниеЗадачи = ЗНАЧЕНИЕ(Перечисление.итWMSСостояниязадачТСД.Выполнена)
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель,
	|	итWMSНаборкаТовары.Номенклатура,
	|	итWMSНаборкаТовары.Характеристика,
	|	итWMSНаборкаТовары.СерияНоменклатуры,
	|	итWMSНаборкаТовары.Качество,
	|	итWMSНаборкаТовары.ДатаРозлива,
	|	итWMSНаборкаТовары.ЯчейкаПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт.ИдентификаторУпаковки,
	|	Вт.Номенклатура,
	|	Вт.Характеристика,
	|	Вт.СерияНоменклатуры,
	|	Вт.Качество,
	|	Вт.ДатаРозлива,
	|	Вт.Количество,
	|	Вт.Ячейка
	|ИЗ
	|	Вт КАК Вт
	|ГДЕ
	|	Вт.Количество > 0";
	
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатЗапроса = Запрос.Выполнить();
	Организация=Основание.Организация;
	Контрагент=Основание.Контрагент;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Товары.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
		НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;	
	КонецЦикла;
	итОснования.Добавить().Документ=Основание;
	СозданНаОснованиСерверногоВызова=Истина;		
		КонецПроцедуры
	
Процедура ОчиститьСписокЗадач(Отказ,РежимЗаписи=Неопределено,РежимПроведения)
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен Тогда 
		Отказ=Истина;
		Возврат
	КонецЕсли;	
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",Ссылка);
	БлокировкаДанных.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSЗадачиТСД.ИдЗадачи
		|ИЗ
		|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|ГДЕ
		|	итWMSЗадачиТСД.ДокументОснование = &ДокументОснование
		|	И НЕ итWMSЗадачиТСД.ФиксацияЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	    НаборЗаписей_1=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей_1.Отбор.ДокументОснование.Установить(Ссылка);
		НаборЗаписей_1.Отбор.ИдЗадачи.Установить(ВыборкаДетальныеЗаписи.ИдЗадачи);
		НаборЗаписей_1.Прочитать();
		НаборЗаписей_1.Очистить();
		НаборЗаписей_1.Записать();	
		////////////////////Очистка Строк Задач
		НаборЗаписей_2=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
		НаборЗаписей_2.Отбор.ИдЗадачи.Установить(ВыборкаДетальныеЗаписи.ИдЗадачи);
		НаборЗаписей_2.Прочитать();
		НаборЗаписей_2.Очистить();
		НаборЗаписей_2.Записать();
	КонецЦикла;
	

КонецПроцедуры

Процедура ОчиститьДанныеМарок()
   НаборЗаписей=РегистрыСведений.итWMS_МаркиВОбработке.СоздатьНаборЗаписей();
   НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
   НаборЗаписей.Прочитать();
   НаборЗаписей.Очистить();
   НаборЗаписей.Записать();
	КонецПроцедуры

Процедура ПроверкаНаКоличествоПроверокУДокументовОснований(Отказ, РежимЗаписи, РежимПроведения)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыОснования.Документ
		|ПОМЕСТИТЬ ВтДокументыОснования
		|ИЗ
		|	&ДокументыОснования КАК ДокументыОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSПроверкаитОснования.Ссылка,
		|	ВтДокументыОснования.Документ
		|ИЗ
		|	ВтДокументыОснования КАК ВтДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПроверка.итОснования КАК итWMSПроверкаитОснования
		|		ПО ВтДокументыОснования.Документ = итWMSПроверкаитОснования.Документ
		|			И (итWMSПроверкаитОснования.Ссылка <> &Ссылка)
		|			И (итWMSПроверкаитОснования.Ссылка.Проведен)
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSПроверкаитОснования.Ссылка,
		|	ВтДокументыОснования.Документ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументыОснования",итОснования.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если не ИгнорироватьОтказПриПроверках Тогда 
			Отказ=Истина;
		КонецЕсли;	
			Сообщить("Для документа "+Строка(ВыборкаДетальныеЗаписи.Документ)+ " уже есть Проверка "+Строка(ВыборкаДетальныеЗаписи.Ссылка));	
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецПроцедуры
	
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ЗаполнениеНаОсновании(ДанныеЗаполнения)
КонецПроцедуры


Процедура ПроверкаНаФиксациюЗадачДокументаДоРаспределения()
	ВыборкаДетальныеЗаписи = ЗапросФиксацииЗадачДокумента();
	Пока   ВыборкаДетальныеЗаписи.Следующий() цикл 
		Если ВыборкаДетальныеЗаписи.КоличествоФиксированныхСтрок=ВыборкаДетальныеЗаписи.КоличествоСтрок Тогда 
			//ПроведениеБезИзмененияДатыЗавршения=Истина;
			ДействияПриФиксацииЗадачДокумента();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросФиксацииЗадачДокумента()
	
	Перем ВыборкаДетальныеЗаписи, Запрос, РезультатЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSПеремещениеТовары.ФиксацияСтроки КАК КоличествоФиксированныхСтрок,
	|	итWMSПеремещениеТовары.ФиксацияСтроки КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&Товары КАК итWMSПеремещениеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ВТ.КоличествоФиксированныхСтрок
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоФиксированныхСтрок,
	|	КОЛИЧЕСТВО(ВТ.КоличествоСтрок) КАК КоличествоСтрок
	|ИЗ
	|	ВТ КАК ВТ";
	
	Запрос.УстановитьПараметр("Товары", Товары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Возврат ВыборкаДетальныеЗаписи;

КонецФункции


Процедура ПечатьШкВПаллете(ТабличныйДокумент)Экспорт
	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	Запрос=новый Запрос;
	Запрос.Текст= ТекстЗапросаSSCC();
	Запрос.МенеджерВременныхТаблиц =МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Результат=Запрос.Выполнить();
	ВыборкаРезультата= Результат.Выбрать();
	Пока  ВыборкаРезультата.Следующий() Цикл 
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ.GTIN
		|ИЗ
		|	ВТ КАК ВТ
		|ГДЕ
		|	ВТ.SSCC = &SSCC";
		
		Запрос.УстановитьПараметр("SSCC", ВыборкаРезультата.SSCC);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("GTIN");
		
		Если РезультатЗапроса.Количество()>50 Тогда 
			МассивРазбивки=новый Массив;
			Счетчик=0;
			для Каждого стр Из  РезультатЗапроса цикл
				МассивРазбивки.Добавить(стр);
				Счетчик=Счетчик+1;
				Если Счетчик=50 Тогда 
					ПараметрыПечати = новый Структура;
					ПараметрыПечати.Вставить("Ширина",5);
					ПараметрыПечати.Вставить("Высота",10);
					ПараметрыПечати.Вставить("ТипКода",16);
					ПараметрыПечати.Вставить("КоличествоВСтроке",5);
					ПараметрыПечати.Вставить("РазмерШрифта",5);
					ОбъектОбработки=Обработки.итПечатьПроизвольногоШтрихкода.Создать();
					ТабДок=ОбъектОбработки.Печать(ПараметрыПечати,МассивРазбивки);
					ТабДок.АвтоМасштаб=Истина;
					
					Макет=ПолучитьМакет("ШквПаллете");
					Шапка=Макет.ПолучитьОбласть("Шапка");
					Шапка.Параметры.Паллета=ВыборкаРезультата.SSCC;
					ТабличныйДокумент.Вывести(Шапка);
					ТабличныйДокумент.Вывести(ТабДок);	
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					Счетчик=0;
					МассивРазбивки=новый Массив;
				КонецЕсли;
			КонецЦикла;
			Если Счетчик>0 Тогда 
				ПараметрыПечати = новый Структура;
				ПараметрыПечати.Вставить("Ширина",5);
				ПараметрыПечати.Вставить("Высота",10);
				ПараметрыПечати.Вставить("ТипКода",16);
				ПараметрыПечати.Вставить("КоличествоВСтроке",5);
				ПараметрыПечати.Вставить("РазмерШрифта",5);
				ОбъектОбработки=Обработки.итПечатьПроизвольногоШтрихкода.Создать();
				ТабДок=ОбъектОбработки.Печать(ПараметрыПечати,МассивРазбивки);
				ТабДок.АвтоМасштаб=Истина;
				
				Макет=ПолучитьМакет("ШквПаллете");
				Шапка=Макет.ПолучитьОбласть("Шапка");
				Шапка.Параметры.Паллета=ВыборкаРезультата.SSCC;
				ТабличныйДокумент.Вывести(Шапка);
				ТабличныйДокумент.Вывести(ТабДок);	
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				Счетчик=0;
				МассивРазбивки=новый Массив;		
			КонецЕсли;
			
		иначе
			ПараметрыПечати = новый Структура;
			ПараметрыПечати.Вставить("Ширина",5);
			ПараметрыПечати.Вставить("Высота",10);
			ПараметрыПечати.Вставить("ТипКода",16);
			ПараметрыПечати.Вставить("КоличествоВСтроке",5);
			ПараметрыПечати.Вставить("РазмерШрифта",5);
			ОбъектОбработки=Обработки.итПечатьПроизвольногоШтрихкода.Создать();
			ТабДок=ОбъектОбработки.Печать(ПараметрыПечати,РезультатЗапроса);
			ТабДок.АвтоМасштаб=Истина;
			
			Макет=ПолучитьМакет("ШквПаллете");
			Шапка=Макет.ПолучитьОбласть("Шапка");
			Шапка.Параметры.Паллета=ВыборкаРезультата.SSCC;
			ТабличныйДокумент.Вывести(Шапка);
			ТабличныйДокумент.Вывести(ТабДок);	
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		КонецЦикла;
КонецПроцедуры

Функция ТекстЗапросаSSCC()
		ТекстЗапроса= "ВЫБРАТЬ
		              |	итWMS_МаркиВОбработке.Марка
		              |ПОМЕСТИТЬ ВтМарки
		              |ИЗ
		              |	РегистрСведений.итWMS_МаркиВОбработке КАК итWMS_МаркиВОбработке
		              |ГДЕ
		              |	итWMS_МаркиВОбработке.ДокументОснование = &Ссылка
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	алкХранилищеАкцизныхМарокСрезПоследних.Марка,
		              |	алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
		              |ПОМЕСТИТЬ ВтМаркиУпаковки
		              |ИЗ
		              |	ВтМарки КАК ВтМарки
		              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
		              |		ПО ВтМарки.Марка = алкХранилищеАкцизныхМарокСрезПоследних.Марка
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки КАК SSCC,
		              |	ВтМаркиУпаковки.Упаковка КАК GTIN
		              |ПОМЕСТИТЬ ВтУпаковкиПаллеты
		              |ИЗ
		              |	ВтМаркиУпаковки КАК ВтМаркиУпаковки
		              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеУпаковок.СрезПоследних КАК алкХранилищеУпаковокСрезПоследних
		              |		ПО ВтМаркиУпаковки.Упаковка = алкХранилищеУпаковокСрезПоследних.Упаковка
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ВтУпаковкиПаллеты.SSCC,
		              |	ВтУпаковкиПаллеты.GTIN
		              |ПОМЕСТИТЬ ВТ
		              |ИЗ
		              |	ВтУпаковкиПаллеты КАК ВтУпаковкиПаллеты
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	ВтУпаковкиПаллеты.SSCC,
		              |	ВтУпаковкиПаллеты.GTIN
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ВТ.SSCC
		              |ИЗ
		              |	ВТ КАК ВТ
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	ВТ.SSCC";
Возврат ТекстЗапроса;
КонецФункции

#Область ОбязательныеПроцедурыИФункции

Процедура ДействияПриОтказеОтИсполненияДокумента()Экспорт 
	ОчиститьДанныеМарок();
	ЭтотОбъект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;	
КонецПроцедуры

Процедура ДействияПриФиксацииЗадачДокумента() Экспорт 
	Для Каждого стр из Товары Цикл 
		стр.ФиксацияСтроки=Истина;
	КонецЦикла;
	ЭтотОбъект.СтатусДокумента=СтатусДокумента();
	ДатаЗавершенияДокумента=ТекущаяДата();	
КонецПроцедуры

Функция СтатусДокумента()
	Если ОшибкаСверкиНаборкиИПроверки() Тогда
	     Возврат Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой;
	КонецЕсли;
	Если ЗаПроверкойЧислятсяМарки() Тогда 
		Возврат Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен;
	иначе
		Возврат Перечисления.итWMSСтатусыСкладскихДокументов.Завершен;
	КонецЕсли;
КонецФункции

Функция ОшибкаСверкиНаборкиИПроверки()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ.ИдентификаторУпаковки,
	|	ТЧ.Номенклатура,
	|	ТЧ.Характеристика,
	|	ТЧ.СерияНоменклатуры,
	|	ТЧ.Качество,
	|	ТЧ.ДатаРозлива,
	|	ТЧ.Ячейка,
	|	ТЧ.ФиксацияСтроки,
	|	ТЧ.СостояниеЗадачи,
	|	ТЧ.КоличествоФакт КАК КоличествоФакт
	|ПОМЕСТИТЬ ДанныеТоваровПроверки
	|ИЗ
	|	&Товары КАК ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковки,
	|	итWMSНаборкаТовары.Номенклатура,
	|	итWMSНаборкаТовары.Характеристика,
	|	итWMSНаборкаТовары.СерияНоменклатуры,
	|	итWMSНаборкаТовары.Качество,
	|	итWMSНаборкаТовары.ДатаРозлива,
	|	СУММА(ВЫБОР
	|			КОГДА итWMSНаборкаТовары.ИзъятиеТовара
	|				ТОГДА итWMSНаборкаТовары.КоличествоФакт - итWMSНаборкаТовары.КоличествоИзъятия
	|			ИНАЧЕ итWMSНаборкаТовары.КоличествоФакт
	|		КОНЕЦ) КАК Количество,
	|	итWMSНаборкаТовары.ЯчейкаПолучатель КАК Ячейка
	|ПОМЕСТИТЬ Вт
	|ИЗ
	|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
	|ГДЕ
	|	итWMSНаборкаТовары.ФиксацияСтроки
	|	И итWMSНаборкаТовары.Ссылка В(&Наборка)
	|	И итWMSНаборкаТовары.СостояниеЗадачи = ЗНАЧЕНИЕ(Перечисление.итWMSСостояниязадачТСД.Выполнена)
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель,
	|	итWMSНаборкаТовары.Номенклатура,
	|	итWMSНаборкаТовары.Характеристика,
	|	итWMSНаборкаТовары.СерияНоменклатуры,
	|	итWMSНаборкаТовары.Качество,
	|	итWMSНаборкаТовары.ДатаРозлива,
	|	итWMSНаборкаТовары.ЯчейкаПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт.ИдентификаторУпаковки,
	|	Вт.Номенклатура,
	|	Вт.Характеристика,
	|	Вт.СерияНоменклатуры,
	|	Вт.Качество,
	|	Вт.ДатаРозлива,
	|	Вт.Количество,
	|	Вт.Ячейка
	|ПОМЕСТИТЬ ВтДанныеНаборки
	|ИЗ
	|	Вт КАК Вт
	|ГДЕ
	|	Вт.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПОДСТРОКА(ДанныеТоваровПроверки.ИдентификаторУпаковки, 1, 176) КАК ИдентификаторУпаковки,
	|	ДанныеТоваровПроверки.Номенклатура КАК Номенклатура,
	|	ДанныеТоваровПроверки.Характеристика КАК Характеристика,
	|	ДанныеТоваровПроверки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеТоваровПроверки.Качество КАК Качество,
	|	ДанныеТоваровПроверки.ДатаРозлива КАК ДатаРозлива,
	|	ДанныеТоваровПроверки.Ячейка КАК Ячейка,
	|	СУММА(ДанныеТоваровПроверки.КоличествоФакт) КАК Количество
	|ПОМЕСТИТЬ ДанныеПроверки
	|ИЗ
	|	ДанныеТоваровПроверки КАК ДанныеТоваровПроверки
	|ГДЕ
	|	ДанныеТоваровПроверки.ФиксацияСтроки
	|	И ДанныеТоваровПроверки.СостояниеЗадачи = ЗНАЧЕНИЕ(Перечисление.итWMSСостояниязадачТСД.Выполнена)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеТоваровПроверки.Номенклатура,
	|	ДанныеТоваровПроверки.Характеристика,
	|	ДанныеТоваровПроверки.СерияНоменклатуры,
	|	ДанныеТоваровПроверки.Качество,
	|	ДанныеТоваровПроверки.ДатаРозлива,
	|	ДанныеТоваровПроверки.Ячейка,
	|	ПОДСТРОКА(ДанныеТоваровПроверки.ИдентификаторУпаковки, 1, 176)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеНаборки.ИдентификаторУпаковки,
	|	ВтДанныеНаборки.Номенклатура,
	|	ВтДанныеНаборки.Характеристика,
	|	ВтДанныеНаборки.СерияНоменклатуры,
	|	ВтДанныеНаборки.Качество,
	|	ВтДанныеНаборки.ДатаРозлива,
	|	ВтДанныеНаборки.Количество КАК КоличествоНаборки,
	|	ВтДанныеНаборки.Ячейка,
	|	ЕСТЬNULL(ДанныеПроверки.Количество, 0) КАК КоличествоПроверки
	|ИЗ
	|	ВтДанныеНаборки КАК ВтДанныеНаборки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПроверки КАК ДанныеПроверки
	|		ПО ВтДанныеНаборки.ИдентификаторУпаковки = ДанныеПроверки.ИдентификаторУпаковки
	|			И ВтДанныеНаборки.Номенклатура = ДанныеПроверки.Номенклатура
	|			И ВтДанныеНаборки.Характеристика = ДанныеПроверки.Характеристика
	|			И ВтДанныеНаборки.СерияНоменклатуры = ДанныеПроверки.СерияНоменклатуры
	|			И ВтДанныеНаборки.Качество = ДанныеПроверки.Качество
	|			И ВтДанныеНаборки.ДатаРозлива = ДанныеПроверки.ДатаРозлива
	|			И ВтДанныеНаборки.Ячейка = ДанныеПроверки.Ячейка
	|ГДЕ
	|	ВтДанныеНаборки.Количество <> ЕСТЬNULL(ДанныеПроверки.Количество, 0)";
	
	Запрос.УстановитьПараметр("Наборка", итОснования.ВыгрузитьКолонку("Документ"));
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	    Возврат Ложь;
	
	КонецФункции

Функция ЗаПроверкойЧислятсяМарки()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	итWMS_МаркиВОбработке.Марка
		|ИЗ
		|	РегистрСведений.итWMS_МаркиВОбработке КАК итWMS_МаркиВОбработке
		|ГДЕ
		|	итWMS_МаркиВОбработке.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	    Возврат Ложь;	
	КонецФункции


#КонецОбласти