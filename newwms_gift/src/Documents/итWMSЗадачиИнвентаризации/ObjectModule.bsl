Перем ОбработкаТСД Экспорт;
Перем СообщениеДляТСД Экспорт ; 
Перем ИгнорироватьОтказПриПроверках Экспорт ;

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	итWMSСлужебныеПроцедурыИФункции.УстановитьРежимПроведенияЗавершенногоДокумента(СтатусДокумента,РежимПроведения);
	Если Проведен и РежимЗаписи=РежимЗаписиДокумента.Запись тогда
		РежимЗаписи=РежимЗаписиДокумента.Проведение;
	КонецЕсли;	
	Если  РежимЗаписи=РежимЗаписиДокумента.Проведение тогда
		ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;	
	Если ЭтотОбъект.Проведен и РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения тогда
		ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;	
КонецПроцедуры
Процедура ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения)
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется или  СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован  тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		БлокировкаДанных = новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
		ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ДокументОснование",Ссылка);
		БлокировкаДанных.Заблокировать();
		
		ОчиститьСписокЗадач(Отказ,РежимЗаписи,РежимПроведения);
		
		для Каждого стр из ЗаданияПоЯчейкам цикл
			Если стр.Блокирована тогда
				ОбъектЯчейки=стр.Ячейка.ПолучитьОбъект();
				ОбъектЯчейки.Заблокирована=Ложь;
				ОбъектЯчейки.Записать();
				стр.Блокирована=Ложь;
			КонецЕсли;			
		КонецЦикла;
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен тогда
		Отказ = Истина;
		Сообщить("Документ распределен на тсд и не может быть распроведен ");
		
	КонецЕсли;
	
	
	
КонецПроцедуры
Процедура ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения)
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан и НеРаспределятьНаТСД тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован;
		для Каждого стр из ЗаданияПоЯчейкам цикл
			Если стр.Блокирована тогда
				ОбъектЯчейки=стр.Ячейка.ПолучитьОбъект();
				ОбъектЯчейки.Заблокирована=Ложь;
				ОбъектЯчейки.Записать();
				стр.Блокирована=Ложь;
			КонецЕсли;			
		КонецЦикла;
		
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан и не НеРаспределятьНаТСД  тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
		для Каждого стр из ЗаданияПоЯчейкам цикл
			стр.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
			Если БлокироватьЯчейкиНаВремяИсполнения Тогда 
				Если не стр.Ячейка.Заблокирована тогда
					ОбъектЯчейки=стр.Ячейка.ПолучитьОбъект();
					ОбъектЯчейки.Заблокирована=Истина;
					ОбъектЯчейки.Записать();
					стр.Блокирована=Истина;
				КонецЕсли;
			КонецЕсли;
			Если не БлокироватьЯчейкиНаВремяИсполнения Тогда 
				Если стр.Блокирована Тогда 
					ОбъектЯчейки=стр.Ячейка.ПолучитьОбъект();
					ОбъектЯчейки.Заблокирована=Ложь;
					ОбъектЯчейки.Записать();
					стр.Блокирована=Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован и не НеРаспределятьНаТСД  тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
		для Каждого стр из ЗаданияПоЯчейкам цикл
			стр.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
			Если БлокироватьЯчейкиНаВремяИсполнения Тогда 
				
				Если не стр.Ячейка.Заблокирована тогда
					ОбъектЯчейки=стр.Ячейка.ПолучитьОбъект();
					ОбъектЯчейки.Заблокирована=Истина;
					ОбъектЯчейки.Записать();
					стр.Блокирована=Истина;
				КонецЕсли;	
			КонецЕсли;	
			Если не БлокироватьЯчейкиНаВремяИсполнения Тогда 
				Если стр.Блокирована Тогда 
					ОбъектЯчейки=стр.Ячейка.ПолучитьОбъект();
					ОбъектЯчейки.Заблокирована=Ложь;
					ОбъектЯчейки.Записать();
					стр.Блокирована=Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда
	РаспределениеДокументаНаЗадачиТСД(Отказ,РежимПроведения);	
КонецЕсли;
Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда 
	для Каждого стр из ЗаданияПоЯчейкам цикл
			Если стр.Блокирована тогда
				ОбъектЯчейки=стр.Ячейка.ПолучитьОбъект();
				ОбъектЯчейки.Заблокирована=Ложь;
				ОбъектЯчейки.Записать();
				стр.Блокирована=Ложь;
			КонецЕсли;			
		КонецЦикла;
КонецЕсли;
КонецПроцедуры
Процедура ОчиститьСписокЗадач(Отказ,РежимЗаписи=Неопределено,РежимПроведения)
	
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",Ссылка);
	БлокировкаДанных.Заблокировать();
		НаборЗаписей= РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		ДанныеОбхода=НаборЗаписей;
	МассивЗафиксированныхЗадач=ПолучитьЗафиксированныйМассивЗадач();
	для Каждого стр из ДанныеОбхода цикл
		Если МассивЗафиксированныхЗадач.Найти(стр.ИдЗадачи)<> Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		///////////////////////Очистка Задач построчно
		НаборЗаписей_1=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей_1.Отбор.ДокументОснование.Установить(Ссылка);
		НаборЗаписей_1.Отбор.ИдЗадачи.Установить(стр.ИдЗадачи);
		НаборЗаписей_1.Прочитать();
		НаборЗаписей_1.Очистить();
		НаборЗаписей_1.Записать();
		
		////////////////////Очистка Строк Задач
		НаборЗаписей_2=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
		НаборЗаписей_2.Отбор.ИдЗадачи.Установить(стр.ИдЗадачи);
		НаборЗаписей_2.Прочитать();
		НаборЗаписей_2.Очистить();
		НаборЗаписей_2.Записать();
	КонецЦикла;

	КонецПроцедуры

Функция ПолучитьЗафиксированныйМассивЗадач()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиИнвентаризацииЗаданияПоЯчейкам.ИдЗадачи
	|ПОМЕСТИТЬ ВТИдЗадач
	|ИЗ
	|	Документ.итWMSЗадачиИнвентаризации.ЗаданияПоЯчейкам КАК итWMSЗадачиИнвентаризацииЗаданияПоЯчейкам
	|ГДЕ
	|	итWMSЗадачиИнвентаризацииЗаданияПоЯчейкам.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMSЗадачиТСД.ИдЗадачи
	|ИЗ
	|	ВТИдЗадач КАК ВТИдЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|		ПО ВТИдЗадач.ИдЗадачи = итWMSЗадачиТСД.ИдЗадачи
	|			И (итWMSЗадачиТСД.ДокументОснование = &Ссылка)
	|ГДЕ
	|	итWMSЗадачиТСД.ФиксацияЗадачи";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();;
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("ИдЗадачи");	
КонецФункции

Процедура РаспределениеДокументаНаЗадачиТСД(Отказ,РежимПроведения)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	ОчиститьСписокЗадач(Отказ,,РежимПроведения);
    Если Отказ Тогда 
		Возврат
	КонецЕсли;		
	НаборЗаписей= РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
	НаборЗаписей.Прочитать();
		

	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSЗадачиИнвентаризацииЗаданияПоЯчейкам.ИдЗадачи,
		|	итWMSЗадачиИнвентаризацииЗаданияПоЯчейкам.Ячейка,
		|	итWMSЗадачиИнвентаризацииЗаданияПоЯчейкам.СостояниеЗадачи
		|ИЗ
		|	Документ.итWMSЗадачиИнвентаризации.ЗаданияПоЯчейкам КАК итWMSЗадачиИнвентаризацииЗаданияПоЯчейкам
		|ГДЕ
		|	итWMSЗадачиИнвентаризацииЗаданияПоЯчейкам.Ссылка = &Ссылка
		|	И итWMSЗадачиИнвентаризацииЗаданияПоЯчейкам.СостояниеЗадачи <> ЗНАЧЕНИЕ(перечисление.итwmsСостоянияЗадачТсд.Выполнена)
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSЗадачиИнвентаризацииЗаданияПоЯчейкам.ИдЗадачи,
		|	итWMSЗадачиИнвентаризацииЗаданияПоЯчейкам.Ячейка,
		|	итWMSЗадачиИнвентаризацииЗаданияПоЯчейкам.СостояниеЗадачи";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	НоваяЗапись=НаборЗаписей.Добавить();
	НоваяЗапись.ИдЗадачи=ВыборкаДетальныеЗаписи.ИдЗадачи;
	НоваяЗапись.ЯчейкаОтправитель=ВыборкаДетальныеЗаписи.Ячейка;
	НоваяЗапись.ЯчейкаПолучатель=ВыборкаДетальныеЗаписи.Ячейка;
    НоваяЗапись.ДокументОснование=Ссылка;
	НоваяЗапись.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Инвентаризация;
	НоваяЗапись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
	КонецЦикла;
	НаборЗаписей.Записать();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
#Область ОбязательныеПроцедурыИФункции
Процедура ДействияПриОтказеОтИсполненияДокумента()Экспорт 
	ЭтотОбъект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;	
КонецПроцедуры

Процедура ДействияПриФиксацииЗадачДокумента() Экспорт 
	ЭтотОбъект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен;
	ДатаЗавершенияДокумента=ТекущаяДата();
КонецПроцедуры

#КонецОбласти