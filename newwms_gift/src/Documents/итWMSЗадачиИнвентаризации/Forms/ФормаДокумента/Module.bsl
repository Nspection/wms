

#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Ключ.Пустая() тогда
		Объект.итОснование=Неопределено;
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		Объект.Ответственный=ПараметрыСеанса.ТекущийПользователь;
		для Каждого стр из Объект.ЗаданияПоЯчейкам цикл
			стр.ИдЗадачи=новый УникальныйИдентификатор;
		КонецЦикла;
	КонецЕсли;
	ВидимостьДоступностьЭлементовСервер();
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ВидимостьДоступностьЭлементовСервер();
	ПроставитьЯрус();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияПоЯчейкамЯчейкаПриИзменении(Элемент)
	ТекущаяЯчейка=ТекущийЭлемент.ТекущиеДанные.Ячейка;
	МассивСтрок=Объект.ЗаданияПоЯчейкам.НайтиСтроки(новый Структура("Ячейка",ТекущаяЯчейка));
	Если МассивСтрок.Количество()>1 тогда
		Сообщить("В документе уже присутствует текущая ячейка");
		ЗаданияПоЯчейкамЯчейкаПриИзмененииСервер(ТекущийЭлемент.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	ПроставитьЯрус(ТекущийЭлемент.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры
&НаСервере
Процедура ЗаданияПоЯчейкамЯчейкаПриИзмененииСервер(Идентификатор)
	Строка=Объект.ЗаданияПоЯчейкам.НайтиПоИдентификатору(Идентификатор);
	Строка.Ячейка=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		Если ИсточникВыбора.ИмяФормы="Документ.итWMSЗадачиИнвентаризации.Форма.ФормаВыбораЕНБ"  тогда
			Если ТипЗнч(ВыбранноеЗначение)=Тип("Структура") Тогда
				ЗаполнитьЯчейкамиДокумент(ВыбранноеЗначение)
				
			КонецЕсли;
		КонецЕсли;
		Если ИсточникВыбора.ИмяФормы="Документ.итWMSЗадачиИнвентаризации.Форма.ФормаПодбораЯчеекПоНоменклатуре"  тогда
			Если ТипЗнч(ВыбранноеЗначение)=Тип("Массив") Тогда
				ЗаполнитьДокументЯчейкамиИзМассива(ВыбранноеЗначение)				
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.ЗаданияПоЯчейкам.Количество()>0 Тогда 
		ПроставитьЯрус();
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		Если Источник.ИмяФормы="Документ.итWMSДанныеИнвентаризации.Форма.ФормаДокумента"  тогда
			Если ИмяСобытия="ДокументЗаписанитWMSЗадачиИнвентаризации" Тогда 
				ВидимостьДоступностьЭлементовКлиент();
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура Добавить(Команда)
	Объект.ЗаданияПоЯчейкам.Добавить().ИдЗадачи=новый УникальныйИдентификатор;
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьЯчейки(Команда)
	ОткрытьФорму("Документ.итWMSЗадачиИнвентаризации.Форма.ФормаВыбораЕНБ",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	Если ТекущийЭлемент.Имя="ЗаданияПоЯчейкам" тогда
		НоваяСтрока=Объект.ЗаданияПоЯчейкам.Добавить() ;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущийЭлемент.ТекущиеДанные);
		НоваяСтрока.ИдЗадачи=новый УникальныйИдентификатор;
	КонецЕсли;		
КонецПроцедуры
&НаКлиенте
Процедура СортироватьПоЯрусу(Команда)
	Объект.ЗаданияПоЯчейкам.Сортировать("Ярус Возр,Ячейка Возр");	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборомПоОстаткам(Команда)
	ОткрытьФорму("Документ.итWMSЗадачиИнвентаризации.Форма.ФормаПодбораЯчеекПоНоменклатуре",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументДанныеИнвентаризации(Команда)
	ОткрытьФорму("Документ.итWMSДанныеИнвентаризации.Форма.ФормаДокумента",новый Структура("итОснование",Объект.Ссылка),ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ВидимостьДоступностьЭлементовКлиент()
	ВидимостьДоступностьЭлементовСервер();
КонецПроцедуры
&НаСервере
Процедура ВидимостьДоступностьЭлементовСервер()
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен или
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется Тогда 
		Элементы.НеРаспределятьНаТСД.ТолькоПросмотр=Истина;
		Элементы.БлокироватьЯчейкиНаВремяИсполнения.ТолькоПросмотр=Истина;
		Элементы.ЗаданияПоЯчейкам.ТолькоПросмотр=Истина;
		Элементы.ЗаданияПоЯчейкамГруппаЗаполнить.Видимость=Ложь;
		Элементы.ФормаСоздатьДокументДанныеИнвентаризации.Видимость=Ложь;
	КонецЕсли;
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан или
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован тогда
		Элементы.НеРаспределятьНаТСД.ТолькоПросмотр=Ложь;
		Элементы.БлокироватьЯчейкиНаВремяИсполнения.ТолькоПросмотр=Ложь;
		Элементы.ЗаданияПоЯчейкам.ТолькоПросмотр=Ложь;
		Элементы.ЗаданияПоЯчейкамГруппаЗаполнить.Видимость=Истина;
		Элементы.ФормаСоздатьДокументДанныеИнвентаризации.Видимость=Ложь;
	КонецЕсли;
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой
		или  Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен
		тогда
		Элементы.НеРаспределятьНаТСД.ТолькоПросмотр=Ложь;
		Элементы.БлокироватьЯчейкиНаВремяИсполнения.ТолькоПросмотр=Ложь;
		Элементы.ЗаданияПоЯчейкам.ТолькоПросмотр=Ложь;
		Элементы.ЗаданияПоЯчейкамГруппаЗаполнить.Видимость=Ложь;
		Элементы.ФормаСоздатьДокументДанныеИнвентаризации.Видимость= не ДокументДанныеИнвентаризацииУжеСоздан();
	КонецЕсли;
	
	
КонецПроцедуры
&НаСервере
Функция ДокументДанныеИнвентаризацииУжеСоздан()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSДанныеИнвентаризации.Ссылка
		|ИЗ
		|	Документ.итWMSДанныеИнвентаризации КАК итWMSДанныеИнвентаризации
		|ГДЕ
		|	итWMSДанныеИнвентаризации.ПометкаУдаления = ЛОЖЬ
		|	И итWMSДанныеИнвентаризации.итОснование = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		//Сообщить("У задачи уже имеется не помеченный на удаление документ <<ДанныеИнвентаризации>>");
		Возврат Истина;
	КонецЕсли;
	    Возврат Ложь;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере
Процедура ЗаполнитьЯчейкамиДокумент(СтруктураЗначенияВыбора)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСД.ЯчейкаОтправитель,
	|	итWMSЗадачиТСД.Состояние
	|ПОМЕСТИТЬ ОтмененныеЯчейкиЗаПериод
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтобратьТолькоНеВыполненныеЗаПериод
	|				ТОГДА итWMSЗадачиТСД.ДокументОснование.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И итWMSЗадачиТСД.ТипЗадачи = ЗНАЧЕНИЕ(Перечисление.итWmsТипыЗадачТСД.Инвентаризация)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И итWMSЗадачиТСД.ДокументОснование.Проведен = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSЗадачиТСД.ЯчейкаОтправитель,
	|	итWMSЗадачиТСД.Состояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтмененныеЯчейкиЗаПериод.ЯчейкаОтправитель,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОтмененныеЯчейкиЗаПериод.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Отменена)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Состояние
	|ПОМЕСТИТЬ ГруппировкаДанныхЯчеек
	|ИЗ
	|	ОтмененныеЯчейкиЗаПериод КАК ОтмененныеЯчейкиЗаПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтмененныеЯчейкиЗаПериод.ЯчейкаОтправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппировкаДанныхЯчеек.ЯчейкаОтправитель
	|ПОМЕСТИТЬ ТолькоОтмененные
	|ИЗ
	|	ГруппировкаДанныхЯчеек КАК ГруппировкаДанныхЯчеек
	|ГДЕ
	|	ГруппировкаДанныхЯчеек.Состояние = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итСкладскиеЯчейки.Ссылка
	|ИЗ
	|	Справочник.итСкладскиеЯчейки КАК итСкладскиеЯчейки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ЗаполнятьПоЯрусам
	|				ТОГДА итСкладскиеЯчейки.Ярус = &ЯрусЗаполнения
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И итСкладскиеЯчейки.Ссылка В ИЕРАРХИИ(&Ссылка)
	|	И ВЫБОР
	|			КОГДА &ИгнорироватьЗаблокированные
	|				ТОГДА НЕ итСкладскиеЯчейки.Заблокирована
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ итСкладскиеЯчейки.Ссылка В (&МассивЯчеек)
	|	И итСкладскиеЯчейки.ЭтоГруппа = ЛОЖЬ
	|	И итСкладскиеЯчейки.ПометкаУдаления = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА &ОтобратьТолькоНеВыполненныеЗаПериод
	|				ТОГДА итСкладскиеЯчейки.Ссылка В
	|						(ВЫБРАТЬ
	|							ТолькоОтмененные.ЯчейкаОтправитель
	|						ИЗ
	|							ТолькоОтмененные КАК ТолькоОтмененные)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	итСкладскиеЯчейки.Ярус";
	
	Запрос.УстановитьПараметр("ЗаполнятьПоЯрусам", СтруктураЗначенияВыбора.ЗаполнятьПоЯрусам);
	Запрос.УстановитьПараметр("ИгнорироватьЗаблокированные", СтруктураЗначенияВыбора.ИгнорироватьЗаблокированные);
	Запрос.УстановитьПараметр("Ссылка", СтруктураЗначенияВыбора.Ссылка);
	Запрос.УстановитьПараметр("ЯрусЗаполнения", СтруктураЗначенияВыбора.ЯрусЗаполнения);
	Запрос.УстановитьПараметр("МассивЯчеек",Объект.ЗаданияПоЯчейкам.Выгрузить().ВыгрузитьКолонку("Ячейка"));
	Запрос.УстановитьПараметр("ОтобратьТолькоНеВыполненныеЗаПериод",СтруктураЗначенияВыбора.ОтобратьТолькоНеВыполненныеЗаПериод);
	Запрос.УстановитьПараметр("ДатаНачала",СтруктураЗначенияВыбора.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",СтруктураЗначенияВыбора.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//Объект.ЗаданияПоЯчейкам.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=Объект.ЗаданияПоЯчейкам.Добавить();
		НоваяСтрока.ИдЗадачи=новый УникальныйИдентификатор;
		НоваяСтрока.Ячейка=ВыборкаДетальныеЗаписи.Ссылка;
		ПроставитьЯрус(НоваяСтрока)
	КонецЦикла;
	Объект.ЗаданияПоЯчейкам.Сортировать("Ярус Возр,Ячейка Возр");
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры
&НаСервере
Процедура ПроставитьЯрус(Строка=Неопределено)
	Если ТипЗнч(Строка)=Тип("Число") тогда
		СтрокаИзменения=Объект.ЗаданияПоЯчейкам.НайтиПоИдентификатору(Строка);
		СтрокаИзменения.Ярус=Число(СтрокаИзменения.Ячейка.Ярус);
		Возврат
	КонецЕсли;	
	
	//@skip-warning
	Если Строка=Неопределено Тогда 
		для Каждого стр из Объект.ЗаданияПоЯчейкам цикл
			стр.Ярус= Число(стр.Ячейка.Ярус);
		КонецЦикла;
	иначе
		Строка.Ярус=Число(Строка.Ячейка.Ярус);
	КонецЕсли;	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьДокументЯчейкамиИзМассива(МассивЯчеек)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итСкладскиеЯчейки.Ссылка КАК Ячейка
		|ПОМЕСТИТЬ ЯчейкиОтбора
		|ИЗ
		|	Справочник.итСкладскиеЯчейки КАК итСкладскиеЯчейки
		|ГДЕ
		|	итСкладскиеЯчейки.Ссылка В(&МассивЯчеек)
		|
		|СГРУППИРОВАТЬ ПО
		|	итСкладскиеЯчейки.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиОтбора.Ячейка
		|ИЗ
		|	ЯчейкиОтбора КАК ЯчейкиОтбора
		|ГДЕ
		|	НЕ ЯчейкиОтбора.Ячейка В (&МассивЯчеекДокумента)";
	
	Запрос.УстановитьПараметр("МассивЯчеек", МассивЯчеек);
	Запрос.УстановитьПараметр("МассивЯчеекДокумента", Объект.ЗаданияПоЯчейкам.Выгрузить().ВыгрузитьКолонку("Ячейка"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	    НоваяСтрока=Объект.ЗаданияПоЯчейкам.Добавить();
		НоваяСтрока.ИдЗадачи=новый УникальныйИдентификатор;
		НоваяСтрока.Ячейка=ВыборкаДетальныеЗаписи.Ячейка;
		ПроставитьЯрус(НоваяСтрока)
	КонецЦикла;
	Объект.ЗаданияПоЯчейкам.Сортировать("Ярус Возр,Ячейка Возр");
	
	
	
КонецПроцедуры




#КонецОбласти
