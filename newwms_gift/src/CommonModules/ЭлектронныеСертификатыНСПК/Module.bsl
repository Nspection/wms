///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает версию ВК взаимодействия с НСПК
//
// Возвращаемое значение:
//  Строка - Версия ВК.
//
Функция ВерсияВК() Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК();
	Версия = ВнешняяКомпонента.Версия();
	
	Возврат Версия;
	
КонецФункции

// Тестовое подключение к НСПК
//
// Параметры: 
//   ПараметрыОперации - см.ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Функция ТестовоеПодключение(ПараметрыОперации) Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации);
	
	ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
	ИдентификаторКассы = ПараметрыОперации.ИдентификаторКассы;
	ТестовоеСообщение = НСтр("ru = 'Тест 1С'");
	
	ТекстРезультата = ВнешняяКомпонента.эхо(ИдентификаторЗапроса, ИдентификаторКассы, ТестовоеСообщение);
	
	СписокОшибок = ВнешняяКомпонента.СписокОшибок;
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ПрочитатьJSONРезультатОперации(ТекстРезультата, СписокОшибок);   
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Предварительное одобрение использования сертификатов
//
// Параметры: 
//   ПараметрыОперации - см.ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Функция ПредварительноеОдобрениеИспользования(ПараметрыОперации) Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации);
	
	ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
	ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;
	ХешНомерКарты        = ПараметрыОперации.ХешНомерКарты;
	ТоварныеПозицииJSON = ЭлектронныеСертификатыНСПКВызовСервера.ПолучитьJSONТоварныеПозиции(ПараметрыОперации.ТоварныеПозиции);

	ТекстРезультата = ВнешняяКомпонента.ЗапросНаПредварительноеОдобрениеИспользования(ИдентификаторЗапроса, ИдентификаторКассы, ХешНомерКарты, "", ТоварныеПозицииJSON);
	
	СписокОшибок = ВнешняяКомпонента.СписокОшибок;
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ПрочитатьJSONРезультатОперации(ТекстРезультата, СписокОшибок);   

	Возврат РезультатВыполнения;
	
КонецФункции

// Предварительное одобрение возврата сертификатов
//
// Параметры: 
//   ПараметрыОперации - см.ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Функция ПредварительноеОдобрениеВозврата(ПараметрыОперации) Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации);
	
	ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
	ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;
	ХешНомерКарты        = ПараметрыОперации.ХешНомерКарты;
	ИдентификаторКорзины = ПараметрыОперации.ИдентификаторКорзины;
	ТоварныеПозицииJSON = ЭлектронныеСертификатыНСПКВызовСервера.ПолучитьJSONТоварныеПозиции(ПараметрыОперации.ТоварныеПозиции);
	
	ТекстРезультата = ВнешняяКомпонента.ЗапросНаПредварительноеОдобрениеВозврата(ИдентификаторЗапроса, ИдентификаторКассы, ИдентификаторКорзины, ХешНомерКарты, "", ТоварныеПозицииJSON);
	
	СписокОшибок = ВнешняяКомпонента.СписокОшибок;
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ПрочитатьJSONРезультатОперации(ТекстРезультата, СписокОшибок);   
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Получение состава корзины
//
// Параметры: 
//   ПараметрыОперации - см.ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Функция ПолучениеСоставаКорзины(ПараметрыОперации) Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации);
	
	ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
	ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;
	ИдентификаторКорзины = ПараметрыОперации.ИдентификаторКорзины;
	
	ТекстРезультата = ВнешняяКомпонента.ЗапросНаПолучениеСоставаКорзиныОригинальнойПокупки(ИдентификаторЗапроса, ИдентификаторКассы, ИдентификаторКорзины);
	
	СписокОшибок = ВнешняяКомпонента.СписокОшибок;
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ПрочитатьJSONРезультатОперации(ТекстРезультата, СписокОшибок);   

	Возврат РезультатВыполнения;
	
КонецФункции

// Передача данных фискального чека
//
// Параметры: 
//   ПараметрыОперации - см.ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Функция ПередачаДанныхФискальногоЧека(ПараметрыОперации) Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации);
	
	ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
	ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;
	ИдентификаторКорзины = ПараметрыОперации.ИдентификаторКорзины;

	НомерФискальногоНакопителя = Строка(ПараметрыОперации.НомерФискальногоНакопителя);
	ФискальныйТипРасчета = Число(ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодРасчетаДенежнымиСредствами(ПараметрыОперации.ФискальныйТипРасчета));
	ФискальныйПризнакЧека = Строка(ПараметрыОперации.ФискальныйПризнакЧека);
	ФискальныйЧекНомер = Строка(ПараметрыОперации.ФискальныйЧекНомер);
	ФискальныйЧекСумма = Формат(ПараметрыОперации.ФискальныйЧекСумма, "ЧГ=0;ЧДЦ=2;ЧРД=.");
	ФискальныйМестоРасчетов = Строка(ПараметрыОперации.ФискальныйМестоРасчетов); 
	// АПК: 1367-выкл особенность локального законодательства
	ФискальныйЧекДатаВремя = Формат(ПараметрыОперации.ФискальныйЧекДатаВремя, "ДФ=""ггггММддЧЧмм""");
	// АПК: 1367
	
	ТекстРезультата = ВнешняяКомпонента.ПередачаДанныхФискальногоЧека(
		ИдентификаторЗапроса, // Строка
		ИдентификаторКассы, // Строка
		ИдентификаторКорзины, // Строка 
		НомерФискальногоНакопителя, // Строка
		ФискальныйЧекНомер, // Строка
		ФискальныйПризнакЧека, // Строка
		ФискальныйЧекСумма,  // Строка
		ФискальныйЧекДатаВремя, // Строка
		ФискальныйТипРасчета, // Число
		ФискальныйМестоРасчетов); // Строка
		
	СписокОшибок = ВнешняяКомпонента.СписокОшибок;
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ПрочитатьJSONРезультатОперации(ТекстРезультата, СписокОшибок);   
	
	Возврат РезультатВыполнения;
	
КонецФункции

#Область Устаревшие

// Пустая структура для выполнения операции взаимодействия с сервером НСПК
// 
// Возвращаемое значение:
//   Структура:
//   * АдресСервера - Строка - Endpoint
//   * КлючДоступа - Строка - APIKey
//   * КлючКассы - Строка - MACKey
//
Функция ПараметрыОперацииНСПК() Экспорт
	
	Возврат ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК();
	 
КонецФункции

// Пустая структура для параметров товарной позиции
// 
// Возвращаемое значение:
//   Структура:
//   * НомерПозиции - Строка - Порядковый номер позиции в корзине начиная с 1
//   * Артикул - Строка - Артикул товара
//   * КодТовараТРУ - Строка - Полный код товара, согласованный с перечнем ТРУ
//   * Количество - Число - Количество единиц товара
//   * Цена - Число - Цена за единицу товара в рублях
//   * Сертификаты - Массив из см.ЭлектронныеСертификатыНСПК.ПараметрыСертификата
//
Функция ПараметрыТоварнойПозиции() Экспорт
	
	Возврат ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыТоварнойПозиции();
	
КонецФункции

// Пустая структура параметров сертификата
// 
// Возвращаемое значение:
//   Структура:
//   * Идентификатор - Строка - Идентификатор сертификата
//   * Количество - Число - Количество
//   * Цена - Число - Цена 
//   * МаксимальнаяЦена - Число - Максимальная цена
//
Функция ПараметрыСертификата() Экспорт
	
	Возврат ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыСертификата();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет подготовка внешней компоненты.
//
// Возвращаемое значение: 
//   ОбъектВнешнейКомпоненты
//   Неопределено - если компоненту не удалось загрузить.
//
Функция ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации = Неопределено) Экспорт 
	
	ВнешняяКомпонента = ПодключитьКомпонентуИнтеграцииНСПК();
	Если ВнешняяКомпонента = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка подключения внешней компоненты НСПК.'");
	#Если НЕ МобильноеПриложениеСервер Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка компоненты НСПК'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстСообщения);
	#КонецЕсли
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ПараметрыОперации <> Неопределено Тогда
		
		Если ПараметрыОперации.Свойство("АдресСервера") Тогда
			ВнешняяКомпонента.АдресСервера = ПараметрыОперации.АдресСервера;
		КонецЕсли;
	
		Если ПараметрыОперации.Свойство("КлючДоступа") Тогда
			ВнешняяКомпонента.КлючДоступа = ПараметрыОперации.КлючДоступа;
		КонецЕсли;
	
		Если ПараметрыОперации.Свойство("КлючКассы") Тогда
			ВнешняяКомпонента.КлючКассы = ПараметрыОперации.КлючКассы;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВнешняяКомпонента;
	
КонецФункции  

// Выполняет подключение внешней компоненты.
//
// Возвращаемое значение: 
//   ОбъектВнешнейКомпоненты
//   Неопределено - если компоненту не удалось загрузить.
//
Функция ПодключитьКомпонентуИнтеграцииНСПК() Экспорт
	
#Если НЕ МобильноеПриложениеСервер Тогда  
	УстановитьОтключениеБезопасногоРежима(Истина);
#КонецЕсли
	ВнешняяКомпонента = Неопределено;
	
#Если НЕ МобильноеПриложениеСервер Тогда
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВнешниеКомпоненты") Тогда
			МодульВнешниеКомпонентыСервер = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСервер");
			РезультатПодключения = МодульВнешниеКомпонентыСервер.ПодключитьКомпоненту("FECNSPK");
			Если РезультатПодключения.Подключено Тогда
				ВнешняяКомпонента = РезультатПодключения.ПодключаемыйМодуль;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
#КонецЕсли
	
	Если ВнешняяКомпонента = Неопределено Тогда 
		ВнешняяКомпонента = ОбщегоНазначения.ПодключитьКомпонентуИзМакета("FECNSPK", "ОбщийМакет.КомпонентаИнтеграцииНСПК");
	КонецЕсли;
	
	Если ВнешняяКомпонента = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ВнешняяКомпонента;
	
КонецФункции

#КонецОбласти
