Процедура ЦентральныйОбработчикДанныхИнвентаризации(ДанныеОбработчика)Экспорт
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипОбработкиДанных") тогда
		Возврат
	КонецЕсли;
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючПолученияДанных") тогда
		Возврат
	КонецЕсли;	
	
	Если  ДанныеОбработчика.ТипОбработкиДанных="ПолучениеДанныхЯчейки" тогда
		ПолучитьДанныеЯчейки(ДанныеОбработчика);	
	КонецЕсли;
	Если  ДанныеОбработчика.ТипОбработкиДанных="ПолучитьДанныеПоНоменклатуре" тогда
		ПолучитьДанныеПоНоменклатуре(ДанныеОбработчика);	
	КонецЕсли;
	Если ДанныеОбработчика.ТипОбработкиДанных="ФиксацияДанныхИнвентаризации" Тогда
		ЗаписатьДанныеИнвентаризацииЯчейки(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.ТипОбработкиДанных="ЗавершениеДокументаЗадачиИнвенторизации" Тогда 
		ПринудительноеЗавершениеДокументаЗадачиИнвентаризации(ДанныеОбработчика);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьДанныеИнвентаризацииЯчейки(ДанныеОбработчика)
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТаблицаСоставаЯчейки") Тогда 
		Возврат
	КонецЕсли;	
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТСДИД") Тогда 
		Возврат
	КонецЕсли;
	ТСД=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
	Ячейка=итWMSСлужебныеПроцедурыИФункции.НайтиЯчейкуПоУникальномуИд(ДанныеОбработчика.КлючПолученияДанных);
	
	
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		НаборЗаписей=РегистрыСведений.итWMSДанныеИнвентаризации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ячейка.Установить(Ячейка);
		ДатаИнвентаризации=ТекущаяДата();
		НаборЗаписей.Отбор.ДатаИнвентаризации.Установить(ДатаИнвентаризации);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Для Каждого стр из ДанныеОбработчика.ТаблицаСоставаЯчейки  цикл
			Если стр.КоличествоФакт=0 Тогда 
				Продолжить;
			КонецЕсли;	 
			НоваяЗапись=НаборЗаписей.Добавить();
			НоваяЗапись.ДатаИнвентаризации=ДатаИнвентаризации;
			НоваяЗапись.Ячейка=Ячейка;
			НоваяЗапись.ИдСтроки=новый УникальныйИдентификатор;
			НоваяЗапись.Номенклатура=итWMSСлужебныеПроцедурыИФункции.НайтиНоменклатуруПоУникальномуИД(стр.Номенклатура);
			НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
			НоваяЗапись.ДатаРозлива=стр.ДатаРозлива;
			НоваяЗапись.Количество=стр.КоличествоФакт;
			НоваяЗапись.ТСД=ТСД;
			Если ДанныеОбработчика.Свойство("КлючИнициализацииДанных") тогда
				НоваяЗапись.ИдЗадачи=ДанныеОбработчика.КлючИнициализацииДанных;
			КонецЕсли;
		КонецЦикла;
		Если НаборЗаписей.Количество()=0 тогда
			НоваяЗапись=НаборЗаписей.Добавить();
			НоваяЗапись.ИдСтроки=новый УникальныйИдентификатор;
			НоваяЗапись.ДатаИнвентаризации=ДатаИнвентаризации;
			НоваяЗапись.Ячейка=Ячейка;
			НоваяЗапись.ПустаяЯчейка=Истина;
			НоваяЗапись.ТСД=ТСД;
			Если ДанныеОбработчика.Свойство("КлючИнициализацииДанных") тогда
				НоваяЗапись.ИдЗадачи=ДанныеОбработчика.КлючИнициализацииДанных;
			КонецЕсли;
		КонецЕсли;	 
		
		НаборЗаписей.Записать();
		Если ДанныеОбработчика.Свойство("КлючИнициализацииДанных") тогда
			итWMSОбработчикиРегистрации_И_Загрузки.ИнициализацияДанныхНаСервере(ДанныеОбработчика);
			ИдУпаковкиИДокумент=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
			ОбъектДокумента= ИдУпаковкиИДокумент.ДокументОснование.ПолучитьОбъект();
			МассивСтрокКИзменению= ОбъектДокумента.ЗаданияПоЯчейкам.НайтиСтроки(новый Структура("ИдЗадачи",ДанныеОбработчика.КлючИнициализацииДанных));
			для Каждого стр из МассивСтрокКИзменению цикл
				стр.СостояниеЗадачи=ДанныеОбработчика.СостояниеИнициализации;
			КонецЦикла;
			ОбъектДокумента.Записать();	 
			
		иначе
			ДанныеОбработчика.Вставить("Инициализация",Истина);
		КонецЕсли;
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	ЗафиксироватьТранзакцию();
КонецПроцедуры


Процедура ПринудительноеЗавершениеДокументаЗадачиИнвентаризации(ДанныеОбработчика)
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючИнициализацииДанных") тогда
		Возврат
	КонецЕсли;	
	Если ДанныеОбработчика.КлючИнициализацииДанных=Неопределено Тогда 
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Нет данных");
		Возврат
	КонецЕсли;	 
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипЗадачи") тогда
		Возврат
	КонецЕсли;	
	ТаблицаНеВыполненныхЗадачДокумента=ПолучитьНеВыполненныеЗадачиДокумента(ДанныеОбработчика);
	Если ТаблицаНеВыполненныхЗадачДокумента.Количество()>0 тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			ОбъектДокумента=ТаблицаНеВыполненныхЗадачДокумента[0].ДокументОснование.ПолучитьОбъект();
			БлокировкаДанных = новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
			ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных=ТаблицаНеВыполненныхЗадачДокумента;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОснование","ДокументОснование");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдЗадачи","ИдЗадачи");
			БлокировкаДанных.Заблокировать();
			Для Каждого стр из ТаблицаНеВыполненныхЗадачДокумента цикл
				СтрокиЗаданияПоЯчейкам=ОбъектДокумента.ЗаданияПоЯчейкам.НайтиСтроки(новый Структура("ИдЗадачи",стр.ИдЗадачи));
				Для Каждого Строка из СтрокиЗаданияПоЯчейкам цикл
					Строка.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
				КонецЦикла;
				НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдЗадачи.Установить(стр.ИдЗадачи);
				НаборЗаписей.Прочитать();
				для Каждого стр из НаборЗаписей цикл
					стр.ДатаОкончания=ТекущаяДата();
					стр.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
					стр.ФиксацияЗадачи=Истина;
				КонецЦикла;
				НаборЗаписей.Записать();	
			КонецЦикла;		
			ОбъектДокумента.Записать();
			МассивДокументов=новый Массив;
			МассивДокументов.Добавить(ОбъектДокумента.Ссылка);
			итWMSСлужебныеПроцедурыИФункции.ПроверитьДокументыНаИзменениеСтатуса(МассивДокументов);
			ДанныеОбработчика.Вставить("Инициализация",Истина);
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		ЗафиксироватьТранзакцию();
		итWMSОбработчикиРегистрации_И_Загрузки.ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика);
		
	КонецЕсли;
	
	
КонецПроцедуры


Функция ПолучитьНеВыполненныеЗадачиДокумента(ДанныеОбработчика)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокаОснования.ДокументОснование,
	|	итWMSЗадачиТСД.ИдЗадачи
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК СтрокаОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|		ПО СтрокаОснования.ДокументОснование = итWMSЗадачиТСД.ДокументОснование
	|ГДЕ
	|	СтрокаОснования.ИдЗадачи = &ИдЗадачи
	|	И итWMSЗадачиТСД.ТипЗадачи = &ТипЗадачи
	|	И итWMSЗадачиТСД.Состояние <> ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполнена)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокаОснования.ДокументОснование,
	|	итWMSЗадачиТСД.ИдЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ДокументОснование,
	|	ВТ.ИдЗадачи
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ДокументОснование,
	|	ВТ.ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ДанныеОбработчика.КлючИнициализацииДанных);
	Запрос.УстановитьПараметр("ТипЗадачи", ДанныеОбработчика.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат новый ТаблицаЗначений;
	КонецЕсли;
	Возврат РезультатЗапроса.Выгрузить();
КонецФункции

Процедура ПолучитьДанныеЯчейки(ДанныеОбработчика)
	Если ТипЗнч(ДанныеОбработчика.КлючПолученияДанных)<> тип("Массив") тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Не верный формат данных свойство -<<КлючПолученияДанных>>");
		Возврат
	КонецЕсли;
	Отказ=Ложь;
	МенеджерВТ=новый МенеджерВременныхТаблиц;
	ПоискЯчейкиИБлокировкаДвиженийПоНей(ДанныеОбработчика,МенеджерВТ,Отказ);
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеЯчейки.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ ЯчейкаКОтбору
	|ИЗ
	|	ДанныеЯчейки КАК ДанныеЯчейки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(итТоварыВЯчейкахОстатки.ИдентификаторУпаковки, """") КАК ИдентификаторУпаковки,
	|	ЕСТЬNULL(итТоварыВЯчейкахОстатки.Номенклатура, ЗНАЧЕНИЕ(Справочник.номенклатура.пустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(итТоварыВЯчейкахОстатки.ДатаРозлива, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаРозлива,
	|	СУММА(ЕСТЬNULL(итТоварыВЯчейкахОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	|	ЯчейкаКОтбору.Ячейка КАК Ячейка
	|ИЗ
	|	ЯчейкаКОтбору КАК ЯчейкаКОтбору
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(, ) КАК итТоварыВЯчейкахОстатки
	|		ПО ЯчейкаКОтбору.Ячейка = итТоварыВЯчейкахОстатки.Ячейка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЯчейкаКОтбору.Ячейка,
	|	ЕСТЬNULL(итТоварыВЯчейкахОстатки.ИдентификаторУпаковки, """"),
	|	ЕСТЬNULL(итТоварыВЯчейкахОстатки.Номенклатура, ЗНАЧЕНИЕ(Справочник.номенклатура.пустаяСсылка)),
	|	ЕСТЬNULL(итТоварыВЯчейкахОстатки.ДатаРозлива, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных ячейки");
		Возврат
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		ДанныеОбработчика.Вставить("Ячейка",ВыборкаДетальныеЗаписи.Ячейка.УникальныйИдентификатор());
		ДанныеОбработчика.Вставить("ЯчейкаПредставление",ВыборкаДетальныеЗаписи.Ячейка.Наименование);
	КонецЕсли;
	ВыборкаДетальныеЗаписи.Сбросить();
	МассивДанных=новый Массив;
	пока ВыборкаДетальныеЗаписи.Следующий() цикл
		Если ВыборкаДетальныеЗаписи.Номенклатура=null Тогда 
			Продолжить;
		КонецЕсли;	
		СтруктураДанныхМассива=новый Структура;
		СтруктураДанныхМассива.Вставить("ИдентификаторУпаковки",ВыборкаДетальныеЗаписи.ИдентификаторУпаковки);
		СтруктураДанныхМассива.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
		СтруктураДанныхМассива.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.Номенклатура.Наименование);
		СтруктураДанныхМассива.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
		СтруктураДанныхМассива.Вставить("Количество",ВыборкаДетальныеЗаписи.КоличествоОстаток);
		МассивДанных.Добавить(СтруктураДанныхМассива); 
	КонецЦикла;
	ДанныеОбработчика.Вставить("МассивДанных",МассивДанных);
	

	
	
	
КонецПроцедуры

Процедура ПоискЯчейкиИБлокировкаДвиженийПоНей(ДанныеОбработчика,МенеджерВТ,Отказ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтWMSШтрихКоды.Объект КАК Ячейка,
	|	СУММА(ЕСТЬNULL(итТоварыВЯчейкахОстатки.КРазмещениюОстаток, 0)) КАК КРазмещениюОстаток,
	|	СУММА(ЕСТЬNULL(итТоварыВЯчейкахОстатки.КОтборуОстаток, 0)) КАК КОтборуОстаток
	|ПОМЕСТИТЬ ДанныеЯчейки
	|ИЗ
	|	РегистрСведений.ИтWMSШтрихКоды КАК ИтWMSШтрихКоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	|		ПО ИтWMSШтрихКоды.Объект = итТоварыВЯчейкахОстатки.Ячейка
	|ГДЕ
	|	ИтWMSШтрихКоды.ШтрихКод В(&МассивШтрихКодаЯчейки)
	|	И ТИПЗНАЧЕНИЯ(ИтWMSШтрихКоды.Объект) = ТИП(Справочник.ИтСкладскиеЯчейки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтWMSШтрихКоды.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеЯчейки.Ячейка КАК Ячейка,
	|	ДанныеЯчейки.КОтборуОстаток КАК КОтборуОстаток,
	|	ДанныеЯчейки.КРазмещениюОстаток КАК КРазмещениюОстаток
	|ИЗ
	|	ДанныеЯчейки КАК ДанныеЯчейки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЯчейки.Ячейка,
	|	ДанныеЯчейки.КОтборуОстаток,
	|	ДанныеЯчейки.КРазмещениюОстаток";
	
	Запрос.УстановитьПараметр("МассивШтрихКодаЯчейки", ДанныеОбработчика.КлючПолученияДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных ячейки");
		Отказ=Истина;
		Возврат
	КонецЕсли;
	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Если ВыборкаДетальныеЗаписи.КРазмещениюОстаток>0 тогда
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки","Ячейка находится в обработке");
			Отказ=Истина;
			Возврат
		КонецЕсли;
		Если ВыборкаДетальныеЗаписи.КОтборуОстаток<>0 тогда
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки","Ячейка находится в обработке");
			Отказ=Истина;
			Возврат
		КонецЕсли;
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		БлокировкаДанных = новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.итТоварыВЯчейках");
		ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ячейка",ВыборкаДетальныеЗаписи.Ячейка);
		
		БлокировкаДанных.Заблокировать();
		
		
		Если не ВыборкаДетальныеЗаписи.Ячейка.Заблокирована тогда
			ВремяРазблокировкиЯчеекПриИнвентаризации=Константы.ВремяРазблокировкиЯчеекПриИнвентаризации.Получить();
			Если ВремяРазблокировкиЯчеекПриИнвентаризации>0 тогда
				ОбъектЯчейки=ВыборкаДетальныеЗаписи.Ячейка.ПолучитьОбъект();
				ОбъектЯчейки.ДатаСнятияБлокировкиИнвентаризации=ТекущаяДата()+(ВремяРазблокировкиЯчеекПриИнвентаризации*60);
				ОбъектЯчейки.Заблокирована=Истина;
				ОбъектЯчейки.Записать();
			КонецЕсли;
			
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
		
КонецПроцедуры

Процедура ПолучитьДанныеПоНоменклатуре(ДанныеОбработчика)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	итWMSСлужебныеПроцедурыИФункции.ПолучитьДанныеПоНоменклатуре(ДанныеОбработчика,Истина);
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Штрихкоды.Владелец,
	//|	Штрихкоды.ЕдиницаИзмерения
	//|ИЗ
	//|	РегистрСведений.Штрихкоды КАК Штрихкоды
	//|ГДЕ
	//|	Штрихкоды.Штрихкод = &Штрихкод
	//|	И ТИПЗНАЧЕНИЯ(Штрихкоды.Владелец) = ТИП(СПРАВОЧНИК.Номенклатура)";
	//
	//Запрос.УстановитьПараметр("Штрихкод", ДанныеОбработчика.КлючПолученияДанных);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() тогда
	//	ДанныеОбработчика.Вставить("Статус",404);
	//	ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных штрихкода");
	//	Возврат
	//КонецЕсли;
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	ДанныеОбработчика.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Владелец.УникальныйИдентификатор());
	//	ДанныеОбработчика.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.Владелец.Наименование);
	//	ДанныеОбработчика.Вставить("Количество",ВыборкаДетальныеЗаписи.ЕдиницаИзмерения.Коэффициент);
	//КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры