Процедура ЦентральныйОбработчикДанныхПриемки(ДанныеОбработчика)Экспорт
	//Проверка на общие данные
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипОбработкиДанных") тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипЗадачи")   тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТСДИД")   тогда
		Возврат
	КонецЕсли;
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючИнициализацииДанных") тогда
		Возврат
	КонецЕсли; 
	////////
	////////////////////////////////////////////////
	Если  ДанныеОбработчика.ТипОбработкиДанных="ВнесениеИзмененийВДокумент" тогда
		Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"Данные") тогда
			Возврат
		КонецЕсли;  
		Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ЯчейкаПолучатель") тогда
			Возврат
		КонецЕсли;
		Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"СостояниеИнициализации") тогда
			Возврат
		КонецЕсли;
		////////////Транзакция фиксируется псоле инициализации задачи
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		///////
		//ВнестиИзмененияВДокумент(ДанныеОбработчика);
		//ПроставитьЯчейкуИКомментарийВЗаписяхРегистра(ДанныеОбработчика);
		//Если ДанныеОбработчика.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть тогда
		//	ПерезаполнитьДанныеВРегистреСтрокиЗадач(ДанныеОбработчика);
		//КонецЕсли;
		//итWMSОбработчикиРегистрации_И_Загрузки.ИнициализацияДанныхНаСервере(ДанныеОбработчика);
		//Если ДанныеОбработчика.Свойство("Статус") тогда
		//	Если ДанныеОбработчика.Статус=404 тогда
		//		Возврат
		//	КонецЕсли;
		//КонецЕсли;	
		ЗаписьДанныхТСД(ДанныеОбработчика);
		итWMSОбработчикиРегистрации_И_Загрузки.ИнициализацияДанныхНаСервере(ДанныеОбработчика);
		Если ДанныеОбработчика.Свойство("Статус") тогда
			Если ДанныеОбработчика.Статус=404 тогда
				Возврат
			КонецЕсли;
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	Если  ДанныеОбработчика.ТипОбработкиДанных="НовыйSSCCПриемкаКакЕсть"тогда
		ПрисвоениеНовогоSSCCПриемке(ДанныеОбработчика);	
	КонецЕсли;
	Если ДанныеОбработчика.ТипОбработкиДанных="ВнешнийSSCCПриемкаКакЕсть" тогда
		ВнесениеВнешнегоSSCC(ДанныеОбработчика);	
	КонецЕсли;
	Если ДанныеОбработчика.ТипОбработкиДанных="ЗаписатьДанныеРасхожденияПМУ" Тогда 
		ЗаписатьДанныеРасхожденияПМУ(ДанныеОбработчика);
	КонецЕсли;
	
	/////////////////////////////////////////////////
КонецПроцедуры

Процедура ВнестиИзмененияВДокумент(ДанныеОбработчика)
	
	ИдУпаковкиИДокумент=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
	Если ИдУпаковкиИДокумент=Неопределено тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не найденно данных по ид задачи");
		Возврат
	КонецЕсли;
	
	
	ЯчейкаПолучатель=итWMSСлужебныеПроцедурыИФункции.НайтиЯчейкуПоУникальномуИд(ДанныеОбработчика.ЯчейкаПолучатель);
	СостояниеЗадачи=ДанныеОбработчика.СостояниеИнициализации;
	ИдентификаторУпаковки=ИдУпаковкиИДокумент.ИдентификаторУпаковки;
	
	ОбъектДокумента=ИдУпаковкиИДокумент.ДокументОснование.ПолучитьОбъект();
	Если ДанныеОбработчика.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть тогда
		МассиСтрокКУдалению=ОбъектДокумента.Товары.НайтиСтроки(новый Структура("ИдентификаторУпаковки",ИдентификаторУпаковки));
		для Каждого СтрокаКУдалению из МассиСтрокКУдалению цикл
			ОбъектДокумента.Товары.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
	
	для Каждого стр из ДанныеОбработчика.Данные цикл
		МассивСтрок=ОбъектДокумента.Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",стр.ИдСтроки));
		Если МассивСтрок.Количество()=0 тогда
			НоваяСтрокаУпаковки=ОбъектДокумента.Товары.Добавить();
			НоваяСтрокаУпаковки.ИдентификаторСтроки=стр.ИдСтроки;
			НоваяСтрокаУпаковки.ИдентификаторУпаковки=ИдентификаторУпаковки;
			НоваяСтрокаУпаковки.Номенклатура=итWMSСлужебныеПроцедурыИФункции.НайтиНоменклатуруПоУникальномуИД(стр.Номенклатура);
			//НоваяСтрокаУпаковки.Качество
			НоваяСтрокаУпаковки.ДатаРозлива=стр.ДатаРозлива;
			НоваяСтрокаУпаковки.КоличествоПлан=стр.КоличествоПлан;
			НоваяСтрокаУпаковки.КоличествоФакт=стр.КоличествоФакт;
			НоваяСтрокаУпаковки.ЯчейкаПолучатель=ЯчейкаПолучатель;
			НоваяСтрокаУпаковки.СостояниеЗадачи=СостояниеЗадачи;
			НоваяСтрокаУпаковки.КонтрольнаяМарка=ДанныеОбработчика.КонтрольнаяМарка;
			НоваяСтрокаУпаковки.КарантинПаллеты=ДанныеОбработчика.КарантинПаллеты;
			НоваяСтрокаУпаковки.ИнтервалМарки=ДанныеОбработчика.ИнтервалМарки;
			НоваяСтрокаУпаковки.СправкаБ=итWMSСлужебныеПроцедурыИФункции.НайтиСправкуБПоУИД(стр.СерияНоменклатуры);
			Если ДанныеОбработчика.Свойство("Комментарий") тогда
				НоваяСтрокаУпаковки.Комментарий=ДанныеОбработчика.Комментарий;
			КонецЕсли;	
		КонецЕсли;
		для Каждого ЭлементаМассива из МассивСтрок цикл
			ЭлементаМассива.ИдентификаторУпаковки=ИдентификаторУпаковки;
			ЭлементаМассива.Номенклатура=итWMSСлужебныеПроцедурыИФункции.НайтиНоменклатуруПоУникальномуИД(стр.Номенклатура);
			ЭлементаМассива.ДатаРозлива=стр.ДатаРозлива;
			ЭлементаМассива.КоличествоПлан=стр.КоличествоПлан;
			ЭлементаМассива.КоличествоФакт=стр.КоличествоФакт;
			ЭлементаМассива.ЯчейкаПолучатель=ЯчейкаПолучатель;
			ЭлементаМассива.СостояниеЗадачи=СостояниеЗадачи;
			ЭлементаМассива.КарантинПаллеты=ДанныеОбработчика.КарантинПаллеты;
			ЭлементаМассива.КонтрольнаяМарка=ДанныеОбработчика.КонтрольнаяМарка;
			ЭлементаМассива.ИнтервалМарки=ДанныеОбработчика.ИнтервалМарки;
			ЭлементаМассива.СправкаБ=итWMSСлужебныеПроцедурыИФункции.НайтиСправкуБПоУИД(стр.СерияНоменклатуры);
			Если ДанныеОбработчика.Свойство("Комментарий") тогда
				ЭлементаМассива.Комментарий=ДанныеОбработчика.Комментарий;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	ОбъектДокумента.Записать();
	Если ДанныеОбработчика.Свойство("АгрегацияМарок") Тогда 
		ЗаписатьДанныеАгрегации(ДанныеОбработчика,ОбъектДокумента.Ссылка);
	иначе
		итWMSСлужебныеПроцедурыИФункции.ОчиститьДанныеМарокПоЗадаче(ДанныеОбработчика.КлючИнициализацииДанных);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьДанныеАгрегации(ДанныеОбработчика,Документ)
	итWMSСлужебныеПроцедурыИФункции.ОчиститьДанныеМарокПоЗадаче(ДанныеОбработчика.КлючИнициализацииДанных);
	НаборЗаписей=РегистрыСведений.итWMS_АгрегацияМарок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Документ);
	НаборЗаписей.Прочитать();
	Для Каждого стр из ДанныеОбработчика.АгрегацияМарок цикл
		НоваяЗапись=НаборЗаписей.Добавить();
		Марка=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьМаркуСБлокировкой(стр.Марка);
		Если Марка=Неопределено Тогда 
			ВызватьИсключение "Ошибка создания марки";
		КонецЕсли;	
		НоваяЗапись.Марка=Марка;
		НоваяЗапись.ДокументОснование=Документ;
		НоваяЗапись.SSCC=стр.SSCC;
		НоваяЗапись.Период=Документ.Дата;
		НоваяЗапись.GTIN=стр.GTIN;
		НоваяЗапись.ИдЗадачи=ДанныеОбработчика.КлючИнициализацииДанных;
		НоваяЗапись.Номенклатура=итWMSСлужебныеПроцедурыИФункции.НайтиНоменклатуруПоУникальномуИД(стр.Номенклатура);
		НоваяЗапись.ДатаРозлива=стр.ДатаРозлива;
		НоваяЗапись.ДатаРегистрации=ТекущаяДата();
		НоваяЗапись.АктивностьЗаписи=Истина;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ЗаписатьДанныеРасхожденияПМУ(ДанныеОбработчика)
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"РасхожденияПМУ") Тогда 
		Возврат;
	КонецЕсли;	
	ИдУпаковкиИДокумент=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
	Если ИдУпаковкиИДокумент=Неопределено тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не найденно данных по ид задачи");
		Возврат
	КонецЕсли;
	
	ОбъектДокумента=ИдУпаковкиИДокумент.ДокументОснование.ПолучитьОбъект();
	ОбъектДокумента.РасхожденияПМУ=новый ХранилищеЗначения(ДанныеОбработчика.РасхожденияПМУ,новый СжатиеДанных(9));
	ОбъектДокумента.ОбменДанными.Загрузка=Истина;
	ОбъектДокумента.Записать();
	ДанныеОбработчика.Вставить("ДанныеЗаписаны",Истина);
КонецПроцедуры

Процедура ПроставитьЯчейкуИКомментарийВЗаписяхРегистра(ДанныеОбработчика)
	ЯчейкаПолучатель=итWMSСлужебныеПроцедурыИФункции.НайтиЯчейкуПоУникальномуИд(ДанныеОбработчика.ЯчейкаПолучатель);
	ИдУпаковкиИДокумент=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
	//НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",ИдУпаковкиИДокумент.ДокументОснование);
	БлокировкаДанных.Заблокировать();
	
	итWMSСлужебныеПроцедурыИФункции.ПроставитьЯчейкуЗадачиТСД(ДанныеОбработчика.КлючИнициализацииДанных,ЯчейкаПолучатель);
	Если ДанныеОбработчика.Свойство("Комментарий") тогда
		итWMSСлужебныеПроцедурыИФункции.ПроставитьКомментарийЗадачиТСД(ДанныеОбработчика.КлючИнициализацииДанных,ДанныеОбработчика.Комментарий);
	КонецЕсли;
	//ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура ПерезаполнитьДанныеВРегистреСтрокиЗадач(ДанныеОбработчика)
	НаборЗаписей=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ДанныеОбработчика.КлючИнициализацииДанных);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	для Каждого стр из ДанныеОбработчика.Данные цикл
		Запись=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись,стр);
		Запись.ИдЗадачи=ДанныеОбработчика.КлючИнициализацииДанных;
		Запись.Номенклатура=итWMSСлужебныеПроцедурыИФункции.НайтиНоменклатуруПоУникальномуИД(стр.Номенклатура);
		Запись.Количество=стр.КоличествоПлан;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры
Процедура ПрисвоениеНовогоSSCCПриемке(ДанныеОбработчика)
	Документ=Документы.итWMSПриемка.ПолучитьСсылку(ДанныеОбработчика.КлючИнициализацииДанных);
	Если Документ.Пустая() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не найден документ");
		Возврат
	КонецЕсли;
	ДанныеТСД=итWMSСлужебныеПроцедурыИФункции.ПолучитьДанныеПоТСДНаТекущийМомент(ДанныеОбработчика.ТСДИД);
	Если ДанныеТСД = Неопределено тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных по ТСД");
		Возврат
	КонецЕсли;	
	Если ДанныеТСД.Состояние=Перечисления.итWMSСостоянияТСД.Отключен тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Закройте программу и авторизуйтесь заново");
		Возврат
	КонецЕсли;	
	//////////// Получение данных настроек wms по филиалу
	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам("СоответствиеФилиаловИорганизация");
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(НастройкиWMS) Тогда
		итWMSСлужебныеПроцедурыИФункции.WMSОповещениеОТиповыхОшибках(НастройкиWMS);
		Возврат;
	КонецЕсли;
	//////////////////////////////////
	Строка=НастройкиWMS.СоответствиеФилиаловИорганизация.Найти(Документ.Организация);
	Если Строка=Неопределено Тогда
		 Возврат;
	КонецЕсли;
	Филиал=Строка.Филиал;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",Документ);
	БлокировкаДанных.Заблокировать();
	
	НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Документ);
	НаборЗаписей.Отбор.ТипЗадачи.Установить(ДанныеОбработчика.ТипЗадачи);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=1 и не ЗначениеЗаполнено(НаборЗаписей[0].ИдентификаторУпаковки) тогда
		Запись=НаборЗаписей[0];
		Запись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполняется;
		Запись.ДатаНачала=ТекущаяДата();
	иначе
		Запись=НаборЗаписей.Добавить();
		Запись.ИдЗадачи=новый УникальныйИдентификатор;
		Запись.ДокументОснование=Документ;
		Запись.ТипЗадачи=ДанныеОбработчика.ТипЗадачи;
		Запись.ТСД=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
		Запись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполняется;
		Запись.ДатаНачала=ТекущаяДата();
	КонецЕсли;
	Запись.ИдентификаторУпаковки=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(Филиал,,ДанныеТСД.РаботникСклада.ФизическоеЛицо);
	НаборЗаписей.Записать();
	ЗафиксироватьТранзакцию();
	итWMSОбработчикиРегистрации_И_Загрузки.ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика);
КонецПроцедуры

Процедура ЗаписьДанныхТСД(ДанныеОбработчика)
	ДанныеЗадачи=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
	Если ДанныеЗадачи=Неопределено тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не найденно данных по ид задачи");
		Возврат
	КонецЕсли;
	Если не итWMSСлужебныеПроцедурыИФункции.ПроверкаНаВозможностьИзменитьЗадачу(ДанныеОбработчика,новый Структура("ТСДИД,ИдЗадачи",ДанныеОбработчика.ТСДИД,ДанныеЗадачи.ИдЗадачи),ДанныеЗадачи) Тогда 
		Возврат
	КонецЕсли;
   ЯчейкаПолучатель=итWMSСлужебныеПроцедурыИФункции.НайтиЯчейкуПоУникальномуИд(ДанныеОбработчика.ЯчейкаПолучатель);
   НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
   НаборЗаписей.Отбор.ИдЗадачи.Установить(ДанныеОбработчика.КлючИнициализацииДанных);
   НаборЗаписей.Прочитать();
   Для Каждого Запись из НаборЗаписей Цикл 
   Запись.ЯчейкаПолучатель=ЯчейкаПолучатель;
   КонецЦикла;
   НаборЗаписей.Записать(Истина);
   Если ДанныеЗадачи.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть Тогда 
	   ЗаписьДанныхТСДПриемкаКакЕсть(ДанныеОбработчика);
   Иначе 
	   ЗаписьДанныхТСДПриемка(ДанныеОбработчика);
   КонецЕсли;
   Если ДанныеОбработчика.Свойство("АгрегацияМарок") Тогда 
	   ЗаписатьДанныеАгрегации(ДанныеОбработчика,ДанныеЗадачи.ДокументОснование);
   иначе
	   итWMSСлужебныеПроцедурыИФункции.ОчиститьДанныеМарокПоЗадаче(ДанныеОбработчика.КлючИнициализацииДанных);
   КонецЕсли;

КонецПроцедуры

Процедура ЗаписьДанныхТСДПриемка(Знач ДанныеОбработчика)
	
	Перем Запись, НаборЗаписейСтрок, стр, СтруктураДополнительныхДанных;
	
	Для Каждого стр из  ДанныеОбработчика.Данные  Цикл 
		НаборЗаписейСтрок=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
		НаборЗаписейСтрок.Отбор.идЗадачи.Установить(ДанныеОбработчика.КлючИнициализацииДанных); 
		НаборЗаписейСтрок.Отбор.идСтроки.Установить(стр.идСтроки); 
		НаборЗаписейСтрок.Прочитать();
		Для Каждого Запись из НаборЗаписейСтрок Цикл 
			СтруктураДополнительныхДанных=новый Структура();
			СтруктураДополнительныхДанных.Вставить("КоличествоФакт",стр.КоличествоФакт);
			СтруктураДополнительныхДанных.Вставить("КарантинПаллеты",ДанныеОбработчика.КарантинПаллеты);
			СтруктураДополнительныхДанных.Вставить("КонтрольнаяМарка",ДанныеОбработчика.КонтрольнаяМарка);
			СтруктураДополнительныхДанных.Вставить("ИнтервалМарки",ДанныеОбработчика.ИнтервалМарки);
			СтруктураДополнительныхДанных.Вставить("СправкаБ",итWMSСлужебныеПроцедурыИФункции.НайтиСправкуБПоУИД(стр.СерияНоменклатуры));
			Если ДанныеОбработчика.Свойство("Комментарий") тогда
			СтруктураДополнительныхДанных.Вставить("Комментарий",ДанныеОбработчика.Комментарий);
            КонецЕсли;
			Запись.ДанныеДокументаТСД=новый ХранилищеЗначения(СтруктураДополнительныхДанных);	
		КонецЦикла;
		НаборЗаписейСтрок.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписьДанныхТСДПриемкаКакЕсть( ДанныеОбработчика)
	
	
	
	НаборЗаписейСтрок=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
	НаборЗаписейСтрок.Отбор.идЗадачи.Установить(ДанныеОбработчика.КлючИнициализацииДанных); 
	НаборЗаписейСтрок.Прочитать();
	НаборЗаписейСтрок.Очистить();
	Для Каждого стр из  ДанныеОбработчика.Данные  Цикл 
		НоваяСтрока=НаборЗаписейСтрок.Добавить(); 
		НоваяСтрока.Номенклатура=итWMSСлужебныеПроцедурыИФункции.НайтиНоменклатуруПоУникальномуИД(стр.Номенклатура);
		НоваяСтрока.ИдЗадачи=ДанныеОбработчика.КлючИнициализацииДанных;
		НоваяСтрока.идСтроки=стр.ИдСтроки;
		НоваяСтрока.ДатаРозлива=стр.ДатаРозлива;
		НоваяСтрока.Количество=стр.КоличествоПлан;
		СтруктураДополнительныхДанных=новый Структура();
		СтруктураДополнительныхДанных.Вставить("КоличествоФакт",стр.КоличествоФакт);
		СтруктураДополнительныхДанных.Вставить("КарантинПаллеты",ДанныеОбработчика.КарантинПаллеты);
		СтруктураДополнительныхДанных.Вставить("КонтрольнаяМарка",ДанныеОбработчика.КонтрольнаяМарка);
		СтруктураДополнительныхДанных.Вставить("ИнтервалМарки",ДанныеОбработчика.ИнтервалМарки);
		СтруктураДополнительныхДанных.Вставить("СправкаБ",итWMSСлужебныеПроцедурыИФункции.НайтиСправкуБПоУИД(стр.СерияНоменклатуры));
		Если ДанныеОбработчика.Свойство("Комментарий") тогда
			СтруктураДополнительныхДанных.Вставить("Комментарий",ДанныеОбработчика.Комментарий);
        КонецЕсли;
		НоваяСтрока.ДанныеДокументаТСД=новый ХранилищеЗначения(СтруктураДополнительныхДанных);	
	КонецЦикла;
	НаборЗаписейСтрок.Записать(Истина);

КонецПроцедуры


Процедура ВнестиИзмененияВДокументПриемки(Документ) Экспорт 
	РезультатЗапроса=итWMSСлужебныеПроцедурыИФункции.ПолучитьРезультатЗапросаИзмененияДанныхЗадачИСтрокТСД(Документ);
	Выборка=РезультатЗапроса.Выбрать();
	ОбъектДокумента=Документ.ПолучитьОбъект();
	Если Выборка.Следующий() Тогда
		Если Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть Тогда 
			ОбъектДокумента.Товары.Очистить();
		КонецЕсли;
		Выборка.Сбросить();
	КонецЕсли;
	Пока Выборка.Следующий() Цикл 
		ДанныеДокументаТСДСтрока= Выборка.ДанныеДокументаТСДСтрока.Получить();
		Если Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Приемка Тогда 
		ВнестиИзмененияПриемка(Выборка, ДанныеДокументаТСДСтрока, ОбъектДокумента);
	иначе
		ВнестиИзмененияПриемкаКакЕсть(Выборка, ДанныеДокументаТСДСтрока, ОбъектДокумента)
		КонецЕсли;
	КонецЦикла;
	ОбъектДокумента.ОбменДанными.Загрузка=Истина;
	ОбъектДокумента.Записать();

	КонецПроцедуры
	
Процедура ВнестиИзмененияПриемка( Выборка,  ДанныеДокументаТСДСтрока,  ОбъектДокумента)
		
		Перем МассивСтрок, стр;
		
		МассивСтрок=ОбъектДокумента.Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",Выборка.идСтроки));	
		Для Каждого стр из МассивСтрок Цикл
			стр.СостояниеЗадачи= Выборка.Состояние;
			Если ТипЗнч(ДанныеДокументаТСДСтрока)=Тип("Структура") Тогда 
				стр.КоличествоФакт=ДанныеДокументаТСДСтрока.КоличествоФакт;
			    стр.ЯчейкаПолучатель=Выборка.ЯчейкаПолучатель;
				стр.КарантинПаллеты= ДанныеДокументаТСДСтрока.КарантинПаллеты;
				стр.КонтрольнаяМарка= ДанныеДокументаТСДСтрока.КонтрольнаяМарка;
                стр.ИнтервалМарки= ДанныеДокументаТСДСтрока.ИнтервалМарки;
                стр.Комментарий= ДанныеДокументаТСДСтрока.Комментарий;
                стр.СправкаБ= ДанныеДокументаТСДСтрока.СправкаБ;
			КонецЕсли;
		КонецЦикла;

КонецПроцедуры
	
Процедура ВнестиИзмененияПриемкаКакЕсть( Выборка,  ДанныеДокументаТСДСтрока,  ОбъектДокумента)
	НоваяСтрока=ОбъектДокумента.Товары.Добавить();
	НоваяСтрока.ИдентификаторСтроки=Выборка.идСтроки;
	НоваяСтрока.Номенклатура=Выборка.Номенклатура;
	НоваяСтрока.ИдентификаторУпаковки=Выборка.ИдентификаторУпаковки;
	НоваяСтрока.ДатаРозлива=Выборка.ДатаРозлива;
	НоваяСтрока.СостояниеЗадачи= Выборка.Состояние;
	Если ТипЗнч(ДанныеДокументаТСДСтрока)=Тип("Структура") Тогда 
		НоваяСтрока.КоличествоФакт=ДанныеДокументаТСДСтрока.КоличествоФакт;
		НоваяСтрока.КоличествоПлан=ДанныеДокументаТСДСтрока.КоличествоФакт;
		НоваяСтрока.ЯчейкаПолучатель=Выборка.ЯчейкаПолучатель;
		НоваяСтрока.КарантинПаллеты= ДанныеДокументаТСДСтрока.КарантинПаллеты;
		НоваяСтрока.КонтрольнаяМарка= ДанныеДокументаТСДСтрока.КонтрольнаяМарка;
        НоваяСтрока.ИнтервалМарки= ДанныеДокументаТСДСтрока.ИнтервалМарки;
        НоваяСтрока.Комментарий= ДанныеДокументаТСДСтрока.Комментарий;
        НоваяСтрока.СправкаБ= ДанныеДокументаТСДСтрока.СправкаБ;
	КонецЕсли;
		
КонецПроцедуры


Процедура ВнесениеВнешнегоSSCC(ДанныеОбработчика)
	Документ=Документы.итWMSПриемка.ПолучитьСсылку(ДанныеОбработчика.КлючИнициализацииДанных);
	Если Документ.Пустая() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не найден документ");
		Возврат
	КонецЕсли;
	ДанныеТСД=итWMSСлужебныеПроцедурыИФункции.ПолучитьДанныеПоТСДНаТекущийМомент(ДанныеОбработчика.ТСДИД);
	Если ДанныеТСД = Неопределено тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных по ТСД");
		Возврат
	КонецЕсли;	
	Если ДанныеТСД.Состояние=Перечисления.итWMSСостоянияТСД.Отключен тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Закройте программу и авторизуйтесь заново");
		Возврат
	КонецЕсли;	
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ВнешнийSSCC") тогда
		Возврат
	КонецЕсли;	
	Если ОбнаруженноДублированиеSSCCВРазрезеДокумента(ДанныеОбработчика.ВнешнийSSCC,Документ,ДанныеОбработчика.ТипЗадачи) тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","данный SSCC уже находится в задачах текущего документа");
		Возврат
	КонецЕсли;	
	Если ОбнаруженноДублированиеSSCCНаСкладе(ДанныеОбработчика.ВнешнийSSCC,Документ) Тогда 
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","данный SSCC уже числится на складе");
		Возврат
	КонецЕсли;
	
	//СтруктураХраненияДанныхНастройкиWMS=ХранилищеОбщихНастроек.Загрузить("WMSНастройки","WMSНастройки",,"WMSНастройки");
	//Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(СтруктураХраненияДанныхНастройкиWMS,"Филиал") тогда
	//	ДанныеОбработчика=СтруктураХраненияДанныхНастройкиWMS;
	//	Возврат
	//КонецЕсли;	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",Документ);
	БлокировкаДанных.Заблокировать();
	
	НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Документ);
	НаборЗаписей.Отбор.ТипЗадачи.Установить(ДанныеОбработчика.ТипЗадачи);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=1 и не ЗначениеЗаполнено(НаборЗаписей[0].ИдентификаторУпаковки) тогда
		Запись=НаборЗаписей[0];
		Запись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполняется;
		Запись.ДатаНачала=ТекущаяДата();
	иначе
		Запись=НаборЗаписей.Добавить();
		Запись.ИдЗадачи=новый УникальныйИдентификатор;
		Запись.ДокументОснование=Документ;
		Запись.ТипЗадачи=ДанныеОбработчика.ТипЗадачи;
		Запись.ТСД=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
		Запись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполняется;
		Запись.ДатаНачала=ТекущаяДата();
	КонецЕсли;
	Запись.ИдентификаторУпаковки=ДанныеОбработчика.ВнешнийSSCC;
	НаборЗаписей.Записать();
	ЗафиксироватьТранзакцию();
	итWMSОбработчикиРегистрации_И_Загрузки.ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика);
	
КонецПроцедуры
Функция ОбнаруженноДублированиеSSCCВРазрезеДокумента(SSCC,Документ,ТипЗадачи)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСД.ИдЗадачи
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ИдентификаторУпаковки = &ИдентификаторУпаковки
	|	И итWMSЗадачиТСД.ДокументОснование = &ДокументОснование
	|	И итWMSЗадачиТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ИдентификаторУпаковки", СокрЛП(SSCC));
	Запрос.УстановитьПараметр("ДокументОснование",Документ);
	Запрос.УстановитьПараметр("ТипЗадачи",ТипЗадачи);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

Функция ОбнаруженноДублированиеSSCCНаСкладе(SSCC,Документ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВтОбъединение
	|ИЗ
	|	РегистрНакопления.итТоварыВЯчейках.Остатки(&Период, ИдентификаторУпаковки = &ИдентификаторУпаковки) КАК итТоварыВЯчейкахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОбъединение.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	СУММА(ВтОбъединение.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	ВтОбъединение КАК ВтОбъединение
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОбъединение.ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("ИдентификаторУпаковки", SSCC);
	Запрос.УстановитьПараметр("Период", новый Граница(новый МоментВремени(Документ.Дата,Документ.Ссылка),ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
	
КонецФункции

Процедура ФоновоеОповещениеНесоответствияДанныхПриемки(Параметры) Экспорт
//	Данные=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
//	Если ТипЗнч(Данные)<>тип("Структура") тогда
//		ЗаписьЖурналаРегистрации("ОповещениеПоПочтеПриемка",,,,"Ошибка незаполненных данных wms");
//		Возврат;
//	КонецЕсли;
//	Если не Данные.Свойство("СписокАдресовРассылкиПриемка") тогда
//		ЗаписьЖурналаРегистрации("ОповещениеПоПочтеПриемка",,,,"Ошибка незаполненных данных wms СписокАдресовРассылкиПриемка");
//		Возврат;
//	КонецЕсли;
//	
//	СтруктураДанных=Параметры;
//	Тема = "Расхождения WMS Приемки";
//	Текст="Ошбки в документе приемки №"+СтруктураДанных.Номер+" от "+ Строка(СтруктураДанных.Дата)+" Документ транзита №"+СтруктураДанных.НомерВходящегоДокумента+" от "+СтруктураДанных.ДатаВходящегоДокумента+"
//	|детальные данные во вложении";
//	МассивКопияПолучателей=Данные.СписокАдресовРассылкиПриемка.ВыгрузитьКолонку("Адрес");
//	Файлы=новый Массив;
//	МассивПолучателей = Данные.СписокАдресовРассылкиПриемка.ВыгрузитьКолонку("Адрес");
//	ИмяФайла=ПолучитьИмяВременногоФайла("xml");
//	ТекстовыйДокумент = новый ТекстовыйДокумент;
//	ТекстовыйДокумент.УстановитьТекст(СтруктураДанных.Сообщение);
//	ТекстовыйДокумент.Записать(ИмяФайла);
//	Файлы.Добавить(новый Файл(ИмяФайла));
//	УчЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты; 
//	ДополнительныйМодуль.ВоссоздатьПисьмо(УчЗапись,МассивПолучателей,МассивКопияПолучателей,Тема,Текст,Файлы);
КонецПроцедуры

Процедура ПолучитьДанныеПомарочногоУчетаДокументов(ДанныеОбработчика) Экспорт 
	Если ТипЗнч(ДанныеОбработчика.КлючПолученияДанных)<> Тип("УникальныйИдентификатор") тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не верный тип получения данных");
		Возврат
	КонецЕсли;
	ДокументОснование=Документы.итWMSПриемка.ПолучитьСсылку(ДанныеОбработчика.КлючПолученияДанных);	
	Если Найти(Строка(ДокументОснование),"Объект не найден") тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных по документу");
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSПриемкаДокументыПомарочногоУчета.Документ КАК Документ,
		|	итWMSПриемкаДокументыПомарочногоУчета.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Документ.итWMSПриемка.ДокументыПомарочногоУчета КАК итWMSПриемкаДокументыПомарочногоУчета
		|ГДЕ
		|	итWMSПриемкаДокументыПомарочногоУчета.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеМарокЕГАИСМарки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ДанныеМарокЕГАИСМарки.Упаковка КАК Упаковка,
		|	ДанныеМарокЕГАИСМарки.ИерархияУпаковки КАК ИерархияУпаковки,
		|	ДанныеМарокЕГАИСМарки.СправкаБ КАК СправкаБ,
		|	ДанныеМарокЕГАИСМарки.Марка.ЗначениеШтрихКода КАК Марка,
		|	ДанныеМарокЕГАИСМарки.ДатаРозлива КАК ДатаРозлива,
		|	ДанныеМарокЕГАИСМарки.Ссылка КАК Ссылка,
		|	ВТ.Ссылка КАК Приемка
		|ПОМЕСТИТЬ ВтДанныеДокументаСМарками
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДанныеМарокЕГАИС.Марки КАК ДанныеМарокЕГАИСМарки
		|		ПО ВТ.Документ = ДанныеМарокЕГАИСМарки.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеДокументаСМарками.Упаковка КАК GTIN,
		|	ВтДанныеДокументаСМарками.ИерархияУпаковки КАК SSCC,
		|	ВтДанныеДокументаСМарками.СправкаБ КАК СправкаБСсылка,
		|	ВтДанныеДокументаСМарками.Марка КАК Марка,
		|	ВтДанныеДокументаСМарками.ДатаРозлива КАК ДатаРозлива,
		|	ЕСТЬNULL(итWMSПриемкаСоответсвиеДаннныхТТНиСкласдкогоУчета.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураСсылка,
		|	ЕСТЬNULL(итWMSПриемкаСоответсвиеДаннныхТТНиСкласдкогоУчета.Номенклатура.Наименование, ""Не верное соотв. номенклатуры и справки Б"") КАК НоменклатураПредставление,
		|	ВтДанныеДокументаСМарками.СправкаБ.Код КАК СерияНоменклатурыПредставление
		|ИЗ
		|	ВтДанныеДокументаСМарками КАК ВтДанныеДокументаСМарками
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.итWMSПриемка.СоответсвиеДаннныхТТНиСкласдкогоУчета КАК итWMSПриемкаСоответсвиеДаннныхТТНиСкласдкогоУчета
		|		ПО ВтДанныеДокументаСМарками.Приемка = итWMSПриемкаСоответсвиеДаннныхТТНиСкласдкогоУчета.Ссылка
		|			И ВтДанныеДокументаСМарками.АлкогольнаяПродукция = итWMSПриемкаСоответсвиеДаннныхТТНиСкласдкогоУчета.АлкогольнаяПродукция
		|			И ВтДанныеДокументаСМарками.СправкаБ = итWMSПриемкаСоответсвиеДаннныхТТНиСкласдкогоУчета.СправкаБ
		|			И ВтДанныеДокументаСМарками.ДатаРозлива = итWMSПриемкаСоответсвиеДаннныхТТНиСкласдкогоУчета.ДатаРозлива";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка=РезультатЗапроса.Выбрать();
	ТаблицаДанных=новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ДатаРозлива");
	ТаблицаДанных.Колонки.Добавить("Марка");
	ТаблицаДанных.Колонки.Добавить("GTIN");
	ТаблицаДанных.Колонки.Добавить("SSCC");
	ТаблицаДанных.Колонки.Добавить("СерияНоменклатурыПредставление");
	ТаблицаДанных.Колонки.Добавить("СерияНоменклатуры");
	ТаблицаДанных.Колонки.Добавить("Номенклатура");
	ТаблицаДанных.Колонки.Добавить("НоменклатураПредставление");
	Пока Выборка.Следующий() цикл
		НоваяСтрока=ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		НоваяСтрока.Номенклатура=Выборка.НоменклатураСсылка.УникальныйИдентификатор();
		НоваяСтрока.СерияНоменклатуры=Выборка.СправкаБСсылка.УникальныйИдентификатор();
	КонецЦикла;
	ДанныеОбработчика.Вставить("ДанныеПомарочногоУчета",ТаблицаДанных);	
КонецПроцедуры


Процедура ПолучениеДанныхПМУДокументаВФоне(СтруктураДанных)Экспорт 
	Определение=новый WSОпределения(итWMSСлужебныеПроцедурыИФункции.СформироватьСтрокуПодключенияПоУзлу(СтруктураДанных.Узел) ,"webserv","111");
		ПараметрыПрокиСервера=итWMSСлужебныеПроцедурыИФункции.СформироватьПараметрыПроксиСервераПоУзлу(СтруктураДанных.Узел);
		Прокси = новый WSПрокси(Определение,ПараметрыПрокиСервера.URLПространствоИменСервиса,ПараметрыПрокиСервера.ИмяСервиса,ПараметрыПрокиСервера.ИмяТочкиПодключения);
		Прокси.Пользователь="webserv";
		Прокси.Пароль="111";
		СтруктураДанных.Вставить("КлючЗапросаДанных","ПолучениеДанныхДокументаМарок");
		Данные=итWMSСлужебныеПроцедурыИФункции.СериализаторДанных(СтруктураДанных);
		Ответ=итWMSСлужебныеПроцедурыИФункции.ДесериализаторДанных(Прокси.ToGetData(Данные));
		Если Ответ.Свойство("Статус") Тогда 
			ЗаписьЖурналаРегистрации("ПолучениеДанныхМарок",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ДанныеМарокЕГАИС,СтруктураДанных.КлючЗадания,Ответ.ОписаниеОшибки,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецЕсли;
		Ответ.Вставить("Узел",СтруктураДанных.Узел);
        Ссылка=ЗаписатьДокументДанныхМарок(Ответ);
		МенеджерЗаписи=РегистрыСведений.ит_WMS_ХранилищеДанных.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.КлючХраненияДанных=СтруктураДанных.КлючЗадания;
		МенеджерЗаписи.ДатаСохранения=ТекущаяДата();
		МенеджерЗаписи.ХранилищеЗначений=новый ХранилищеЗначения(Ссылка);
		МенеджерЗаписи.Записать(Истина);
		//Возврат Ссылка;

КонецПроцедуры

Функция ЗаписатьДокументДанныхМарок(СтруктураДанных)
	Организация=итWMSСлужебныеПроцедурыИФункции.ПоискЭлементаСоответствияОбмена(СтруктураДанных.Организация,СтруктураДанных.Узел.ГлавныйУзелОбменаWMS);
	НомерИсточника=СтруктураДанных.НомерИсточника;
	Если Организация=Неопределено Тогда 
		Сообщить("Организация не найдена");
		Возврат Неопределено;
	КонецЕсли;	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	СсылкаНаОбъект=итWMSСлужебныеПроцедурыИФункции.ПоискЭлементаСоответствияОбменаСБлокировкой(СтруктураДанных.Ссылка,СтруктураДанных.Узел,"ДокументСсылка.ДанныеМарокЕГАИС");
	НовыйОбъект=Истина;
	Если СсылкаНаОбъект=Неопределено Тогда 
		ОбъектИзменения=Документы.ДанныеМарокЕГАИС.СоздатьДокумент();
	иначе
		ОбъектИзменения=СсылкаНаОбъект.ПолучитьОбъект();
		НовыйОбъект=Ложь;
	КонецЕсли;	
	ОбъектИзменения.Дата=СтруктураДанных.Дата;
	ОбъектИзменения.НомерИсточника=НомерИсточника;
	ОбъектИзменения.Организация=Организация;
	ОбъектИзменения.Марки.Очистить();
	Для Каждого стр из СтруктураДанных.Марки Цикл 
		АлкогольнаяПродукция=итWMSСлужебныеПроцедурыИФункции.ПоискЭлементаСоответствияОбмена(стр.АлкогольнаяПродукция,СтруктураДанных.Узел.ГлавныйУзелОбменаWMS);
		СправкаБ=итWMSСлужебныеПроцедурыИФункции.ПоискЭлементаСоответствияОбмена(стр.СправкаБ,СтруктураДанных.Узел.ГлавныйУзелОбменаWMS);
		СправкаА=итWMSСлужебныеПроцедурыИФункции.ПоискЭлементаСоответствияОбмена(стр.СправкаА,СтруктураДанных.Узел.ГлавныйУзелОбменаWMS);
		Если АлкогольнаяПродукция=Неопределено Тогда 
			Сообщить("АлкогольнаяПродукция не найдена");
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецЕсли;	
		Если СправкаБ=Неопределено Тогда 
			Сообщить("СправкаБ не найдена");
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецЕсли;	
		Если СправкаА=Неопределено Тогда 
			Сообщить("СправкаА не найдена");
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецЕсли;	
		Марка=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьМаркуСБлокировкой(стр.Марка);
		Если Марка=Неопределено Тогда 
			ВызватьИсключение "Ошибка создания марки";
		КонецЕсли;
		НоваяСтрока=ОбъектИзменения.Марки.Добавить();
		НоваяСтрока.АлкогольнаяПродукция=АлкогольнаяПродукция;
		НоваяСтрока.СправкаБ=СправкаБ;
		НоваяСтрока.СправкаА=СправкаА;
		НоваяСтрока.Марка=Марка;
		НоваяСтрока.ДатаРозлива=стр.ДатаРозлива;
		НоваяСтрока.Упаковка=стр.Упаковка;
		НоваяСтрока.ИерархияУпаковки=стр.ИерархияУпаковки;
		
	КонецЦикла;
	Попытка
		ОбъектИзменения.Записать();
		Если НовыйОбъект Тогда 
		итWMSСлужебныеПроцедурыИФункции.ЗаписьСоотвОбмена(ОбъектИзменения.Ссылка,СтруктураДанных.Ссылка,СтруктураДанных.ИмяТипаПриемника,СтруктураДанных.Узел);
		КонецЕсли;
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	Возврат ОбъектИзменения.Ссылка;
	КонецФункции

//Функция ПолучитьНастройкиИзХранилища() Экспорт 
//	Возврат ХранилищеОбщихНастроек.Загрузить("WMSНастройки","WMSНастройки",,"WMSНастройки");
//КонецФункции
