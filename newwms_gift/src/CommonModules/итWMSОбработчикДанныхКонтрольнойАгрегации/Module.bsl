Процедура ЦентральныйОбработчикДанныхКонтрольнойАгрегации(ДанныеОбработчика)Экспорт
	//Проверка на общие данные
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипОбработкиДанных") тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипЗадачи")   тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТСДИД")   тогда
		Возврат
	КонецЕсли;
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючИнициализацииДанных") тогда
		Возврат
	КонецЕсли; 
    ////////
	////////////////////////////////////////////////
	Если  ДанныеОбработчика.ТипОбработкиДанных="ВнесениеИзмененийВДокумент" тогда
		Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"Данные") тогда
			Возврат
		КонецЕсли;  
		////////////Транзакция фиксируется псоле инициализации задачи
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		///////
		ВнестиИзмененияВДокумент(ДанныеОбработчика);
		ПерезаполнитьДанныеВРегистреСтрокиЗадач(ДанныеОбработчика);
		итWMSОбработчикиРегистрации_И_Загрузки.ИнициализацияДанныхНаСервере(ДанныеОбработчика);
		Если ДанныеОбработчика.Свойство("Статус") тогда
			Если ДанныеОбработчика.Статус=404 тогда
				Возврат
			КонецЕсли;
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	КонецЕсли;                                                                 
	Если  ДанныеОбработчика.ТипОбработкиДанных="НовыйSSCCКонтрольнаяАгрегация" тогда
		ПрисвоениеНовогоSSCCКонтрольнаяАгрегация(ДанныеОбработчика);	
	КонецЕсли;
	Если ДанныеОбработчика.ТипОбработкиДанных="ВнешнийSSCCКонтрольнаяАгрегация" тогда
		ВнесениеВнешнегоSSCC(ДанныеОбработчика);	
	КонецЕсли;
	Если ДанныеОбработчика.ТипОбработкиДанных="ПолучениеДанныхSSCCGTIN" тогда
		ПолучениеДанныхПоSSCC_GTIN(ДанныеОбработчика);
	КонецЕсли;
	
	Если ДанныеОбработчика.ТипОбработкиДанных="ПолучениеДанныхОтдельнойМарки" тогда
		ПолучениеДанныхОтдельнойМарки(ДанныеОбработчика);
	КонецЕсли;
	Если  ДанныеОбработчика.ТипОбработкиДанных="ПолучениеБазыМарокНаборки" тогда
		//ПолучитьБазуМарокНаборки(ДанныеОбработчика);	
		ПолучитьБазуМарокНаборкиЦикл(ДанныеОбработчика);
	КонецЕсли;
	Если  ДанныеОбработчика.ТипОбработкиДанных="ПолучениеБазыМарокНаборкиАссинхронно" тогда
		ПолучитьБазуМарокНаборкиАссинхронно(ДанныеОбработчика);	
	КонецЕсли;
	Если  ДанныеОбработчика.ТипОбработкиДанных="ПолучениеАссинхронноЗаписанныхДанных" тогда
		ПолучениеАссинхронноЗаписанныхДанных(ДанныеОбработчика);	
	КонецЕсли;


	
	
	/////////////////////////////////////////////////
КонецПроцедуры
	
Процедура ВнестиИзмененияВДокумент(ДанныеОбработчика)
	
ИдУпаковкиИДокумент=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
Если не итWMSСлужебныеПроцедурыИФункции.ПроверкаНаВозможностьИзменитьЗадачу(ДанныеОбработчика,новый Структура("ТСДИД,ИдЗадачи",ДанныеОбработчика.ТСДИД,ИдУпаковкиИДокумент.ИдЗадачи),ИдУпаковкиИДокумент) Тогда 
	Возврат
КонецЕсли;
Если ИдУпаковкиИДокумент=Неопределено тогда
	ДанныеОбработчика.Вставить("Статус",404);
	ДанныеОбработчика.Вставить("ОписаниеОшибки","не найденно данных по ид задачи");
	Возврат
КонецЕсли;


//ЯчейкаПолучатель=итWMSСлужебныеПроцедурыИФункции.НайтиЯчейкуПоУникальномуИд(ДанныеОбработчика.ЯчейкаПолучатель);
СостояниеЗадачи=ДанныеОбработчика.СостояниеИнициализации;
ИдентификаторУпаковки=ИдУпаковкиИДокумент.ИдентификаторУпаковки;

ОбъектДокумента=ИдУпаковкиИДокумент.ДокументОснование.ПолучитьОбъект();
//Если ДанныеОбработчика.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть тогда
	МассиСтрокКУдалению=ОбъектДокумента.Товары.НайтиСтроки(новый Структура("ИдентификаторУпаковки",ИдентификаторУпаковки));
	для Каждого СтрокаКУдалению из МассиСтрокКУдалению цикл
		ОбъектДокумента.Товары.Удалить(СтрокаКУдалению);
	КонецЦикла;
	МассивСтрокКУдалениюПомарочныйУчет= ОбъектДокумента.ДанныеАгрегацииДокумента.НайтиСтроки(новый Структура("SSCC",ИдентификаторУпаковки));
    для Каждого СтрокаКУдалениюПУ из МассивСтрокКУдалениюПомарочныйУчет цикл
		ОбъектДокумента.ДанныеАгрегацииДокумента.Удалить(СтрокаКУдалениюПУ);
	КонецЦикла;

//КонецЕсли;
//ТаблицаМарокиGtinДляДокумента = новый ТаблицаЗначений;
//ТаблицаМарокиGtinДляДокумента.Колонки.Добавить("GTIN",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
//ТаблицаМарокиGtinДляДокумента.Колонки.Добавить("Марка",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
для Каждого стр из ДанныеОбработчика.Данные цикл
	МассивСтрок=ОбъектДокумента.Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",стр.ИдСтроки));
	Если МассивСтрок.Количество()=0 тогда
		НоваяСтрокаУпаковки=ОбъектДокумента.Товары.Добавить();
		НоваяСтрокаУпаковки.ИдентификаторСтроки=стр.ИдСтроки;
		НоваяСтрокаУпаковки.ИдентификаторУпаковки=ИдентификаторУпаковки;
		НоваяСтрокаУпаковки.Номенклатура=итWMSСлужебныеПроцедурыИФункции.НайтиНоменклатуруПоУникальномуИД(стр.Номенклатура);
		НоваяСтрокаУпаковки.СерияНоменклатуры=ПолучитьСериюНоменклатуры(стр.СерияНоменклатуры);

		//НоваяСтрокаУпаковки.Качество
		НоваяСтрокаУпаковки.ДатаРозлива=стр.ДатаРозлива;
		//НоваяСтрокаУпаковки.КоличествоПлан=стр.КоличествоПлан;
		НоваяСтрокаУпаковки.Количество=стр.Количество;
		НоваяСтрокаУпаковки.СостояниеЗадачи=СостояниеЗадачи;
	КонецЕсли;
	для Каждого ЭлементаМассива из МассивСтрок цикл
		ЭлементаМассива.ИдентификаторУпаковки=ИдентификаторУпаковки;
		ЭлементаМассива.Номенклатура=итWMSСлужебныеПроцедурыИФункции.НайтиНоменклатуруПоУникальномуИД(стр.Номенклатура);
		ЭлементаМассива.ДатаРозлива=стр.ДатаРозлива;
		ЭлементаМассива.СерияНоменклатуры=ПолучитьСериюНоменклатуры(стр.СерияНоменклатуры);
		//ЭлементаМассива.КоличествоПлан=стр.КоличествоПлан;
		ЭлементаМассива.Количество=стр.Количество;
		ЭлементаМассива.СостояниеЗадачи=СостояниеЗадачи;
	КонецЦикла;
	Если не  ТипЗнч(стр.ДанныеПомарочногоУчета)=Тип("Структура") тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не верный формат ДанныеПомарочногоУчета");
		Возврат
	КонецЕсли;
	Если не  стр.ДанныеПомарочногоУчета.Свойство("МассивДанныхПомарочногоУчетаСтроки") тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не верный формат ДанныеПомарочногоУчета-нет Массива Данных Помарочного Учета Строки");
		Возврат
	КонецЕсли;
	Если не  ТипЗнч(стр.ДанныеПомарочногоУчета.МассивДанныхПомарочногоУчетаСтроки)=Тип("Массив") тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не верный формат МассивДанныхПомарочногоУчетаСтроки");
		Возврат
	КонецЕсли;
 

	
	для Каждого ЭлементаПомарочногоУчета из стр.ДанныеПомарочногоУчета.МассивДанныхПомарочногоУчетаСтроки цикл
		НоваяСтрокаАгрегации=ОбъектДокумента.ДанныеАгрегацииДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаАгрегации,ЭлементаПомарочногоУчета,,"Марка");
		Марка=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьМаркуСБлокировкой(ЭлементаПомарочногоУчета.Марка);
		Если Марка=Неопределено Тогда 
			ВызватьИсключение "Ошибка создания марки";
		КонецЕсли;	
		НоваяСтрокаАгрегации.Марка=Марка;
		НоваяСтрокаАгрегации.Номенклатура=итWMSСлужебныеПроцедурыИФункции.НайтиНоменклатуруПоУникальномуИД(стр.Номенклатура);
        НоваяСтрокаАгрегации.СерияНоменклатуры=ПолучитьСериюНоменклатуры(стр.СерияНоменклатуры);
        НоваяСтрокаАгрегации.ДатаРозлива=НоваяСтрокаАгрегации.СерияНоменклатуры.ДатаПроизводства;
		НоваяСтрокаАгрегации.SSCC=ИдентификаторУпаковки;
		//ЗаполнитьЗначенияСвойств(ТаблицаМарокиGtinДляДокумента.Добавить(),ЭлементаПомарочногоУчета);
	КонецЦикла;
КонецЦикла;
Попытка
//ЗаполнитьДаннымиПомарочногоУчета(ОбъектДокумента,ТаблицаМарокиGtinДляДокумента,ИдентификаторУпаковки);
Исключение
ДанныеОбработчика.Вставить("Статус",404);
ДанныеОбработчика.Вставить("ОписаниеОшибки",ОписаниеОшибки());
Возврат;
КонецПопытки;

ОбъектДокумента.Записать();
КонецПроцедуры
Процедура ПолучениеДанныхПоSSCC_GTIN(ДанныеОбработчика)
GTIN="";
SSCC="";
КлючевойПараметрЗадан=ложь;
Если ДанныеОбработчика.Свойство("GTIN") тогда
	КлючевойПараметрЗадан=Истина;
	GTIN=ДанныеОбработчика.GTIN;
КонецЕсли;
Если ДанныеОбработчика.Свойство("SSCC") тогда
	КлючевойПараметрЗадан=Истина;
	SSCC=ДанныеОбработчика.SSCC;
КонецЕсли;
Если не КлючевойПараметрЗадан тогда
	ДанныеОбработчика.Вставить("Статус",404);
	ДанныеОбработчика.Вставить("ОписаниеОшибки","не задан ключевой параметр GTIN\SSCC");
	Возврат
КонецЕсли;

	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	алкХранилищеУпаковокСрезПоследних.Упаковка КАК GTIN,
		|	алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки КАК SSCC
		|ПОМЕСТИТЬ ДанныеУпаковок
		|ИЗ
		|	РегистрСведений.алкХранилищеУпаковок.СрезПоследних КАК алкХранилищеУпаковокСрезПоследних
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &GTIN = """"
		|				ТОГДА алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки = &SSCC
		|			ИНАЧЕ алкХранилищеУпаковокСрезПоследних.Упаковка = &GTIN
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеУпаковок.GTIN,
		|	ДанныеУпаковок.SSCC,
		|	алкХранилищеАкцизныхМарокСрезПоследних.Марка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(итWMS_МаркиВОбработке.Марка, """") = """"
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК МаркаДоступна,
		|	МАКСИМУМ(алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ) КАК СправкаБ
		|ПОМЕСТИТЬ ДанныеМарочногоУчета
		|ИЗ
		|	ДанныеУпаковок КАК ДанныеУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMS_МаркиВОбработке КАК итWMS_МаркиВОбработке
		|			ПО алкХранилищеАкцизныхМарокСрезПоследних.Марка = итWMS_МаркиВОбработке.Марка
		|		ПО ДанныеУпаковок.GTIN = алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕСТЬNULL(итWMS_МаркиВОбработке.Марка, """") = """"
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ > 0
		|	И алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеУпаковок.GTIN,
		|	ДанныеУпаковок.SSCC,
		|	алкХранилищеАкцизныхМарокСрезПоследних.Марка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеМарочногоУчета.GTIN,
		|	ДанныеМарочногоУчета.SSCC,
		|	ДанныеМарочногоУчета.Марка,
		|	ДанныеМарочногоУчета.МаркаДоступна,
		|	ДанныеМарочногоУчета.СправкаБ,
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры) КАК СерияНоменклатуры,
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец) КАК Номенклатура
		|ПОМЕСТИТЬ ДанныеКВыборке
		|ИЗ
		|	ДанныеМарочногоУчета КАК ДанныеМарочногоУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
		|		ПО ДанныеМарочногоУчета.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеМарочногоУчета.GTIN,
		|	ДанныеМарочногоУчета.SSCC,
		|	ДанныеМарочногоУчета.Марка,
		|	ДанныеМарочногоУчета.МаркаДоступна,
		|	ДанныеМарочногоУчета.СправкаБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеКВыборке.GTIN,
		|	ДанныеКВыборке.SSCC,
		|	ДанныеКВыборке.Марка КАК Марка,
		|	ДанныеКВыборке.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ДанныеКВыборке.Номенклатура КАК Номенклатура
		|ИЗ
		|	ДанныеКВыборке КАК ДанныеКВыборке
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Марка)
		|ПО
		|	Номенклатура,
		|	СерияНоменклатуры";
	
	Запрос.УстановитьПараметр("GTIN", GTIN);
	Запрос.УстановитьПараметр("SSCC", SSCC);
	
	ТаблицаДанныхПомарочногоУчета=новый ТаблицаЗначений;
	//ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("GTIN",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
	//ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("SSCC",Новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
	//ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("Марка",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
	ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("СерияНоменклатуры",новый ОписаниеТипов("УникальныйИдентификатор"));
    ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("УникальныйИдентификатор"));
    ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("СерияНоменклатурыПредставление",Новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(150)));
    ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("НоменклатураПредставление",Новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(150)));
	ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("Количество",новый ОписаниеТипов("Число",,,новый КвалификаторыЧисла(15,3)));
	ТаблицаДанныхПомарочногоУчета.Колонки.Добавить("ДетализацияПоМаркам",новый ОписаниеТипов("ТаблицаЗначений"));
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		ДанныеОбработчика.Вставить("ТаблицаДанныхПомарочногоУчета",ТаблицаДанныхПомарочногоУчета);
		Возврат
	КонецЕсли;	
	ВыборкаНоменклатуры = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		ВыборкаПоСерии=ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		пока ВыборкаПоСерии.Следующий() цикл
			НоваяЗаписьДанныхПомарочногоУчета=ТаблицаДанныхПомарочногоУчета.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяЗаписьДанныхПомарочногоУчета,ВыборкаДетальныеЗаписи);
			НоваяЗаписьДанныхПомарочногоУчета.СерияНоменклатуры=ВыборкаПоСерии.СерияНоменклатуры.УникальныйИдентификатор();
			НоваяЗаписьДанныхПомарочногоУчета.Номенклатура=ВыборкаПоСерии.Номенклатура.УникальныйИдентификатор();
			НоваяЗаписьДанныхПомарочногоУчета.СерияНоменклатурыПредставление=ВыборкаПоСерии.СерияНоменклатуры.Наименование;
			НоваяЗаписьДанныхПомарочногоУчета.НоменклатураПредставление=ВыборкаПоСерии.Номенклатура.Наименование;
			
			ДетализацияПоМаркам= новый ТаблицаЗначений;
			ДетализацияПоМаркам.Колонки.Добавить("GTIN",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
			ДетализацияПоМаркам.Колонки.Добавить("SSCC",Новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
			ДетализацияПоМаркам.Колонки.Добавить("Марка",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
			
			ВыборкаДетальныеЗаписи=ВыборкаПоСерии.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() цикл
				ЗаполнитьЗначенияСвойств(ДетализацияПоМаркам.Добавить(),ВыборкаДетальныеЗаписи);
			КонецЦикла;
		    НоваяЗаписьДанныхПомарочногоУчета.ДетализацияПоМаркам= ДетализацияПоМаркам;
	КонецЦикла;
КонецЦикла;
ДанныеОбработчика.Вставить("ТаблицаДанныхПомарочногоУчета",ТаблицаДанныхПомарочногоУчета);

//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	КонецПроцедуры
Процедура ЗаполнитьДаннымиПомарочногоУчета(ОбъектДокумента,ТаблицаМарокиGtinДляДокумента,ИдентификаторУпаковки)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаМарокиGtinДляДокумента.GTIN,
	|	ТаблицаМарокиGtinДляДокумента.Марка
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаМарокиGtinДляДокумента КАК ТаблицаМарокиGtinДляДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.GTIN
	|ПОМЕСТИТЬ СканированныеGTIN
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.Марка = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Марка,
	|	ВТ.GTIN
	|ПОМЕСТИТЬ СканированныеМарки
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.Марка <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СканированныеМарки.Марка,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры,
	|	СканированныеМарки.GTIN
	|ПОМЕСТИТЬ НоменклатураПоМаркам
	|ИЗ
	|	СканированныеМарки КАК СканированныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
	|			ПО алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
	|		ПО СканированныеМарки.Марка = алкХранилищеАкцизныхМарокСрезПоследних.Марка
	|ГДЕ
	|	алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПоМаркам.GTIN,
	|	НоменклатураПоМаркам.Марка,
	|	НоменклатураПоМаркам.СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(итWMS_МаркиВОбработке.Марка, """") = """"
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК МаркаВОбработке
	|ПОМЕСТИТЬ ОтсечениеМарокВРезерве
	|ИЗ
	|	НоменклатураПоМаркам КАК НоменклатураПоМаркам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMS_МаркиВОбработке КАК итWMS_МаркиВОбработке
	|		ПО НоменклатураПоМаркам.Марка = итWMS_МаркиВОбработке.Марка
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураПоМаркам.GTIN,
	|	НоменклатураПоМаркам.Марка,
	|	НоменклатураПоМаркам.СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(итWMS_МаркиВОбработке.Марка, """") = """"
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтсечениеМарокВРезерве.GTIN,
	|	ОтсечениеМарокВРезерве.Марка,
	|	ОтсечениеМарокВРезерве.СерияНоменклатуры
	|ИЗ
	|	ОтсечениеМарокВРезерве КАК ОтсечениеМарокВРезерве
	|ГДЕ
	|	ОтсечениеМарокВРезерве.МаркаВОбработке > 0";
	
	Запрос.УстановитьПараметр("ТаблицаМарокиGtinДляДокумента",ТаблицаМарокиGtinДляДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Марка="" или ВыборкаДетальныеЗаписи.СерияНоменклатуры=Справочники.СерииНоменклатуры.ПустаяСсылка() тогда
			ВызватьИсключение "исключительная ситуация по GTIN "+ВыборкаДетальныеЗаписи.GTIN+" и марке "+ВыборкаДетальныеЗаписи.Марка+ " сообщите оператору";
		КонецЕсли;
		НоваяСтрока=ОбъектДокумента.ДанныеАгрегацииДокумента.Добавить();
		НоваяСтрока.SSCC=ИдентификаторУпаковки;
		НоваяСтрока.GTIN=ВыборкаДетальныеЗаписи.GTIN;
		НоваяСтрока.Марка=ВыборкаДетальныеЗаписи.Марка;
		НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныеЗаписи.СерияНоменклатуры;
		НоваяСтрока.Номенклатура=ВыборкаДетальныеЗаписи.СерияНоменклатуры.Владелец;
		Если Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти("алкДатаНачалаРозлива")<> Неопределено тогда
		НоваяСтрока.ДатаРозлива=ВыборкаДетальныеЗаписи.СерияНоменклатуры.алкДатаНачалаРозлива;
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецПроцедуры
Процедура ПерезаполнитьДанныеВРегистреСтрокиЗадач(ДанныеОбработчика)
	НаборЗаписей=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ДанныеОбработчика.КлючИнициализацииДанных);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	для Каждого стр из ДанныеОбработчика.Данные цикл
		Запись=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись,стр);
		Запись.ИдЗадачи=ДанныеОбработчика.КлючИнициализацииДанных;
		Запись.Номенклатура=итWMSСлужебныеПроцедурыИФункции.НайтиНоменклатуруПоУникальномуИД(стр.Номенклатура);
		Запись.СерияНоменклатуры= ПолучитьСериюНоменклатуры(стр.СерияНоменклатуры);	
		Запись.Количество=стр.Количество;
	КонецЦикла;
	НаборЗаписей.Записать();
	КонецПроцедуры
Процедура ПрисвоениеНовогоSSCCКонтрольнаяАгрегация(ДанныеОбработчика)
	Документ=Документы.итWMSКонтрольнаяОперацияАгрегации.ПолучитьСсылку(ДанныеОбработчика.КлючИнициализацииДанных);
	Если Документ.Пустая() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не найден документ");
		Возврат
	КонецЕсли;
	ДанныеТСД=итWMSСлужебныеПроцедурыИФункции.ПолучитьДанныеПоТСДНаТекущийМомент(ДанныеОбработчика.ТСДИД);
	Если ДанныеТСД = Неопределено тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных по ТСД");
		Возврат
	КонецЕсли;	
	Если ДанныеТСД.Состояние=Перечисления.итWMSСостоянияТСД.Отключен тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Закройте программу и авторизуйтесь заново");
		Возврат
	КонецЕсли;	
	//////////// Получение данных настроек wms по филиалу
	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам("СоответствиеФилиаловИорганизация");
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(НастройкиWMS) Тогда
		итWMSСлужебныеПроцедурыИФункции.WMSОповещениеОТиповыхОшибках(НастройкиWMS);
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки",НастройкиWMS.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	//////////////////////////////////
	Строка=НастройкиWMS.СоответствиеФилиаловИорганизация.Найти(Документ.Организация);
	Если Строка=Неопределено Тогда
		 Возврат;
	КонецЕсли;
	Филиал=Строка.Филиал;

    НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",Документ);
	БлокировкаДанных.Заблокировать();

НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.ДокументОснование.Установить(Документ);
НаборЗаписей.Отбор.ТипЗадачи.Установить(ДанныеОбработчика.ТипЗадачи);
НаборЗаписей.Прочитать();
Если НаборЗаписей.Количество()=1 и не ЗначениеЗаполнено(НаборЗаписей[0].ИдентификаторУпаковки) тогда
	Запись=НаборЗаписей[0];
	Запись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполняется;
	Запись.ДатаНачала=ТекущаяДата();
иначе
	Запись=НаборЗаписей.Добавить();
	Запись.ИдЗадачи=новый УникальныйИдентификатор;
	Запись.ДокументОснование=Документ;
	Запись.ТипЗадачи=ДанныеОбработчика.ТипЗадачи;
	Запись.ТСД=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
	Запись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполняется;
	Запись.ДатаНачала=ТекущаяДата();
КонецЕсли;
Запись.ИдентификаторУпаковки=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(Филиал,,ДанныеТСД.РаботникСклада.ФизическоеЛицо);
НаборЗаписей.Записать();
ЗафиксироватьТранзакцию();
итWMSОбработчикиРегистрации_И_Загрузки.ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика);
КонецПроцедуры

Процедура ВнесениеВнешнегоSSCC(ДанныеОбработчика)
	Документ=Документы.итWMSКонтрольнаяОперацияАгрегации.ПолучитьСсылку(ДанныеОбработчика.КлючИнициализацииДанных);
	Если Документ.Пустая() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не найден документ");
		Возврат
	КонецЕсли;
	ДанныеТСД=итWMSСлужебныеПроцедурыИФункции.ПолучитьДанныеПоТСДНаТекущийМомент(ДанныеОбработчика.ТСДИД);
	Если ДанныеТСД = Неопределено тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных по ТСД");
		Возврат
	КонецЕсли;	
	Если ДанныеТСД.Состояние=Перечисления.итWMSСостоянияТСД.Отключен тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Закройте программу и авторизуйтесь заново");
		Возврат
	КонецЕсли;	
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ВнешнийSSCC") тогда
		Возврат
	КонецЕсли;	
	Если ОбнаруженноДублированиеSSCCВРазрезеДокумента(ДанныеОбработчика.ВнешнийSSCC,Документ,ДанныеОбработчика.ТипЗадачи) тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","данный SSCC уже находится в задачах текущего документа");
		Возврат
	КонецЕсли;	

	//СтруктураХраненияДанныхНастройкиWMS=ХранилищеОбщихНастроек.Загрузить("WMSНастройки","WMSНастройки",,"WMSНастройки");
	//Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(СтруктураХраненияДанныхНастройкиWMS,"Филиал") тогда
	//	ДанныеОбработчика=СтруктураХраненияДанныхНастройкиWMS;
	//	Возврат
	//КонецЕсли;	
    НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",Документ);
	БлокировкаДанных.Заблокировать();

НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.ДокументОснование.Установить(Документ);
НаборЗаписей.Отбор.ТипЗадачи.Установить(ДанныеОбработчика.ТипЗадачи);
НаборЗаписей.Прочитать();
Если НаборЗаписей.Количество()=1 и не ЗначениеЗаполнено(НаборЗаписей[0].ИдентификаторУпаковки) тогда
	Запись=НаборЗаписей[0];
	Запись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполняется;
	Запись.ДатаНачала=ТекущаяДата();
иначе
	Запись=НаборЗаписей.Добавить();
	Запись.ИдЗадачи=новый УникальныйИдентификатор;
	Запись.ДокументОснование=Документ;
	Запись.ТипЗадачи=ДанныеОбработчика.ТипЗадачи;
	Запись.ТСД=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
	Запись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполняется;
	Запись.ДатаНачала=ТекущаяДата();
КонецЕсли;
Запись.ИдентификаторУпаковки=ДанныеОбработчика.ВнешнийSSCC;
НаборЗаписей.Записать();
ЗафиксироватьТранзакцию();
итWMSОбработчикиРегистрации_И_Загрузки.ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика);

КонецПроцедуры

Процедура ПолучениеДанныхОтдельнойМарки(ДанныеОбработчика)
    Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ШтрихКодМарки") тогда
		Возврат
	КонецЕсли;	
	Документ=Документы.итWMSКонтрольнаяОперацияАгрегации.ПолучитьСсылку(ДанныеОбработчика.КлючИнициализацииДанных);
	Если Документ.Пустая() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не найден документ");
		Возврат
	КонецЕсли;
	ДанныеТСД=итWMSСлужебныеПроцедурыИФункции.ПолучитьДанныеПоТСДНаТекущийМомент(ДанныеОбработчика.ТСДИД);
	Если ДанныеТСД = Неопределено тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных по ТСД");
		Возврат
	КонецЕсли;	
	Если ДанныеТСД.Состояние=Перечисления.итWMSСостоянияТСД.Отключен тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Закройте программу и авторизуйтесь заново");
		Возврат
	КонецЕсли;	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	алкХранилищеАкцизныхМарокСрезПоследних.Марка КАК Марка,
		|	алкХранилищеАкцизныхМарокСрезПоследних.Упаковка КАК Упаковка,
		|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ КАК СправкаБ,
		|	алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия КАК ОтметкаВыбытия
		|ПОМЕСТИТЬ ПоискМарки
		|ИЗ
		|	РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
		|ГДЕ
		|	алкХранилищеАкцизныхМарокСрезПоследних.Марка.ЗначениеШтрихКода = &Марка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоискМарки.Марка КАК Марка,
		|	ПоискМарки.Упаковка КАК Упаковка,
		|	ПоискМарки.СправкаБ КАК СправкаБ,
		|	ПоискМарки.ОтметкаВыбытия КАК ОтметкаВыбытия,
		|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры КАК СерияНоменклатуры,
		|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец КАК Номенклатура
		|ПОМЕСТИТЬ МаркаСерияНоменклатура
		|ИЗ
		|	ПоискМарки КАК ПоискМарки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
		|		ПО ПоискМарки.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Номенклатура КАК Номенклатура,
		|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Характиристика КАК Характиристика,
		|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.ДатаРозлива КАК ДатаРозлива,
		|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.СерияНоменклатуры КАК СерияНоменклатуры,
		|	СУММА(итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Количество) КАК Количество
		|ПОМЕСТИТЬ ДанныеДляАгрегацииДокумента
		|ИЗ
		|	Документ.итWMSКонтрольнаяОперацияАгрегации.ДанныеДляАгрегацииДокумента КАК итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента
		|ГДЕ
		|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Номенклатура,
		|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Характиристика,
		|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.ДатаРозлива,
		|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.СерияНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаркаСерияНоменклатура.Марка.ЗначениеШтрихКода КАК Марка,
		|	МаркаСерияНоменклатура.Упаковка КАК Упаковка,
		|	МаркаСерияНоменклатура.СправкаБ КАК СправкаБ,
		|	МаркаСерияНоменклатура.ОтметкаВыбытия КАК ОтметкаВыбытия,
		|	МаркаСерияНоменклатура.СерияНоменклатуры КАК СерияНоменклатуры,
		|	МаркаСерияНоменклатура.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ ДанныеДляАгрегацииДокумента.СерияНоменклатуры ЕСТЬ NULL
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЕстьВДокументе
		|ИЗ
		|	МаркаСерияНоменклатура КАК МаркаСерияНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДляАгрегацииДокумента КАК ДанныеДляАгрегацииДокумента
		|		ПО МаркаСерияНоменклатура.СерияНоменклатуры = ДанныеДляАгрегацииДокумента.СерияНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	МаркаСерияНоменклатура.Упаковка,
		|	МаркаСерияНоменклатура.СправкаБ,
		|	МаркаСерияНоменклатура.ОтметкаВыбытия,
		|	МаркаСерияНоменклатура.СерияНоменклатуры,
		|	МаркаСерияНоменклатура.Номенклатура,
		|	МаркаСерияНоменклатура.Марка.ЗначениеШтрихКода";
	
	Запрос.УстановитьПараметр("Марка", ДанныеОбработчика.ШтрихКодМарки);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных по штрих-коду");
		Возврат
	КонецЕсли;	

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Если ВыборкаДетальныеЗаписи.ОтметкаВыбытия тогда
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки","Марка найдена, но по данным базы, она уже вышла из оборота");
			Возврат
		КонецЕсли;
		Если ВыборкаДетальныеЗаписи.ЕстьВДокументе=0 тогда
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки","Марка найдена,но по данным документа, в агрегации ее быть не должно");
			Возврат
		КонецЕсли;
       СтруктудаДанныеМарки=новый Структура;
	   СтруктудаДанныеМарки.Вставить("Марка",ВыборкаДетальныеЗаписи.Марка);
	   СтруктудаДанныеМарки.Вставить("Упаковка",ВыборкаДетальныеЗаписи.Упаковка);
	   СтруктудаДанныеМарки.Вставить("СерияНоменклатуры",ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор());
	   СтруктудаДанныеМарки.Вставить("СерияНоменклатурыПредставление",ВыборкаДетальныеЗаписи.СерияНоменклатуры.Наименование);
	   СтруктудаДанныеМарки.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
	   СтруктудаДанныеМарки.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.Номенклатура.Наименование);
	   ДанныеОбработчика.Вставить("ДанныеМарки",СтруктудаДанныеМарки);
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецПроцедуры
Функция ОбнаруженноДублированиеSSCCВРазрезеДокумента(SSCC,Документ,ТипЗадачи)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSЗадачиТСД.ИдЗадачи
		|ИЗ
		|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|ГДЕ
		|	итWMSЗадачиТСД.ИдентификаторУпаковки = &ИдентификаторУпаковки
		|	И итWMSЗадачиТСД.ДокументОснование = &ДокументОснование
		|	И итWMSЗадачиТСД.ТипЗадачи = &ТипЗадачи";
	
	Запрос.УстановитьПараметр("ИдентификаторУпаковки", СокрЛП(SSCC));
	Запрос.УстановитьПараметр("ДокументОснование",Документ);
	Запрос.УстановитьПараметр("ТипЗадачи",ТипЗадачи);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

Функция ПолучитьСериюНоменклатуры(ГУИД)
	Возврат Справочники.СерииНоменклатуры.ПолучитьСсылку(ГУИД);
КонецФункции
Процедура  ПолучитьБазуМарокНаборкиАссинхронно(ДанныеОбработчика)
Документ=Документы.итWMSКонтрольнаяОперацияАгрегации.ПолучитьСсылку(ДанныеОбработчика.КлючИнициализацииДанных);
Если Документ.Пустая() тогда
ДанныеОбработчика.Вставить("Статус",404);
ДанныеОбработчика.Вставить("ОписаниеОшибки","Пустой ключ");
Возврат;
КонецЕсли;
Если ТипЗнч(Документ.итОснование)<>Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
	ДанныеОбработчика.Вставить("БазаМарокНаборки",новый Массив);
	Возврат
КонецЕсли;
Наборка=Документ.итОснование.итОснование;
Если ТипЗнч(Наборка)<>Тип("ДокументСсылка.итWMSНаборка") Тогда 
	ДанныеОбработчика.Вставить("БазаМарокНаборки",новый Массив);
	Возврат
КонецЕсли;
СтруктураДанных=новый Структура;
СтруктураДанных.Вставить("Наборка",Наборка);
СтруктураДанных.Вставить("КлючДанных",новый УникальныйИдентификатор());
МассивПараметров=новый Массив;
МассивПараметров.Добавить(СтруктураДанных);
ФоновыеЗадания.Выполнить("итWMSОбработчикДанныхКонтрольнойАгрегации.ЗаписатьБазуМарокНаборкиАссинхронно",МассивПараметров,СтруктураДанных.КлючДанных,"КОАБазаМарокНаборки");
ДанныеОбработчика.Вставить("КлючДанных",СтруктураДанных.КлючДанных);
КонецПроцедуры

Процедура ЗаписатьБазуМарокНаборкиАссинхронно(Параметры) Экспорт 
	 РезультатЗапроса = ПолучитьБазуМарокНаборкиЗапрос(Параметры.Наборка);

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	БазаМарокНаборки=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураДанных= СформироватьСтруктуруСтрокиДляПередачиНаТСД(ВыборкаДетальныеЗаписи);
		БазаМарокНаборки.Добавить(СтруктураДанных);
	КонецЦикла;
	МенеджерЗаписи=РегистрыСведений.ит_WMS_ХранилищеДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КлючХраненияДанных=Параметры.КлючДанных;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.КлючХраненияДанных=Параметры.КлючДанных;
    МенеджерЗаписи.ХранилищеЗначений=новый ХранилищеЗначения(БазаМарокНаборки);
	МенеджерЗаписи.Записать();
КонецПроцедуры
Процедура ПолучениеАссинхронноЗаписанныхДанных(ДанныеОбработчика)
	МассивЗаданий=ФоновыеЗадания.ПолучитьФоновыеЗадания(новый Структура("Ключ",ДанныеОбработчика.КлючДанных));
	Для Каждого Задания из МассивЗаданий цикл
		Если Задания.Состояние=СостояниеФоновогоЗадания.Активно тогда
			ДанныеОбработчика.Вставить("Завершён",Ложь);
			Возврат;
		КонецЕсли;	
	КонецЦикла;
	ДанныеОбработчика.Вставить("Завершён",Истина);
    МенеджерЗаписи=РегистрыСведений.ит_WMS_ХранилищеДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КлючХраненияДанных=ДанныеОбработчика.КлючДанных;
	МенеджерЗаписи.Прочитать();
    БазаМарокНаборки= МенеджерЗаписи.ХранилищеЗначений.Получить();
	Если ТипЗнч(БазаМарокНаборки)<>Тип("Массив") Тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных марок");
		Возврат;
    КонецЕсли;
	ДанныеОбработчика.Вставить("БазаМарокНаборки",БазаМарокНаборки);
    МенеджерЗаписи.Удалить();
	КонецПроцедуры
Процедура  ПолучитьБазуМарокНаборки(ДанныеОбработчика)
Документ=Документы.итWMSКонтрольнаяОперацияАгрегации.ПолучитьСсылку(ДанныеОбработчика.КлючИнициализацииДанных);
Если Документ.Пустая() тогда
ДанныеОбработчика.Вставить("Статус",404);
ДанныеОбработчика.Вставить("ОписаниеОшибки","Пустой ключ");
Возврат;
КонецЕсли;
Если ТипЗнч(Документ.итОснование)<>Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
	ДанныеОбработчика.Вставить("БазаМарокНаборки",новый Массив);
	Возврат
КонецЕсли;
Наборка=Документ.итОснование.итОснование;
Если ТипЗнч(Наборка)<>Тип("ДокументСсылка.итWMSНаборка") Тогда 
	ДанныеОбработчика.Вставить("БазаМарокНаборки",новый Массив);
	Возврат
КонецЕсли;


	РезультатЗапроса = ПолучитьБазуМарокНаборкиЗапрос(Наборка);

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	БазаМарокНаборки=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураДанных= СформироватьСтруктуруСтрокиДляПередачиНаТСД(ВыборкаДетальныеЗаписи);
		БазаМарокНаборки.Добавить(СтруктураДанных);
	КонецЦикла;
	
    ДанныеОбработчика.Вставить("БазаМарокНаборки",БазаМарокНаборки);

КонецПроцедуры

Функция ПолучитьБазуМарокНаборкиЗапрос(Знач Наборка)
	
	Перем Запрос, РезультатЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковки
	|ПОМЕСТИТЬ ИдентификаторыУпаковокНаборки
	|ИЗ
	|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
	|ГДЕ
	|	итWMSНаборкаТовары.ФиксацияСтроки
	|	И итWMSНаборкаТовары.СостояниеЗадачи <> ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Отменена)
	|	И итWMSНаборкаТовары.Ссылка.Проведен
	|	И итWMSНаборкаТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	алкХранилищеУпаковокСрезПоследних.Упаковка КАК GTIN,
	|	алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки КАК SSCC
	|ПОМЕСТИТЬ SSCCGTIN
	|ИЗ
	|	ИдентификаторыУпаковокНаборки КАК ИдентификаторыУпаковокНаборки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеУпаковок.СрезПоследних(, ) КАК алкХранилищеУпаковокСрезПоследних
	|		ПО ИдентификаторыУпаковокНаборки.ИдентификаторУпаковки = алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	SSCCGTIN.GTIN КАК GTIN,
	|	SSCCGTIN.SSCC КАК SSCC,
	|	алкХранилищеАкцизныхМарокСрезПоследних.Марка КАК Марка,
	|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ КАК СправкаБ
	|ПОМЕСТИТЬ ДанныеМарок
	|ИЗ
	|	SSCCGTIN КАК SSCCGTIN
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних(, ) КАК алкХранилищеАкцизныхМарокСрезПоследних
	|		ПО SSCCGTIN.GTIN = алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
	|			И (алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия = ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеМарок.GTIN КАК GTIN,
	|	ДанныеМарок.SSCC КАК SSCC,
	|	ДанныеМарок.Марка КАК Марка,
	|	ДанныеМарок.СправкаБ КАК СправкаБ,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры КАК СерияНоменклатуры,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец КАК Номенклатура,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.ДатаПроизводства КАК ДатаРозлива
	|ПОМЕСТИТЬ ДанныеМарокИСерий
	|ИЗ
	|	ДанныеМарок КАК ДанныеМарок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
	|		ПО ДанныеМарок.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеМарокИСерий.GTIN КАК GTIN,
	|	ДанныеМарокИСерий.SSCC КАК SSCC,
	|	ДанныеМарокИСерий.Марка.ЗначениеШтрихКода КАК Марка,
	|	ДанныеМарокИСерий.СправкаБ КАК СправкаБ,
	|	ДанныеМарокИСерий.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеМарокИСерий.Номенклатура КАК Номенклатура,
	|	ДанныеМарокИСерий.ДатаРозлива КАК ДатаРозлива,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(итWMS_МаркиВОбработке.Марка, 0) = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК МаркаВОбработке
	|ИЗ
	|	ДанныеМарокИСерий КАК ДанныеМарокИСерий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMS_МаркиВОбработке КАК итWMS_МаркиВОбработке
	|		ПО ДанныеМарокИСерий.Марка = итWMS_МаркиВОбработке.Марка
	|ГДЕ
	|	НЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(итWMS_МаркиВОбработке.Марка, 0) = 0
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ";
	
	Запрос.УстановитьПараметр("Ссылка",Наборка);	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;

КонецФункции 

Процедура  ПолучитьБазуМарокНаборкиЦикл(ДанныеОбработчика)
	Документ=Документы.итWMSКонтрольнаяОперацияАгрегации.ПолучитьСсылку(ДанныеОбработчика.КлючИнициализацииДанных);
	Если Документ.Пустая() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Пустой ключ");
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Документ.итОснование)<>Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		ДанныеОбработчика.Вставить("БазаМарокНаборки",новый Массив);
		Возврат
	КонецЕсли;
	Наборка=Документ.итОснование.итОснование;
	Если ТипЗнч(Наборка)<>Тип("ДокументСсылка.итWMSНаборка") Тогда 
		ДанныеОбработчика.Вставить("БазаМарокНаборки",новый Массив);
		Возврат
	КонецЕсли;
	МассивSSCCПолучателей=ПолучитьSSCCПолучателиНаборки(Наборка);
	МассивБуфер=новый Массив;
	РазбитеSSCCНаПорции(МассивБуфер,МассивSSCCПолучателей);
	БазаМарокНаборки=новый Массив;
	
	Для Каждого стр из МассивБуфер Цикл 
		РезультатЗапроса = ПолучитьДанныеМарокSSCCПолучателей(стр);
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураДанных= СформироватьСтруктуруСтрокиДляПередачиНаТСД(ВыборкаДетальныеЗаписи);
			БазаМарокНаборки.Добавить(СтруктураДанных);
		КонецЦикла;
	КонецЦикла;	
	ДанныеОбработчика.Вставить("БазаМарокНаборки",БазаМарокНаборки);
КонецПроцедуры
Процедура РазбитеSSCCНаПорции( МассивБуфер,  ОбщийМассивSSCC)
	
	Перем ВсегоSSCC, МассивSCCКИсполнению, ОбщийСчетчик, стр, Счетчик;
	
	Счетчик=0;
	ОбщийСчетчик=0;
	ВсегоSSCC=ОбщийМассивSSCC.Количество();
	МассивSCCКИсполнению=новый Массив;
	Для Каждого стр из ОбщийМассивSSCC Цикл
		ОбщийСчетчик=ОбщийСчетчик+1;
		Счетчик=Счетчик+1;
		Если Счетчик=5 Тогда 
			МассивБуфер.Добавить(МассивSCCКИсполнению);
			МассивSCCКИсполнению=новый Массив;
			Счетчик=0;
		КонецЕсли;
		МассивSCCКИсполнению.Добавить(стр);
		Если ОбщийСчетчик=ВсегоSSCC и Счетчик<5 Тогда 
			МассивБуфер.Добавить(МассивSCCКИсполнению);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьSSCCПолучателиНаборки(Наборка)	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковки
		|ИЗ
		|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
		|ГДЕ
		|	итWMSНаборкаТовары.ФиксацияСтроки
		|	И итWMSНаборкаТовары.СостояниеЗадачи <> ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Отменена)
		|	И итWMSНаборкаТовары.Ссылка.Проведен
		|	И итWMSНаборкаТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель";
	
	Запрос.УстановитьПараметр("Ссылка", Наборка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("ИдентификаторУпаковки");
		
	
	КонецФункции

Функция ПолучитьДанныеМарокSSCCПолучателей(МассивSSCC)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	алкХранилищеУпаковокСрезПоследних.Упаковка КАК GTIN,
		|	алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки КАК SSCC
		|ПОМЕСТИТЬ SSCCGTIN
		|ИЗ
		|	РегистрСведений.алкХранилищеУпаковок.СрезПоследних(, ИерархияУпаковки В (&МассивSSCC)) КАК алкХранилищеУпаковокСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	SSCCGTIN.GTIN КАК GTIN,
		|	SSCCGTIN.SSCC КАК SSCC,
		|	алкХранилищеАкцизныхМарокСрезПоследних.Марка КАК Марка,
		|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ КАК СправкаБ
		|ПОМЕСТИТЬ ДанныеМарок
		|ИЗ
		|	SSCCGTIN КАК SSCCGTIN
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних(, ) КАК алкХранилищеАкцизныхМарокСрезПоследних
		|		ПО SSCCGTIN.GTIN = алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
		|			И (алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия = ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеМарок.GTIN КАК GTIN,
		|	ДанныеМарок.SSCC КАК SSCC,
		|	ДанныеМарок.Марка КАК Марка,
		|	ДанныеМарок.СправкаБ КАК СправкаБ,
		|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры КАК СерияНоменклатуры,
		|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец КАК Номенклатура,
		|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.ДатаПроизводства КАК ДатаРозлива
		|ПОМЕСТИТЬ ДанныеМарокИСерий
		|ИЗ
		|	ДанныеМарок КАК ДанныеМарок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
		|		ПО ДанныеМарок.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеМарокИСерий.GTIN КАК GTIN,
		|	ДанныеМарокИСерий.SSCC КАК SSCC,
		|	ДанныеМарокИСерий.Марка.ЗначениеШтрихКода КАК Марка,
		|	ДанныеМарокИСерий.СправкаБ КАК СправкаБ,
		|	ДанныеМарокИСерий.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ДанныеМарокИСерий.Номенклатура КАК Номенклатура,
		|	ДанныеМарокИСерий.ДатаРозлива КАК ДатаРозлива,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(итWMS_МаркиВОбработке.Марка, 0) = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК МаркаВОбработке
		|ИЗ
		|	ДанныеМарокИСерий КАК ДанныеМарокИСерий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMS_МаркиВОбработке КАК итWMS_МаркиВОбработке
		|		ПО ДанныеМарокИСерий.Марка = итWMS_МаркиВОбработке.Марка
		|ГДЕ
		|	НЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(итWMS_МаркиВОбработке.Марка, 0) = 0
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ";
	
	Запрос.УстановитьПараметр("МассивSSCC", МассивSSCC);
	
	РезультатЗапроса = Запрос.Выполнить();
	
    Возврат РезультатЗапроса;
	
		КонецФункции
Функция СформироватьСтруктуруСтрокиДляПередачиНаТСД(ВыборкаДетальныеЗаписи)
	Структура=новый Структура;
	Структура.Вставить("SSCC",ВыборкаДетальныеЗаписи.SSCC);
	Структура.Вставить("GTIN",ВыборкаДетальныеЗаписи.GTIN);
	Структура.Вставить("Марка",ВыборкаДетальныеЗаписи.Марка);
	Структура.Вставить("СерияНоменклатуры",ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор());
	Структура.Вставить("СерияНоменклатурыПредставление", ВыборкаДетальныеЗаписи.СерияНоменклатуры.Наименование);
	Структура.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
	Структура.Вставить("НоменклатураПредставление", ВыборкаДетальныеЗаписи.Номенклатура.Наименование);
	Структура.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
	Возврат Структура;
	КонецФункции
//Функция ПолучитьНастройкиИзХранилища() Экспорт 
//	Возврат ХранилищеОбщихНастроек.Загрузить("WMSНастройки","WMSНастройки",,"WMSНастройки");
//КонецФункции
