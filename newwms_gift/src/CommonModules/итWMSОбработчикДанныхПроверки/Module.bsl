Процедура ЦентральныйОбработчикДанныхПроверки(ДанныеОбработчика)Экспорт 
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипОбработкиДанных") тогда
		Возврат
	КонецЕсли;
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючИнициализацииДанных") тогда
		Возврат
	КонецЕсли;	
	
	Если  ДанныеОбработчика.ТипОбработкиДанных="ВнесениеИзмененийВДокумент" тогда
		
		Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"СостояниеИнициализации")   тогда
			Возврат
		КонецЕсли;	
		////////////Транзакция фиксируется псоле инициализации задачи
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		///////
		ВнестиИзмененияВДокумент(ДанныеОбработчика);
		итWMSОбработчикиРегистрации_И_Загрузки.ИнициализацияДанныхНаСервере(ДанныеОбработчика);
		Если ДанныеОбработчика.Свойство("Статус") тогда
			Если ДанныеОбработчика.Статус=404 тогда
				Возврат
			КонецЕсли;
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	Если  ДанныеОбработчика.ТипОбработкиДанных="ЗаписатьДанныеТСД" тогда
		
		Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"СостояниеИнициализации")   тогда
			Возврат
		КонецЕсли;	
		////////////Транзакция фиксируется псоле инициализации задачи
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		///////
		ЗаписьДанныхТСД(ДанныеОбработчика);
		итWMSОбработчикиРегистрации_И_Загрузки.ИнициализацияДанныхНаСервере(ДанныеОбработчика);
		Если ДанныеОбработчика.Свойство("Статус") тогда
			Если ДанныеОбработчика.Статус=404 тогда
				Возврат
			КонецЕсли;
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	Если  ДанныеОбработчика.ТипОбработкиДанных="ОтказОтЗадачТСД"  Тогда
		////////////Транзакция фиксируется псоле инициализации задачи
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		///////
		ИнициализацияОтменыЗадачПроверкиТСД(ДанныеОбработчика);
		Если ДанныеОбработчика.Свойство("Статус") тогда
			Если ДанныеОбработчика.Статус=404 тогда
				Возврат
			КонецЕсли;
		КонецЕсли;
		итWMSОбработчикиРегистрации_И_Загрузки.ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика);
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	Если  ДанныеОбработчика.ТипОбработкиДанных="ФиксацияЗадачПроверки"  Тогда
		////////////Транзакция фиксируется псоле инициализации задачи
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		///////
		ФиксацияЗадачПроверки(ДанныеОбработчика);
		Если ДанныеОбработчика.Свойство("Статус") тогда
			Если ДанныеОбработчика.Статус=404 тогда
				Возврат
			КонецЕсли;
		КонецЕсли;	
		итWMSОбработчикиРегистрации_И_Загрузки.ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика);
		ЗафиксироватьТранзакцию();
	КонецЕсли;



КонецПроцедуры
Процедура ФиксацияЗадачПроверки(ДанныеОбработчика)
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"МассивИдЗадач")   тогда
		Возврат
	КонецЕсли;
	СтруктураДанных=новый Структура;
	СтруктураДанных.Вставить("ФиксацияЗадачи",Истина);
	СтруктураДанных.Вставить("ТСДИД",ДанныеОбработчика.ТСДИД);
	Для Каждого Задача из ДанныеОбработчика.МассивИдЗадач Цикл 
		СтруктураДанных.Вставить("Инициализация",Ложь);
		СтруктураДанных.Вставить("КлючИнициализацииДанных",Задача);
		ДанныеПоЗадаче=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(Задача);
		СтруктураДанных.Вставить("СостояниеИнициализации",ДанныеПоЗадаче.Состояние);
		итWMSОбработчикиРегистрации_И_Загрузки.ИнициализацияДанныхЗадачи(СтруктураДанных);   
		Если не СтруктураДанных.Инициализация Тогда 
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки","задача "+Строка(Задача)+" не обработана!");
			Возврат  
		КонецЕсли;
	КонецЦикла;
    ДанныеОбработчика.Вставить("Инициализация",Истина);
	КонецПроцедуры
Процедура ИнициализацияОтменыЗадачПроверкиТСД(ДанныеОбработчика)
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"МассивИдЗадач")   тогда
		Возврат
	КонецЕсли;
	СтруктураОтказа=новый Структура;
	СтруктураОтказа.Вставить("ФиксацияЗадачи",Ложь);
	СтруктураОтказа.Вставить("СостояниеИнициализации",Перечисления.итWMSСостоянияЗадачТСД.КВыполнению);
	СтруктураОтказа.Вставить("ТСДИД",ДанныеОбработчика.ТСДИД);
	Для Каждого Задача из ДанныеОбработчика.МассивИдЗадач Цикл 
		СтруктураОтказа.Вставить("Инициализация",Ложь);
		СтруктураОтказа.Вставить("КлючИнициализацииДанных",Задача);
		ДанныеПоЗадаче=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(Задача);
		Если не итWMSСлужебныеПроцедурыИФункции.ПроверкаНаВозможностьИзменитьЗадачу(ДанныеОбработчика,новый Структура("ТСДИД,ИдЗадачи",ДанныеОбработчика.ТСДИД,ДанныеПоЗадаче.ИдЗадачи),ДанныеПоЗадаче) Тогда 
			Возврат
		КонецЕсли;
		ОчиститьДанныеМарок(ДанныеПоЗадаче.ДокументОснование,Задача);	
		итWMSОбработчикиРегистрации_И_Загрузки.ИнициализацияДанныхЗадачиОтказ(СтруктураОтказа);   
		Если не СтруктураОтказа.Инициализация Тогда 
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки","задача "+Строка(Задача)+" не обработана!");
			Возврат  
		КонецЕсли;
	КонецЦикла;
	ДанныеОбработчика.Вставить("Инициализация",Истина);
	КонецПроцедуры

Процедура  ВнестиИзмененияВДокумент(ДанныеОбработчика)
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ДанныеЗадачи") тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КонтрольБутылки") тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КонтрольКороба") тогда
		Возврат
	КонецЕсли;
    ДанныеЗадачи=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
    Если ДанныеЗадачи=Неопределено тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не найденно данных по ид задачи");
		Возврат
	КонецЕсли;
    СостояниеЗадачи=ДанныеОбработчика.СостояниеИнициализации;
  	ОбъектДокумента=ДанныеЗадачи.ДокументОснование.ПолучитьОбъект();
	для Каждого стр из ДанныеОбработчика.ДанныеЗадачи цикл
		СтрокиКИзменению=ОбъектДокумента.Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",стр.ИдСтроки));
		Для Каждого СтрокаИзменения из СтрокиКИзменению Цикл 
			СтрокаИзменения.СостояниеЗадачи=СостояниеЗадачи;
			СтрокаИзменения.КоличествоФакт=стр.КоличествоФакт;
			СтрокаИзменения.Комментарий=ДанныеОбработчика.Комментарий;
			СтрокаИзменения.КонтрольБутылки=ДанныеОбработчика.КонтрольБутылки;
			СтрокаИзменения.КонтрольКороба=ДанныеОбработчика.КонтрольКороба;
        КонецЦикла;
	КонецЦикла;
	ОбъектДокумента.Записать();
	Если ДанныеОбработчика.Свойство("ДанныеМарок") Тогда 
		ЗаписатьДанныеМарок(ОбъектДокумента.Ссылка,ДанныеОбработчика.КлючИнициализацииДанных,ДанныеОбработчика.ДанныеМарок)
    КонецЕсли;
	КонецПроцедуры
	
	
Процедура ЗаписьДанныхТСД(ДанныеОбработчика)
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ДанныеЗадачи") тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КонтрольБутылки") тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КонтрольКороба") тогда
		Возврат
	КонецЕсли;

	ДанныеПоЗадаче=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
	Если не итWMSСлужебныеПроцедурыИФункции.ПроверкаНаВозможностьИзменитьЗадачу(ДанныеОбработчика,новый Структура("ТСДИД,ИдЗадачи",ДанныеОбработчика.ТСДИД,ДанныеПоЗадаче.ИдЗадачи),ДанныеПоЗадаче) Тогда 
		Возврат
	КонецЕсли;
	Если ДанныеПоЗадаче=Неопределено тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не найденно данных по ид задачи");
		Возврат
	КонецЕсли;
	
	для Каждого стр из ДанныеОбработчика.ДанныеЗадачи цикл
		МенеджерЗаписи=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдЗадачи=ДанныеОбработчика.КлючИнициализацииДанных;
		МенеджерЗаписи.идСтроки= стр.ИдСтроки;
		МенеджерЗаписи.Прочитать();
		СтруктураХраненияДанных=новый Структура;
		СтруктураХраненияДанных.Вставить("СостояниеЗадачи",ДанныеОбработчика.СостояниеИнициализации);
		СтруктураХраненияДанных.Вставить("КоличествоФакт",стр.КоличествоФакт);
        СтруктураХраненияДанных.Вставить("Комментарий",ДанныеОбработчика.Комментарий);
        СтруктураХраненияДанных.Вставить("КонтрольБутылки",ДанныеОбработчика.КонтрольБутылки);
        СтруктураХраненияДанных.Вставить("КонтрольКороба",ДанныеОбработчика.КонтрольКороба);
		Если ДанныеОбработчика.Свойство("ПричинаОтмены") Тогда 
			 СтруктураХраненияДанных.Вставить("ПричинаОтмены",ДанныеОбработчика.ПричинаОтмены);
		КонецЕсли;
        МенеджерЗаписи.ДанныеДокументаТСД=новый ХранилищеЗначения(СтруктураХраненияДанных);
		МенеджерЗаписи.Записать();
	КонецЦикла;
	Если  ДанныеОбработчика.СостояниеИнициализации=Перечисления.итWMSСостоянияЗадачТСД.Отменена Тогда 
		ОчиститьДанныеМарок(ДанныеПоЗадаче.ДокументОснование,ДанныеОбработчика.КлючИнициализацииДанных);	
	Иначе 
		Если ДанныеОбработчика.Свойство("ДанныеМарок") Тогда 
			ЗаписатьДанныеМарок(ДанныеПоЗадаче.ДокументОснование,ДанныеОбработчика.КлючИнициализацииДанных,ДанныеОбработчика.ДанныеМарок)
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры
	
Процедура ВнестиИзмененияВДокументПроверки(Документ) Экспорт 
	РезультатЗапроса=итWMSСлужебныеПроцедурыИФункции.ПолучитьРезультатЗапросаИзмененияДанныхЗадачИСтрокТСД(Документ);
	Выборка=РезультатЗапроса.Выбрать();
	ОбъектДокумента=Документ.ПолучитьОбъект();
	Отменена=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
	Пока Выборка.Следующий() Цикл 
		ДанныеДокументаТСДСтрока= Выборка.ДанныеДокументаТСДСтрока.Получить();
		СтрокиКИзменению=ОбъектДокумента.Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",Выборка.ИдСтроки));
		Для Каждого СтрокаИзменения из СтрокиКИзменению Цикл
			Если СтрокаИзменения.ФиксацияСтроки Тогда    
				Продолжить;
			КонецЕсли;	
			СтрокаИзменения.СостояниеЗадачи=Выборка.Состояние;
			Если ТипЗнч(ДанныеДокументаТСДСтрока)<> Тип("Структура") Тогда 
				Продолжить;
			КонецЕсли;	
			СтрокаИзменения.КоличествоФакт=ДанныеДокументаТСДСтрока.КоличествоФакт;
			СтрокаИзменения.Комментарий=ДанныеДокументаТСДСтрока.Комментарий;
			СтрокаИзменения.КонтрольБутылки=ДанныеДокументаТСДСтрока.КонтрольБутылки;
			СтрокаИзменения.КонтрольКороба=ДанныеДокументаТСДСтрока.КонтрольКороба;
			Если СтрокаИзменения.СостояниеЗадачи=Отменена Тогда 
				Если ДанныеДокументаТСДСтрока.Свойство("ПричинаОтмены") Тогда 
					СтрокаИзменения.ПричинаОтменыЗадачи=ДанныеДокументаТСДСтрока.ПричинаОтмены;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	ОбъектДокумента.ОбменДанными.Загрузка=Истина;
	ОбъектДокумента.Записать();

	КонецПроцедуры
	
Процедура ОчиститьДанныеМарок(Ссылка,ИдЗадачи)	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMS_МаркиВОбработке.Марка,
		|	итWMS_МаркиВОбработке.ДокументОснование,
		|	итWMS_МаркиВОбработке.Ключ
		|ИЗ
		|	РегистрСведений.итWMS_МаркиВОбработке КАК итWMS_МаркиВОбработке
		|ГДЕ
		|	итWMS_МаркиВОбработке.ДокументОснование = &ДокументОснование
		|	И итWMS_МаркиВОбработке.Ключ = &Ключ";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей=РегистрыСведений.итWMS_МаркиВОбработке.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Марка.Установить(ВыборкаДетальныеЗаписи.Марка);
		НаборЗаписей.Отбор.ДокументОснование.Установить(ВыборкаДетальныеЗаписи.ДокументОснование);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
		
КонецПроцедуры
	
Процедура ЗаписатьДанныеМарок(Ссылка,ИдЗадачи,ДанныеМарок)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMS_МаркиВОбработке.Марка,
	|	итWMS_МаркиВОбработке.ДокументОснование
	|ИЗ
	|	РегистрСведений.итWMS_МаркиВОбработке КАК итWMS_МаркиВОбработке
	|ГДЕ
	|	итWMS_МаркиВОбработке.Ключ = &Ключ";
	
	Запрос.УстановитьПараметр("Ключ", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей=РегистрыСведений.итWMS_МаркиВОбработке.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Марка.Установить(ВыборкаДетальныеЗаписи.Марка);
		НаборЗаписей.Отбор.ДокументОснование.Установить(ВыборкаДетальныеЗаписи.ДокументОснование);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Для Каждого Стр из ДанныеМарок цикл
		Марка=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьМаркуСБлокировкой(Стр.Марка);
		НаборЗаписей=РегистрыСведений.итWMS_МаркиВОбработке.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Марка.Установить(Марка);
		НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
        НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
        НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.Марка=Марка;
		НоваяЗапись.ДокументОснование=Ссылка;
		НоваяЗапись.Ключ=ИдЗадачи;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
КонецПроцедуры