#Область СлужебныеФункцииИПроцедуры
// Функция - Найти создать терминал сбора данных
// возвращает ссылку на ТСД с идентификатором ТСДИД, если такой не найден то создает его.
// Параметры:
//  ДанныеПоТСД	- Структура,Строка - структура с информацией о ТСД 
//  
// Возвращаемое значение:
// СправочникСсылка.итWMSСправочникТСД  - Ссылка на ТСД.
//
Функция НайтиСоздатьТерминалСбораДанных(ДанныеПоТСД) Экспорт 
	перем ТСДИД,Модель,АТС,НомерТСД,ВерсияОС;
	Если ТипЗнч(ДанныеПоТСД)=Тип("Структура") Тогда 
		ДанныеПоТСД.Свойство("ТСДИД",ТСДИД);
		ДанныеПоТСД.Свойство("ВерсияОС",ВерсияОС);
		ДанныеПоТСД.Свойство("НомерТСД",НомерТСД);
		ДанныеПоТСД.Свойство("АТС",АТС);
		ДанныеПоТСД.Свойство("Модель",Модель);
		ТСДИД=?(ТСДИД=Неопределено,"",ТСДИД);
		ВерсияОС=?(ВерсияОС=Неопределено,"",ВерсияОС);
		НомерТСД=?(НомерТСД=Неопределено,"",НомерТСД);
		АТС=?(АТС=Неопределено,"",АТС);
		Модель=?(Модель=Неопределено,"",Модель);
	иначе
		ТСДИД=ДанныеПоТСД;
		ВерсияОС="";
		НомерТСД="";
		АТС="";
		Модель=""
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSСправочникТСД.Ссылка
	|ИЗ
	|	Справочник.итWMSСправочникТСД КАК итWMSСправочникТСД
	|ГДЕ
	|	итWMSСправочникТСД.ТСДИД = &ТСДИД";
	
	Запрос.УстановитьПараметр("ТСДИД", СокрЛП(ТСДИД));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
	Если  НомерТСД <> "" Тогда	
		Если Найти(ВыборкаДетальныеЗаписи.Ссылка.Наименование,Строка(НомерТСД)) = 0 Тогда 
			ОбъектИзменения=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектИзменения.Наименование=Модель+" №"+Строка(НомерТСД);
			ОбъектИзменения.Записать();
		КонецЕсли;
	КонецЕсли;
	Если АТС<>"" Тогда 
		Если ВыборкаДетальныеЗаписи.Ссылка.НомерАТС <> АТС Тогда 
			ОбъектИзменения=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектИзменения.НомерАТС=АТС;
			ОбъектИзменения.Записать();
		КонецЕсли;
	КонецЕсли;	
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	иначе
		НовыйЭлементСправочника = Справочники.итWMSСправочникТСД.СоздатьЭлемент();
		НовыйЭлементСправочника.ВерсияОС=ВерсияОС;
		НовыйЭлементСправочника.ТСДИД= СокрЛП(ТСДИД);
		НовыйЭлементСправочника.Наименование=Модель+" №"+Строка(НомерТСД);
		НовыйЭлементСправочника.Модель=Модель;
		НовыйЭлементСправочника.НомерАТС=АТС;
		НовыйЭлементСправочника.УзелПланаОбмена=НайтиСоздатьУзелПланаОбменаТСД(ТСДИД);
		НовыйЭлементСправочника.Записать();
		Возврат НовыйЭлементСправочника.Ссылка;
	КонецЕсли;	
КонецФункции	
Функция НайтиСоздатьУзелПланаОбменаТСД(ТСДИД)Экспорт
	ПланОбмена = ПланыОбмена.WMS.НайтиПоНаименованию(СокрЛП(ТСДИД));
	Если ПланОбмена.Пустая() тогда
		НовыйПланОбмена=ПланыОбмена.WMS.СоздатьУзел();
		НовыйПланОбмена.Наименование=СокрЛП(ТСДИД);
		НовыйПланОбмена.Код=НовыйНомерПланаОбмена();
		НовыйПланОбмена.Записать();
		ПланОбмена=НовыйПланОбмена.Ссылка;
	КонецЕсли;
	Возврат ПланОбмена;
КонецФункции
Функция ПолучитьДанныеПоРаботникуСклада(РаботникСклада,Дата=Неопределено)Экспорт
	Если Дата=Неопределено тогда
		Дата=ТекущаяДата();
	КонецЕсли;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	итWMSПараметрыРаботниковСкладаСрезПоследних.РаботникСклада,
	|	итWMSПараметрыРаботниковСкладаСрезПоследних.Роль,
	|	итWMSПараметрыРаботниковСкладаСрезПоследних.ТерриторияСклада,
	|	итWMSПараметрыРаботниковСкладаСрезПоследних.ПринтерПоУмолчанию
	|ИЗ
	|	РегистрСведений.итWMSПараметрыРаботниковСклада.СрезПоследних(&Дата, РаботникСклада = &РаботникСклада) КАК итWMSПараметрыРаботниковСкладаСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("РаботникСклада",РаботникСклада);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат новый Структура("РаботникСклада,Роль,ТерриторияСклада,ПринтерПоУмолчанию",ВыборкаДетальныеЗаписи.РаботникСклада,ВыборкаДетальныеЗаписи.Роль,ВыборкаДетальныеЗаписи.ТерриторияСклада,
		ВыборкаДетальныеЗаписи.ПринтерПоУмолчанию);
	иначе
		Возврат Неопределено
	КонецЕсли;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
Функция НовыйНомерПланаОбмена()Экспорт
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ WMS.Код) КАК Код
	|ИЗ
	|	ПланОбмена.WMS КАК WMS";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		НовыйКод= ВыборкаДетальныеЗаписи.Код+1;
		
		ДлинаНовогоКода = СтрДлина(Строка(НовыйКод));
		КоличествоЛидирующихНулей=9-ДлинаНовогоКода;
		СтрокаКода="";
		для n=1 по КоличествоЛидирующихНулей цикл
			СтрокаКода=СтрокаКода+"0";
		КонецЦикла;
		СтрокаКода=СтрокаКода+ Строка(НовыйКод);
		Возврат СтрокаКода;
	иначе
		Возврат "000000001";
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
Функция ПоискСотрудникаПоШтрихКоду(ШтрихКод)Экспорт	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	итWMSРаботникиСклада.Ссылка,
	|	итWMSРаботникиСклада.Заблокирован
	|ИЗ
	|	Справочник.итWMSРаботникиСклада КАК итWMSРаботникиСклада
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО итWMSРаботникиСклада.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	ФизическиеЛица.ШтрихКод = &ШтрихКод";
	
	Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат новый Структура("РаботникСклада,Заблокирован",ВыборкаДетальныеЗаписи.Ссылка,ВыборкаДетальныеЗаписи.Заблокирован) ;
	иначе
		Возврат новый Структура("РаботникСклада,Заблокирован",Справочники.итWMSРаботникиСклада.ПустаяСсылка(),Ложь) ;
	КонецЕсли;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
Функция ПроверкаНаАктуальностьДанныхАвторизацииТСД(ТСДИД) Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSСостояниеТСДСрезПоследних.ТСД,
	|	итWMSПараметрыРаботниковСкладаСрезПоследних.РаботникСклада,
	|	ВЫБОР
	|		КОГДА итWMSСостояниеТСДСрезПоследних.Роль = итWMSПараметрыРаботниковСкладаСрезПоследних.Роль
	|				И итWMSСостояниеТСДСрезПоследних.ТерриторияСклада = итWMSПараметрыРаботниковСкладаСрезПоследних.ТерриторияСклада
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроверкаРольТерритория
	|ИЗ
	|	РегистрСведений.итWMSСостояниеТСД.СрезПоследних(, ТСД.ТСДИД = &ТСДИД) КАК итWMSСостояниеТСДСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMSПараметрыРаботниковСклада.СрезПоследних КАК итWMSПараметрыРаботниковСкладаСрезПоследних
	|		ПО итWMSСостояниеТСДСрезПоследних.РаботникСклада = итWMSПараметрыРаботниковСкладаСрезПоследних.РаботникСклада";
	
	Запрос.УстановитьПараметр("ТСДИД", СокрЛП(ТСДИД));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Если ВыборкаДетальныеЗаписи.ПроверкаРольТерритория  тогда
			Возврат Истина;
		иначе
			Возврат Ложь;
		КонецЕсли;
	иначе
		Возврат ложь;
	КонецЕсли;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
Функция ТиповойОбработчикВыявленияОшибок(СтруктураДанных,Свойство="") Экспорт 
	Ошибка = ложь;
	Если ТипЗнч(СтруктураДанных)<> тип("Структура") тогда
		СтруктураДанных=новый Структура;
		СтруктураДанных.Вставить("Статус",404);
		СтруктураДанных.Вставить("ОписаниеОшибки","Не верный формат данных----нужен тип <<Структура>>");
		Ошибка=Истина;
		Возврат Ошибка;
	КонецЕсли;
	////////////////////////
	Если Свойство="" тогда
		Возврат Ошибка;
	КонецЕсли;
	///////////////////
	Если не СтруктураДанных.Свойство(Свойство) тогда
		СтруктураДанных=новый Структура;
		СтруктураДанных.Вставить("Статус",404);
		СтруктураДанных.Вставить("ОписаниеОшибки","отсутсвует ключевое свойство <<"+Свойство+">> ");
		Ошибка=Истина;
		Возврат Ошибка;
	КонецЕсли;	
	Возврат Ошибка;	
КонецФункции
Функция ПолучитьПоследнийНомерИзмененийНаУзле(Узел)Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(итWMSЗадачиТСДИзменения.НомерСообщения, 0)) КАК ПоследнийНомерСообщения
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД.Изменения КАК итWMSЗадачиТСДИзменения
	|ГДЕ
	|	итWMSЗадачиТСДИзменения.Узел = &Узел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(вт.ПоследнийНомерСообщения, 0) КАК ПоследнийНомерСообщения
	|ИЗ
	|	вт КАК вт";
	
	Запрос.УстановитьПараметр("Узел",Узел);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат  ВыборкаДетальныеЗаписи.ПоследнийНомерСообщения;
	КонецЕсли;
	Возврат 0;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

Функция ПолучитьПоследнийНомерИзмененийНаУзлеSQL(Узел)Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(итWMSЗадачиТСДИзменения.НомерСообщения, 0)) КАК ПоследнийНомерСообщения,
	|	итWMSЗадачиТСДИзменения.Узел
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД.Изменения КАК итWMSЗадачиТСДИзменения
	|ГДЕ
	|	итWMSЗадачиТСДИзменения.Узел = &Узел
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSЗадачиТСДИзменения.Узел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(алкХранилищеАкцизныхМарокИзменения.НомерСообщения, 0)),
	|	алкХранилищеАкцизныхМарокИзменения.Узел
	|ИЗ
	|	РегистрСведений.алкХранилищеАкцизныхМарок.Изменения КАК алкХранилищеАкцизныхМарокИзменения
	|ГДЕ
	|	алкХранилищеАкцизныхМарокИзменения.Узел = &Узел
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеАкцизныхМарокИзменения.Узел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(алкХранилищеУпаковокИзменения.НомерСообщения, 0)),
	|	алкХранилищеУпаковокИзменения.Узел
	|ИЗ
	|	РегистрСведений.алкХранилищеУпаковок.Изменения КАК алкХранилищеУпаковокИзменения
	|ГДЕ
	|	алкХранилищеУпаковокИзменения.Узел = &Узел
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеУпаковокИзменения.Узел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(вт.ПоследнийНомерСообщения, 0)) КАК ПоследнийНомерСообщения,
	|	вт.Узел
	|ИЗ
	|	вт КАК вт
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Узел";
	
	Запрос.УстановитьПараметр("Узел",Узел);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат  ВыборкаДетальныеЗаписи.ПоследнийНомерСообщения;
	КонецЕсли;
	Возврат 0;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
Функция ПолучитьПервыйНомерИзмененийНаУзлеSQL(Узел)Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(итWMSЗадачиТСДИзменения.НомерСообщения, 0)) КАК ПервыйНомерСообщения,
	|	итWMSЗадачиТСДИзменения.Узел
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД.Изменения КАК итWMSЗадачиТСДИзменения
	|ГДЕ
	|	итWMSЗадачиТСДИзменения.Узел = &Узел
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSЗадачиТСДИзменения.Узел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(алкХранилищеАкцизныхМарокИзменения.НомерСообщения, 0)),
	|	алкХранилищеАкцизныхМарокИзменения.Узел
	|ИЗ
	|	РегистрСведений.алкХранилищеАкцизныхМарок.Изменения КАК алкХранилищеАкцизныхМарокИзменения
	|ГДЕ
	|	алкХранилищеАкцизныхМарокИзменения.Узел = &Узел
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеАкцизныхМарокИзменения.Узел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(алкХранилищеУпаковокИзменения.НомерСообщения, 0)),
	|	алкХранилищеУпаковокИзменения.Узел
	|ИЗ
	|	РегистрСведений.алкХранилищеУпаковок.Изменения КАК алкХранилищеУпаковокИзменения
	|ГДЕ
	|	алкХранилищеУпаковокИзменения.Узел = &Узел
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеУпаковокИзменения.Узел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(вт.ПервыйНомерСообщения, 0)) КАК ПервыйНомерСообщения,
	|	вт.Узел
	|ИЗ
	|	вт КАК вт
	|ГДЕ
	|	ЕСТЬNULL(вт.ПервыйНомерСообщения, 0) <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Узел";
	
	Запрос.УстановитьПараметр("Узел",Узел);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат  ВыборкаДетальныеЗаписи.ПервыйНомерСообщения;
	КонецЕсли;
	Возврат 0;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

Функция ПолучитьДанныеПоТСДНаТекущийМомент(ТСДИД) Экспорт 
	ТСД=НайтиСоздатьТерминалСбораДанных(ТСДИД);
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSСостояниеТСДСрезПоследних.РаботникСклада,
	|	итWMSСостояниеТСДСрезПоследних.Роль,
	|	итWMSСостояниеТСДСрезПоследних.ТерриторияСклада,
	|	итWMSСостояниеТСДСрезПоследних.Состояние
	|ИЗ
	|	РегистрСведений.итWMSСостояниеТСД.СрезПоследних(, ТСД = &ТСД) КАК итWMSСостояниеТСДСрезПоследних";
	
	Запрос.УстановитьПараметр("ТСД",ТСД);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат новый Структура("РаботникСклада,Роль,ТерриторияСклада,Состояние",
		ВыборкаДетальныеЗаписи.РаботникСклада,ВыборкаДетальныеЗаписи.Роль,ВыборкаДетальныеЗаписи.ТерриторияСклада,
		ВыборкаДетальныеЗаписи.Состояние);
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЕсли;
	Возврат Неопределено;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
Функция НайтиДанныеЗадачиПоИдЗадачи(ИдЗадачи)Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	итWMSЗадачиТСД.ДокументОснование,
	|	итWMSЗадачиТСД.ИдентификаторУпаковки,
	|	итWMSЗадачиТСД.ТипЗадачи,
	|	итWMSЗадачиТСД.ИдЗадачиРодителя,
	|	итWMSЗадачиТСД.ЯчейкаОтправитель,
	|	итWMSЗадачиТСД.ЯчейкаПолучатель,
	|	итWMSЗадачиТСД.ДополнительныеДанные,
	|	итWMSЗадачиТСД.ДатаНачала,
	|	итWMSЗадачиТСД.ДатаОкончания,
	|	итWMSЗадачиТСД.Состояние,
	|	итWMSЗадачиТСД.ФиксацияЗадачи,
	|	итWMSЗадачиТСД.ТСД,
	|	итWMSЗадачиТСД.ИдЗадачи
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		СтруктураДанныхЗадачи=новый Структура;
		для Каждого Колонка из РезультатЗапроса.Колонки цикл
			СтруктураДанныхЗадачи.Вставить(Колонка.Имя,ВыборкаДетальныеЗаписи[Колонка.Имя]);
			//Возврат новый Структура("ДокументОснование,ИдентификаторУпаковки",ВыборкаДетальныеЗаписи.ДокументОснование,ВыборкаДетальныеЗаписи.ИдентификаторУпаковки);
		КонецЦикла;
		Возврат СтруктураДанныхЗадачи;
	КонецЕсли;
	
	Возврат Неопределено;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
Функция НайтиНоменклатуруПоУникальномуИД(ГУИД) Экспорт
	ПреобразовательСтрокикГУИД(ГУИД);
	Возврат Справочники.Номенклатура.ПолучитьСсылку(ГУИД);
КонецФункции
//ищит серию номенклатуры по уникальному идентификатору
//Параметры:
//ГУИД - Строка,УникальныйИдентификатор - (Обязательный) уникальный идентификатор серии номенклатуры
Функция НайтиСериюПоУникальномуИд(ГУИД) Экспорт 
	ПреобразовательСтрокикГУИД(ГУИД);
	Возврат Справочники.СерииНоменклатуры.ПолучитьСсылку(ГУИД);
КонецФункции
//ищит складскую ячейку  по уникальному идентификатору
//Параметры:
//ГУИД - Строка,УникальныйИдентификатор - (Обязательный) уникальный идентификатор ячейки
Функция НайтиЯчейкуПоУникальномуИд(ГУИД) Экспорт 
	ПреобразовательСтрокиКГУИД(ГУИД);
	Возврат Справочники.итСкладскиеЯчейки.ПолучитьСсылку(ГУИД);
КонецФункции
// Функция - Найти качество по уникальному ид
//
// Параметры:
//  ГУИД - Строка,УникальныйИдентификатор - (Обязательный) уникальный идентификатор ячейки
// 
// Возвращаемое значение:
// СправочникСсылка.Качество  - ссылка на качество товара
//
Функция НайтиКачествоПоУникальномуИд(ГУИД) Экспорт 
	ПреобразовательСтрокиКГУИД(ГУИД);
	Возврат Справочники.Качество.ПолучитьСсылку(ГУИД);
КонецФункции

//если поле Гуид типа  Строка то преобразует его в УникальныйИдентификатор 
//Параметры:
//ГУИД - Строка - (Обязательный) Строка преобразования к УникальныйИдентификатор
Процедура ПреобразовательСтрокиКГУИД(ГУИД)
	Если ТипЗнч(ГУИД)=тип("Строка") тогда
		ГУИД=новый УникальныйИдентификатор(ГУИД);
	КонецЕсли;	
КонецПроцедуры
// Функция - Получить объект по штрих коду
//
// Параметры:
//  ШтрихКод	 - Строка -   штрих код объекта поиска
//  ТипДанных	 - Произвольный	- ограничение типы получаемого объекта . Тип можно получить конструкцией Тип("ДокументСсылка.Реализация")
// 
// Возвращаемое значение:
// Произвольный,Неопределенно  -  возращает объект данных если такой удалось найти, в проивном случае  Неопределенно
//
Функция ПолучитьОбъектПоШтрихКоду(ШтрихКод,ТипДанных=null)Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтWMSШтрихКоды.Объект
	|ИЗ
	|	РегистрСведений.ИтWMSШтрихКоды КАК ИтWMSШтрихКоды
	|ГДЕ
	|	ИтWMSШтрихКоды.ШтрихКод = &ШтрихКод
	|	И ВЫБОР
	|			КОГДА &ТипДанных ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(ИтWMSШтрихКоды.Объект) = &ТипДанных
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);
	Запрос.УстановитьПараметр("ТипДанных",ТипДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Объект	
	КонецЕсли;
	
	Возврат Неопределено;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
Процедура ПроставитьЯчейкуЗадачиТСД(ИдЗадачи,Ячейка,Поле="ЯчейкаПолучатель") Экспорт
	НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Прочитать();
	для Каждого Запись из НаборЗаписей цикл
		Запись[Поле]=Ячейка;	
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры
Процедура ПроставитьКомментарийЗадачиТСД(ИдЗадачи,Комментарий="") Экспорт 
	НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Прочитать();
	для Каждого Запись из НаборЗаписей цикл
		ДополнительныеДанные=Запись.ДополнительныеДанные.Получить();
		Если ТипЗнч(ДополнительныеДанные) = тип("Структура") тогда
			ДополнительныеДанные.Вставить("Комментарий",Комментарий);
		иначе
			ДополнительныеДанные = новый Структура("Комментарий",Комментарий);
		КонецЕсли;
		Запись.ДополнительныеДанные=новый ХранилищеЗначения(ДополнительныеДанные);
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры
Процедура ПечатьSSCCНаПринтерЭтикеток(ИдентификаторУпаковки,Принтер,ТабличныйДокумент=Неопределено,ВыводитьНаПечать=Истина) Экспорт 
	//// Печать через HP принтер этикеток с рулоном 10 на 5 см ( 10 ширина , 5 высота) 
	Обработка=Обработки.итWMSПечатныеФормы.Создать();
	Обработка.ПечатьЭтикеткиПаллетыКороба(ИдентификаторУпаковки,Принтер);
	#Область  ПечатьSSCCНаПринтерЭтикетокСтараяРеализация
	//КомпонентШК=Неопределено;
	//ОбработкаШК=Обработки.итПечатьПроизвольногоШтрихкода.Создать();
	//ОбработкаШК.ПодключитьКомпоненту(КомпонентШК);
	//Если КомпонентШК=Неопределено тогда
	//	Сообщить("Нет компоненты штрихкода");
	//	Возврат 
	//КонецЕсли;
	//КомпонентШК.ТипКода=4;
	//КомпонентШК.ЗначениеКода=ИдентификаторУпаковки;
	//КомпонентШК.Высота=110;
	//КомпонентШК.Ширина=400;
	//ОбработкаШК.ПроверкаКартинкиПоМинимальнымПараметрам(КомпонентШК);
	//Картинка=КомпонентШК.ПолучитьШтрихкод();
	//Картинка=новый Картинка(Картинка);
	//ВременныйФайл = ПолучитьИмяВременногоФайла("Jpg");
	//Картинка.Записать(ВременныйФайл);
	//ComОбработкаПечати=Новый COMОбъект("Component1c.MyClassComponent");
	//ComОбработкаПечати.PrinterName=Принтер;
	//ComОбработкаПечати.FileName=ВременныйФайл;
	//ComОбработкаПечати.LeftField=0;
	//ComОбработкаПечати.RightField=0;
	//ComОбработкаПечати.UpField=0;
	//ComОбработкаПечати.DownField=0;
	//ComОбработкаПечати.PaperHight=197;
	//ComОбработкаПечати.PaperWight=404;
	//ComОбработкаПечати.PixelJpgX=0;
	//ComОбработкаПечати.PixelJpgY=0;
	//
	//Ответ=ComОбработкаПечати.PrintJPG();
	//УдалитьФайлы(ВременныйФайл);
	#КонецОбласти
	
КонецПроцедуры
Функция СформироватьПараметрыПроксиСервера() Экспорт 
	Значение=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если не ТипЗнч(Значение)=Тип("Структура") тогда
		Возврат новый Структура("Статус,ОписаниеОшибки",404,"Произведите настройку подключения для получения данных");
	КонецЕсли;	
	Если не Значение.Свойство("URLПространствоВебСервиса") тогда
		Возврат  новый Структура("Статус,ОписаниеОшибки",404,"нет ключевого поля <<URLПространствоВебСервиса>>");
	КонецЕсли;	
	
	URLПространствоВебСервиса=Значение.URLПространствоВебСервиса;
	Структура=новый Структура;
	Структура.Вставить("URLПространствоИменСервиса",СокрЛП(URLПространствоВебСервиса));
	Структура.Вставить("ИмяСервиса",СокрЛП(URLПространствоВебСервиса));
	Структура.Вставить("ИмяТочкиПодключения",СокрЛП(URLПространствоВебСервиса)+"Soap");
	
	Возврат Структура
КонецФункции
Функция СформироватьСтрокуПодключения() Экспорт 
	Параметры=СформироватьПараметрыПодключения();
	Если WMSОповещениеОТиповыхОшибках(Параметры) тогда
		Возврат ""
	КонецЕсли;	
	IPАдресСервера=Параметры.IPАдресСервера;
	ИмяПубликацииБазы=Параметры.ИмяПубликацииБазы;
	URLПространствоВебСервиса=Параметры.URLПространствоВебСервиса;
	
	СтрокаWSОпределения = "http://"+СокрЛП(IPАдресСервера)+"/"+СокрЛП(ИмяПубликацииБазы)+"/ws/"+СокрЛП(URLПространствоВебСервиса)+".1cws?wsdl";
	Возврат СтрокаWSОпределения;
КонецФункции
Функция СформироватьПараметрыПодключения()Экспорт 
	Значение=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если не ТипЗнч(Значение)=Тип("Структура") тогда
		Возврат новый Структура("Статус,ОписаниеОшибки",404,"Произведите настройку подключения для получения данных");
	КонецЕсли;	
	Если ТиповойОбработчикВыявленияОшибок(Значение,"IPАдресСервера") или ТиповойОбработчикВыявленияОшибок(Значение,"ИмяПубликацииБазы") или ТиповойОбработчикВыявленияОшибок(Значение,"URLПространствоВебСервиса") Тогда 
		Возврат Значение;
	КонецЕсли;	
	IPАдресСервера=СокрЛП(Значение.IPАдресСервера);
	ИмяПубликацииБазы=СокрЛП(Значение.ИмяПубликацииБазы);
	URLПространствоВебСервиса=СокрЛП(Значение.URLПространствоВебСервиса);
	Структура=новый Структура("IPАдресСервера,ИмяПубликацииБазы,URLПространствоВебСервиса",IPАдресСервера,ИмяПубликацииБазы,URLПространствоВебСервиса);
	Возврат Структура
КонецФункции
// Функция - Получить штрих код ячейки
//
// Параметры:
//  Ячейка	 - СправочникСсылка.итСкладскиеЯчейки - ссылка на ячейку 
// 
// Возвращаемое значение:
// Строка,Неопределенно  - Штрих код из регистра сведений итWMSШтрихКоды, в случае ошибки Неопределенно
//
Функция ПолучитьШтрихКодЯчейки(Ячейка) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ИтWMSШтрихКоды.ШтрихКод) КАК ШтрихКод,
		|	ИтWMSШтрихКоды.Объект
		|ИЗ
		|	РегистрСведений.ИтWMSШтрихКоды КАК ИтWMSШтрихКоды
		|ГДЕ
		|	ИтWMSШтрихКоды.Объект = &Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	ИтWMSШтрихКоды.Объект";
	
	Запрос.УстановитьПараметр("Объект", Ячейка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ШтрихКод;
	КонецЦикла;
	    Возврат Неопределено
		
	КонецФункции
Функция WMSОповещениеОТиповыхОшибках(СтруктураДанных) Экспорт
	Ошибка = ложь;
	Если СтруктураДанных.Свойство("Статус") тогда
		Если СтруктураДанных.Статус=404 и СтруктураДанных.Свойство("ОписаниеОшибки") тогда
			Сообщить(СтруктураДанных.ОписаниеОшибки);
			Ошибка = Истина;
		ИначеЕсли  СтруктураДанных.Статус=404  тогда
			Сообщить("Ошибка обработчки данных");
			ошибка=Истина;
		КонецЕсли;	
	КонецЕсли;	
	Возврат Ошибка;
КонецФункции
Функция НайтиСоздатьДокументСвободнойАгригации(ГуидДокумента,ДополнительныеДанные)
	Если ТипЗнч(ДополнительныеДанные)<> Тип("Структура") тогда
		Возврат  Документы.итWMSДокументСвободнойАгрегации.ПустаяСсылка();
	КонецЕсли;	
	Если ТипЗнч(ГуидДокумента)<>Тип("УникальныйИдентификатор") тогда
		Возврат Документы.итWMSДокументСвободнойАгрегации.ПустаяСсылка();
	КонецЕсли;	
	СсылкаНаДокумент= Документы.итWMSДокументСвободнойАгрегации.ПолучитьСсылку(ГуидДокумента);
	ОбъектДокумента=СсылкаНаДокумент.ПолучитьОбъект();
	Если ОбъектДокумента=Неопределено тогда
		ОбъектДокумента=Документы.итWMSДокументСвободнойАгрегации.СоздатьДокумент();
		ОбъектДокумента.УстановитьСсылкуНового(СсылкаНаДокумент);
		ОбъектДокумента.Дата=ТекущаяДата();
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	Если ДополнительныеДанные.Количество()>0 тогда
		Если ДополнительныеДанные.Свойство("Комментарий") тогда
			ОбъектДокумента.Комментарий=ДополнительныеДанные.Комментарий;
		КонецЕсли;
		Если ДополнительныеДанные.Свойство("ЯчейкаАгрегации") Тогда
			ЯчейкаАгрегации=Справочники.итСкладскиеЯчейки.ПолучитьСсылку(ДополнительныеДанные.ЯчейкаАгрегации);
			ОбъектДокумента.ЯчейкаАгрегации=ЯчейкаАгрегации;
		КонецЕсли;
		ОбъектДокумента.Записать();
	КонецЕсли;
	Возврат СсылкаНаДокумент;
КонецФункции
Процедура  ПолучитьДанныеПоНоменклатуре(ДанныеОбработчика,Списком=Ложь) Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Штрихкоды.Владелец,
	|	Штрихкоды.ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод
	|	И ТИПЗНАЧЕНИЯ(Штрихкоды.Владелец) = ТИП(СПРАВОЧНИК.Номенклатура)";
	
	Запрос.УстановитьПараметр("Штрихкод", ДанныеОбработчика.КлючПолученияДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных штрихкода");
		Возврат
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если Списком тогда
		МассивНоменклатуры=новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураДанныхНоменклатуры=новый Структура;
			СтруктураДанныхНоменклатуры.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Владелец.УникальныйИдентификатор());
			СтруктураДанныхНоменклатуры.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.Владелец.Наименование);
			СтруктураДанныхНоменклатуры.Вставить("Количество",ВыборкаДетальныеЗаписи.ЕдиницаИзмерения.Коэффициент);
			МассивНоменклатуры.Добавить(СтруктураДанныхНоменклатуры);
		КонецЦикла;
		ДанныеОбработчика.Вставить("Номенклатура",МассивНоменклатуры);
	иначе
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеОбработчика.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Владелец.УникальныйИдентификатор());
			ДанныеОбработчика.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.Владелец.Наименование);
			ДанныеОбработчика.Вставить("Количество",ВыборкаДетальныеЗаписи.ЕдиницаИзмерения.Коэффициент);
		КонецЦикла;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Процедура СоздатьДокументПереупаковкиПМУ(Ссылка,Отказ=Ложь) Экспорт 
	Если ПроверкаНаПересаканиеКоробовИМарокВПаллетах(Ссылка) Тогда 
		Отказ=Истина;
	    Возврат;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарокСрезПоследних.Марка КАК Марка,
	|	итWMS_АгрегацияМарокСрезПоследних.SSCC КАК SSCC,
	|	итWMS_АгрегацияМарокСрезПоследних.GTIN КАК Упаковка,
	|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ КАК СправкаБ,
	|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	алкХранилищеАкцизныхМарокСрезПоследних.Организация КАК Организация,
	|	алкХранилищеАкцизныхМарокСрезПоследних.ПунктРазгрузки КАК ПунктРазгрузки,
	|	алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия КАК ОтметкаВыбытия
	|ПОМЕСТИТЬ ВтДанныеУчета
	|ИЗ
	|	РегистрСведений.итWMS_АгрегацияМарок.СрезПоследних(
	|			,
	|			ДокументОснование = &Ссылка
	|				И АктивностьЗаписи = ИСТИНА) КАК итWMS_АгрегацияМарокСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
	|		ПО итWMS_АгрегацияМарокСрезПоследних.Марка = алкХранилищеАкцизныхМарокСрезПоследних.Марка
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMS_АгрегацияМарокСрезПоследних.SSCC,
	|	итWMS_АгрегацияМарокСрезПоследних.GTIN,
	|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ,
	|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция,
	|	алкХранилищеАкцизныхМарокСрезПоследних.Организация,
	|	алкХранилищеАкцизныхМарокСрезПоследних.ПунктРазгрузки,
	|	алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия,
	|	алкХранилищеАкцизныхМарокСрезПоследних.Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеУчета.Упаковка КАК Упаковка,
	|	ВтДанныеУчета.SSCC КАК ИерархияУпаковки,
	|	ВтДанныеУчета.ПунктРазгрузки КАК ПунктРазгрузки
	|ИЗ
	|	ВтДанныеУчета КАК ВтДанныеУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеУчета.Упаковка,
	|	ВтДанныеУчета.SSCC,
	|	ВтДанныеУчета.ПунктРазгрузки
	|ИТОГИ ПО
	|	ПунктРазгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеУчета.Марка КАК Марка,
	|	ВтДанныеУчета.SSCC КАК SSCC,
	|	ВтДанныеУчета.Упаковка КАК Упаковка,
	|	ВтДанныеУчета.СправкаБ КАК СправкаБ,
	|	ВтДанныеУчета.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ВтДанныеУчета.Организация КАК Организация,
	|	ВтДанныеУчета.ПунктРазгрузки КАК ПунктРазгрузки,
	|	ВтДанныеУчета.ОтметкаВыбытия КАК ОтметкаВыбытия
	|ИЗ
	|	ВтДанныеУчета КАК ВтДанныеУчета
	|ИТОГИ ПО
	|	ПунктРазгрузки";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаУпаковокПоПунктамРазгрузки=МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПунктовРагрузки=МассивРезультатов[2].выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПунктовРагрузки.Следующий() цикл
		НоваяПереупаковка=Документы.алкПереупаковка.СоздатьДокумент();
		НоваяПереупаковка.АкцизныеМарки.Очистить();
		НоваяПереупаковка.ДокументОснование=Ссылка;
		НоваяПереупаковка.Дата=ТекущаяДата();
		НоваяПереупаковка.Организация=Ссылка.Организация;
		НоваяПереупаковка.ПунктРазгрузки=ВыборкаПунктовРагрузки.ПунктРазгрузки;
		НоваяПереупаковка.Упаковки.Очистить();
		ВыборкаДетальныхДанных=ВыборкаПунктовРагрузки.Выбрать(); 
		Пока ВыборкаДетальныхДанных.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НоваяПереупаковка.АкцизныеМарки.Добавить(),ВыборкаДетальныхДанных);	
		КонецЦикла;
		ВыборкаУпаковокПоПунктамРазгрузки.Сбросить();
		Пока ВыборкаУпаковокПоПунктамРазгрузки.Следующий() Цикл
			Если  ВыборкаУпаковокПоПунктамРазгрузки.ПунктРазгрузки <> ВыборкаПунктовРагрузки.ПунктРазгрузки Тогда 
				Продолжить;
			КонецЕсли;	
			ВыборкаУпаковок=ВыборкаУпаковокПоПунктамРазгрузки.Выбрать();
			Пока ВыборкаУпаковок.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НоваяПереупаковка.Упаковки.Добавить(),ВыборкаУпаковок);
			КонецЦикла;
		КонецЦикла;
		Если НоваяПереупаковка.ПроверитьЗаполнение() Тогда 
			НоваяПереупаковка.Записать(РежимЗаписиДокумента.Проведение);
		иначе
			Отказ=Истина;
			НоваяПереупаковка.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверкаНаПересаканиеКоробовИМарокВПаллетах(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMS_АгрегацияМарокСрезПоследних.Марка,
	|	итWMS_АгрегацияМарокСрезПоследних.SSCC,
	|	итWMS_АгрегацияМарокСрезПоследних.GTIN
	|ПОМЕСТИТЬ Вт
	|ИЗ
	|	РегистрСведений.итWMS_АгрегацияМарок.СрезПоследних КАК итWMS_АгрегацияМарокСрезПоследних
	|ГДЕ
	|	итWMS_АгрегацияМарокСрезПоследних.ДокументОснование = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Марка,
	|	ВложенныйЗапрос.Количество
	|ПОМЕСТИТЬ ВтМарки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Марка КАК Марка,
	|		КОЛИЧЕСТВО(Вт.Марка) КАК Количество
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Вт.Марка КАК Марка
	|		ИЗ
	|			Вт КАК Вт
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Вт.Марка) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ Вт КАК Вт
	|			ПО ВложенныйЗапрос.Марка = Вт.Марка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Марка) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Количество > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.КоличествоПаллет,
	|	ВложенныйЗапрос.GTIN
	|ПОМЕСТИТЬ ВтКороба
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Вт.SSCC) КАК КоличествоПаллет,
	|		Вт.GTIN КАК GTIN
	|	ИЗ
	|		Вт КАК Вт
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Вт.GTIN) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.КоличествоПаллет > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтМарки.Марка,
	|	ВтМарки.Количество,
	|	0 КАК КоличествоПаллет,
	|	"""" КАК GTIN
	|ИЗ
	|	ВтМарки КАК ВтМарки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	"""",
	|	0,
	|	ВтКороба.КоличествоПаллет,
	|	ВтКороба.GTIN
	|ИЗ
	|	ВтКороба КАК ВтКороба";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Ошибка=Ложь;
	Пока   ВыборкаДетальныеЗаписи.Следующий() Цикл  
		Ошибка=Истина;
		Если   ВыборкаДетальныеЗаписи.Марка<>"" Тогда 
			Сообщить(" Марка "+ВыборкаДетальныеЗаписи.Марка+" встречается в документе "+ВыборкаДетальныеЗаписи.Количество+" раз(а)");
		ИначеЕсли ВыборкаДетальныеЗаписи.GTIN<>"" Тогда 
			Сообщить(" Короб "+ВыборкаДетальныеЗаписи.GTIN+" встречается в документе "+ВыборкаДетальныеЗаписи.КоличествоПаллет+" раз(а)")
		КонецЕсли;	
	КонецЦикла;
	Возврат Ошибка;

	КонецФункции
// все поля с типом гуид - дублируются в поля  с наименованием="наименование поле гуида"+"Представление" но уже со строковым типом. 
//Исключение: если в таблице уже есть поле "наименование поле гуида"+"Представление" - то к такому полю дубль со строковым представлением не создается.
//Параметры:
//Таблица - ТаблицаЗначений - таблица к обработке
Процедура ПреобразоватьТаблицуСИдентификаторамиДляЧтенияЗапроса(Таблица) Экспорт 
	МассивСтолбцовПодЗамену=новый Массив;
	ОписаниеТиповПоиска=новый ОписаниеТипов("УникальныйИдентификатор");
	Для Каждого Колонка из Таблица.Колонки цикл
		Если Колонка.ТипЗначения=ОписаниеТиповПоиска тогда
			МассивСтолбцовПодЗамену.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент из МассивСтолбцовПодЗамену цикл
		Таблица.Колонки.Добавить(Элемент+"Представление",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(36),,));
	КонецЦикла;
	Для Каждого стр из Таблица цикл
		Для Каждого Элемент из МассивСтолбцовПодЗамену цикл
			стр[Элемент+"Представление"]=Строка(стр[Элемент]);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Функция - Принадлежность к помарочному учету
// проверяет справку Б связанную с серией, если по ней есть записи марок,
// то серия принадлежит помарочному учету
// Параметры:
//  СерияНоменклатуры	 - СправочникСсылка.СерияНоменклатуры  - ссылка на серию номеклатуры 
// 
// Возвращаемое значение:
// Булево  - Истина,если принадлежит,в противном случае ложь 
//
Функция ПринадлежностьКПомарочномуУчету(СерияНоменклатуры) Экспорт 
	Возврат СерияНоменклатуры.итПризнакПомарочногоУчета;		
КонецФункции

// Функция - Получить массив идентификаторов строк задачи
//
// Параметры:
//  ИдЗадачи - УникальныйИдентификатор - идентификатор задачи в регистре сведений итWMSЗадачиТСД 
// 
// Возвращаемое значение:
// Массив  - одномерный массив содержащий УникальныеИдентификаторы строк задачи связанные с документом создавшим задачу. 
//
Функция ПолучитьМассивИдентификаторовСтрокЗадачи(ИдЗадачи) Экспорт 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSСтрокиЗадачТСД.идСтроки
		|ИЗ
		|	РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
		|ГДЕ
		|	итWMSСтрокиЗадачТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивИдентификаторовСтрокЗадачи=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивИдентификаторовСтрокЗадачи.Добавить(ВыборкаДетальныеЗаписи.идСтроки);
	КонецЦикла;
	Возврат МассивИдентификаторовСтрокЗадачи;
	
	
КонецФункции


// Процедура - Установка элемента блокировок данных WMS
//
// Параметры:
//  СтруктураПараметров	 - Структура - Структура с параметрами блокировки 
//  *Источник- Произвольный - Документ/ТабличнаяЧастьДокумента/ТаблицаЗначений
//  *ТипИсточника- Строка - Документ или ТабличнаяЧастьДокумента или ТаблицаЗначений
//  *ПолеПространствоБлокировок- Строка - Наименование полей по которым блокировать в таблице , указывать через ","
//  *ПолеИсточника- Строка - Наименование полей со значениями  , указывать через "," в том же порядке что и в ПолеПространствоБлокировок.
//  *РежимБлокировкиДанных- РежимБлокировкиДанных - Системное перечисление
//  *ПространствоБлокировки- Строка - Имя таблицы для блокировки
//  *БлокировкаДанных- БлокировкаДанных - созданная блокировка данных.
//
Процедура УстановкаЭлементаБлокировокДанныхWMS(СтруктураПараметров) Экспорт 
	
Если СтруктураПараметров.ТипИсточника="?" Тогда 
	ЗаписьЖурналаРегистрации("БлокировкаWMS",,,СтруктураПараметров,"Не верный тип источника");
	ВызватьИсключение "Не верный тип источника"; 
КонецЕсли;	

Если СтруктураПараметров.ТипИсточника="Документ" Тогда 
	УстановщикЭлементаБлокировкиПоОбъекту(СтруктураПараметров);
иначе
	 УстановщикЭлементаБлокировкиПоТаблице(СтруктураПараметров);
КонецЕсли;

КонецПроцедуры

// Процедура - Преобразователь структур для передчи на ТСД
// если структура содержит свойство содержащее ссылку на документ или справочник , то в текущее поле помещается 
// уникальный идентификатор ссылки, а так же содается новое свойство по схеме Свойство.Ключ+"Представление" содеражащее в себе 
// строковое представление ссылки
// Параметры:
//  СтруктураДанных	 - Структура - структура данных для преобразования
//
Процедура ПреобразовательСтруктурДляПередчиНаТСД(СтруктураДанных) Экспорт 
	ТекущееЗначение=Неопределено;
	ОписаниеДляСверки=новый ОписаниеТипов("ДокументСсылка,СправочникСсылка");
	ДокументыОписание=новый ОписаниеТипов("ДокументСсылка");
	СхемаПреобразования=новый Структура;
	Для Каждого Свойства из СтруктураДанных цикл
		Если 	ОписаниеДляСверки.СодержитТип(ТипЗнч(Свойства.Значение)) Тогда 
			ТекущееЗначение=Свойства.Значение;
			СтруктураДанных[Свойства.Ключ]=ТекущееЗначение.УникальныйИдентификатор();
			СтруктураДанных.Вставить(Свойства.Ключ+"Представление",Строка(ТекущееЗначение));
			Если ДокументыОписание.СодержитТип(ТипЗнч(ТекущееЗначение)) Тогда 
				СхемаПреобразования.Вставить(Свойства.Ключ,новый Структура("Тип,Имя","Документ",ТекущееЗначение.Метаданные().Имя));
			иначе
				СхемаПреобразования.Вставить(Свойства.Ключ,новый Структура("Тип,Имя","Справочник",ТекущееЗначение.Метаданные().Имя));
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(Свойства.Значение)=Тип("Структура") Тогда 
			ПреобразовательСтруктурДляПередчиНаТСД(Свойства.Значение);
		КонецЕсли;
	КонецЦикла;
	СтруктураДанных.Вставить("СхемаПреобразования",СхемаПреобразования);
КонецПроцедуры

Процедура УстановщикЭлементаБлокировкиПоОбъекту(СтруктураПараметров)
	
МассивИменПолейВТаблицаБлокировок=ПолучитьМассивИмен(СтруктураПараметров.ПолеПространствоБлокировок);
МассивИменИсточника=ПолучитьМассивИмен(СтруктураПараметров.ПолеИсточника);
ЭлементБлокировки=СтруктураПараметров.БлокировкаДанных.Добавить(СтруктураПараметров.ПространствоБлокировки);
ЭлементБлокировки.Режим=СтруктураПараметров.РежимБлокировкиДанных;
Источник=СтруктураПараметров.Источник;
Для n=0 по МассивИменПолейВТаблицаБлокировок.Количество()-1 цикл
	ЭлементБлокировки.УстановитьЗначение(МассивИменПолейВТаблицаБлокировок[n],Источник[МассивИменИсточника[n]]);
КонецЦикла;

КонецПроцедуры

Процедура УстановщикЭлементаБлокировкиПоТаблице(СтруктураПараметров)
Источник=СтруктураПараметров.Источник;
ЭлементБлокировки=СтруктураПараметров.БлокировкаДанных.Добавить(СтруктураПараметров.ПространствоБлокировки);
ЭлементБлокировки.ИсточникДанных=Источник;
ЭлементБлокировки.Режим=СтруктураПараметров.РежимБлокировкиДанных;

МассивИменПолейВТаблицаБлокировок=ПолучитьМассивИмен(СтруктураПараметров.ПолеПространствоБлокировок);
МассивИменИсточника=ПолучитьМассивИмен(СтруктураПараметров.ПолеИсточника);
Для n=0 по МассивИменПолейВТаблицаБлокировок.Количество()-1 цикл
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(МассивИменПолейВТаблицаБлокировок[n],МассивИменИсточника[n]);
КонецЦикла;
	
	
	
КонецПроцедуры

// Функция - Создать структуру параметров блокировки данных
// Функция создает структуру для работы процедуры УстановкаЭлементаБлокировокДанныхWMS().
//  функция работает на Русском языке, т.е типы анализируется приравниваясь к строке - поэтому если программа работает 
//  на другом языке , Свойство "ТипИсточника" будет равен "?" - его необходимо проставить в ручную при получении данных структуры.
//  Возможные значения: "ТабличнаяЧастьДокумента","ТаблицаЗначений","Документ".
// Параметры:
//  Источник		 - ДокументОбъект,ТабличнаяЧастьДокумента,ТаблицаЗначений  - Источник данны для блокировки
//  БлокировкаДанных - БлокировкаДанных	 - созданная блокировка данных, для доавбленияв нее элементов 
// 
// Возвращаемое значение:
// Структура  - Структура параметров для доавбления в блокировку элементов блокирования.
//
Функция СоздатьСтруктуруПараметровБлокировкиДанных(Источник,БлокировкаДанных) Экспорт 
	ТипИсточника="";
	Если Найти(Строка(ТипЗнч(Источник)),"Документ табличная часть:")>0 Тогда 
		ТипИсточника="ТабличнаяЧастьДокумента";
	ИначеЕсли ТипЗнч(Источник)=Тип("ТаблицаЗначений") Тогда 
		ТипИсточника="ТаблицаЗначений";
	ИначеЕсли Найти(Строка(ТипЗнч(Источник)),"Документ объект:") >0 Тогда 
		ТипИсточника="Документ";
	иначе
		ТипИсточника="?";
	КонецЕсли;	 
	СтруктураПараметров=новый Структура;
	СтруктураПараметров.Вставить("Источник",Источник);
	СтруктураПараметров.Вставить("ТипИсточника",ТипИсточника);
	СтруктураПараметров.Вставить("ПолеПространствоБлокировок");
	СтруктураПараметров.Вставить("ПолеИсточника");
	СтруктураПараметров.Вставить("РежимБлокировкиДанных",РежимБлокировкиДанных.Исключительный);
	СтруктураПараметров.Вставить("ПространствоБлокировки");
	СтруктураПараметров.Вставить("БлокировкаДанных",БлокировкаДанных);
	Возврат СтруктураПараметров;
КонецФункции

Функция ПолучитьМассивИмен(Знач СтрокаИмен) Экспорт 
	МассивИмен=новый Массив;
	Если СтрДлина(СтрокаИмен)=0 Тогда 
		Возврат  МассивИмен;
	КонецЕсли;
	Пока Найти(СтрокаИмен,",")<>0 цикл
	НомерСимволаЗапятой=Найти(СтрокаИмен,",");
	ИмяПоля=СтрЗаменить(Лев(СтрокаИмен,НомерСимволаЗапятой),",","");
	ДлинаСтроки=СтрДлина(СтрокаИмен);
	СтрокаИмен=Прав(СтрокаИмен,ДлинаСтроки-НомерСимволаЗапятой);
	МассивИмен.Добавить(СокрЛП(ИмяПоля));
    КонецЦикла;
	Если  СтрДлина(СтрокаИмен)>0 Тогда 
		МассивИмен.Добавить(СтрокаИмен);
	КонецЕсли;
	Возврат МассивИмен;
КонецФункции

// Процедура - Изменить реквизит объект на сервере
//
// Параметры:
//  Ссылка		 - ДокументСсылка - ссылка на документ 
//  ИмяРеквизита - Строка - наименование реквизиты
//  Значение	 - Произвольный	 - данные подставноки
//
Процедура ИзменитьРеквизитОбъектНаСервере(Ссылка,ИмяРеквизита,Значение) Экспорт 
	ОбъектИзменения=Ссылка.ПолучитьОбъект();
	ОбъектИзменения[ИмяРеквизита]=Значение;
	Если ОбъектИзменения.Проведен Тогда 
		ОбъектИзменения.Записать(РежимЗаписиДокумента.Проведение);
	иначе
		ОбъектИзменения.Записать();
	КонецЕсли;	
	КонецПроцедуры
	
// Функция - Сохранить табличный документ в файл PDFна сервере
//  
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - пустой или заполненный данными таличный документ 1с 
// 
// Возвращаемое значение:
// Строка  - Имя файла в который сохранен Табличный документ * на сверере
//
Функция  СохранитьТабличныйДокументВФайлPDFнаСервере(ТабличныйДокумент) Экспорт 
ИмяВременногоФайла=ПолучитьИмяВременногоФайла("pdf");
ТабличныйДокумент.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.PDF);
Возврат ИмяВременногоФайла;
КонецФункции
	
// Процедура - Печать PDFСерверный вызов
//  Печатает или сохраняет pdf  файл
// Параметры:
//  СтруктураПараметров	 - Структура - Структура данных с параметрами печати библиотеки.
//                         *PrinterName - Строка - имя принтера на который будет осуществляться печать 
//                          (принтер должен быть установлен как локальный или стевой на пк с сервером 1с предприятия)
//                         *FileName - Строка - имя pdf файла для парсинга
//                         *LeftField - Число - левое поле отступа
//                         *RightField - Число - Правое поле отступа
//                         *UpField - Число -  Перхнее поле отступа
//                         *DownField - Число - Нижнее поле отступа
//                         *PaperHight - Число - Высота бумажного листа
//                         *PaperWight - Число - Ширина бумажного листа
//                         *PixelJpgX - Число - Точка по оси х начала отрисовки изображения на листе бумаги после парсинга pdf 
//                         *PixelJpgY - Число - Точка по оси y начала отрисовки изображения на листе бумаги после парсинга pdf
//                         *CurrentDirectoryDll - Строка - Путь до каталога на пк с сервером 1с предприятия содержащего dll gsdll32.dll и gsdll64.dll
//                         *CurrentDirectory - Строка - Путь до рабочего каталога на пк с сервером 1с предприятия (кэш)
//                         *processorCapacity - Число - Разрядность процесса обрабатывающего данное приложение 64\32
//                         *ImageHight - Число - Высота картинки к которой необходимо привести изображение при 0 изображение не корректируется
//                         *ImageWight - Число - Ширина картинки к которой необходимо привести изображение при 0 изображение не корректируется
//                         *RotateFlip2Page - Булево - начиная со второй страницы поворачивает изображения на 90* т.к при парсинге происходит смещение по умолчанию Истина
//                         *OnlySaveFile - Булево - останавливает процеес на этапе окончания парсинга pdf  в jpg , посмотреть итог парсинга можно по пути в свойстве CurrentDirectory. 
//
Процедура ПечатьPDFСерверныйВызов(СтруктураПараметров) Экспорт 
	Если ТипЗнч(СтруктураПараметров)<>Тип("Структура") Тогда 
		Возврат
	КонецЕсли;
	ComОбработкаПечати=Новый COMОбъект("PrintPdfAsJpg.MainClassComponent");
	ComОбработкаПечати.PrinterName=СтруктураПараметров.PrinterName;
	ComОбработкаПечати.FileName=СтруктураПараметров.FileName;
	ComОбработкаПечати.LeftField=СтруктураПараметров.LeftField;
	ComОбработкаПечати.RightField=СтруктураПараметров.RightField;
	ComОбработкаПечати.UpField=СтруктураПараметров.UpField;
	ComОбработкаПечати.DownField=СтруктураПараметров.DownField;
	ComОбработкаПечати.PaperHight=СтруктураПараметров.PaperHight;
	ComОбработкаПечати.PaperWight=СтруктураПараметров.PaperWight;
	ComОбработкаПечати.PixelJpgX=СтруктураПараметров.PixelJpgX;
	ComОбработкаПечати.PixelJpgY=СтруктураПараметров.PixelJpgY;
	ComОбработкаПечати.PixelJpgXPrinting=СтруктураПараметров.PixelJpgXPrinting;
	ComОбработкаПечати.PixelJpgYPrinting=СтруктураПараметров.PixelJpgYPrinting;
	ComОбработкаПечати.CurrentDirectoryDll=СтруктураПараметров.CurrentDirectoryDll;
    ComОбработкаПечати.CurrentDirectory=СтруктураПараметров.CurrentDirectory;
	ComОбработкаПечати.processorCapacity=СтруктураПараметров.processorCapacity;
	ComОбработкаПечати.ImageHight=СтруктураПараметров.ImageHight;
	ComОбработкаПечати.ImageWight=СтруктураПараметров.ImageWight;
	ComОбработкаПечати.RotateFlip2Page=СтруктураПараметров.RotateFlip2Page;
	ComОбработкаПечати.OnlySaveFile=СтруктураПараметров.OnlySaveFile;
	ComОбработкаПечати.Landscape=СтруктураПараметров.Landscape;
	ComОбработкаПечати.newMethodParsePDF=СтруктураПараметров.newMethodParsePDF;
    ComОбработкаПечати.printingAutoParam=СтруктураПараметров.printingAutoParam;	
    Ответ=ComОбработкаПечати.Printinglabel();
	ComОбработкаПечати.Dispose();
	ComОбработкаПечати=Неопределено;
КонецПроцедуры
// Процедура - Печать PDFКак Вектор Серверный Вызов
//  Печатает или сохраняет pdf  файл
// Параметры:
//  СтруктураПараметров	 - Структура - Структура данных с параметрами печати библиотеки.
//                         *PrinterName - Строка - имя принтера на который будет осуществляться печать 
//                          (принтер должен быть установлен как локальный или стевой на пк с сервером 1с предприятия)
//                         *FileName - Строка - имя pdf файла для парсинга
//                         *LeftField - Число - левое поле отступа
//                         *RightField - Число - Правое поле отступа
//                         *UpField - Число -  Перхнее поле отступа
//                         *DownField - Число - Нижнее поле отступа
//                         *PaperHight - Число - Высота бумажного листа
//                         *PaperWight - Число - Ширина бумажного листа
//                         *PixelJpgX - Число - Точка по оси х начала отрисовки изображения на листе бумаги после парсинга pdf 
//                         *PixelJpgY - Число - Точка по оси y начала отрисовки изображения на листе бумаги после парсинга pdf
//                         *CurrentDirectoryDll - Строка - Путь до каталога на пк с сервером 1с предприятия содержащего dll gsdll32.dll и gsdll64.dll
//                         *CurrentDirectory - Строка - Путь до рабочего каталога на пк с сервером 1с предприятия (кэш)
//                         *processorCapacity - Число - Разрядность процесса обрабатывающего данное приложение 64\32
//                         *ImageHight - Число - Высота картинки к которой необходимо привести изображение при 0 изображение не корректируется
//                         *ImageWight - Число - Ширина картинки к которой необходимо привести изображение при 0 изображение не корректируется
//                         *RotateFlip2Page - Булево - начиная со второй страницы поворачивает изображения на 90* т.к при парсинге происходит смещение по умолчанию Истина
//                         *OnlySaveFile - Булево - останавливает процеес на этапе окончания парсинга pdf  в jpg , посмотреть итог парсинга можно по пути в свойстве CurrentDirectory. 
//
Процедура ПечатьPDFКакВекторСерверныйВызов(СтруктураПараметров) Экспорт 
	Если ТипЗнч(СтруктураПараметров)<>Тип("Структура") Тогда 
		Возврат
	КонецЕсли;
	ComОбработкаПечати=Новый COMОбъект("PrintPdfAsJpg.MainClassComponent");
	ComОбработкаПечати.PrinterName=СтруктураПараметров.PrinterName;
	ComОбработкаПечати.FileName=СтруктураПараметров.FileName;
	ComОбработкаПечати.LeftField=СтруктураПараметров.LeftField;
	ComОбработкаПечати.RightField=СтруктураПараметров.RightField;
	ComОбработкаПечати.UpField=СтруктураПараметров.UpField;
	ComОбработкаПечати.DownField=СтруктураПараметров.DownField;
	ComОбработкаПечати.PaperHight=СтруктураПараметров.PaperHight;
	ComОбработкаПечати.PaperWight=СтруктураПараметров.PaperWight;
	ComОбработкаПечати.PixelJpgX=СтруктураПараметров.PixelJpgX;
	ComОбработкаПечати.PixelJpgY=СтруктураПараметров.PixelJpgY;	
	ComОбработкаПечати.PixelJpgXPrinting=СтруктураПараметров.PixelJpgXPrinting;
	ComОбработкаПечати.PixelJpgYPrinting=СтруктураПараметров.PixelJpgYPrinting;
	ComОбработкаПечати.CurrentDirectoryDll=СтруктураПараметров.CurrentDirectoryDll;
    ComОбработкаПечати.CurrentDirectory=СтруктураПараметров.CurrentDirectory;
	ComОбработкаПечати.processorCapacity=СтруктураПараметров.processorCapacity;
	ComОбработкаПечати.ImageHight=СтруктураПараметров.ImageHight;
	ComОбработкаПечати.ImageWight=СтруктураПараметров.ImageWight;
	ComОбработкаПечати.RotateFlip2Page=СтруктураПараметров.RotateFlip2Page;
	ComОбработкаПечати.OnlySaveFile=СтруктураПараметров.OnlySaveFile;
	ComОбработкаПечати.printingAutoParam=СтруктураПараметров.printingAutoParam;	
    Ответ=ComОбработкаПечати.PrinfPDF();
	ComОбработкаПечати.Dispose();
	ComОбработкаПечати=Неопределено;
	КонецПроцедуры

// Функция - Получить структуру печати PDF
// создает структуру данных для отправки в dll библиотеку 
// Возвращаемое значение:
// Структура  -  структура параметров DLL библиотеки
//
Функция ПолучитьСтруктуруПечатиPDF() Экспорт 
	СтруктураПараметров=новый Структура;
	СтруктураПараметров.Вставить("PrinterName","");
	СтруктураПараметров.Вставить("FileName","");
	СтруктураПараметров.Вставить("LeftField",0);
	СтруктураПараметров.Вставить("RightField",0);
	СтруктураПараметров.Вставить("UpField",0);
	СтруктураПараметров.Вставить("DownField",0);
	СтруктураПараметров.Вставить("Landscape",Ложь);
	СтруктураПараметров.Вставить("PaperHight",0);
	СтруктураПараметров.Вставить("PaperWight",0);
    СтруктураПараметров.Вставить("PixelJpgX",0);
	СтруктураПараметров.Вставить("PixelJpgY",0);
	СтруктураПараметров.Вставить("PixelJpgXPrinting",0);
	СтруктураПараметров.Вставить("PixelJpgYPrinting",0);
	СтруктураПараметров.Вставить("CurrentDirectoryDll","");
	СтруктураПараметров.Вставить("CurrentDirectory","");
    СтруктураПараметров.Вставить("processorCapacity",32);
    СтруктураПараметров.Вставить("ImageHight",0);
    СтруктураПараметров.Вставить("ImageWight",0);
    СтруктураПараметров.Вставить("RotateFlip2Page",Истина);
	СтруктураПараметров.Вставить("OnlySaveFile",Ложь);
	СтруктураПараметров.Вставить("newMethodParsePDF",Ложь);
	СтруктураПараметров.Вставить("printingAutoParam",Ложь);


	Возврат СтруктураПараметров; 
	КонецФункции
	
// Функция - Получить соединение до SQL марки
// возвращает содинение до SQL базы, если соедениться не удалось возвращает Неопределено.
// Возвращаемое значение:
// COMОбъект,Неопределено - ADODB.CONNECTION -- ком соединений с базой SQL описанной в настройках WMS
//
Функция ПолучитьСоединениеДоSQLМарки() Экспорт 
НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
Если ТиповойОбработчикВыявленияОшибок(НастройкиWMS) Тогда 
	Сообщить("Не опеределены насйтроки wms");
	Возврат Неопределено
КонецЕсли;
Если не НастройкиWMS.ИспользоватьВнешниеSQLТаблицы Тогда 
	Сообщить("Использование внешних SQL таблиц отключено");
	Возврат Неопределено;
КонецЕсли;
АДОСоединение = Новый COMОбъект("ADODB.CONNECTION");
АДОСоединение.Provider    = НастройкиWMS.ProviderMark;
АДОСоединение.ConnectionString = ПолучитьСтрокуПодключенияSQLМарки(НастройкиWMS);
АДОСоединение.ConnectionTimeout=5000;
АДОСоединение.open();
Возврат АДОСоединение;
КонецФункции

// Функция - Получить строку подключения SQL марки
//
// Параметры:
//  НастройкиWMS - Структура - НастройкиWMS из хранилища настроек 
// 
// Возвращаемое значение:
// Строка  - Строка подключения к SQL полученная из WMS настроек
//
Функция ПолучитьСтрокуПодключенияSQLМарки(НастройкиWMS) Экспорт 
СтрокаПодключения="";
СтрокаПодключения=СтрокаПодключения+"Driver={"+НастройкиWMS.DriverMark+"};";
СтрокаПодключения=СтрокаПодключения+"Server="+НастройкиWMS.ServerMark+";";
СтрокаПодключения=СтрокаПодключения+"Port="+НастройкиWMS.PortMark+";";
СтрокаПодключения=СтрокаПодключения+"Database="+НастройкиWMS.DatabaseMark+";";
СтрокаПодключения=СтрокаПодключения+"Uid="+НастройкиWMS.UidMark+";";
СтрокаПодключения=СтрокаПодключения+"Pwd="+НастройкиWMS.PwdMark+";";
СтрокаПодключения=СтрокаПодключения+"STMT="+НастройкиWMS.STMTMark+";";
Возврат СтрокаПодключения;
	КонецФункции
	
// Функция - Получить ADOКомманду SQL
// 
// Возвращаемое значение:
// COMОбъект  - комадный ком интерфейс для выполнения операций в SQL 
//
Функция ПолучитьADOКоммандуSQL() Экспорт 
	АДОКоманда = Новый COMОбъект("ADODB.Command");
	Возврат АДОКоманда;
КонецФункции

// Функция - Получить элемент выборки SQL
// 
// Возвращаемое значение:
// COMОбъект  - ком объект чтения данных из SQL 
//
Функция ПолучитьЭлементВыборкиSQL() Экспорт 
 Recordset=Новый COMОбъект("ADODB.Recordset");
 Возврат Recordset;
КонецФункции

// Функция - Получить тип и имя метаданных из полного имени
//
// Параметры:
// СтрокаПолногоИмени	 - Строка -     имя полученное методом Пример: Ссылка.Метаданные().ПолноеИмя()
// 
// Возвращаемое значение:
// Неопределенно,Структура  -  если не подходящий тип строки , то возвразщается неопределенно, иначе структура со свойствами <<ТипМетаданных>>,<<ИмяМетаданных>>.
//
Функция ПолучитьТипИИмяМетаданныхИзПолногоИмени(СтрокаПолногоИмени) Экспорт 
СимволТочки=Найти(СтрокаПолногоИмени,".");
Если СимволТочки=0 Тогда 
	Возврат Неопределено
КонецЕсли;	
ТипМетаданных=Лев(СтрокаПолногоИмени,СимволТочки-1);
ИмяМетаданных=Прав(СтрокаПолногоИмени,СтрДлина(СтрокаПолногоИмени)-СимволТочки);
Возврат новый Структура("ТипМетаданных,ИмяМетаданных",ТипМетаданных,ИмяМетаданных) ;
КонецФункции

// Процедура - Очистить данные марок по задаче
// Процедура очищает данные в регистре сведений  итWMS_АгрегацияМарок по ид задаче.
// Параметры:
//  ИдЗадачи - УникальныйИдентификатор -  ид задачи по которой необходимо очитьстить марки
//
Процедура ОчиститьДанныеМарокПоЗадаче(ИдЗадачи) Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMS_АгрегацияМарок.Марка,
		|	итWMS_АгрегацияМарок.ДокументОснование
		|ИЗ
		|	РегистрСведений.итWMS_АгрегацияМарок КАК итWMS_АгрегацияМарок
		|ГДЕ
		|	итWMS_АгрегацияМарок.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей=РегистрыСведений.итWMS_АгрегацияМарок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Марка.Установить(ВыборкаДетальныеЗаписи.Марка);
		НаборЗаписей.Отбор.ДокументОснование.Установить(ВыборкаДетальныеЗаписи.ДокументОснование);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецПроцедуры

// Функция - Найти справку б по УИД
//
// Параметры:
//  ГуидСправкаБ - УникальныйИдентификатор	- идентификатор ссылки справки б 
// 
// Возвращаемое значение:
// СправочникСсылка.алкКлассификаторСправокАиБ  -  Ссылка на справку Б или ПустаяСсылка если справка не найдена.
//
Функция НайтиСправкуБПоУИД(ГуидСправкаБ) Экспорт 
СправкаБ=Справочники.алкКлассификаторСправокАиБ.ПолучитьСсылку(ГуидСправкаБ);
Попытка
ОбъектСправки=СправкаБ.ПолучитьОбъект();
Исключение
Возврат Справочники.алкКлассификаторСправокАиБ.ПустаяСсылка();
КонецПопытки;
Если ОбъектСправки=Неопределено Тогда 
	Возврат Справочники.алкКлассификаторСправокАиБ.ПустаяСсылка();
КонецЕсли;		
Возврат СправкаБ;	
КонецФункции

// Функция - Split
//
// Параметры:
//  Строка		 - Строка - Строка для разбиения на массив 
//  Разделитель	 - Строка - Признак разбиения на массив 
// 
// Возвращаемое значение:
// Массив  - Массив подстрок 
//
Функция Split(Строка, Разделитель) Экспорт
       м=Новый Массив;
       с=СтрЗаменить(СокрЛП(Строка), Разделитель, Символы.ПС);
       Для к=1 По СтрЧислоСтрок(с) Цикл
              Слово= СокрЛП(СтрПолучитьСтроку(с,к)); //Заодно
               // убрать лишние пробелы
               Если СтрДлина(Слово)>0 Тогда //См. примечание
                      м.Добавить(Слово);
               КонецЕсли;
        КонецЦикла;
        Возврат м;
КонецФункции

#Область ПроверкаНаЛеквидностьSSCC_GTIN
// Процедура - Проверить SSCCНа леквидность
// Процедура проверяет идентификатор паллеты на соотв. нормам RAR , если не соотв. то отказ принимает значение "ИСТИНА" 
// Параметры:
//  SSCC	 - Строка - идентификатор паллеты(упаковки)
//  Отказ	 - Булево - флаг отказа
//  Сообщать - Булево - если истина, то выдается сообщение пользователю об ошибке
//
функция ПроверитьSSCCНаЛеквидность(SSCC,Сообщать=Ложь) Экспорт 
	Проверка=Ложь;
	ПроверкаНаSSCC20_18(SSCC,Проверка,Сообщать);
	ПроверкаНаSSCCRAR(SSCC,Проверка,Сообщать);
	Возврат Проверка		
КонецФункции
// Процедура - Проверка на SSCC 20-18
// проверят соотв. SSCC 20-18 символьному формату упаковки согласно RAR
// Параметры:
//  SSCC	 - Строка - идентификатор паллеты(упаковки)
//  Проверка - Булево - Установить в начальное положение ЛОЖЬ - истина - значит проверка пройдена 
//  Сообщать - Булево - если истина, то выдается сообщение пользователю об ошибке
//
Процедура ПроверкаНаSSCC20_18(SSCC,Проверка,Сообщать)
	Ошибка=Истина;
	Если СтрДлина(SSCC)=20 тогда
	Если Лев(SSCC,2)<>"00" тогда
		Возврат
	КонецЕсли;
		Ошибка=Ложь;
	КонецЕсли;
	Если СтрДлина(SSCC)=18 тогда
		Ошибка=Ложь;
	КонецЕсли;
	Если Ошибка тогда
		Возврат
	КонецЕсли;	
	SSCCБезКонтрольнойЦифры=Лев(SSCC,СтрДлина(SSCC)-1);
	КонтрольнаяЦифраВSSCC=Прав(SSCC,1);
	ДанныеРасчетаКонтрольнойЦифры=ПолучитьКонтрольнуюЦифруШтрихКода(SSCCБезКонтрольнойЦифры);
	Если  СокрЛП(НРег(КонтрольнаяЦифраВSSCC))=СокрЛП(НРег(ДанныеРасчетаКонтрольнойЦифры)) тогда
		Проверка=Истина;
	КонецЕсли;	
		
КонецПроцедуры
// Процедура - Проверка на SSCCRAR
//  проверят соотв. SSCC 26 символьному формату упаковки согласно RAR
// Параметры:
//  SSCC	 - Строка - идентификатор паллеты(упаковки)
//  Проверка - Булево - Установить в начальное положение ЛОЖЬ - истина - значит проверка пройдена 	
//  Сообщать - Булево - если истина, то выдается сообщение пользователю об ошибке
//
Процедура ПроверкаНаSSCCRAR(SSCC,Проверка,Сообщать)
	Если СтрДлина(СокрЛП(SSCC)) <> 26  тогда
		Возврат
	КонецЕсли;
	ЗначениеЛогистическойЕденицы=Сред(СокрЛП(SSCC),13,1);
	Попытка
		ЧислоЛогистическойЕденицы=	Число(ЗначениеЛогистическойЕденицы);
	Исключение
		Сообщить("не читается логистическая еденица");
		Возврат
	КонецПопытки;
	Если ЧислоЛогистическойЕденицы=1 или ЧислоЛогистическойЕденицы=3 тогда
		Если Сообщать Тогда 
		Сообщить("Вы считываете идентификатор короба, отказано в присвоении паллеты");
		КонецЕсли;
		Возврат
	КонецЕсли;		
	Если ЧислоЛогистическойЕденицы=2 или ЧислоЛогистическойЕденицы=4   тогда
		Проверка = Истина;
	КонецЕсли;
	//ДатаSSCC=Сред(СокрЛП(SSCC),20,6);
	//ЛогистическийНомер=Сред(СокрЛП(SSCC),26,6);
	//ИдентификаторУпаковки=Сред(СокрЛП(SSCC),32,1);
	//Попытка
	//ГодSSCC="20"+Прав(ДатаSSCC,2);
	//Месяц=Сред(ДатаSSCC,3,2);
	//День=Лев(ДатаSSCC,2);
	//ДатаSSCC=Дата(ГодSSCC+Месяц+День);
	//Исключение
	//	Возврат
	//КонецПопытки;	
	КонецПроцедуры
// Функция - Получить контрольную цифру штрих кода
//
// Параметры:
//  ШтрихКод - Строка - любой штрих код , формат которого подразумевает наличие контрольной цифры.  
// 
// Возвращаемое значение:
// Строка - Контрольная цифра строкой.
//	
Функция ПолучитьКонтрольнуюЦифруШтрихКода(ШтрихКод)Экспорт
	ДлинаШтрихКода=СтрДлина(ШтрихКод);
	СуммаНеЧетных=ПолучитьСуммуЦифрНаНечетныхМестах(ДлинаШтрихКода,ШтрихКод);
	СуммаЧетных=ПосчитатьСуммуЦифрНаЧетныхМестах(ДлинаШтрихКода,ШтрихКод);
	СтрокаИтого=Строка(СуммаНеЧетных+СуммаЧетных);
	ЕденицаСуммы=Прав(СтрокаИтого,1);
	Если Число(ЕденицаСуммы) = 0 тогда
		Возврат "0" 
	иначе
		Возврат Строка(10-Число(ЕденицаСуммы));
	КонецЕсли;	
КонецФункции
// Функция - Посчитать сумму цифр на четных местах
//
// Параметры:
//  ДлинаШтрихКода	 - Число 
//  ШтрихКод		 - Строка	
// 
// Возвращаемое значение:
// Число  - Сумма цифр на четных местах 
//
Функция ПосчитатьСуммуЦифрНаЧетныхМестах(ДлинаШтрихКода,ШтрихКод)
	Если ДлинаШтрихКода<2 тогда
		Возврат 0
	КонецЕсли;
	Сумма=0;
	ТочкаОтсчета=ДлинаШтрихКода;
	Если  Окр(ДлинаШтрихКода/2,0,РежимОкругления.Окр15как20) <> ДлинаШтрихКода/2 тогда
		ЧетноеКоличествоСимволов=Ложь;
	иначе
		ЧетноеКоличествоСимволов=Истина;
	КонецЕсли;	

	для n=1 по ДлинаШтрихКода цикл
		Если ТочкаОтсчета-n=0 и не ЧетноеКоличествоСимволов Тогда 
			Прервать;
		КонецЕсли;	
		Сумма=Сумма+Число(Сред(ШтрихКод,ТочкаОтсчета-n,1));
		Если (n+1)>ДлинаШтрихКода тогда
			Прервать;
		КонецЕсли;		
		n=n+1;
	КонецЦикла;

	Возврат Сумма;

	КонецФункции
// Функция - Получить сумму цифр на нечетных местах
//
// Параметры:
//  ДлинаШтрихКода	 - Число 
//  ШтрихКод		 - Строка	
// 
// Возвращаемое значение:
// Число  - Сумма цифр на не четных местах 
//	
Функция ПолучитьСуммуЦифрНаНечетныхМестах(ДлинаШтрихКода,ШтрихКод)
	Сумма=0;
	ТочкаОтсчета=ДлинаШтрихКода+1;
	Если  Окр(ДлинаШтрихКода/2,0,РежимОкругления.Окр15как20) <> ДлинаШтрихКода/2 тогда
		ЧетноеКоличествоСимволов=Ложь;
	иначе
		ЧетноеКоличествоСимволов=Истина;
	КонецЕсли;	

	для n=1 по ДлинаШтрихКода цикл
		Если ТочкаОтсчета-n=0 и  ЧетноеКоличествоСимволов Тогда 
			Прервать;
		КонецЕсли;
		Сумма=Сумма+Число(Сред(ШтрихКод,ТочкаОтсчета-n,1));
		Если (n+1)>ДлинаШтрихКода тогда
			Прервать;
		КонецЕсли;	
		n=n+1;
	КонецЦикла;
	Сумма=Сумма*3;
	Возврат Сумма;
КонецФункции
// Процедура - Проверить GTINНа леквидность
// проверка того, что идентификатор короба соотв. 26 симвоьному формату RAR
// Параметры:
//  GTIN	 - Строка - идентификатор короба к проверке
//  Отказ	 - Булево -  флаг отказа 
//  Сообщать - Булево -  если истина, то выдается сообщение пользователю об ошибке
//
Функция  ПроверитьGTINНаЛеквидность(GTIN,Сообщать=Ложь) Экспорт 
	Проверка=Ложь;
	ПроверкаНаGTINRAR(GTIN,Проверка,Сообщать);
	Возврат Проверка		
КонецФункции
// Процедура - Проверка на GTINRAR
//  проверка того, что идентификатор короба соотв. 26 симвоьному формату RAR
// Параметры:
//  GTIN	 - Строка - идентификатор короба к проверке
//  Отказ	 - Булево -  флаг отказа 
//  Сообщать - Булево -  если истина, то выдается сообщение пользователю об ошибке
//
Процедура ПроверкаНаGTINRAR(GTIN,Проверка,Сообщать)
	Если СтрДлина(СокрЛП(GTIN)) <> 26  тогда
		Возврат
	КонецЕсли;
	ЗначениеЛогистическойЕденицы=Сред(СокрЛП(GTIN),13,1);
	Попытка
		ЧислоЛогистическойЕденицы=	Число(ЗначениеЛогистическойЕденицы);
	Исключение
		Сообщить("не читается логистическая еденица");
		Возврат
	КонецПопытки;
	Если ЧислоЛогистическойЕденицы=1 или ЧислоЛогистическойЕденицы=3 тогда
		Проверка = Истина;
	КонецЕсли;		
	Если ЧислоЛогистическойЕденицы=2 или ЧислоЛогистическойЕденицы=4   тогда
		Если Сообщать Тогда 
			Сообщить("Вы считываете идентификатор Паллеты, отказано в присвоении Короба");
		КонецЕсли;
		Возврат
	КонецЕсли;

	КонецПроцедуры

#КонецОбласти

// Функция - Сформировать структуру параметров для групповой этикетки
// 
// Возвращаемое значение:
// Структура  - Структура  параметров  для печати групповой этикетки 
//
Функция СформироватьСтруктуруПараметровДляГрупповойЭтикетки() Экспорт 
	СтруктураПараметров=новый Структура;
	СтруктураПараметров.Вставить("ШкУпаковкиТекст","");
	СтруктураПараметров.Вставить("ШкУпаковки","");
	СтруктураПараметров.Вставить("Продукция","");
	СтруктураПараметров.Вставить("ИНН","");
	СтруктураПараметров.Вставить("КПП","");
	СтруктураПараметров.Вставить("КОДЕГАИСорг","");
	СтруктураПараметров.Вставить("ДатаИзготовления",'00010101');
    СтруктураПараметров.Вставить("СрокГодности",'00010101');
	СтруктураПараметров.Вставить("КОДЕГАИСпрод","");
	СтруктураПараметров.Вставить("ДоляСпирта",0);
	СтруктураПараметров.Вставить("Объем",0);
	СтруктураПараметров.Вставить("Количествовкоробе",0);
	СтруктураПараметров.Вставить("ИнформацияПоСрокуГодности","Срок годности не ограничен при соблюдении условий хранения");
	СтруктураПараметров.Вставить("УсловияХранения","Хранить в вентилируемых, не имеющих постороннего запаха помещениях,"+
	"исключающих воздействие прямого солнечного света,"+
	" при температуре от 5°С до 20°С и относительной влажности воздуха не более 85%");
	СтруктураПараметров.Вставить("ОрганизацияИзготовитель","");
	СтруктураПараметров.Вставить("ЮрФактАдрес","");
	СтруктураПараметров.Вставить("КодИзготовителя","");
	СтруктураПараметров.Вставить("ШкГрупповойТарыТекст","");
	СтруктураПараметров.Вставить("ШкГрупповойТары","");
	
    Возврат СтруктураПараметров;
КонецФункции

// Функция - Заполнить структуру параметров групповой этикетки ПМУ
// Заполняет данными структура для печати этикеток из функции СформироватьСтруктуруПараметровДляГрупповойЭтикетки.
// Внимание!!!  Поиск данных только по ПМУ учету. Можно указать любой из 3 ех параметров. 
// Примечание: Если вместе с маркой указан SSCC  то в параметр ШкУпаковки будет установлен именно он, если указан GTIN но не 
// указан SSCC, в таком случае в параметр  ШкУпаковки будет установлен GTIN , в противном случае пустая строка.
// Параметры:
//  SSCC	 - Строка - идентификатор паллеты, по умолчанию пустая строка 
//  GTIN	 - Строка - идентификатор короба, по умолчанию пустая строка 
//  Марка	 - Строка - марка, по умолчанию пустая строка 
// 
// Возвращаемое значение:
// Структура - Структура параметров см функцию СформироватьСтруктуруПараметровДляГрупповойЭтикетки() , с заполненными данными
//
Функция  ЗаполнитьСтруктуруПараметровГрупповойЭтикеткиПМУ(SSCC="",GTIN="",Марка="") Экспорт 
	Если SSCC="" и GTIN="" Тогда 
		ВызватьИсключение "не достаточно данных";
	КонецЕсли;
	СтруктураПараметров=СформироватьСтруктуруПараметровДляГрупповойЭтикетки();
	Если SSCC<>"" Тогда 
		ЗаполнитьДанныеПоSSCC(SSCC,СтруктураПараметров);
	КонецЕсли;
	Если GTIN<>"" Тогда 
		ЗаполнитьДанныеПоGTIN(GTIN,СтруктураПараметров);
	КонецЕсли;
	Если Марка<>"" Тогда 
		ЗаполнитьСтруктуруПараметровЭтикеткиПоМарке(Марка,СтруктураПараметров);
		Если SSCC<>"" Тогда 
			СтруктураПараметров.ШкУпаковкиТекст=SSCC;
			СтруктураПараметров.ШкУпаковки=SSCC;
		ИначеЕсли GTIN <>"" Тогда  
			СтруктураПараметров.ШкУпаковкиТекст=GTIN;
			СтруктураПараметров.ШкУпаковки=GTIN;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПараметров;
КонецФункции

// Процедура - Заполнить данные по SSCC
//
// Параметры:
//  SSCC				 - Строка -  идентификатор паллеты с марками
//  СтруктураПараметров	 - Структура - см функцию СформироватьСтруктуруПараметровДляГрупповойЭтикетки() 
//
Процедура ЗаполнитьДанныеПоSSCC(SSCC,СтруктураПараметров) Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	алкХранилищеУпаковокСрезПоследних.Упаковка,
		|	алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.алкХранилищеУпаковок.СрезПоследних КАК алкХранилищеУпаковокСрезПоследних
		|ГДЕ
		|	алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки = &ИерархияУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ алкХранилищеАкцизныхМарокСрезПоследних.Марка) КАК КоличетсвоМарок,
		|	МАКСИМУМ(алкХранилищеАкцизныхМарокСрезПоследних.Марка) КАК Марка,
		|	ВТ.ИерархияУпаковки
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
		|		ПО ВТ.Упаковка = алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
		|			И (НЕ алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.ИерархияУпаковки";
	
	Запрос.УстановитьПараметр("ИерархияУпаковки", SSCC);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураПараметров.ШкУпаковкиТекст=ВыборкаДетальныеЗаписи.ИерархияУпаковки;
		СтруктураПараметров.ШкУпаковки=ВыборкаДетальныеЗаписи.ИерархияУпаковки;
        ЗаполнитьСтруктуруПараметровЭтикеткиПоМарке(ВыборкаДетальныеЗаписи.Марка,СтруктураПараметров);
		СтруктураПараметров.Количествовкоробе=ВыборкаДетальныеЗаписи.КоличетсвоМарок;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецПроцедуры

// Процедура - Заполнить данные по GTIN
//
// Параметры:
//  GTIN				 - Строка - идентификатор короба с марками
//  СтруктураПараметров	 - Структура - см функцию СформироватьСтруктуруПараметровДляГрупповойЭтикетки() 
//
Процедура ЗаполнитьДанныеПоGTIN(GTIN,СтруктураПараметров) Экспорт 
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	алкХранилищеАкцизныхМарокСрезПоследних.Марка КАК КоличетсвоМарок,
		|	алкХранилищеАкцизныхМарокСрезПоследних.Марка КАК Марка,
		|	алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
		|ГДЕ
		|	алкХранилищеАкцизныхМарокСрезПоследних.Упаковка = &Упаковка
		|	И алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ.КоличетсвоМарок) КАК КоличетсвоМарок,
		|	МАКСИМУМ(ВТ.Марка) КАК Марка,
		|	ВТ.Упаковка
		|ИЗ
		|	ВТ КАК ВТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Упаковка";
	
	Запрос.УстановитьПараметр("Упаковка", GTIN);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураПараметров.ШкУпаковкиТекст=ВыборкаДетальныеЗаписи.Упаковка;
		СтруктураПараметров.ШкУпаковки=ВыборкаДетальныеЗаписи.Упаковка;
        ЗаполнитьСтруктуруПараметровЭтикеткиПоМарке(ВыборкаДетальныеЗаписи.Марка,СтруктураПараметров);
		СтруктураПараметров.Количествовкоробе=ВыборкаДетальныеЗаписи.КоличетсвоМарок;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецПроцедуры

// Процедура - Заполнить структуру параметров этикетки по марке
//
// Параметры:
//  Марка				 - Строка - Марка пму учета 
//  СтруктураПараметров	 - Структура - см функцию СформироватьСтруктуруПараметровДляГрупповойЭтикетки() 
//
Процедура ЗаполнитьСтруктуруПараметровЭтикеткиПоМарке(Марка,СтруктураПараметров) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Код КАК ЕГАИСКОДпрод,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Объем КАК Объем,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Крепость КАК Крепость,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Производитель КАК Производитель,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Производитель.ИНН КАК ИНН,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Производитель.КПП КАК КПП,
		|	ПОДСТРОКА(алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Производитель.ПредставлениеАдреса, 1, 500) КАК ПроизводительАдрес,
		|	алкХранилищеАкцизныхМарокСрезПоследних.Организация,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Наименование,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция.Производитель.Код КАК КодЕгаисОрг
		|ПОМЕСТИТЬ ВтДанныеМарки
		|ИЗ
		|	РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних(, Марка = &Марка) КАК алкХранилищеАкцизныхМарокСрезПоследних
		|ГДЕ
		|	алкХранилищеАкцизныхМарокСрезПоследних.Марка = &Марка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры) КАК СерияНоменклатуры,
		|	ВтДанныеМарки.СправкаБ,
		|	ВтДанныеМарки.ЕГАИСКОДпрод,
		|	ВтДанныеМарки.Объем,
		|	ВтДанныеМарки.Крепость,
		|	ВтДанныеМарки.Производитель,
		|	ВтДанныеМарки.ИНН,
		|	ВтДанныеМарки.КПП,
		|	ВтДанныеМарки.ПроизводительАдрес,
		|	ВтДанныеМарки.Организация,
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.алкДатаНачалаРозлива) КАК ДатаНачалаРозлива,
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.СрокГодности) КАК СрокГодности,
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец) КАК Номенклатура,
		|	ВтДанныеМарки.АлкогольнаяПродукцияНаименование,
		|	МАКСИМУМ(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец.ЕдиницаИзмеренияМест) КАК ЕдиницаИзмеренияМест,
		|	ВтДанныеМарки.КодЕгаисОрг
		|ПОМЕСТИТЬ ДанныеНоменклатур
		|ИЗ
		|	ВтДанныеМарки КАК ВтДанныеМарки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
		|		ПО ВтДанныеМарки.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеМарки.Производитель,
		|	ВтДанныеМарки.КПП,
		|	ВтДанныеМарки.ИНН,
		|	ВтДанныеМарки.ЕГАИСКОДпрод,
		|	ВтДанныеМарки.СправкаБ,
		|	ВтДанныеМарки.ПроизводительАдрес,
		|	ВтДанныеМарки.Организация,
		|	ВтДанныеМарки.Объем,
		|	ВтДанныеМарки.Крепость,
		|	ВтДанныеМарки.АлкогольнаяПродукцияНаименование,
		|	ВтДанныеМарки.КодЕгаисОрг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеНоменклатур.СерияНоменклатуры,
		|	ДанныеНоменклатур.СправкаБ,
		|	ДанныеНоменклатур.ЕГАИСКОДпрод,
		|	ДанныеНоменклатур.Объем,
		|	ДанныеНоменклатур.Крепость,
		|	ДанныеНоменклатур.Производитель,
		|	ДанныеНоменклатур.ИНН,
		|	ДанныеНоменклатур.КПП,
		|	ДанныеНоменклатур.ПроизводительАдрес,
		|	ДанныеНоменклатур.Организация,
		|	ДанныеНоменклатур.ДатаНачалаРозлива,
		|	ДанныеНоменклатур.СрокГодности,
		|	ДанныеНоменклатур.Номенклатура,
		|	ДанныеНоменклатур.АлкогольнаяПродукцияНаименование,
		|	ДанныеНоменклатур.ЕдиницаИзмеренияМест,
		|	ДанныеНоменклатур.КодЕгаисОрг
		|ПОМЕСТИТЬ ВтДанныеСЕденицамиВКоробе
		|ИЗ
		|	ДанныеНоменклатур КАК ДанныеНоменклатур
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеНоменклатур.СерияНоменклатуры,
		|	ДанныеНоменклатур.СправкаБ,
		|	ДанныеНоменклатур.ЕГАИСКОДпрод,
		|	ДанныеНоменклатур.Объем,
		|	ДанныеНоменклатур.Крепость,
		|	ДанныеНоменклатур.Производитель,
		|	ДанныеНоменклатур.ИНН,
		|	ДанныеНоменклатур.КПП,
		|	ДанныеНоменклатур.ПроизводительАдрес,
		|	ДанныеНоменклатур.Организация,
		|	ДанныеНоменклатур.ДатаНачалаРозлива,
		|	ДанныеНоменклатур.СрокГодности,
		|	ДанныеНоменклатур.Номенклатура,
		|	ДанныеНоменклатур.АлкогольнаяПродукцияНаименование,
		|	ДанныеНоменклатур.ЕдиницаИзмеренияМест,
		|	ДанныеНоменклатур.КодЕгаисОрг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеСЕденицамиВКоробе.СерияНоменклатуры,
		|	ВтДанныеСЕденицамиВКоробе.СправкаБ,
		|	ВтДанныеСЕденицамиВКоробе.ЕГАИСКОДпрод,
		|	ВтДанныеСЕденицамиВКоробе.Объем,
		|	ВтДанныеСЕденицамиВКоробе.Крепость,
		|	ВтДанныеСЕденицамиВКоробе.Производитель,
		|	ВтДанныеСЕденицамиВКоробе.ИНН,
		|	ВтДанныеСЕденицамиВКоробе.КПП,
		|	ВтДанныеСЕденицамиВКоробе.ПроизводительАдрес,
		|	ВтДанныеСЕденицамиВКоробе.Организация,
		|	ВтДанныеСЕденицамиВКоробе.ДатаНачалаРозлива,
		|	ВтДанныеСЕденицамиВКоробе.СрокГодности,
		|	ВтДанныеСЕденицамиВКоробе.Номенклатура,
		|	ВтДанныеСЕденицамиВКоробе.АлкогольнаяПродукцияНаименование,
		|	МАКСИМУМ(ВтДанныеСЕденицамиВКоробе.КодЕгаисОрг) КАК ОрганизацияЕГАИСКод,
		|	ВтДанныеСЕденицамиВКоробе.ЕдиницаИзмеренияМест
		|ПОМЕСТИТЬ ДанныеСКодомЕгаисОрганизации
		|ИЗ
		|	ВтДанныеСЕденицамиВКоробе КАК ВтДанныеСЕденицамиВКоробе
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеСЕденицамиВКоробе.СерияНоменклатуры,
		|	ВтДанныеСЕденицамиВКоробе.СправкаБ,
		|	ВтДанныеСЕденицамиВКоробе.ЕГАИСКОДпрод,
		|	ВтДанныеСЕденицамиВКоробе.Объем,
		|	ВтДанныеСЕденицамиВКоробе.Крепость,
		|	ВтДанныеСЕденицамиВКоробе.Производитель,
		|	ВтДанныеСЕденицамиВКоробе.ИНН,
		|	ВтДанныеСЕденицамиВКоробе.КПП,
		|	ВтДанныеСЕденицамиВКоробе.ПроизводительАдрес,
		|	ВтДанныеСЕденицамиВКоробе.Организация,
		|	ВтДанныеСЕденицамиВКоробе.ДатаНачалаРозлива,
		|	ВтДанныеСЕденицамиВКоробе.СрокГодности,
		|	ВтДанныеСЕденицамиВКоробе.Номенклатура,
		|	ВтДанныеСЕденицамиВКоробе.АлкогольнаяПродукцияНаименование,
		|	ВтДанныеСЕденицамиВКоробе.ЕдиницаИзмеренияМест
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСКодомЕгаисОрганизации.СерияНоменклатуры,
		|	ДанныеСКодомЕгаисОрганизации.СправкаБ,
		|	ДанныеСКодомЕгаисОрганизации.ЕГАИСКОДпрод,
		|	ДанныеСКодомЕгаисОрганизации.Объем,
		|	ДанныеСКодомЕгаисОрганизации.Крепость,
		|	ДанныеСКодомЕгаисОрганизации.Производитель,
		|	ДанныеСКодомЕгаисОрганизации.ИНН,
		|	ДанныеСКодомЕгаисОрганизации.КПП,
		|	ДанныеСКодомЕгаисОрганизации.ПроизводительАдрес,
		|	ДанныеСКодомЕгаисОрганизации.Организация,
		|	ДанныеСКодомЕгаисОрганизации.ДатаНачалаРозлива,
		|	ДанныеСКодомЕгаисОрганизации.СрокГодности,
		|	ДанныеСКодомЕгаисОрганизации.Номенклатура,
		|	ДанныеСКодомЕгаисОрганизации.АлкогольнаяПродукцияНаименование,
		|	ДанныеСКодомЕгаисОрганизации.ОрганизацияЕГАИСКод,
		|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод,
		|	ДанныеСКодомЕгаисОрганизации.ЕдиницаИзмеренияМест
		|ИЗ
		|	ДанныеСКодомЕгаисОрганизации КАК ДанныеСКодомЕгаисОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО ДанныеСКодомЕгаисОрганизации.Номенклатура = Штрихкоды.Владелец
		|			И ДанныеСКодомЕгаисОрганизации.ЕдиницаИзмеренияМест = Штрихкоды.ЕдиницаИзмерения
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеСКодомЕгаисОрганизации.СерияНоменклатуры,
		|	ДанныеСКодомЕгаисОрганизации.СправкаБ,
		|	ДанныеСКодомЕгаисОрганизации.ЕГАИСКОДпрод,
		|	ДанныеСКодомЕгаисОрганизации.Объем,
		|	ДанныеСКодомЕгаисОрганизации.Крепость,
		|	ДанныеСКодомЕгаисОрганизации.Производитель,
		|	ДанныеСКодомЕгаисОрганизации.ИНН,
		|	ДанныеСКодомЕгаисОрганизации.КПП,
		|	ДанныеСКодомЕгаисОрганизации.ПроизводительАдрес,
		|	ДанныеСКодомЕгаисОрганизации.Организация,
		|	ДанныеСКодомЕгаисОрганизации.ДатаНачалаРозлива,
		|	ДанныеСКодомЕгаисОрганизации.СрокГодности,
		|	ДанныеСКодомЕгаисОрганизации.Номенклатура,
		|	ДанныеСКодомЕгаисОрганизации.АлкогольнаяПродукцияНаименование,
		|	ДанныеСКодомЕгаисОрганизации.ОрганизацияЕГАИСКод,
		|	ДанныеСКодомЕгаисОрганизации.ЕдиницаИзмеренияМест";
	
	Запрос.УстановитьПараметр("Марка", Марка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураПараметров.Продукция=ВыборкаДетальныеЗаписи.АлкогольнаяПродукцияНаименование;
		СтруктураПараметров.ИНН=ВыборкаДетальныеЗаписи.ИНН;
		СтруктураПараметров.КПП=ВыборкаДетальныеЗаписи.КПП;
		СтруктураПараметров.КОДЕГАИСорг=ВыборкаДетальныеЗаписи.ОрганизацияЕГАИСКод;
		СтруктураПараметров.ДатаИзготовления=ВыборкаДетальныеЗаписи.ДатаНачалаРозлива;
		СтруктураПараметров.СрокГодности=ВыборкаДетальныеЗаписи.СрокГодности;
		Если  СтруктураПараметров.СрокГодности<>'00010101' Тогда
			СтруктураПараметров.ИнформацияПоСрокуГодности="";
		КонецЕсли;
		СтруктураПараметров.КОДЕГАИСпрод=ВыборкаДетальныеЗаписи.ЕГАИСКОДпрод;
		СтруктураПараметров.ДоляСпирта=ВыборкаДетальныеЗаписи.Крепость;
		СтруктураПараметров.Объем= ВыборкаДетальныеЗаписи.Объем;
		СтруктураПараметров.Количествовкоробе=ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияМест.Коэффициент;
		СтруктураПараметров.ОрганизацияИзготовитель=ВыборкаДетальныеЗаписи.Производитель;
		СтруктураПараметров.ЮрФактАдрес=ВыборкаДетальныеЗаписи.ПроизводительАдрес;
		СтруктураПараметров.ШкГрупповойТарыТекст=ВыборкаДетальныеЗаписи.Штрихкод;
		СтруктураПараметров.ШкГрупповойТары=ВыборкаДетальныеЗаписи.Штрихкод;
	КонецЦикла;
	
	
КонецПроцедуры

// Процедура - Данные по алкогольной номенклатуре
//
// Параметры:
//  Номенклатура		 - СправочникСсылка.Номенклатура - ссылка на номенклатуру 
//  СтруктураПараметров	 - - Структура - см функцию СформироватьСтруктуруПараметровДляГрупповойЭтикетки() 
//
Процедура ДанныеПоАлкогольнойНоменклатуре(Номенклатура,СтруктураПараметров) Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	МАКСИМУМ(Номенклатура.ЕдиницаИзмеренияМест) КАК ЕдиницаИзмеренияМест
		|ПОМЕСТИТЬ ВтНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(алкСоответствияАлкогольнойПродукцииЕГАИСИНоменклатуры.АлкогольнаяПродукция) КАК АлкогольнаяПродукция,
		|	ВтНоменклатура.Ссылка КАК Номенклатура,
		|	ВтНоменклатура.ЕдиницаИзмеренияМест
		|ПОМЕСТИТЬ ДанныеАлкПродукции
		|ИЗ
		|	ВтНоменклатура КАК ВтНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияАлкогольнойПродукцииЕГАИСИНоменклатуры КАК алкСоответствияАлкогольнойПродукцииЕГАИСИНоменклатуры
		|		ПО ВтНоменклатура.Ссылка = алкСоответствияАлкогольнойПродукцииЕГАИСИНоменклатуры.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтНоменклатура.Ссылка,
		|	ВтНоменклатура.ЕдиницаИзмеренияМест
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеАлкПродукции.АлкогольнаяПродукция,
		|	ДанныеАлкПродукции.Номенклатура,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Код КАК КодЕГАИСпрод,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Производитель КАК Производитель,
		|	ПОДСТРОКА(ДанныеАлкПродукции.АлкогольнаяПродукция.Производитель.ПредставлениеАдреса, 1, 500) КАК ПроизводительАдрес,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Крепость КАК Крепость,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Объем КАК Объем,
		|	ДанныеАлкПродукции.ЕдиницаИзмеренияМест.Коэффициент КАК КоличествоВУпаковке,
		|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК ШК
		|ИЗ
		|	ДанныеАлкПродукции КАК ДанныеАлкПродукции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО ДанныеАлкПродукции.Номенклатура = Штрихкоды.Владелец
		|			И ДанныеАлкПродукции.ЕдиницаИзмеренияМест = Штрихкоды.ЕдиницаИзмерения
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеАлкПродукции.АлкогольнаяПродукция,
		|	ДанныеАлкПродукции.Номенклатура,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Код,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Производитель,
		|	ПОДСТРОКА(ДанныеАлкПродукции.АлкогольнаяПродукция.Производитель.ПредставлениеАдреса, 1, 500),
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Крепость,
		|	ДанныеАлкПродукции.АлкогольнаяПродукция.Объем,
		|	ДанныеАлкПродукции.ЕдиницаИзмеренияМест.Коэффициент";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СтруктураПараметров.Продукция=ВыборкаДетальныеЗаписи.АлкогольнаяПродукция;
	СтруктураПараметров.КОДЕГАИСпрод=ВыборкаДетальныеЗаписи.КодЕГАИСпрод;
	СтруктураПараметров.Количествовкоробе=ВыборкаДетальныеЗаписи.КоличествоВУпаковке;
	СтруктураПараметров.ОрганизацияИзготовитель=ВыборкаДетальныеЗаписи.Производитель;
	СтруктураПараметров.ДоляСпирта=ВыборкаДетальныеЗаписи.Крепость;
	СтруктураПараметров.Объем=ВыборкаДетальныеЗаписи.Объем;
	СтруктураПараметров.ЮрФактАдрес=ВыборкаДетальныеЗаписи.ПроизводительАдрес;
	СтруктураПараметров.ШкГрупповойТары=ВыборкаДетальныеЗаписи.ШК;
	СтруктураПараметров.ШкГрупповойТарыТекст=ВыборкаДетальныеЗаписи.ШК;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА	
	КонецПроцедуры
	
// Процедура - Данные по без алкогольной номенклатуре
//
// Параметры:
//  Номенклатура		 - СправочникСсылка.Номенклатура - ссылка на номенклатуру 
//  СтруктураПараметров	 - Структура - см функцию СформироватьСтруктуруПараметровДляГрупповойЭтикетки() 
//
Процедура ДанныеПоБезАлкогольнойНоменклатуре(Номенклатура,СтруктураПараметров) Экспорт 
	 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.ЕдиницаИзмеренияМест
		|ПОМЕСТИТЬ ВтНм
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтНм.Ссылка,
		|	ВЫБОР
		|		КОГДА ВтНм.Ссылка.Производитель = НЕОПРЕДЕЛЕНО
		|				ИЛИ ВтНм.Ссылка.Производитель = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИЛИ ВтНм.Ссылка.Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ВтНм.Ссылка.алкПроизводитель
		|		ИНАЧЕ ВтНм.Ссылка.Производитель
		|	КОНЕЦ КАК Производитель,
		|	ВтНм.Ссылка.ЕдиницаХраненияОстатков.Объем КАК Объем,
		|	ВтНм.Ссылка.ЕдиницаИзмеренияМест.Коэффициент КАК КоличествоВУпаковке,
		|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК ШК
		|ПОМЕСТИТЬ ВтПроизводитель
		|ИЗ
		|	ВтНм КАК ВтНм
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО ВтНм.Ссылка = Штрихкоды.Владелец
		|			И ВтНм.ЕдиницаИзмеренияМест = Штрихкоды.ЕдиницаИзмерения
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ВтНм.Ссылка.Производитель = НЕОПРЕДЕЛЕНО
		|				ИЛИ ВтНм.Ссылка.Производитель = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИЛИ ВтНм.Ссылка.Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ВтНм.Ссылка.алкПроизводитель
		|		ИНАЧЕ ВтНм.Ссылка.Производитель
		|	КОНЕЦ,
		|	ВтНм.Ссылка.ЕдиницаХраненияОстатков.Объем,
		|	ВтНм.Ссылка.ЕдиницаИзмеренияМест.Коэффициент,
		|	ВтНм.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтПроизводитель.Ссылка,
		|	ВтПроизводитель.Производитель,
		|	ВтПроизводитель.Объем,
		|	ВтПроизводитель.КоличествоВУпаковке,
		|	МАКСИМУМ(ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформация.Представление, """"), 1, 255)) КАК Адрес,
		|	ВтПроизводитель.ШК
		|ИЗ
		|	ВтПроизводитель КАК ВтПроизводитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ВтПроизводитель.Производитель = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|			И (КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтПроизводитель.Ссылка,
		|	ВтПроизводитель.Производитель,
		|	ВтПроизводитель.Объем,
		|	ВтПроизводитель.КоличествоВУпаковке,
		|	ВтПроизводитель.ШК";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СтруктураПараметров.Продукция=ВыборкаДетальныеЗаписи.Ссылка;
	СтруктураПараметров.КОДЕГАИСпрод="-";
	СтруктураПараметров.Количествовкоробе=ВыборкаДетальныеЗаписи.КоличествоВУпаковке;
	СтруктураПараметров.ОрганизацияИзготовитель=ВыборкаДетальныеЗаписи.Производитель;
	СтруктураПараметров.ДоляСпирта=0;
	СтруктураПараметров.Объем=ВыборкаДетальныеЗаписи.Объем;
	СтруктураПараметров.ЮрФактАдрес=ВыборкаДетальныеЗаписи.Адрес;
	СтруктураПараметров.ШкГрупповойТары=ВыборкаДетальныеЗаписи.ШК;
	СтруктураПараметров.ШкГрупповойТарыТекст=ВыборкаДетальныеЗаписи.ШК;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	КонецПроцедуры

	
// Функция - Получить данные по типовому шк
//
// Параметры:
//  ШтрихКод - Строка - шк поиска
// 
// Возвращаемое значение:
// Неопределенно,Структура  - если данные найдены возвращается структура данных, в противном случае неопределенно 
//
Функция ПолучитьДанныеПоТиповомуШк(ШтрихКод) Экспорт 
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец,
		|	Штрихкоды.ТипШтрихкода,
		|	Штрихкоды.ЕдиницаИзмерения,
		|	Штрихкоды.ХарактеристикаНоменклатуры,
		|	Штрихкоды.СерияНоменклатуры,
		|	Штрихкоды.Качество,
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат новый Структура("Владелец,ТипШтрихкода,ЕдиницаИзмерения,ХарактеристикаНоменклатуры,СерияНоменклатуры,Качество,Штрихкод",
		ВыборкаДетальныеЗаписи.Владелец,ВыборкаДетальныеЗаписи.ТипШтрихкода,ВыборкаДетальныеЗаписи.ЕдиницаИзмерения,
		ВыборкаДетальныеЗаписи.ХарактеристикаНоменклатуры,ВыборкаДетальныеЗаписи.СерияНоменклатуры,
		ВыборкаДетальныеЗаписи.Качество,ВыборкаДетальныеЗаписи.Штрихкод)
	КонецЦикла;
	    Возврат Неопределено;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

// Функция - Получить код егаис организации
//
// Параметры:
//  ОрганизацияКонтрагент - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Ссылочные данные
// 
// Возвращаемое значение:
// Неопределено, Строка  -  если данные найдены возращается строка, в противном случае неопределенно
//
Функция ПолучитьКодЕгаисОрганизации(ОрганизацияКонтрагент)
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	алкСоответствияОрганизацийЕГАИСИКонтрагентов.ОрганизацияЕГАИС
		|ИЗ
		|	РегистрСведений.алкСоответствияОрганизацийЕГАИСИКонтрагентов КАК алкСоответствияОрганизацийЕГАИСИКонтрагентов
		|ГДЕ
		|	алкСоответствияОрганизацийЕГАИСИКонтрагентов.Контрагент = &Контрагент";
		
		Запрос.УстановитьПараметр("Контрагент", ОрганизацияКонтрагент);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.ОрганизацияЕГАИС.Код;	
		КонецЦикла;
            Возврат Неопределено;
КонецФункции

// Функция - Получить юр факт адрес организации
//
// Параметры:
//  Ссылка	 - СправочникСсылка.Организации,СправочникСсылка.Контрагенты	 -  ссылка на организацию,контрагента
// 
// Возвращаемое значение:
// Структура,Неопределено  - Структура содеражцая в себе ЮрАдрес и ФактАдрес; 
//
Функция ПолучитьЮрФактАдресОрганизацииКонтрагента(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 255) КАК ЮрАдрес,
		|	"""" КАК ФактАдрес
		|ПОМЕСТИТЬ Вт
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	"""",
		|	ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 255)
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Вт.ЮрАдрес) КАК ЮрАдрес,
		|	МАКСИМУМ(Вт.ФактАдрес) КАК ФактАдрес
		|ИЗ
		|	Вт КАК Вт";
	
	Запрос.УстановитьПараметр("Объект", Ссылка);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат новый Структура("ЮрАдрес,ФактАдрес",ВыборкаДетальныеЗаписи.ЮрАдрес,ВыборкаДетальныеЗаписи.ФактАдрес);
	КонецЦикла;
	
	Возврат Неопределено;
	КонецФункции

// Функция - Получить объект по типовому шк
// осуществляет поиск объекта по штрих коду в типовой ригистре
// Параметры:
//  ШтрихКод - Строка - Штри код элемента 
// 
// Возвращаемое значение:
// Массив - массив найденых объектов 
//
Функция ПолучитьОбъектПоТиповомуШк(ШтрихКод)
    	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивОбъектов=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивОбъектов.Добавить(ВыборкаДетальныеЗаписи.Владелец);
	КонецЦикла;
	    Возврат МассивОбъектов;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	КонецФункции
	
// Функция - Найти алкогольную продукцию по справке Б
//
// Параметры:
//  СправкаБ - СправочникСсылка.алкКлассификаторСправокАиБ -  ссылка на справку Б по которой необходимо найти алкогольную продукцию
// 
// Возвращаемое значение:
// СправочникСсылка.алкКлассификаторАлкогольнойПродукцииЕГАИС,Неопределено  -  возвращает либо найденый элемент, либо неоопределено 
//
Функция НайтиАлкогольнуюПродукциюПоСправкеБ(СправкаБ) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец КАК Номенклатура
		|ПОМЕСТИТЬ ВтДанныеНоменклатурыПоСправкеБ
		|ИЗ
		|	РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
		|ГДЕ
		|	алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ = &СправкаБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	алкСоответствияАлкогольнойПродукцииЕГАИСИНоменклатуры.АлкогольнаяПродукция
		|ИЗ
		|	ВтДанныеНоменклатурыПоСправкеБ КАК ВтДанныеНоменклатурыПоСправкеБ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияАлкогольнойПродукцииЕГАИСИНоменклатуры КАК алкСоответствияАлкогольнойПродукцииЕГАИСИНоменклатуры
		|		ПО ВтДанныеНоменклатурыПоСправкеБ.Номенклатура = алкСоответствияАлкогольнойПродукцииЕГАИСИНоменклатуры.Номенклатура";
	
	Запрос.УстановитьПараметр("СправкаБ", СправкаБ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.АлкогольнаяПродукция
	КонецЦикла;
	    Возврат Неопределено;
		
	КонецФункции
	
// Функция - Полчить таблицу по результата запроса
//
// Параметры:
//  РезультатЗапроса - РезультатЗапроса	- результат запроса с выходными данными
// 
// Возвращаемое значение:
// ТаблицаЗначений - пустая таблица значений структурой соотв. структуре результата запроса.
//
Функция ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса)
	ТаблицаЗначений=новый ТаблицаЗначений;
	для Каждого Колонка из РезультатЗапроса.Колонки цикл
		ТаблицаЗначений.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
	КонецЦикла;
	Возврат ТаблицаЗначений;
КонецФункции


// Функция - Получить структуру базы данных дессириализованную
// 
// Возвращаемое значение:
// Строка - Таблица серриализованная в строку xml с информацией о таблицах 1с и их названий в sql 
//
Функция ПолучитьСтруктуруБазыДанныхДессириализованную() Экспорт 
	Возврат СериализаторДанных(ПолучитьСтруктуруХраненияБазыДанных());
	КонецФункции
	

// Функция - Получить FSRARIDТекущего филилала
//функция получает данные из регистра сведений диапазонов SSCC.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - 
// 
// Возвращаемое значение:
// Строка  -  значение FSRARID филиала указанного в настройках WMS, если данные найти не удалось возвращается пустая строка
//
Функция  ПолучитьFSRARIDТекущегоФилилала(Организация) Экспорт 
	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам("СоответствиеФилиаловИорганизация");
	Строка=НастройкиWMS.СоответствиеФилиаловИорганизация.Найти(Организация);
	Если Строка=Неопределено Тогда
		 Возврат "";
	КонецЕсли;
	Филиал=Строка.Филиал;

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	итWMSДиапазоныSSCC.FSRAR_ID
		|ИЗ
		|	РегистрСведений.итWMSДиапазоныSSCC КАК итWMSДиапазоныSSCC
		|ГДЕ
		|	итWMSДиапазоныSSCC.Филиал = &Филиал
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSДиапазоныSSCC.FSRAR_ID";
	
	Запрос.УстановитьПараметр("Филиал", Филиал);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат ВыборкаДетальныеЗаписи.FSRAR_ID;	
	КонецЦикла;
	Возврат "";
	
КонецФункции

// Функция - Получить результат запроса изменения данных задач и строк ТСД
//
// Параметры:
//  ДокументОснование	 - ДокументСсылка - основание по которому необходимо получить данные 
// 
// Возвращаемое значение:
// Результатзапроса  - данные запроса 
//
Функция ПолучитьРезультатЗапросаИзмененияДанныхЗадачИСтрокТСД(ДокументОснование) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСД.ИдЗадачи,
	|	итWMSЗадачиТСД.ДанныеДокументаТСД,
	|	итWMSЗадачиТСД.Состояние,
	|	итWMSЗадачиТСД.ФиксацияЗадачи,
	|	итWMSЗадачиТСД.ДатаНачала,
	|	итWMSЗадачиТСД.ДатаОкончания,
	|	итWMSЗадачиТСД.ЯчейкаПолучатель,
	|	итWMSЗадачиТСД.ТипЗадачи,
	|	итWMSЗадачиТСД.ИдентификаторУпаковки
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ИдЗадачи,
	|	ВТ.ДанныеДокументаТСД КАК ДанныеДокументаТСДЗадача,
	|	итWMSСтрокиЗадачТСД.идСтроки,
	|	итWMSСтрокиЗадачТСД.ДанныеДокументаТСД КАК ДанныеДокументаТСДСтрока,
	|	ВТ.Состояние,
	|	ВТ.ФиксацияЗадачи,
	|	ВТ.ДатаНачала,
	|	ВТ.ДатаОкончания,
	|	ВТ.ЯчейкаПолучатель,
	|	ВТ.ТипЗадачи,
	|	итWMSСтрокиЗадачТСД.Номенклатура,
	|	итWMSСтрокиЗадачТСД.ДатаРозлива,
	|	итWMSСтрокиЗадачТСД.СерияНоменклатуры,
	|	итWMSСтрокиЗадачТСД.Количество,
	|	ВТ.ИдентификаторУпаковки
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
	|		ПО ВТ.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	КонецФункции
	
// Функция - Проверка на возможность изменить задачу
//
// Параметры:
//  ДанныеОбработчика	 - Структура - структура данных
//  ДанныеДляПроверки    - Структура -
//                       *ТСДИД- Строка -ид тсд
//                       *ИдЗадачи- УникальныйИдентификатор - ид задачи
//  ДанныеЗадачи         - Структура - стрктура получаема функцией  НайтиДанныеЗадачиПоИдЗадачи()
//
Функция ПроверкаНаВозможностьИзменитьЗадачу(ДанныеОбработчика,ДанныеДляПроверки,ДанныеЗадачи=Неопределено) Экспорт 
	Если ДанныеЗадачи=Неопределено Тогда 
		ДанныеЗадачи=НайтиДанныеЗадачиПоИдЗадачи(ДанныеДляПроверки.ИдЗадачи);
	КонецЕсли;
	ТСД=НайтиСоздатьТерминалСбораДанных(ДанныеДляПроверки.ТСДИД);
	Если ДанныеЗадачи.ТСД<> ТСД Тогда 
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","ТСД принявший задату первым, не соответствует текущему");
		Возврат Ложь;
	КонецЕсли;
	Если ДанныеЗадачи.ФиксацияЗадачи Тогда 
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Задача уже зафиксированна, её изменение не возможно");
		Возврат Ложь;
	КонецЕсли;
	Если ДанныеЗадачи.ДокументОснование.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или  
		ДанныеЗадачи.ДокументОснование.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой или 
		ДанныеЗадачи.ДокументОснование.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда 
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Документ находится в конечном статусе изменения не допустимы");
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	Конецфункции

// Функция - Вид складской деятельности по умолчанию
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - не обязательный параметр
// Возвращаемое значение:
// 	ПеречислениеСсылка.ит_WMS_ВидыСкладскойДеятельности - вид складской деятельности уст. для пользователя,
//организации  или базы
Функция ВидСкладскойДеятельностиПоУмолчанию(Организация = Неопределено) Экспорт
	ТекущийПользователь=ПараметрыСеанса.ТекущийПользователь;
	ВидСкладскойДеятельности=Неопределено;
	СтрокаНастроек=ТекущийПользователь.НастройкиПоУмолчанию.Найти("Вид складской деятельности");
	Если СтрокаНастроек <> Неопределено Тогда

		ВидСкладскойДеятельности=СтрокаНастроек.Значение;
	КонецЕсли;
	Если ВидСкладскойДеятельности = Неопределено И Организация <> Неопределено Тогда
		СтрокаНастроек=Организация.НастройкиПоУмолчанию.Найти("Вид складской деятельности");
		Если СтрокаНастроек <> Неопределено Тогда
			ВидСкладскойДеятельности=СтрокаНастроек.Значение;
		КонецЕсли;
	КонецЕсли;
	Если ВидСкладскойДеятельности = Неопределено Тогда
		ВидСкладскойДеятельности=Константы.ВидСкладскойДеятельности.Получить();
	КонецЕсли;
	Возврат ВидСкладскойДеятельности;
КонецФункции

// Функция - Организация пользователя
//
//Возвращает Организацию Пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - 
// 
// Возвращаемое значение:
// СправочникСсылка.Организации,Неопределено  - 
//
Функция ОрганизацияПользователя(Пользователь) Экспорт 
Организация=Неопределено;
СтрокаНастроек=Пользователь.НастройкиПоУмолчанию.Найти("Организация");
	Если СтрокаНастроек <> Неопределено Тогда
		Организация=СтрокаНастроек.Значение;
	КонецЕсли;	
Возврат Организация;	
КонецФункции

// Функция - Получить элемент данных на сервере
//
// Параметры:
//  ОбъектДанных		 - Произвольный	- любой объект ссылочного типа 
//  ИмяЭлементаДанных	 - Строка - путь до данных в объекте через .  
// 
// Возвращаемое значение:
// Произвольный - данные по указанному пути
//
Функция ПолучитьЭлементДанныхНаСервере(ОбъектДанных,ИмяЭлементаДанных) Экспорт 
	ПутьДанных=итWMSСлужебныеПроцедурыИФункции.Split(ИмяЭлементаДанных,".");
	СтрокаВычисления="ОбъектДанных";
	Для Каждого стр из ПутьДанных Цикл 
	СтрокаВычисления=СтрокаВычисления+"."+стр; 
    КонецЦикла;
     Возврат Вычислить(СтрокаВычисления);
КонецФункции


#Область ФормированиеПараметровПодключенияWeb
Функция СформироватьСтрокуПодключенияПоУзлу(Узел) Экспорт   
	Параметры=СформироватьПараметрыПодключенияПоУзлу(Узел);
	IPАдресСервера=Параметры.IPАдресСервера;
	ИмяПубликацииБазы=Параметры.ИмяПубликацииБазы;
	URLПространствоВебСервиса=Параметры.URLПространствоВебСервиса;	
	СтрокаWSОпределения = "http://"+СокрЛП(IPАдресСервера)+"/"+СокрЛП(ИмяПубликацииБазы)+"/ws/"+СокрЛП(URLПространствоВебСервиса)+".1cws?wsdl";
	Возврат СтрокаWSОпределения;
КонецФункции
Функция СформироватьПараметрыПодключенияПоУзлу(Узел) Экспорт 
	IPАдресСервера=СокрЛП(Узел.IPАдресСервера);
	ИмяПубликацииБазы=СокрЛП(Узел.ИмяПубликацииБазы);
	URLПространствоВебСервиса=СокрЛП(Узел.URLПространствоВебСервиса);
	Структура=новый Структура("IPАдресСервера,ИмяПубликацииБазы,URLПространствоВебСервиса",IPАдресСервера,ИмяПубликацииБазы,URLПространствоВебСервиса);
	Возврат Структура
КонецФункции
Функция СформироватьПараметрыПроксиСервераПоУзлу(Узел)Экспорт   
	URLПространствоВебСервиса=Узел.URLПространствоВебСервиса;
	Структура=новый Структура;
	Структура.Вставить("URLПространствоИменСервиса",СокрЛП(URLПространствоВебСервиса));
	Структура.Вставить("ИмяСервиса",СокрЛП(URLПространствоВебСервиса));
	Структура.Вставить("ИмяТочкиПодключения",СокрЛП(URLПространствоВебСервиса)+"Soap");
	
	Возврат Структура
КонецФункции
#КонецОбласти

// Функция - Поиск элемента соответствия обмена другой ИБ
//
// Параметры:
//  СобственнаяСсылка	 - ДокументСсылка,СправочникСсылка - ссылка на объет иб 
//  УзелОбмена			 - ПланОбменаСсылка - ссылка на узел плана обмена 
// 
// Возвращаемое значение:
// УникальныйИдентификатор,Неопределено  - если ссылка найдена возвращается ее уникальный идентификатор, иначе Неопределено
//
Функция ПоискЭлементаСоответствияОбменаДругойИБ(СобственнаяСсылка,УзелОбмена) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ КАК СсылкаВДругойИБ
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
		|ГДЕ
		|	СоответствиеОбъектовДляОбмена.УзелОбмена = &УзелОбмена
		|	И СоответствиеОбъектовДляОбмена.СобственнаяСсылка = &СобственнаяСсылка";
	
	Запрос.УстановитьПараметр("СобственнаяСсылка", СобственнаяСсылка);
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат новый УникальныйИдентификатор(ВыборкаДетальныеЗаписи.СсылкаВДругойИБ);
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Функция - Поиск элемента соответствия обмена
//
// Параметры:
//  СсылкаВДругойИБ	 - Строка,УникальныйИдентификатор - идентификатор ссылки в другой иб 
//  УзелОбмена		 - Неопределено,ПланОбменаСсылка -  Ссылка на план обмена, если ссылка неопределено, будет осуществляться поиск соотв. самих планов обменов
//  ТипЭлемента      - Строка - уточнение типа внутренней ссылки, если уточнение не нужно не указываем
//
// Возвращаемое значение:
// ДокументСсылка,СправочникСсылка - 
//
Функция ПоискЭлементаСоответствияОбмена(СсылкаВДругойИБ,УзелОбмена=Неопределено,ТипЭлемента=Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствиеОбъектовДляОбмена.СобственнаяСсылка КАК СобственнаяСсылка
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &УзелОбмена = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ СоответствиеОбъектовДляОбмена.УзелОбмена = &УзелОбмена
		|		КОНЕЦ
		|	И СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ = ПОДСТРОКА(&СсылкаВДругойИБ, 1, 100)";
	
	Запрос.УстановитьПараметр("СсылкаВДругойИБ", Строка(СсылкаВДругойИБ));
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ТипЭлемента<> Неопределено Тогда 
			Если ТипЗнч(ВыборкаДетальныеЗаписи.СобственнаяСсылка)=Тип(ТипЭлемента) Тогда 
				Возврат ВыборкаДетальныеЗаписи.СобственнаяСсылка;
			КонецЕсли;	
			иначе
		Возврат ВыборкаДетальныеЗаписи.СобственнаяСсылка;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции
// Функция - Поиск элемента соответствия обмена с блокировкой
//
// Параметры:
//  СсылкаВДругойИБ	 - Строка,УникальныйИдентификатор - идентификатор ссылки в другой иб 
//  УзелОбмена		 - Неопределено,ПланОбменаСсылка -  Ссылка на план обмена, если ссылка неопределено, будет осуществляться поиск соотв. самих планов обменов
//  ТипЭлемента      - Строка - уточнение типа внутренней ссылки, если уточнение не нужно не указываем
//
// Возвращаемое значение:
// ДокументСсылка,СправочникСсылка - 
//
Функция ПоискЭлементаСоответствияОбменаСБлокировкой(СсылкаВДругойИБ,УзелОбмена=Неопределено,ТипЭлемента=Неопределено) Экспорт 
    ТаблицаДляБлокировки=Новый ТаблицаЗначений;
	ТаблицаДляБлокировки.Колонки.Добавить("СсылкаВДругойИБ");
	ТаблицаДляБлокировки.Колонки.Добавить("УзелОбмена");
	НоваяСтрока=ТаблицаДляБлокировки.Добавить();
	НоваяСтрока.СсылкаВДругойИБ=Строка(СсылкаВДругойИБ);
	НоваяСтрока.УзелОбмена=УзелОбмена;
	
	БлокировкаДанных=новый БлокировкаДанных;
	ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.СоответствиеОбъектовДляОбмена");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных=ТаблицаДляБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СсылкаВДругойИБ","СсылкаВДругойИБ");
	Если УзелОбмена<>Неопределено Тогда 
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("УзелОбмена","УзелОбмена");
	КонецЕсли;
	БлокировкаДанных.Заблокировать();

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствиеОбъектовДляОбмена.СобственнаяСсылка КАК СобственнаяСсылка
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &УзелОбмена = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ СоответствиеОбъектовДляОбмена.УзелОбмена = &УзелОбмена
		|		КОНЕЦ
		|	И СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ = ПОДСТРОКА(&СсылкаВДругойИБ, 1, 100)";
	
	Запрос.УстановитьПараметр("СсылкаВДругойИБ", Строка(СсылкаВДругойИБ));
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ТипЭлемента<> Неопределено Тогда 
			Если ТипЗнч(ВыборкаДетальныеЗаписи.СобственнаяСсылка)=Тип(ТипЭлемента) Тогда 
				Возврат ВыборкаДетальныеЗаписи.СобственнаяСсылка;
			КонецЕсли;	
			иначе
		Возврат ВыборкаДетальныеЗаписи.СобственнаяСсылка;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Функция - Найти марку по значению
//
// Параметры:
//  КодМарки - Строка - Код марки егаис
// 
// Возвращаемое значение:
// СправочникСсылка.Марки,Неопределено - ссылка на марку 
//
Функция НайтиМаркуПоЗначению(КодМарки) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Марки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Марки КАК Марки
		|ГДЕ
		|	Марки.ЗначениеШтрихКода = &ЗначениеШтрихКода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Марки.ДатаРегистрации УБЫВ";
	
	Запрос.УстановитьПараметр("ЗначениеШтрихКода", КодМарки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат ВыборкаДетальныеЗаписи.Ссылка;	
	КонецЦикла;
    Возврат Неопределено;
	КонецФункции

// Процедура - Запись соотв обмена
//
// Параметры:
//  СсылкаБазы		 - ЛюбаяСсылка - любая ссылка базы 
//  СсылкаВИточнике	 - УникальныйИдентификатор,Строка - идентификатор объекта в базе источнике 
//  ИмяТипаПриемника - Строка -   Тип объекта в базе источнике
//  УзелОбмена		 - ПланОбменаСсылка - Ссылка на узел плана обмена 
//
Процедура ЗаписьСоотвОбмена(Знач СсылкаБазы, Знач СсылкаВИточнике, Знач ИмяТипаПриемника, Знач УзелОбмена) Экспорт 
	
	Перем МенеджерЗаписиСоотвОбмена;
	МенеджерЗаписиСоотвОбмена=РегистрыСведений.СоответствиеОбъектовДляОбмена.СоздатьМенеджерЗаписи();
	МенеджерЗаписиСоотвОбмена.УзелОбмена=УзелОбмена;
	МенеджерЗаписиСоотвОбмена.СобственнаяСсылка=СсылкаБазы;
	МенеджерЗаписиСоотвОбмена.СсылкаВДругойИБ=Строка(СсылкаВИточнике);
	МенеджерЗаписиСоотвОбмена.ИмяТипаПриемника=ИмяТипаПриемника;
	МенеджерЗаписиСоотвОбмена.Записать(Истина);

КонецПроцедуры

// Функция - Найти марку по значениею с блокировкой
//
// Параметры:
//  КодМарки -Строка - Код марки егаис
// 
// Возвращаемое значение:
// СправочникСсылка.Марки,Неопределено - ссылка на марку 
//
//Функция НайтиМаркуПоЗначениеюСБлокировкой(КодМарки)  Экспорт 
//	Марка=НайтиМаркуПоЗначению(КодМарки);
//	Если Марка<>Неопределено Тогда 
//		Возврат Марка;
//	КонецЕсли;	
//	БлокировкаДанных=новый БлокировкаДанных;
//	ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.ТаблицаДляБлокировкиСозданияМарки");
//	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
//	ЭлементБлокировки.УстановитьЗначение("ЗначениеШтрихКода",КодМарки);
//	БлокировкаДанных.Заблокировать();
//	Марка=НайтиМаркуПоЗначению(КодМарки);
//	Возврат Марка;	
//	КонецФункции
	
// Функция - Найти создать марку с блокировкой
//
// Параметры:
//  КодМарки - Строка - Код марки егаис	  
// 
// Возвращаемое значение:
// СправочникСсылка.Марки - ссылка на марку
//
Функция НайтиСоздатьМаркуСБлокировкой(КодМарки) Экспорт 
	Марка=НайтиМаркуПоЗначению(КодМарки);
	Если Марка<>Неопределено Тогда 
		Возврат Марка;
	КонецЕсли;
	БлокировкаДанных=новый БлокировкаДанных;
	ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.ТаблицаДляБлокировкиСозданияМарки");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ЗначениеШтрихКода",КодМарки);
	БлокировкаДанных.Заблокировать();
	Марка=НайтиМаркуПоЗначению(КодМарки);
	Если Марка<>Неопределено Тогда
		Возврат Марка;
	КонецЕсли;	
	Марка=Справочники.Марки.СоздатьЭлемент();
	Марка.ЗначениеШтрихКода=КодМарки;
	Марка.ДатаРегистрации=ТекущаяДата();
	Марка.Записать();
	Возврат Марка.Ссылка;	

КонецФункции

Процедура СозданиеМарокМассивом(МассивМарок) Экспорт 
	КлючЗадания=новый УникальныйИдентификатор;
	МассивПараметров=новый Массив;
	МассивПараметров.Добавить(МассивМарок);
	ФоновыеЗадания.Выполнить("итWMSПривилегированныйМодуль.СоздатьМаркиСБлокировкой",МассивПараметров,КлючЗадания,"СозданиеМарки");
	МассивКлючей=новый Массив;
	МассивКлючей.Добавить(КлючЗадания);
	ОжиданиеВыполненияЗаданий(МассивКлючей,60);
КонецПроцедуры

#Область СервисныеФункцииСверткиМарок	
Функция СервиснаяНайтиМаркуПоЗначению(КодМарки) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Марки1.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Марки1 КАК Марки1
		|ГДЕ
		|	Марки1.ЗначениеШтрихКода = &ЗначениеШтрихКода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Марки1.ДатаРегистрации УБЫВ";
	
	Запрос.УстановитьПараметр("ЗначениеШтрихКода", КодМарки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат ВыборкаДетальныеЗаписи.Ссылка;	
	КонецЦикла;
    Возврат Неопределено;
		
КонецФункции
	
Функция СервиснаяНайтиСоздатьМаркуСБлокировкой(КодМарки) Экспорт 
	Марка=СервиснаяНайтиМаркуПоЗначению(КодМарки);
	Если Марка<>Неопределено Тогда 
		Возврат Марка;
	КонецЕсли;
	БлокировкаДанных=новый БлокировкаДанных;
	ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.ТаблицаДляБлокировкиСозданияМарки");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ЗначениеШтрихКода",КодМарки);
	БлокировкаДанных.Заблокировать();
	Марка=СервиснаяНайтиМаркуПоЗначению(КодМарки);
	Если Марка<>Неопределено Тогда
		Возврат Марка;
	КонецЕсли;	
	Марка=Справочники.Марки1.СоздатьЭлемент();
	Марка.ЗначениеШтрихКода=КодМарки;
	Марка.ДатаРегистрации=ТекущаяДата();
	Марка.Записать();
	Возврат Марка.Ссылка;	
КонецФункции

Процедура СервиснаяСозданиеМарокМассивом(МассивМарок) Экспорт 
	КлючЗадания=новый УникальныйИдентификатор;
	МассивПараметров=новый Массив;
	МассивПараметров.Добавить(МассивМарок);
	ФоновыеЗадания.Выполнить("итWMSПривилегированныйМодуль.СервесныйСоздатьМаркиСБлокировкой",МассивПараметров,КлючЗадания,"СозданиеМаркиСервисное");
	МассивКлючей=новый Массив;
	МассивКлючей.Добавить(КлючЗадания);
	ОжиданиеВыполненияЗаданий(МассивКлючей,60);
КонецПроцедуры

#КонецОбласти


// Функция - Получить настройки стратегии
//
// Параметры:
//  Стратегия	 - СправочникСсылка.итWMSСтратегии -  сслыка на стратегию
// 
// Возвращаемое значение:
// Структура,неопределено - 
//
Функция ПолучитьНастройкиСтратегии(Стратегия) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастрокиСтратегий.Настройка КАК Настройка
		|ИЗ
		|	РегистрСведений.НастрокиСтратегий КАК НастрокиСтратегий
		|ГДЕ
		|	НастрокиСтратегий.Стратегия = &Стратегия";
	
	Запрос.УстановитьПараметр("Стратегия", Стратегия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат  ВыборкаДетальныеЗаписи.Настройка.Получить();
	КонецЦикла;
	
	Возврат Неопределено;
	
	КонецФункции
	
Функция ПоказатьВременнуюТаблицу(МенеджерВременныхТаблицИлиЗапрос, ИмяВременнойТаблицы) Экспорт
    
    ЗакрытьМенеджерВременныхТаблиц = Ложь;
    
    Если ТипЗнч(МенеджерВременныхТаблицИлиЗапрос) = Тип("Запрос") Тогда
   	 Если МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц = Неопределено Тогда
   		 МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
   		 ЗакрытьМенеджерВременныхТаблиц = Истина;
   		 МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
   	 Иначе
   		 МенеджерВременныхТаблиц = МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц;
   	 КонецЕсли;
   	 МенеджерВременныхТаблицИлиЗапрос.Выполнить();
    Иначе
   	 МенеджерВременныхТаблиц = МенеджерВременныхТаблицИлиЗапрос;
    КонецЕсли;
    
    ДанныеТаблицы = ЗапросВыполнитьВыгрузить("ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы,, МенеджерВременныхТаблиц);
    
    Если ЗакрытьМенеджерВременныхТаблиц Тогда
   	 МенеджерВременныхТаблиц.Закрыть();
   	 МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц = Неопределено;
    КонецЕсли;
    
    Возврат ДанныеТаблицы;
    
КонецФункции
 
Функция ЗапросВыполнитьВыгрузить(ТекстЗапроса, ПараметрыЗапроса = Неопределено, МенеджерВременныхТаблиц = Неопределено) Экспорт
    
    Запрос = Новый Запрос(ТекстЗапроса);
    
    Если МенеджерВременныхТаблиц <> Неопределено Тогда
   	 Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
   	 Для Каждого Параметр Из ПараметрыЗапроса Цикл
   		 Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
   	 КонецЦикла;
    КонецЕсли;
    
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции	

Функция ПользовательИспользуетДвойнуюАутентификацию()Экспорт 
	Возврат ПараметрыСеанса.ТекущийПользователь.ДвухФакторнаяАвторизация;
КонецФункции

Функция ПользовательИспользуетМобильныйДоступ()Экспорт 
	Возврат ПараметрыСеанса.ТекущийПользователь.МобильныйДоступ;
КонецФункции

Функция ПользовательЗаблокирован() Экспорт 
		Возврат ПараметрыСеанса.ТекущийПользователь.Заблокирован; 
КонецФункции
#область ОжиданиеФоновыхЗаданийПоКлючу
Процедура ОжиданиеВыполненияЗаданий(МассивКлючейФоновыхЗаданий,ВремяОжиданий,ЕстьАварийноеЗавершение=Ложь,ОшибкаВремениИсполнения=Ложь) Экспорт 
	ВсеЗаданияВыполнены=Ложь;
	ДатаНачала=ТекущаяДата();
	ВремяОжиданияВСекундах=ВремяОжиданий*60;
	ДатаОкончания= ДатаНачала+ВремяОжиданияВСекундах;
	
	Пока не ВсеЗаданияВыполнены Цикл 
		Если ТекущаяДата()>=ДатаОкончания  Тогда 
			ОшибкаВремениИсполнения=Истина;
			ОтменитьЗадания(МассивКлючейФоновыхЗаданий);
			Прервать;
		КонецЕсли;	
		ЗаданияВыполнены=Истина;
		ЕстьАварийноеЗавершение=Ложь;
		ПроверкаВыполненияФоновыхЗаданий(МассивКлючейФоновыхЗаданий,ЕстьАварийноеЗавершение,ЗаданияВыполнены);
		Если ЗаданияВыполнены Тогда 
			ВсеЗаданияВыполнены=Истина;
		КонецЕсли;	 
	КонецЦикла;

	КонецПроцедуры
	
Процедура ОтменитьЗадания(Знач МассивКлючейФоновыхЗаданий)
	Для Каждого стр из МассивКлючейФоновыхЗаданий цикл
		МассивЗаданий=ФоновыеЗадания.ПолучитьФоновыеЗадания(новый Структура("Ключ",стр));
		Для Каждого Задание из МассивЗаданий цикл
			Если Задание.Состояние =СостояниеФоновогоЗадания.Активно Тогда 
				Задание.Отменить();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверкаВыполненияФоновыхЗаданий(Знач МассивКлючейФоновыхЗаданий,ЕстьАварийноеЗавершение,ЗаданияВыполнены)
	
	Для Каждого стр из МассивКлючейФоновыхЗаданий цикл
		МассивЗаданий=ФоновыеЗадания.ПолучитьФоновыеЗадания(новый Структура("Ключ",стр));
		Для Каждого Задание из МассивЗаданий цикл
			Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда 
				ЗаданияВыполнены=Ложь;
			КонецЕсли;
			Если Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда 
				ЗаданияВыполнены=Истина;
				ЕстьАварийноеЗавершение=Истина;
			КонецЕсли;
			Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда 
				ЗаданияВыполнены=Истина;
				ЕстьАварийноеЗавершение=Истина;
			КонецЕсли;
		КонецЦикла;
		Если не ЗаданияВыполнены Тогда 
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#область ОжиданиеФоновыхЗаданийПонаименованию
Процедура ОжиданиеВыполненияЗаданийНаименование(МассивНаименованийФоновыхЗаданий,ВремяОжиданий,ЕстьАварийноеЗавершение=Ложь,ОшибкаВремениИсполнения=Ложь) Экспорт 
	ВсеЗаданияВыполнены=Ложь;
	ДатаОтбора=ТекущаяДата()-(60*60);
	ДатаНачала=ТекущаяДата();
	ВремяОжиданияВСекундах=ВремяОжиданий*60;
	ДатаОкончания= ДатаНачала+ВремяОжиданияВСекундах;
	
	Пока не ВсеЗаданияВыполнены Цикл 
		Если ТекущаяДата()>=ДатаОкончания  Тогда 
			ОшибкаВремениИсполнения=Истина;
			ОтменитьЗаданияНаименования(МассивНаименованийФоновыхЗаданий,ДатаОтбора);
			Прервать;
		КонецЕсли;	
		ЗаданияВыполнены=Истина;
		ЕстьАварийноеЗавершение=Ложь;
		ПроверкаВыполненияФоновыхЗаданийНаименование(МассивНаименованийФоновыхЗаданий,ДатаОтбора,ЕстьАварийноеЗавершение,ЗаданияВыполнены);
		Если ЗаданияВыполнены Тогда 
			ВсеЗаданияВыполнены=Истина;
		КонецЕсли;	 
	КонецЦикла;

	КонецПроцедуры
	
Процедура ОтменитьЗаданияНаименования(Знач МассивНаименованийФоновыхЗаданий,ДатаОтбора)
	Для Каждого стр из МассивНаименованийФоновыхЗаданий цикл
		МассивЗаданий=ФоновыеЗадания.ПолучитьФоновыеЗадания(новый Структура("Наименование,Начало",стр,ДатаОтбора));
		Для Каждого Задание из МассивЗаданий цикл
			Если Задание.Состояние =СостояниеФоновогоЗадания.Активно Тогда 
				Задание.Отменить();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверкаВыполненияФоновыхЗаданийНаименование(Знач МассивНаименованийФоновыхЗаданий,ДатаОтбора,ЕстьАварийноеЗавершение,ЗаданияВыполнены)
	
	Для Каждого стр из МассивНаименованийФоновыхЗаданий цикл
		МассивЗаданий=ФоновыеЗадания.ПолучитьФоновыеЗадания(новый Структура("Наименование,Начало",стр,ДатаОтбора));
		Для Каждого Задание из МассивЗаданий цикл
			Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда 
				ЗаданияВыполнены=Ложь;
				Прервать;
			КонецЕсли;
			Если Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда 
				ЗаданияВыполнены=Истина;
				ЕстьАварийноеЗавершение=Истина;
			КонецЕсли;
			Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда 
				ЗаданияВыполнены=Истина;
				ЕстьАварийноеЗавершение=Истина;
			КонецЕсли;
		КонецЦикла;
		Если не ЗаданияВыполнены Тогда 
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Процедура - Сделать запись доп обработки отложенного проведения
// процедура делает запись в регистр сведений для дальнейшей обработки документа.
// Параметры:
//  Документ - ДокументСсылка - документ для доп проведения 
//
Процедура СделатьЗаписьДопОбработкиОтложенногоПроведения(Документ) Экспорт  
НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);   
ДопроведениеДокументовЗаТСД=Справочники.АлгоритмыДопОбработкиДокументов.ДопроведениеДокументовЗаТСД;
БлокировкаДанных=новый БлокировкаДанных;
ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.ДокументыКДополнительнойОбработке");
ЭлементБлокировки.УстановитьЗначение("Документ",Документ);  
ЭлементБлокировки.УстановитьЗначение("АлгоритмОбработки",ДопроведениеДокументовЗаТСД);
ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
БлокировкаДанных.Заблокировать();   
МенеджерЗаписи=РегистрыСведений.ДокументыКДополнительнойОбработке.СоздатьМенеджерЗаписи();
МенеджерЗаписи.Документ=Документ;
МенеджерЗаписи.АлгоритмОбработки=ДопроведениеДокументовЗаТСД;
МенеджерЗаписи.Прочитать();
МенеджерЗаписи.Документ=Документ;
МенеджерЗаписи.АлгоритмОбработки=ДопроведениеДокументовЗаТСД;
МенеджерЗаписи.Записать(Истина);
ЗафиксироватьТранзакцию();
КонецПроцедуры   

// Процедура - Удалить запись доп обработки отложенного проведения
//
// Параметры:
//  Документ - ДокументСсылка - документ по которому необходимо удалить запись 
//
Процедура УдалитьЗаписьДопОбработкиОтложенногоПроведения(Документ) Экспорт  
НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);   
ДопроведениеДокументовЗаТСД=Справочники.АлгоритмыДопОбработкиДокументов.ДопроведениеДокументовЗаТСД;
БлокировкаДанных=новый БлокировкаДанных;
ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.ДокументыКДополнительнойОбработке");
ЭлементБлокировки.УстановитьЗначение("Документ",Документ);  
ЭлементБлокировки.УстановитьЗначение("АлгоритмОбработки",ДопроведениеДокументовЗаТСД);
ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
БлокировкаДанных.Заблокировать();   
МенеджерЗаписи=РегистрыСведений.ДокументыКДополнительнойОбработке.СоздатьМенеджерЗаписи();
МенеджерЗаписи.Документ=Документ;
МенеджерЗаписи.АлгоритмОбработки=ДопроведениеДокументовЗаТСД;
МенеджерЗаписи.Прочитать(); 
МенеджерЗаписи.Удалить();
ЗафиксироватьТранзакцию();
КонецПроцедуры

#КонецОбласти


#Область КонвертацияДанных


Функция ДесериализаторДанных(Данные)Экспорт 
	ЧтениеданныхXML=новый ЧтениеXML;
	ЧтениеданныхXML.УстановитьСтроку(Данные);
	Данные= СериализаторXDTO.ПрочитатьXML(ЧтениеданныхXML);
	ЧтениеданныхXML.Закрыть();
	Возврат Данные;
КонецФункции
Функция  СериализаторДанных(Данные)Экспорт
	ДеревоДанныхXDTO=СериализаторXDTO.ЗаписатьXDTO(Данные);
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,ДеревоДанныхXDTO);
	Возврат ЗаписьXML.Закрыть();
КонецФункции
#КонецОбласти



#Область СлужебныеФункцииИПроцедурыРаботаСДокументами
Процедура ПроверитьДокументыНаИзменениеСтатуса(МассивДокументовКПроверке,ТолькоПроверкаНаОтказ=Ложь) Экспорт 
	Если ТолькоПроверкаНаОтказ тогда	
		ПроверитьНаОтказОтДокумента(МассивДокументовКПроверке);
	иначе
		ПроверитьНаФиксациюЗадачДокумента(МассивДокументовКПроверке);
		ПроверитьНаОтказОтДокумента(МассивДокументовКПроверке);
	КонецЕсли;
КонецПроцедуры
Процедура ПроверитьНаФиксациюЗадачДокумента(МассивДокументовКПроверке)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА итWMSЗадачиТСД.ФиксацияЗадачи
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФиксированныеЗадачи,
	|	итWMSЗадачиТСД.ДокументОснование,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итWMSЗадачиТСД.ИдЗадачи) КАК КоличествоЗадач
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ДокументОснование В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSЗадачиТСД.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ДокументОснование
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ.ФиксированныеЗадачи = ВТ.КоличествоЗадач
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументовКПроверке);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВнесениеИзмененийПоТипуДокумента(ВыборкаДетальныеЗаписи.ДокументОснование);
		ДокументОбъект= ВыборкаДетальныеЗаписи.ДокументОснование.ПолучитьОбъект();
		//ДокументОбъект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
		ДокументОбъект.ДействияПриФиксацииЗадачДокумента();
		ОбработчикЗаписиПроведенияДокументов(ДокументОбъект);
		//ДокументОбъект.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Процедура ОбработчикЗаписиПроведенияДокументов(ДокументОбъект)
	Если ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.итWMSРазмещение") или
		ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.итWMSПеремещение") или
		ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.итWMSНаборка") или 
		ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.итWMSОтгрузка") или
		ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.итWMSПроверка") или 
		ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.итWMSПриемка") Тогда 
		ДокументОбъект.ОбменДанными.Загрузка=Истина;
		//ДокументОбъект.ОтложенноеПроведение=Истина; 
		ДокументОбъект.Записать();
		СделатьЗаписьДопОбработкиОтложенногоПроведения(ДокументОбъект.Ссылка);
		МассивПараметров=новый Массив;
		МассивПараметров.Добавить(ДокументОбъект.Ссылка);
		ФоновыеЗадания.Выполнить("итWMSПривилегированныйМодуль.ОбработкаОтложенногоПривелигированногоПроведения",МассивПараметров,новый УникальныйИдентификатор,"WMSОтложенноеПроведениеДокументов");
	Иначе 	 	
		итWMSПривилегированныйМодуль.ПроведениеДокументовПривелигированно(,ДокументОбъект);
	КонецЕсли;

КонецПроцедуры
Процедура ВнесениеИзмененийПоТипуДокумента(Документ)
	Если ТипЗнч(Документ)=Тип("ДокументСсылка.итWMSРазмещение") Тогда 
		Документы.итWMSРазмещение.ВнестиИзменениеДанныхТСДВДокумент(Документ);
	КонецЕсли;	
	Если ТипЗнч(Документ)=Тип("ДокументСсылка.итWMSПеремещение") Тогда 
		Документы.итWMSПеремещение.ВнестиИзменениеДанныхТСДВДокумент(Документ);
	КонецЕсли;	
	Если ТипЗнч(Документ)=Тип("ДокументСсылка.итWMSНаборка") Тогда 
		Документы.итWMSНаборка.ВнестиИзменениеДанныхТСДВДокумент(Документ);
	КонецЕсли;	
    Если ТипЗнч(Документ)=Тип("ДокументСсылка.итWMSПриемка") Тогда 
		Документы.итWMSПриемка.ВнестиИзменениеДанныхТСДВДокумент(Документ);
	КонецЕсли;	
	Если ТипЗнч(Документ)=Тип("ДокументСсылка.итWMSОтгрузка") Тогда 
		Документы.итWMSОтгрузка.ВнестиИзменениеДанныхТСДВДокумент(Документ);
	КонецЕсли;	
	Если ТипЗнч(Документ)=Тип("ДокументСсылка.итWMSПроверка") Тогда 
		Документы.итWMSПроверка.ВнестиИзменениеДанныхТСДВДокумент(Документ);
	КонецЕсли;	


КонецПроцедуры
Процедура ПроверитьНаОтказОтДокумента(МассивДокументовКПроверке)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСД.ДокументОснование,
	|	СУММА(ВЫБОР
	|			КОГДА итWMSЗадачиТСД.ТСД = ЗНАЧЕНИЕ(Справочник.итWMSСправочникТСД.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоНеРаспределенныхСтрок,
	|	КОЛИЧЕСТВО(итWMSЗадачиТСД.ТСД) КАК КоличествоСтрокВсего
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ДокументОснование В(&МассивДокументовКПроверке)
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSЗадачиТСД.ДокументОснование
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ДокументОснование
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ.КоличествоНеРаспределенныхСтрок = ВТ.КоличествоСтрокВсего
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("МассивДокументовКПроверке", МассивДокументовКПроверке);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект= ВыборкаДетальныеЗаписи.ДокументОснование.ПолучитьОбъект();
		//ДокументОбъект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
		ДокументОбъект.ДействияПриОтказеОтИсполненияДокумента();
		//итWMSПривилегированныйМодуль.ПроведениеДокументовПривелигированно(,ДокументОбъект);
		ОбработчикЗаписиПроведенияДокументов(ДокументОбъект);
		//ДокументОбъект.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
Процедура ИзменитьДанныеСостоянияСтрокДокумента(РезультатЗапроса=Неопределено,СостояниеИнициализации,ДокументОснование,ИдЗадачи=Неопределено)Экспорт 
	Если РезультатЗапроса=Неопределено и ИдЗадачи=Неопределено тогда
		Возврат;
	КонецЕсли;	
	Если РезультатЗапроса=Неопределено тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSСтрокиЗадачТСД.идСтроки
		|ИЗ
		|	РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
		|ГДЕ
		|	итWMSСтрокиЗадачТСД.ИдЗадачи = &ИдЗадачи";
		
		Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
		
		РезультатЗапроса=   Запрос.Выполнить();
	КонецЕсли;
	
	Если  РезультатЗапроса.Пустой() или ЭтоКонечноеСостоянияИнициализации(СостояниеИнициализации)  тогда
		Возврат;
	КонецЕсли;
	ОбъектДокументаКИзменения=ДокументОснование.ПолучитьОбъект();
	ВыборкаСтрокИзмененияСостояния=РезультатЗапроса.Выбрать();
	пока ВыборкаСтрокИзмененияСостояния.Следующий() цикл
		МассивСтрокДокументаКИзменения=ОбъектДокументаКИзменения.Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",ВыборкаСтрокИзмененияСостояния.идСтроки));
		для Каждого стр из МассивСтрокДокументаКИзменения цикл
			стр.СостояниеЗадачи=СостояниеИнициализации;
		КонецЦикла;
	КонецЦикла;
	ОбъектДокументаКИзменения.Записать();
КонецПроцедуры
Процедура УстановитьРежимПроведенияЗавершенногоДокумента(СтатусДокумента,РежимПроведения) Экспорт 
	Если СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой или
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда 
		РежимПроведения=РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;	   
КонецПроцедуры
Функция ЭтоКонечноеСостоянияИнициализации(СостояниеИнициализации)
	Если СостояниеИнициализации=Перечисления.итWMSСостоянияЗадачТСД.Выполнена 
		или СостояниеИнициализации=Перечисления.итWMSСостоянияЗадачТСД.Отменена тогда
		Возврат Истина;
	иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

Функция ВсеЗадачиДокументаЗафиксированны(Документ) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА итWMSЗадачиТСД.ФиксацияЗадачи
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ФиксированныеЗадачи,
		|	итWMSЗадачиТСД.ДокументОснование,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итWMSЗадачиТСД.ИдЗадачи) КАК КоличествоЗадач
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|ГДЕ
		|	итWMSЗадачиТСД.ДокументОснование = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSЗадачиТСД.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.ДокументОснование
		|ИЗ
		|	ВТ КАК ВТ
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ.ФиксированныеЗадачи = ВТ.КоличествоЗадач
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат Истина;
	КонецЕсли;
	    Возврат Ложь;
		
	КонецФункции
#КонецОбласти

#Область СлужебныеФункцииИПроцедурыОбработчикиВебСервиса
// Процедура - Обработчик данных служебного вызова
// Центральный обработчик операции веб сервеса -<<ServiceFunction>> 
// Параметры:
//  ДанныеОбработчика	 - Структура - структура данных для обработки и получения ответа, количество свойств не ограниченно 1 обязательный.
//  * КлючОперации - Строка - Наименование исполняемой операции
//
Процедура ОбработчикДанныхСлужебногоВызова(ДанныеОбработчика)Экспорт 
	
	Если  ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючОперации") тогда
		Возврат
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ТестВремениОтклика" тогда
		ТестВремяОтклика(ДанныеОбработчика);
	КонецЕсли;
	
	Если ДанныеОбработчика.КлючОперации="ПолучитьСписокЗадач" тогда
		ОбработчикПолучениеСпискаЗадачНаТСД(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ЗаписьЛогаДляТСД" тогда
		//ОбработчикЗаписиЛогаДляТСД(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ПодтвердитьПринятиеДанных" тогда
		ОбработчикПринятияИзменений(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ЯчейкаПоШтрихКоду" тогда
		ЗаполнитьДаннымиЯчейки(ДанныеОбработчика);	
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ПринтерПоШтрихКоду" тогда
		ЗаполнитьДаннымиПринтера(ДанныеОбработчика);	
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ПечатьSSCC" тогда
		Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ИдентификаторУпаковки") тогда
			Возврат
		КонецЕсли;
		Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"Принтер") тогда
			Возврат
		КонецЕсли;
		ПечатьSSCCНаПринтерЭтикеток(ДанныеОбработчика.ИдентификаторУпаковки,ДанныеОбработчика.Принтер);	
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="СканированиеШтрихКодовВТаблицу" тогда
		Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"Данные") тогда
			Возврат		
		КонецЕсли;
		СохранитьДанныеВTXT(ДанныеОбработчика);
		
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="КонтрольнаяАгригацияМарок" Тогда
		Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"Документ") тогда
			Возврат
		КонецЕсли;	
		Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"Данные") тогда
			Возврат		
		КонецЕсли;
		итWMS_АгрегацияМарокЗаписьДанныхВБазу(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ПолучитьДанныеПоШтрихКодуНоменклатуры" тогда
		Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючПолученияДанных") тогда
			Возврат
		КонецЕсли;	
		ПолучитьДанныеПоНоменклатуре(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ЗапросДанныхМарок" тогда
		ПолучитьДанныеПомарочногоУчета(ДанныеОбработчика);
	КонецЕсли;
	
	Если ДанныеОбработчика.КлючОперации="ЗапросДанныхМарокПоЗадачам" тогда
		//ПолучитьДанныеПомарочногоУчетаЗадач(ДанныеОбработчика);
		ПолучитьДанныеПомарочногоУчетаЗадачЦиклом(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ЗапросДанныхМарокПоЗадачамАссинхронно" тогда
		НачатьПроцессСбораДанныхПМУЗадача(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ПолучениеАссинхронноЗаписанныхДанныхМарокПоЗадачам" тогда
		ПолучитьДанныеПМУЗадачИзХранилища(ДанныеОбработчика);
	КонецЕсли;

	Если ДанныеОбработчика.КлючОперации="Ревизор" тогда
		ОбработкаДанныхДляРевизии(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="СинхронизацияСправочныхДанных" Тогда 
		СинхронизацияСправочныхДанных(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ВосстановитьПотерянныеДанные" Тогда
		ВосстановлениеПотерянныхДанных (ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ПолучитьДанныеДляПечатиЭтикетки" тогда
		ОбработчикДляСбораДанныхЭтикетки(ДанныеОбработчика);
	КонецЕсли;
    Если ДанныеОбработчика.КлючОперации="ПолучитьДанныеПаллетыКоробаПМУ" тогда
		ПолучитьДанныеПаллетыКоробаПМУ(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ПолучитьДанныеМаркиEAN" тогда
		ПолучитьДанныеМаркиEAN(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ПолучитьДанныеОрганизацииПринтераПоГуиду" тогда
		ПечатьЭтикеткиПоискДанныхПоГУИД(ДанныеОбработчика);	
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ПечатьЭтикеткиГрупповойТары" тогда
		ПечатьЭтикеткиГрупповойТары(ДанныеОбработчика);	
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ПолучитьКарточкиНоменклатур" тогда
		ПолучитьКарточкиНоменклатур(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ПрисвоитьШтрихКодКарточкеНМ" тогда
		ЗаписатьДанныеШкНоменклатуры(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ПолучитьДанныеМарокИНоменклатурыПоSSCCGTIN" Тогда
		ПолучитьДанныеМарокИНоменклатурыПоSSCCGTIN(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="УдалениеРегистрацииТСД" тогда
		УдалениеРегистрацииТСД(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ДатаВремяСервера" тогда
		ДатаВремяСервера(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.КлючОперации="ПолучениеНовойНаборки" тогда
		итWMSОбработчикДанныхНаборки.ВыдатьНаборкуНаТСД(ДанныеОбработчика);
	КонецЕсли;



КонецПроцедуры
Процедура ДатаВремяСервера(ДанныеОбработчика)
	ДанныеОбработчика.Вставить("ДатаВремяСервера",ТекущаяДата());
	КонецПроцедуры
Процедура УдалениеРегистрацииТСД(ДанныеОбработчика)
	Если  ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТСДИД") тогда
		Возврат
	КонецЕсли;
	ТСД=НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSЗадачиТСД.ИдЗадачи
		|ИЗ
		|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|ГДЕ
		|	НЕ итWMSЗадачиТСД.ФиксацияЗадачи
		|	И итWMSЗадачиТСД.ТСД = &ТСД";
	
	Запрос.УстановитьПараметр("ТСД", ТСД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","На тсд числятся задачи,снимите их через диспетчер терминалов и повторите операцию");
		Возврат;
	КонецЕсли;
	ПланыОбмена.УдалитьРегистрациюИзменений(ТСД.УзелПланаОбмена,Неопределено);
	КонецПроцедуры


Процедура ПолучитьДанныеМарокИНоменклатурыПоSSCCGTIN(ДанныеОбработчика)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	алкХранилищеУпаковокСрезПоследних.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВтУпаковка
		|ИЗ
		|	РегистрСведений.алкХранилищеУпаковок.СрезПоследних КАК алкХранилищеУпаковокСрезПоследних
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &SSCC
		|				ТОГДА алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки = &ШтрихКод
		|			КОГДА &GTIN
		|				ТОГДА алкХранилищеУпаковокСрезПоследних.Упаковка = &ШтрихКод
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	алкХранилищеАкцизныхМарокСрезПоследних.Марка КАК Марка,
		|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ КАК СправкаБ,
		|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ПОМЕСТИТЬ ВтДанныеМарок
		|ИЗ
		|	ВтУпаковка КАК ВтУпаковка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
		|		ПО ВтУпаковка.Упаковка = алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
		|			И (НЕ алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеМарок.СправкаБ КАК СправкаБ,
		|	ВтДанныеМарок.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ПОМЕСТИТЬ ВтАлкогольнаяПродукцияИСправкаБ
		|ИЗ
		|	ВтДанныеМарок КАК ВтДанныеМарок
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеМарок.АлкогольнаяПродукция,
		|	ВтДанныеМарок.СправкаБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.ДатаПроизводства КАК ДатаРозлива,
		|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец КАК Номенклатура,
		|	ВтАлкогольнаяПродукцияИСправкаБ.СправкаБ КАК СправкаБ,
		|	ВтАлкогольнаяПродукцияИСправкаБ.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ПОМЕСТИТЬ ДанныеСправкиБ
		|ИЗ
		|	ВтАлкогольнаяПродукцияИСправкаБ КАК ВтАлкогольнаяПродукцияИСправкаБ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
		|		ПО ВтАлкогольнаяПродукцияИСправкаБ.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеСправкиБ.СправкаБ) КАК СправкаБ
		|ПОМЕСТИТЬ КоличествоСправокБ
		|ИЗ
		|	ДанныеСправкиБ КАК ДанныеСправкиБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеМарок.Марка КАК Марка,
		|	МАКСИМУМ(ДанныеСправкиБ.Номенклатура) КАК Номенклатура,
		|	МАКСИМУМ(ДанныеСправкиБ.ДатаРозлива) КАК ДатаРозлива,
		|	МАКСИМУМ(ЕСТЬNULL(КоличествоСправокБ.СправкаБ, 1)) КАК КоличествоСправок
		|ПОМЕСТИТЬ ВтИтоги
		|ИЗ
		|	ВтДанныеМарок КАК ВтДанныеМарок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеСправкиБ КАК ДанныеСправкиБ
		|		ПО ВтДанныеМарок.СправкаБ = ДанныеСправкиБ.СправкаБ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоСправокБ КАК КоличествоСправокБ
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеМарок.Марка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтИтоги.Марка.ЗначениеШтрихКода КАК Марка,
		|	ВтИтоги.Номенклатура КАК Номенклатура,
		|	ВтИтоги.ДатаРозлива КАК ДатаРозлива,
		|	ВтИтоги.КоличествоСправок КАК КоличествоСправок
		|ИЗ
		|	ВтИтоги КАК ВтИтоги
		|ИТОГИ
		|	МАКСИМУМ(ДатаРозлива),
		|	МАКСИМУМ(КоличествоСправок)
		|ПО
		|	Номенклатура";
	
	Запрос.УстановитьПараметр("GTIN", ДанныеОбработчика.ЭтоGTIN);
	Запрос.УстановитьПараметр("SSCC", ДанныеОбработчика.ЭтоSSCC);
	Запрос.УстановитьПараметр("ШтрихКод", ДанныеОбработчика.ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		Если ВыборкаНоменклатура.КоличествоСправок>1  Тогда 
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки","несколько справок б");
			Возврат
		КонецЕсли;
		ДанныеОбработчика.Вставить("Номенклатура",ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор());
		ДанныеОбработчика.Вставить("НоменклатураНаименование",ВыборкаНоменклатура.Номенклатура.Наименование);
        ДанныеОбработчика.Вставить("ДатаРозлива",ВыборкаНоменклатура.ДатаРозлива);
		ДанныеОбработчика.Вставить("МассивМарок",новый Массив);
		ВыборкаДетальныеЗаписи = ВыборкаНоменклатура.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеОбработчика.МассивМарок.Добавить(ВыборкаДетальныеЗаписи.Марка);
		КонецЦикла;
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура ЗаписатьДанныеШкНоменклатуры(ДанныеОбработчика)
	Если  ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ШтрихКод") тогда
		Возврат
	КонецЕсли;
    Если  ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипШтрихКода") тогда
		Возврат
	КонецЕсли;
	Если  ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"Номенклатура") тогда
		Возврат
	КонецЕсли;
	Номенклатура=НайтиНоменклатуруПоУникальномуИД(ДанныеОбработчика.Номенклатура);
	
	Если ДанныеОбработчика.ТипШтрихКода="EAN13" Тогда 
		НаборЗаписей=РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Владелец.Установить(Номенклатура);
		НаборЗаписей.Отбор.ЕдиницаИзмерения.Установить(Номенклатура.ЕдиницаХраненияОстатков);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.Владелец=Номенклатура;
		НоваяЗапись.ЕдиницаИзмерения=Номенклатура.ЕдиницаХраненияОстатков;
		НоваяЗапись.ТипШтрихкода=ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		НоваяЗапись.Штрихкод=ДанныеОбработчика.ШтрихКод;
		НаборЗаписей.Записать();
	КонецЕсли;
	Если ДанныеОбработчика.ТипШтрихКода="ITF14" Тогда 
		НаборЗаписей=РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Владелец.Установить(Номенклатура);
		НаборЗаписей.Отбор.ЕдиницаИзмерения.Установить(Номенклатура.ЕдиницаИзмеренияМест);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.Владелец=Номенклатура;
		НоваяЗапись.ЕдиницаИзмерения=Номенклатура.ЕдиницаИзмеренияМест;
		НоваяЗапись.ТипШтрихкода=ПланыВидовХарактеристик.ТипыШтрихкодов.ITF14;
		НоваяЗапись.Штрихкод=ДанныеОбработчика.ШтрихКод;
		НаборЗаписей.Записать();
	КонецЕсли;
	ДанныеОбработчика.Вставить("ТригерИсполнения",Истина);	
	КонецПроцедуры

Процедура ПолучитьКарточкиНоменклатур(ДанныеОбработчика)
	Если  ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ШтрихКод") тогда
		Возврат
	КонецЕсли;
    МассивКарточек=ПолучитьОбъектПоТиповомуШк(ДанныеОбработчика.ШтрихКод);
	МассивИтоговыхДанных =новый Массив;
	Для Каждого стр из МассивКарточек цикл
		СтруктураДанных=новый Структура;
		СтруктураДанных.Вставить("Номенклатура",стр.УникальныйИдентификатор());
		СтруктураДанных.Вставить("НоменклатураПредставление",стр.наименование);
		МассивИтоговыхДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	ДанныеОбработчика.Вставить("МассивКарточек",МассивИтоговыхДанных);
	КонецПроцедуры

Процедура ПечатьЭтикеткиГрупповойТары(ДанныеОбработчика)
	//ОбработчикПечати=Обработки.итWMSПечатныеФормы.Создать();
	ДанныеТСД=ПолучитьДанныеПоТСДНаТекущийМомент(ДанныеОбработчика.ТСДИД);
	Если ДанныеТСД = Неопределено тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных по ТСД");
		Возврат
	КонецЕсли;	
	Если ДанныеТСД.Состояние=Перечисления.итWMSСостоянияТСД.Отключен тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Закройте программу и авторизуйтесь заново");
		Возврат
	КонецЕсли;	
	СтруктураХраненияДанныхНастройкиWMS= итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если ТиповойОбработчикВыявленияОшибок(СтруктураХраненияДанныхНастройкиWMS,"Филиал") тогда
		ДанныеОбработчика=СтруктураХраненияДанныхНастройкиWMS;
		Возврат
	КонецЕсли;	

	Для n=1 по ДанныеОбработчика.КоличествоЭтикеток Цикл 
		Если ДанныеОбработчика.ПечатьНовыхЭтикеток Тогда 
			Если  ДанныеОбработчика.GTIN  Тогда
				ДанныеОбработчика.ШкУпаковки=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(СтруктураХраненияДанныхНастройкиWMS.Филиал,,ДанныеТСД.РаботникСклада.ФизическоеЛицо,Перечисления.итWMSТипыЛогистическойЕденицыWMS.СборныйКороб);
			иначе
				ДанныеОбработчика.ШкУпаковки=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(СтруктураХраненияДанныхНастройкиWMS.Филиал,,ДанныеТСД.РаботникСклада.ФизическоеЛицо);
			КонецЕсли;
			ДанныеОбработчика.ШкУпаковкиТекст=ДанныеОбработчика.ШкУпаковки;
		КонецЕсли;	
		для m=1 по ДанныеОбработчика.КоличествоКопийЭтикетки Цикл
			ОбработчикПечати=Обработки.итWMSПечатныеФормы.Создать();
			ОбработчикПечати.ПечатьГрупповойЭтикетки(ДанныеОбработчика,ДанныеОбработчика.Принтер);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ПечатьЭтикеткиПоискДанныхПоГУИД(ДанныеОбработчика)
Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ГУИД") Тогда 
		Возврат
КонецЕсли;
ДанныеОбработчика.Вставить("ДанныеЭтикетки",новый Структура());	
ДанныеЭтикетки= ДанныеОбработчика.ДанныеЭтикетки;
Принтер=ПолучитьОбъектПоШтрихКоду(Строка(ДанныеОбработчика.ГУИД),тип("СправочникСсылка.ИтWMSОборудование"));
Если Принтер<> Неопределено Тогда 
	ДанныеЭтикетки.Вставить("ТекущийПринтер",Принтер.УникальныйИдентификатор());
	ДанныеЭтикетки.Вставить("ТекущийПринтерПредставление",Принтер.Наименование);
    Возврат;
КонецЕсли;	
Организация=Справочники.Организации.ПолучитьСсылку(ДанныеОбработчика.ГУИД);
ОбъектОрганизации=Организация.ПолучитьОбъект();
Если ОбъектОрганизации<>Неопределено Тогда 
	ДанныеЭтикетки.Вставить("ОрганизацияИзготовитель",Организация.Наименование);
	ДанныеЭтикетки.Вставить("ИНН",Организация.ИНН);
	ДанныеЭтикетки.Вставить("КПП",Организация.КПП);
	КОДЕГАИСорг=ПолучитьКодЕгаисОрганизации(Организация); 
	Если КОДЕГАИСорг=Неопределено Тогда 
		 КОДЕГАИСорг="";
	 КонецЕсли;
	СтруктураОтвета=ПолучитьЮрФактАдресОрганизацииКонтрагента(Организация.Ссылка);
	Если СтруктураОтвета<>Неопределено Тогда 
	ДанныеЭтикетки.Вставить("ЮрФактАдрес",СтруктураОтвета.ФактАдрес);
	КонецЕсли;
    ДанныеЭтикетки.Вставить("КОДЕГАИСорг",КОДЕГАИСорг);
	Возврат
КонецЕсли;
Контрагент=Справочники.Контрагенты.ПолучитьСсылку(ДанныеОбработчика.ГУИД);
КонтрагентОбъект=Контрагент.ПолучитьОбъект();
Если КонтрагентОбъект<>Неопределено Тогда 
	ДанныеЭтикетки.Вставить("ОрганизацияИзготовитель",КонтрагентОбъект.Наименование);
	ДанныеЭтикетки.Вставить("ИНН",КонтрагентОбъект.ИНН);
	ДанныеЭтикетки.Вставить("КПП",КонтрагентОбъект.КПП);
	КОДЕГАИСорг=ПолучитьКодЕгаисОрганизации(КонтрагентОбъект); 
	Если КОДЕГАИСорг=Неопределено Тогда 
		 КОДЕГАИСорг="";
	 КонецЕсли;
	СтруктураОтвета=ПолучитьЮрФактАдресОрганизацииКонтрагента(КонтрагентОбъект.Ссылка);
	Если СтруктураОтвета<>Неопределено Тогда 
	ДанныеЭтикетки.Вставить("ЮрФактАдрес",СтруктураОтвета.ФактАдрес);
	КонецЕсли;
    ДанныеЭтикетки.Вставить("КОДЕГАИСорг",КОДЕГАИСорг);
	Возврат
КонецЕсли;


КонецПроцедуры
	

// Процедура - Получить данные паллеты короба ПМУ
// Получает данные для печати этикетки по SSCC,GTIN пму учета
// Параметры:
//  ДанныеОбработчика	 - Структура - структура данных для обработки и получения ответа, количество свойств не ограниченно 3 обязательных.
//  * КлючОперации - Строка - ПолучитьДанныеПаллетыКоробаПМУ
//  * ТСДИД - Строка - Идентификатор терминала 
//
Процедура ПолучитьДанныеПаллетыКоробаПМУ(ДанныеОбработчика)
Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТСДИД") Тогда 
		Возврат
КонецЕсли;
СтруктураДанныхТСД=итWMSСлужебныеПроцедурыИФункции.ПолучитьДанныеПоТСДНаТекущийМомент(ДанныеОбработчика.ТСДИД);
Если СтруктураДанныхТСД = Неопределено Тогда 
	ДанныеОбработчика.Вставить("Статус",404);
	ДанныеОбработчика.Вставить("ОписаниеОшибки","Нет данных по ТСД");
	Возврат
КонецЕсли;	

Если ДанныеОбработчика.Свойство("GTIN") Тогда 
	ДанныеЭтикетки=ЗаполнитьСтруктуруПараметровГрупповойЭтикеткиПМУ(,ДанныеОбработчика.GTIN);
КонецЕсли;
Если ДанныеОбработчика.Свойство("SSCC") Тогда 
	ДанныеЭтикетки=ЗаполнитьСтруктуруПараметровГрупповойЭтикеткиПМУ(ДанныеОбработчика.SSCC);
КонецЕсли;
ДанныеЭтикетки.ОрганизацияИзготовитель=Строка(ДанныеЭтикетки.ОрганизацияИзготовитель);
ДанныеОбработчика.Вставить("ДанныеЭтикетки",ДанныеЭтикетки);
	КонецПроцедуры

// Процедура - Получить данные марки EAN
// Получает данные для печати этикетки по EAN,Марке
// Параметры:
//   ДанныеОбработчика	 - Структура - структура данных для обработки и получения ответа, количество свойств не ограниченно 3 обязательных.
//  * КлючОперации - Строка - ПолучитьДанныеМаркиEAN
//  * ТСДИД - Строка - Идентификатор терминала 
//
Процедура ПолучитьДанныеМаркиEAN(ДанныеОбработчика)
Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТСДИД") Тогда 
		Возврат
КонецЕсли;
СтруктураДанныхТСД=итWMSСлужебныеПроцедурыИФункции.ПолучитьДанныеПоТСДНаТекущийМомент(ДанныеОбработчика.ТСДИД);
Если ДанныеОбработчика.Свойство("Марка") Тогда	
	ДанныеЭтикетки=ЗаполнитьСтруктуруПараметровГрупповойЭтикеткиПМУ(,,ДанныеОбработчика.Марка);
КонецЕсли;
Если ДанныеОбработчика.Свойство("EAN") Тогда
	ДанныеШк=ПолучитьДанныеПоТиповомуШк(ДанныеОбработчика.EAN);
	Если ДанныеШк=Неопределено Тогда 
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Нет данных по Штрих-коду");
		Возврат
	КонецЕсли;
	Если ТипЗнч(ДанныеШк.Владелец)<>Тип("СправочникСсылка.Номенклатура") Тогда 
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","данные по шк найдены, но они не относятся к номенклатуре");
		Возврат
	КонецЕсли;
	ДанныеЭтикетки=СформироватьСтруктуруПараметровДляГрупповойЭтикетки();
	Если ДанныеШк.Владелец.алкКрепость>0 Тогда 
		ДанныеПоАлкогольнойНоменклатуре(ДанныеШк.Владелец,ДанныеЭтикетки);
	иначе
		ДанныеПоБезАлкогольнойНоменклатуре(ДанныеШк.Владелец,ДанныеЭтикетки)
	КонецЕсли;	
КонецЕсли;
ДанныеЭтикетки.Продукция=Строка(ДанныеЭтикетки.Продукция);
ДанныеЭтикетки.ОрганизацияИзготовитель=Строка(ДанныеЭтикетки.ОрганизацияИзготовитель);
ДанныеОбработчика.Вставить("ДанныеЭтикетки",ДанныеЭтикетки);
КонецПроцедуры


	
// Процедура - Восстановление потерянных данных
// Если на тсд произошел сбой, и были потерянные данные, процедура сравнивает ид задач находящих на тсд
// и ид задач , которые должны быть на тсд, по данным сервера.
// Если такие найдена, то регестрирует их к обмену
// Параметры:
//  ДанныеОбработчика	 - Структура - структура данных для обработки и получения ответа, количество свойств не ограниченно 3 обязательных.
//  * КлючОперации - Строка - ВосстановитьПотерянныеДанные
//  * МассивЗадачНаТСД - Массив - Массив задач находящихся на тсд с типом УникальныйИдентификатор
//  * ТСДИД - Строка - Идентификатор терминала с задачами
//
Процедура ВосстановлениеПотерянныхДанных (ДанныеОбработчика)
	Если  ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"МассивЗадачНаТСД") тогда
		Возврат
	КонецЕсли;
	Если  ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТСДИД") тогда
		Возврат
	КонецЕсли;
	ТСД=НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСД.ТСД,
	|	итWMSЗадачиТСД.ДокументОснование,
	|	итWMSЗадачиТСД.ТипЗадачи,
	|	итWMSЗадачиТСД.ИдЗадачи,
	|	итWMSЗадачиТСД.ИдЗадачиРодителя
	|ПОМЕСТИТЬ ВтНеЗафиксированныеЗадачиТСД
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	НЕ итWMSЗадачиТСД.ФиксацияЗадачи
	|	И итWMSЗадачиТСД.ТСД = &ТСД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтНеЗафиксированныеЗадачиТСД.ТСД,
	|	ВтНеЗафиксированныеЗадачиТСД.ДокументОснование,
	|	ВтНеЗафиксированныеЗадачиТСД.ТипЗадачи,
	|	ВтНеЗафиксированныеЗадачиТСД.ИдЗадачи,
	|	ВтНеЗафиксированныеЗадачиТСД.ИдЗадачиРодителя
	|ИЗ
	|	ВтНеЗафиксированныеЗадачиТСД КАК ВтНеЗафиксированныеЗадачиТСД
	|ГДЕ
	|	НЕ ВтНеЗафиксированныеЗадачиТСД.ИдЗадачи В (&МассивЗадачНаТСД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтНеЗафиксированныеЗадачиТСД.ТСД,
	|	ВтНеЗафиксированныеЗадачиТСД.ДокументОснование,
	|	ВтНеЗафиксированныеЗадачиТСД.ТипЗадачи,
	|	ВтНеЗафиксированныеЗадачиТСД.ИдЗадачи,
	|	ВтНеЗафиксированныеЗадачиТСД.ИдЗадачиРодителя";
	
	Запрос.УстановитьПараметр("МассивЗадачНаТСД", ДанныеОбработчика.МассивЗадачНаТСД);
	Запрос.УстановитьПараметр("ТСД", ТСД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдЗадачи.Установить(ВыборкаДетальныеЗаписи.ИдЗадачи);
		НаборЗаписей.Отбор.ДокументОснование.Установить(ВыборкаДетальныеЗаписи.ДокументОснование);
		НаборЗаписей.Отбор.ТСД.Установить(ВыборкаДетальныеЗаписи.ТСД);
		НаборЗаписей.Отбор.ТипЗадачи.Установить(ВыборкаДетальныеЗаписи.ТипЗадачи);
		НаборЗаписей.Отбор.ИдЗадачиРодителя.Установить(ВыборкаДетальныеЗаписи.ИдЗадачиРодителя);
		ПланыОбмена.ЗарегистрироватьИзменения(ВыборкаДетальныеЗаписи.ТСД.УзелПланаОбмена,НаборЗаписей);	
	КонецЦикла;
	
	
	итWMSОбработчикиРегистрации_И_Загрузки.ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика);
	
КонецПроцедуры

Процедура ТестВремяОтклика(ДанныеОбработчика)
	ДанныеОбработчика.Вставить("Статус",200);
КонецПроцедуры

// Процедура - Получить данные помарочного учета
// Помещает данные марок по документу или другому ключу во входящую структуру
// Параметры:
//  ДанныеОбработчика	 - Структура -  структура данных для обработки и получения ответа, количество свойств не ограниченно 3 обязательных.
//  * КлючОперации - Строка - ЗапросДанныхМарок
//  * ТипЗадачи - Перечисления.итWMSТипыЗадачТСД - тип задачи , для которой запрашиваются данные
//  * КлючПолученияДанных - Произвольный - для разных задач разный ключ. Если приемка УникальныйИдентификатор документа.
//
Процедура ПолучитьДанныеПомарочногоУчета(ДанныеОбработчика)
	Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипЗадачи") Тогда 
		Возврат
	КонецЕсли;
	Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючПолученияДанных") Тогда 
		Возврат
	КонецЕсли;
	Если ДанныеОбработчика.ТипЗадачи = Перечисления.итWMSТипыЗадачТСД.Приемка или
		ДанныеОбработчика.ТипЗадачи = Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть тогда
		итWMSОбработчикДанныхПриемки.ПолучитьДанныеПомарочногоУчетаДокументов(ДанныеОбработчика);
	КонецЕсли;		 
КонецПроцедуры

// Процедура - Ит WMS агрегация марок запись данных в базу
// Это процедура , которая записвает документ созданный на стороне ТСД , с данными свободной агрегации
// Параметры:
//  ДанныеОбработчика	 - Структура - структура данных для обработки и получения ответа, количество свойств не ограниченно 3 обязательных. 
//  * Документ - УникальныйИдентификатор - Идентификатор документа на ТСД
//  * Данные - ТаблицаЗначений,Массив - Таблица с данными марок или структурированный массив
//
Процедура итWMS_АгрегацияМарокЗаписьДанныхВБазу(ДанныеОбработчика)
	ДокументСвободнойАгрегации=НайтиСоздатьДокументСвободнойАгригации(ДанныеОбработчика.Документ,ДанныеОбработчика);
	Если ДокументСвободнойАгрегации.Пустая() тогда 
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки", "не верный формат ГУИД");
		Возврат
	КонецЕсли;	
	НаборЗаписей=РегистрыСведений.итWMS_АгрегацияМарок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументСвободнойАгрегации);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	для Каждого стр из ДанныеОбработчика.Данные цикл
		НоваяЗапись=НаборЗаписей.Добавить();
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Марка=НайтиСоздатьМаркуСБлокировкой(стр.Марка);
		Если Марка=Неопределено Тогда 
			ВызватьИсключение "Ошибка создания марки";
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
		ЗаполнитьЗначенияСвойств(НоваяЗапись,стр);
		НоваяЗапись.Номенклатура=НайтиНоменклатуруПоУникальномуИД(стр.Номенклатура);
		НоваяЗапись.Марка=Марка;
		НоваяЗапись.ДокументОснование=ДокументСвободнойАгрегации;
		НоваяЗапись.Период=ТекущаяДата();
		НоваяЗапись.АктивностьЗаписи=Истина;
	КонецЦикла;
	НаборЗаписей.Записать();
	ДанныеТСД=ПолучитьДанныеПоТСДНаТекущийМомент(ДанныеОбработчика.ТСДИД);
	ЗаполнитьДокументАгрегацииДанными(ДокументСвободнойАгрегации,ДанныеТСД);
	
	ДанныеОбработчика.Вставить("ПодтверждениеЗаписи",Истина);
	
	//Параметры=новый Массив;
	//ФоновыеЗадания.Выполнить("итWMSСлужебныеПроцедурыИФункции.ОтправитьПисьмоОбОшибкахВМарках",Параметры,новый УникальныйИдентификатор(),"ОтправитьПисьмоОбОшибкахВМарках");
	
КонецПроцедуры

Процедура ЗаполнитьДокументАгрегацииДанными(ДокументСвободнойАгрегации,ДанныеТСД)
	ОбъектДокумента=ДокументСвободнойАгрегации.ПолучитьОбъект();
	ОбъектДокумента.Ответственный=ДанныеТСД.РаботникСклада;
	ОбъектДокумента.ДатаЗавершенияДокумента=ТекущаяДата();
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMS_АгрегацияМарокСрезПоследних.SSCC КАК ИдентификаторУпаковки,
	|	итWMS_АгрегацияМарокСрезПоследних.Номенклатура,
	|	итWMS_АгрегацияМарокСрезПоследних.ДатаРозлива,
	|	КОЛИЧЕСТВО(итWMS_АгрегацияМарокСрезПоследних.Номенклатура) КАК Количество
	|ИЗ
	|	РегистрСведений.итWMS_АгрегацияМарок.СрезПоследних(, ДокументОснование = &Ссылка) КАК итWMS_АгрегацияМарокСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMS_АгрегацияМарокСрезПоследних.SSCC,
	|	итWMS_АгрегацияМарокСрезПоследних.Номенклатура,
	|	итWMS_АгрегацияМарокСрезПоследних.ДатаРозлива";
	
	Запрос.УстановитьПараметр("Ссылка",ДокументСвободнойАгрегации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ОбъектДокумента.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
		НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
	КонецЦикла;
	ОбъектДокумента.Записать();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры


Процедура ОбработчикДляСбораДанныхЭтикетки(ДанныеОбработчика)
	ШтрихКод=ДанныеОбработчика.ШтрихКод;
	Если СтрДлина(ШтрихКод)>50  Тогда 
		СтруктураДанных=ДанныеЭтикеткиПМУУчета(,,ШтрихКод);
		ДанныеОбработчика.Вставить("СтруктураДанных",СтруктураДанных);
	иначе
		Если ПроверитьSSCCНаЛеквидность(ШтрихКод) Тогда 
			СтруктураДанных=ДанныеЭтикеткиПМУУчета(ШтрихКод);
			ДанныеОбработчика.Вставить("СтруктураДанных",СтруктураДанных);
		КонецЕсли;
		Если ПроверитьGTINНаЛеквидность(ШтрихКод) Тогда 
			СтруктураДанных=ДанныеЭтикеткиПМУУчета(,ШтрихКод);
			ДанныеОбработчика.Вставить("СтруктураДанных",СтруктураДанных);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДанныеНМПоШК(ШтрихКод)
	ОбработкаПечати=Обработки.итWMSПечатныеФормы.Создать();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец,
		|	Штрихкоды.Владелец.алкКрепость КАК Крепость
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Штрихкод
		|	И ТИПЗНАЧЕНИЯ(Штрихкоды.Владелец) = ТИП(Справочник.Номенклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	Штрихкоды.Владелец";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивДанных=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураДанных=ОбработкаПечати.СформироватьСтруктуруПараметровДляГрупповойЭтикетки();
		Если ВыборкаДетальныеЗаписи.Крепость>0 Тогда 
			ОбработкаПечати.ДанныеПоАлкогольнойНоменклатуре(ВыборкаДетальныеЗаписи.Владелец,СтруктураДанных);
		иначе
			ОбработкаПечати.ДанныеПоБезАлкогольнойНоменклатуре(ВыборкаДетальныеЗаписи.Владелец,СтруктураДанных);
		КонецЕсли;
	КонецЦикла;
	КонецФункции

Функция  ДанныеЭтикеткиПМУУчета(SSCC="",GTIN="",Марка="")
	ОбработкаПечати=Обработки.итWMSПечатныеФормы.Создать();
	СтруктураДанных=ОбработкаПечати.СформироватьСтруктуруПараметровДляГрупповойЭтикетки();
	Если SSCC<> "" Тогда 
		ОбработкаПечати.ЗаполнитьДанныеПоSSCC(SSCC,СтруктураДанных);
	ИначеЕсли GTIN<>"" Тогда 
		ОбработкаПечати.ЗаполнитьДанныеПоGTIN(GTIN,СтруктураДанных);
	иначе
		ОбработкаПечати.ЗаполнитьСтруктуруПараметровЭтикеткиПоМарке(Марка,СтруктураДанных);
	КонецЕсли;
    ПреобразовательСтруктурДляПередчиНаТСД(СтруктураДанных);
	Возврат СтруктураДанных;
КонецФункции


Процедура ОтправитьПисьмоОбОшибкахВМарках(Параметры) Экспорт 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMS_АгрегацияМарок.Марка,
	|	КОЛИЧЕСТВО(итWMS_АгрегацияМарок.Марка) КАК Количество
	|ПОМЕСТИТЬ МаркиКПоиску
	|ИЗ
	|	РегистрСведений.итWMS_АгрегацияМарок КАК итWMS_АгрегацияМарок
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMS_АгрегацияМарок.Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMS_АгрегацияМарок.SSCC,
	|	итWMS_АгрегацияМарок.GTIN,
	|	итWMS_АгрегацияМарок.Интервал,
	|	МаркиКПоиску.Марка,
	|	МаркиКПоиску.Количество
	|ИЗ
	|	МаркиКПоиску КАК МаркиКПоиску
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMS_АгрегацияМарок КАК итWMS_АгрегацияМарок
	|		ПО МаркиКПоиску.Марка = итWMS_АгрегацияМарок.Марка
	|ГДЕ
	|	МаркиКПоиску.Количество > 1";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		Возврат
	КонецЕсли;	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТекстПисьма="";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекстПисьма=ТекстПисьма+"
		|"+" Марка: "+ВыборкаДетальныеЗаписи.Марка+"; SSCC: "+ВыборкаДетальныеЗаписи.SSCC+"; GTIN: "+ВыборкаДетальныеЗаписи.GTIN+"; Интервал: "+ВыборкаДетальныеЗаписи.Интервал+"; Количество: "+ВыборкаДетальныеЗаписи.Количество;
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	МассивПолучателей = Новый Массив;
	МассивКопияПолучателей = Новый Массив;
	Файлы = Новый Массив;
	МассивПолучателей.Добавить("stepin@opvz.ru");
	МассивКопияПолучателей.Добавить("e.buglov@gift58.ru");
	МассивКопияПолучателей.Добавить("kolyado@gift58.ru");
	МассивКопияПолучателей.Добавить("davydov@real58.org");
	МассивКопияПолучателей.Добавить("lazarev@real58.org");
	УчЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты; 
	Тема = "Задвоинные марки";// + ПредставлениеПериода(ОтчетПродажи10.НачалоПериода,КонецДня(ОтчетПродажи10.КонецПериода));
	//Если  ФайлДЗ.Существует() Тогда
	//		Файлы.Добавить(ФайлДЗ);
	//КонецЕсли; 
	//Если  ФайлПродажи.Существует() Тогда
	//		Файлы.Добавить(ФайлПродажи);
	//КонецЕсли; 	
	//ДополнительныйМодуль.ВоссоздатьПисьмо(УчЗапись,МассивПолучателей,МассивКопияПолучателей,Тема,ТекстПисьма,Файлы);
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
Процедура СохранитьДанныеВTXT(ДанныеОбработчика)
	ИмяВременногоФайла=ПолучитьИмяВременногоФайла("txt");
	ТекстовыйДокумент=новый ТекстовыйДокумент;
	для Каждого стр из ДанныеОбработчика.Данные цикл
		ТекстовыйДокумент.ДобавитьСтроку(стр.СканированныйШтрихКод+";");
	КонецЦикла;
	ТекстовыйДокумент.Записать(ИмяВременногоФайла);
	ДанныеОбработчика.Вставить("ИмяФайлаНаСервере",ИмяВременногоФайла);
КонецПроцедуры
Процедура ЗаполнитьДаннымиПринтера(ДанныеОбработчика)
	Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"Данные") тогда
		Возврат
	КонецЕсли;
	Принтер=ПолучитьОбъектПоШтрихКоду(ДанныеОбработчика.Данные,тип("СправочникСсылка.ИтWMSОборудование"));
	Если  ТипЗнч(Принтер)=тип("СправочникСсылка.ИтWMSОборудование") тогда
		ДанныеОбработчика.Вставить("ТекущийПринтер",Принтер.УникальныйИдентификатор());
		ДанныеОбработчика.Вставить("ТекущийПринтерПредставление",Принтер.Наименование);
	иначе
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Со штрихкодом "+ДанныеОбработчика.Данные+" принтера нет");
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗаполнитьДаннымиЯчейки(ДанныеОбработчика)
	Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"Данные") тогда
		Возврат
	КонецЕсли;
	Ячейка=ПолучитьОбъектПоШтрихКоду(ДанныеОбработчика.Данные,тип("СправочникСсылка.итСкладскиеЯчейки"));
	Если  ТипЗнч(Ячейка)=тип("СправочникСсылка.итСкладскиеЯчейки") тогда
		ДанныеОбработчика.Вставить("Ячейка",Ячейка.УникальныйИдентификатор());
		ДанныеОбработчика.Вставить("ЯчейкаПредставление",Ячейка.Наименование);
	иначе
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Со штрихкодом "+ДанныеОбработчика.Данные+" ячеек нет");
	КонецЕсли;
КонецПроцедуры
#Область ОбработкаПолучениеСпискаЗадачНаТСД 
Процедура ОбработчикПолучениеСпискаЗадачНаТСД(ДанныеОбработчика)
	Если не ДанныеОбработчика.Свойство("ТСДИД") тогда
		ДанныеОбработчика=новый Структура;
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","отсутсвует ключевое свойство <<ТСДИД>> ");
		Возврат
	КонецЕсли;
	ТипЗадачи=Неопределено;
	ДанныеОбработчика.Свойство("ТипЗадачи",ТипЗадачи);
	ТСД=НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСпискаЗадач();
	
	Запрос.УстановитьПараметр("ТСД", ТСД);
	Запрос.УстановитьПараметр("ТипЗадачи", ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДляПередачиДанных=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	ТаблицаДляПередачиДанных.Колонки.Добавить("ДокументОснование",новый ОписаниеТипов("строка"));
	ТаблицаДляПередачиДанных.Колонки.Добавить("ДокументОснованиеПредставление",новый ОписаниеТипов("строка"));
	ТаблицаДляПередачиДанных.Колонки.Добавить("ПредставлениеЗадачи",новый ОписаниеТипов("строка"));
	ТаблицаДляПередачиДанных.Колонки.Удалить("ДополнительныеДанные");
	ТаблицаДляПередачиДанных.Колонки.Добавить("ДополнительныеДанные",новый ОписаниеТипов("Структура"));
	ВыборкаПоДокументу=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл
		ВыборкаДетальнойЗаписи=ВыборкаПоДокументу.Выбрать();
		ДополнительныеДанныеПоДокументу=ПолучитьДополнительныеДанныеПоДокументу(ВыборкаПоДокументу.ДокументОснованиеСсылка);
		Пока ВыборкаДетальнойЗаписи.Следующий() Цикл 
			НоваяСтрока=ТаблицаДляПередачиДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальнойЗаписи);
			Если НоваяСтрока.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Приемка или
				НоваяСтрока.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть Тогда 
				ЗаполнитьДополнительнойИнформациейПриемку(НоваяСтрока);
			ИначеЕсли  НоваяСтрока.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Размещение Тогда 
				ЗаполнитьДополнительнойИнформациейРазмещение(НоваяСтрока);	  
			ИначеЕсли  НоваяСтрока.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Перемещение Тогда 
				ЗаполнитьДополнительнойИнформациейПеремещение(НоваяСтрока);
			ИначеЕсли  НоваяСтрока.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Наборка Тогда
				ЗаполнитьДополнительнойИнформациейНаборки(НоваяСтрока,ДополнительныеДанныеПоДокументу);
			ИначеЕсли  НоваяСтрока.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.КонтрольнаяАгрегация Тогда
				ЗаполнитьДополнительнойИнформациейКОА(НоваяСтрока);
			ИначеЕсли НоваяСтрока.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Инвентаризация  Тогда 
				ЗаполнитьДополнительнойИнформациейИнвентаризация(НоваяСтрока);
			ИначеЕсли НоваяСтрока.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Проверка  Тогда 
				ЗаполнитьДополнительнойИнформациейПроверка(НоваяСтрока);
			иначе
				НоваяСтрока.ДокументОснованиеПредставление=Строка(НоваяСтрока.ДокументОснованиеСсылка)
			КонецЕсли;	
			НоваяСтрока.ДокументОснование=Строка(НоваяСтрока.ДокументОснованиеСсылка.УникальныйИдентификатор());
		КонецЦикла;
	КонецЦикла;
	ТаблицаДляПередачиДанных.Колонки.Удалить("ДокументОснованиеСсылка");
	ТаблицаДляПередачиДанных.Колонки.Удалить("ЯчейкаОтправитель");
	ТаблицаДляПередачиДанных.Колонки.Удалить("ЯчейкаПолучатель");
	
	
	
	ДанныеОбработчика.Вставить("Результат",ТаблицаДляПередачиДанных);
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаСпискаЗадач()
//НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
//Если ТипЗнч(НастройкиWMS)<>Тип("Структура") Тогда 
//	Возврат ТиповойТекстзапросаСпискаЗадач();
//КонецЕсли;
//Если не НастройкиWMS.Свойство("ИспользоватьБуферЗадачДляКорзины") Тогда 
//	Возврат ТиповойТекстзапросаСпискаЗадач();
//КонецЕсли;
//Если   НастройкиWMS.ИспользоватьБуферЗадачДляКорзины Тогда 
//	Возврат ТекстЗапросаСпискаЗадачИзБуфера();
//иначе
	Возврат ТиповойТекстЗапросаСпискаЗадач();
//КонецЕсли;
КонецФункции

//Функция ТекстЗапросаСпискаЗадачИзБуфера()
//	Текст="ВЫБРАТЬ
//	      |	итWMSРолиРаботниковСкладаСписокРазрешенныхОперацийТСД.ОперацияТСД
//	      |ПОМЕСТИТЬ ТАблицаДоступныхТиповЗадачТСД
//	      |ИЗ
//	      |	РегистрСведений.итWMSСостояниеТСД.СрезПоследних(, ТСД = &ТСД) КАК итWMSСостояниеТСДСрезПоследних
//	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.итWMSРолиРаботниковСклада.СписокРазрешенныхОперацийТСД КАК итWMSРолиРаботниковСкладаСписокРазрешенныхОперацийТСД
//	      |		ПО итWMSСостояниеТСДСрезПоследних.Роль = итWMSРолиРаботниковСкладаСписокРазрешенныхОперацийТСД.Ссылка
//	      |
//	      |СГРУППИРОВАТЬ ПО
//	      |	итWMSРолиРаботниковСкладаСписокРазрешенныхОперацийТСД.ОперацияТСД
//	      |;
//	      |
//	      |////////////////////////////////////////////////////////////////////////////////
//	      |ВЫБРАТЬ
//	      |	ит_WMS_КорзинаЗадачТСД.ДокументОснование КАК ДокументОснованиеСсылка,
//	      |	ит_WMS_КорзинаЗадачТСД.ТипЗадачи,
//	      |	ит_WMS_КорзинаЗадачТСД.ИдЗадачи,
//	      |	ит_WMS_КорзинаЗадачТСД.Состояние,
//	      |	ит_WMS_КорзинаЗадачТСД.ИдентификаторУпаковки,
//	      |	ит_WMS_КорзинаЗадачТСД.ЯчейкаОтправитель,
//	      |	ит_WMS_КорзинаЗадачТСД.ЯчейкаПолучатель,
//	      |	ит_WMS_КорзинаЗадачТСД.ДополнительныеДанные
//	      |ИЗ
//	      |	РегистрСведений.ит_WMS_КорзинаЗадачТСД КАК ит_WMS_КорзинаЗадачТСД
//	      |ГДЕ
//	      |	ит_WMS_КорзинаЗадачТСД.ТСД = ЗНАЧЕНИЕ(Справочник.итWMSСправочникТСД.ПустаяСсылка)
//	      |	И ит_WMS_КорзинаЗадачТСД.ТипЗадачи В
//	      |			(ВЫБРАТЬ
//	      |				ТАблицаДоступныхТиповЗадачТСД.ОперацияТСД
//	      |			ИЗ
//	      |				ТАблицаДоступныхТиповЗадачТСД КАК ТАблицаДоступныхТиповЗадачТСД)
//	      |	И ВЫБОР
//	      |			КОГДА &ТипЗадачи <> НЕОПРЕДЕЛЕНО
//	      |				ТОГДА ит_WMS_КорзинаЗадачТСД.ТипЗадачи В (&ТипЗадачи)
//	      |			ИНАЧЕ ИСТИНА
//	      |		КОНЕЦ
//	      |ИТОГИ ПО
//	      |	ДокументОснованиеСсылка";

//	
//	
//	Возврат Текст;

//КонецФункции

Функция ТиповойТекстЗапросаСпискаЗадач()
	Текст="ВЫБРАТЬ
	      |	итWMSРолиРаботниковСкладаСписокРазрешенныхОперацийТСД.ОперацияТСД
	      |ПОМЕСТИТЬ ТАблицаДоступныхТиповЗадачТСД
	      |ИЗ
	      |	РегистрСведений.итWMSСостояниеТСД.СрезПоследних(, ТСД = &ТСД) КАК итWMSСостояниеТСДСрезПоследних
	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.итWMSРолиРаботниковСклада.СписокРазрешенныхОперацийТСД КАК итWMSРолиРаботниковСкладаСписокРазрешенныхОперацийТСД
	      |		ПО итWMSСостояниеТСДСрезПоследних.Роль = итWMSРолиРаботниковСкладаСписокРазрешенныхОперацийТСД.Ссылка
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	итWMSРолиРаботниковСкладаСписокРазрешенныхОперацийТСД.ОперацияТСД
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	итWMSЗадачиТСД.ДокументОснование КАК ДокументОснованиеСсылка,
	      |	итWMSЗадачиТСД.ТипЗадачи,
	      |	итWMSЗадачиТСД.ИдЗадачи,
	      |	итWMSЗадачиТСД.Состояние,
	      |	итWMSЗадачиТСД.ИдентификаторУпаковки,
	      |	итWMSЗадачиТСД.ЯчейкаОтправитель,
	      |	итWMSЗадачиТСД.ЯчейкаПолучатель,
	      |	итWMSЗадачиТСД.ДополнительныеДанные
	      |ИЗ
	      |	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	      |ГДЕ
	      |	итWMSЗадачиТСД.ТСД = ЗНАЧЕНИЕ(Справочник.итWMSСправочникТСД.ПустаяСсылка)
	      |	И итWMSЗадачиТСД.ТипЗадачи В
	      |			(ВЫБРАТЬ
	      |				ТАблицаДоступныхТиповЗадачТСД.ОперацияТСД
	      |			ИЗ
	      |				ТАблицаДоступныхТиповЗадачТСД КАК ТАблицаДоступныхТиповЗадачТСД)
	      |	И ВЫБОР
	      |			КОГДА &ТипЗадачи <> НЕОПРЕДЕЛЕНО
	      |				ТОГДА итWMSЗадачиТСД.ТипЗадачи В (&ТипЗадачи)
	      |			ИНАЧЕ ИСТИНА
	      |		КОНЕЦ
	      |ИТОГИ ПО
	      |	ДокументОснованиеСсылка";

	
	
	Возврат Текст;

КонецФункции

Функция  ПолучитьДополнительныеДанныеПоДокументу(Ссылка)
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.итWMSНаборка") Тогда 
		Возврат ПолучитьДанныеМаршрутаПоНаборке(Ссылка);
	КонецЕсли;	
	Возврат новый Структура;	
КонецФункции
Процедура ЗаполнитьДополнительнойИнформациейПриемку(СтрокаДанных)
	СтрокаДанных.ДокументОснованиеПредставление="№"+СтрокаДанных.ДокументОснованиеСсылка.Номер+" от "+Формат(СтрокаДанных.ДокументОснованиеСсылка.Дата,"ДФ=d.M.yy") +"
	|"+ " Номер входящего №
	|"+СтрокаДанных.ДокументОснованиеСсылка.НомерВходящегоДокумента+";Контрагент-"+ СтрокаДанных.ДокументОснованиеСсылка.Контрагент;
	Если СтрокаДанных.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть Тогда 
		СтрокаДанных.ПредставлениеЗадачи="Присовение новых SSCC";	
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДополнительнойИнформациейРазмещение(СтрокаДанных)
	СтрокаДанных.ДокументОснованиеПредставление="№"+СтрокаДанных.ДокументОснованиеСсылка.Номер+" от "+Формат(СтрокаДанных.ДокументОснованиеСсылка.Дата,"ДФ=d.M.yy") +"
	|"+ " Номер входящего №
	|"+СтрокаДанных.ДокументОснованиеСсылка.НомерВходящегоДокумента+";";
	СтрокаДанных.ПредставлениеЗадачи=Строка(СтрокаДанных.ЯчейкаОтправитель)+"->"+Строка(СтрокаДанных.ЯчейкаПолучатель)+"
	|"+"№"+СтрокаДанных.ИдентификаторУпаковки;
КонецПроцедуры

Процедура ЗаполнитьДополнительнойИнформациейПеремещение(СтрокаДанных)
	СтрокаДанных.ДокументОснованиеПредставление="№"+СтрокаДанных.ДокументОснованиеСсылка.Номер+" от "+Формат(СтрокаДанных.ДокументОснованиеСсылка.Дата,"ДФ=d.M.yy");
	Если ТипЗнч(СтрокаДанных.ДокументОснованиеСсылка.итОснование)=Тип("ДокументСсылка.итWMSНаборка") тогда
		СтрокаДанных.ДокументОснованиеПредставление=СтрокаДанных.ДокументОснованиеПредставление+"
		|"+"Перемещение под наборку №"+СтрокаДанных.ДокументОснованиеСсылка.итОснование.Номер;
	КонецЕсли;
	Если СтрокаДанных.ДокументОснованиеСсылка.ПополнениеСтока тогда
		СтрокаДанных.ДокументОснованиеПредставление=СтрокаДанных.ДокументОснованиеПредставление+"
		|"+"Пополнение стока";
	КонецЕсли;
	
	СтрокаДанных.ПредставлениеЗадачи=Строка(СтрокаДанных.ЯчейкаОтправитель)+"->"+Строка(СтрокаДанных.ЯчейкаПолучатель)+"
	|"+"№"+СтрокаДанных.ИдентификаторУпаковки;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительнойИнформациейНаборки(СтрокаДанных,ДополнительныеДанныеПоДокументу)
	СтрокаДанных.ДокументОснованиеПредставление="№"+СтрокаДанных.ДокументОснованиеСсылка.Номер+" от "+Формат(СтрокаДанных.ДокументОснованиеСсылка.Дата,"ДФ=d.M.yy")+"
	| Контрагент "+Строка(СтрокаДанных.ДокументОснованиеСсылка.Контрагент); 
	СтрокаДанных.ПредставлениеЗадачи=Строка(СтрокаДанных.ЯчейкаОтправитель)+"->"+Строка(СтрокаДанных.ЯчейкаПолучатель)+"
	|"+"№"+СтрокаДанных.ИдентификаторУпаковки;	
	СтруктураДополнительныхДанных=Новый Структура("ДатаОтгрузки",'00010101');
	Если  ТипЗнч(СтрокаДанных.ДокументОснованиеСсылка.итОснование)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
		ПоследняяМинутаДня=(24*60*60)-1;
		ДатаОтгрузкиДокумента=СтрокаДанных.ДокументОснованиеСсылка.итОснование.ДатаОтгрузки;
		ВремяНачалаПогрузки=СтрокаДанных.ДокументОснованиеСсылка.итОснование.итВремяНачалаПогрузкиКакВремя;
		ЧасНачала= Час(ВремяНачалаПогрузки);
		МинутаНачала=Минута(ВремяНачалаПогрузки);
		СекундаНачала=Секунда(ВремяНачалаПогрузки);
		ВремяНачалаПогрузкиСекунды=(ЧасНачала*60*60)+(МинутаНачала*60)+СекундаНачала;	
		СтруктураДополнительныхДанных.Вставить("ДатаОтгрузки",?(ДатаОтгрузкиДокумента='00010101','21500101',ДатаОтгрузкиДокумента));
		СтруктураДополнительныхДанных.ДатаОтгрузки=СтруктураДополнительныхДанных.ДатаОтгрузки+?(ВремяНачалаПогрузкиСекунды=0,ПоследняяМинутаДня,ВремяНачалаПогрузкиСекунды);
	КонецЕсли;
	Для Каждого Свойства из ДополнительныеДанныеПоДокументу Цикл 
		СтруктураДополнительныхДанных.Вставить(Свойства.Ключ,Свойства.Значение);
	КонецЦикла;
	СтрокаДанных.ДополнительныеДанные=СтруктураДополнительныхДанных;
КонецПроцедуры

Функция ПолучитьДанныеМаршрутаПоНаборке(Наборка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSНаборка.итОснование КАК итОснование
		|ПОМЕСТИТЬ ВтОснование
		|ИЗ
		|	Документ.итWMSНаборка КАК итWMSНаборка
		|ГДЕ
		|	итWMSНаборка.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВтЗаказ
		|ИЗ
		|	ВтОснование КАК ВтОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ПО ВтОснование.итОснование = ЗаказПокупателя.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыМаршрута.ОчередьДоставки КАК ОчередьДоставки,
		|	ДокументыМаршрута.Ссылка КАК Ссылка
		|ИЗ
		|	ВтЗаказ КАК ВтЗаказ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Маршрутизация.ДокументыМаршрута КАК ДокументыМаршрута
		|		ПО ВтЗаказ.Ссылка = ДокументыМаршрута.Заказ
		|			И (ДокументыМаршрута.Ссылка.Проведен)";
	
	Запрос.УстановитьПараметр("Ссылка", Наборка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	   Возврат новый Структура("Маршрут,МаршрутГУИД,ОчередьДоставки",Строка(ВыборкаДетальныеЗаписи.Ссылка.Дата)+" №"+ВыборкаДетальныеЗаписи.Ссылка.Номер
	   ,ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор(),ВыборкаДетальныеЗаписи.ОчередьДоставки);
	КонецЦикла;
	   Возврат новый Структура;
	
	КонецФункции

Процедура ЗаполнитьДополнительнойИнформациейКОА(СтрокаДанных)
	СтрокаДанных.ДокументОснованиеПредставление="№"+СтрокаДанных.ДокументОснованиеСсылка.Номер+" от "+Формат(СтрокаДанных.ДокументОснованиеСсылка.Дата,"ДФ=d.M.yy")+"
	| Контрагент "+Строка(СтрокаДанных.ДокументОснованиеСсылка.Контрагент);
	Если ТипЗнч(СтрокаДанных.ДокументОснованиеСсылка.итОснование)=тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда  
		Если ТипЗнч(СтрокаДанных.ДокументОснованиеСсылка.итОснование.Сделка)= Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
			СтрокаДанных.ПредставлениеЗадачи="Заказ № "+СтрокаДанных.ДокументОснованиеСсылка.итОснование.Сделка.Номер;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДополнительнойИнформациейИнвентаризация(СтрокаДанных)
	СтрокаДанных.ДокументОснованиеПредставление="№"+СтрокаДанных.ДокументОснованиеСсылка.Номер+" от "+Формат(СтрокаДанных.ДокументОснованиеСсылка.Дата,"ДФ=d.M.yy");
	СтрокаДанных.ПредставлениеЗадачи="Ячейка "+Строка(СтрокаДанных.ЯчейкаОтправитель);	
КонецПроцедуры

Процедура ЗаполнитьДополнительнойИнформациейПроверка(СтрокаДанных)
	СтрокаДанных.ДокументОснованиеПредставление="№"+СтрокаДанных.ДокументОснованиеСсылка.Номер+" от "+Формат(СтрокаДанных.ДокументОснованиеСсылка.Дата,"ДФ=d.M.yy");
	Для Каждого стр из СтрокаДанных.ДокументОснованиеСсылка.итОснования цикл
		Если ТипЗнч(стр.Документ)=Тип("ДокументСсылка.итWMSНаборка") Тогда 
			СтрокаДанных.ДокументОснованиеПредставление =СтрокаДанных.ДокументОснованиеПредставление+" Наборка "+"№"+стр.Документ.Номер+" от "+Формат(стр.Документ.Дата,"ДФ=d.M.yy");
			Если ТипЗнч(стр.Документ.итОснование)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
				СтрокаДанных.ДокументОснованиеПредставление =СтрокаДанных.ДокументОснованиеПредставление+" Заказ № "+стр.Документ.итОснование.Номер+ " от "+Формат(стр.Документ.итОснование.Дата,"ДФ=d.M.yy");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СтрокаДанных.ПредставлениеЗадачи="Ячейка "+Строка(СтрокаДанных.ЯчейкаОтправитель);	
	КонецПроцедуры
#КонецОбласти

Процедура ОбработчикПринятияИзменений(ДанныеОбработчика)
	Если не ДанныеОбработчика.Свойство("ТСДИД") тогда
		ДанныеОбработчика=новый Структура;
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","отсутсвует ключевое свойство <<ТСДИД>> ");
		Возврат
	КонецЕсли;
	
	ТСД=НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
	Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"НомерСообщения") тогда
		Возврат
	КонецЕсли;	
	ПланыОбмена.УдалитьРегистрациюИзменений(ТСД.УзелПланаОбмена,ДанныеОбработчика.НомерСообщения);
	
КонецПроцедуры
#Область РевизорДанных
Процедура ОбработкаДанныхДляРевизии(ДанныеОбработчика)
	Если  ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипРевизии") тогда
		Возврат
	КонецЕсли;
	Если ДанныеОбработчика.ТипРевизии="Ячейка" тогда
		РевизияЯчейки(ДанныеОбработчика)
	КонецЕсли;
	Если ДанныеОбработчика.ТипРевизии="Номенклатура" тогда
		Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючПолученияДанных") тогда
			Возврат
		КонецЕсли;	
		ПолучитьДанныеПоНоменклатуре(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.ТипРевизии="Паллета" тогда
		ПолучитьДанныеПаллетыПоSSCC(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.ТипРевизии="Марка" тогда
		ПолучитьДанныеМарки(ДанныеОбработчика);
	КонецЕсли;
	
	
	
	
КонецПроцедуры
Процедура РевизияЯчейки(ДанныеОбработчика)
	Если  ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючПолученияДанных") тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ДанныеОбработчика.КлючПолученияДанных)<> тип("Массив") тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Не верный формат данных свойство -<<КлючПолученияДанных>>");
		Возврат
	КонецЕсли;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИтWMSШтрихКоды.Объект КАК Объект
	|ПОМЕСТИТЬ ЯчейкаБазы
	|ИЗ
	|	РегистрСведений.ИтWMSШтрихКоды КАК ИтWMSШтрихКоды
	|ГДЕ
	|	ИтWMSШтрихКоды.ШтрихКод В(&МассивШтрихКодов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтWMSШтрихКоды.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.ДатаРозлива КАК ДатаРозлива,
	|	итТоварыВЯчейкахОстатки.Качество КАК Качество,
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ЯчейкаБазы.Объект КАК Ячейка
	|ИЗ
	|	ЯчейкаБазы КАК ЯчейкаБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	|		ПО ЯчейкаБазы.Объект = итТоварыВЯчейкахОстатки.Ячейка";
	
	Запрос.УстановитьПараметр("МассивШтрихКодов", ДанныеОбработчика.КлючПолученияДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных ячейки");
		Возврат
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		ДанныеОбработчика.Вставить("Ячейка",ВыборкаДетальныеЗаписи.Ячейка.УникальныйИдентификатор());
		ДанныеОбработчика.Вставить("ЯчейкаПредставление",ВыборкаДетальныеЗаписи.Ячейка.Наименование);
	КонецЕсли;
	ВыборкаДетальныеЗаписи.Сбросить();
	МассивДанных=новый Массив;
	пока ВыборкаДетальныеЗаписи.Следующий() цикл
		Если ВыборкаДетальныеЗаписи.Номенклатура=null Тогда 
			Продолжить;
		КонецЕсли;	
		СтруктураДанныхМассива=новый Структура;
		СтруктураДанныхМассива.Вставить("ИдентификаторУпаковки",ВыборкаДетальныеЗаписи.ИдентификаторУпаковки);
		СтруктураДанныхМассива.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
		СтруктураДанныхМассива.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.Номенклатура.Наименование);
		СтруктураДанныхМассива.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
		СтруктураДанныхМассива.Вставить("Количество",ВыборкаДетальныеЗаписи.КоличествоОстаток);
		СтруктураДанныхМассива.Вставить("Качество",ВыборкаДетальныеЗаписи.Качество.УникальныйИдентификатор());
		СтруктураДанныхМассива.Вставить("КачествоПредставление",ВыборкаДетальныеЗаписи.Качество.Наименование);
		СтруктураДанныхМассива.Вставить("СерияНоменклатуры",ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор());
		СтруктураДанныхМассива.Вставить("СерияНоменклатурыПредставление",ВыборкаДетальныеЗаписи.СерияНоменклатуры.Наименование);
		МассивДанных.Добавить(СтруктураДанныхМассива); 
	КонецЦикла;
	ДанныеОбработчика.Вставить("МассивДанных",МассивДанных);
	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры

Процедура ПолучитьДанныеПаллетыПоSSCC(ДанныеОбработчика)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.ДатаРозлива КАК ДатаРозлива,
	|	итТоварыВЯчейкахОстатки.Качество КАК Качество,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	|ГДЕ
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки = &ИдентификаторУпаковки
	|	И итТоварыВЯчейкахОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.ДатаРозлива КАК ДатаРозлива,
	|	итТоварыВЯчейкахОстатки.Качество КАК Качество,
	|	итТоварыВЯчейкахОстатки.КОтборуОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	|ГДЕ
	|	итТоварыВЯчейкахОстатки.КОтборуОстаток > 0
	|	И итТоварыВЯчейкахОстатки.ИдентификаторУпаковки = &ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("ИдентификаторУпаковки", ДанныеОбработчика.КлючПолученияДанных);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатЗапросаОстатки=МассивРезультатов[0];
	РезультатЗапросаРезерв=МассивРезультатов[1];
	Если РезультатЗапросаОстатки.Пустой() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных Паллеты");
		Возврат
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапросаОстатки.Выбрать();
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		ДанныеОбработчика.Вставить("ИдентификаторУпаковки",ВыборкаДетальныеЗаписи.ИдентификаторУпаковки);
	КонецЕсли;
	ВыборкаДетальныеЗаписи.Сбросить();
	МассивДанных=новый Массив;
	МассивДанныхРезерв=новый Массив;
	пока ВыборкаДетальныеЗаписи.Следующий() цикл
		Если ВыборкаДетальныеЗаписи.Номенклатура=null Тогда 
			Продолжить;
		КонецЕсли;	
		СтруктураДанныхМассива=новый Структура;
		СтруктураДанныхМассива.Вставить("ИдентификаторУпаковки",ВыборкаДетальныеЗаписи.ИдентификаторУпаковки);
		СтруктураДанныхМассива.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
		СтруктураДанныхМассива.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.Номенклатура.Наименование);
		СтруктураДанныхМассива.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
		СтруктураДанныхМассива.Вставить("Количество",ВыборкаДетальныеЗаписи.КоличествоОстаток);
		СтруктураДанныхМассива.Вставить("Качество",ВыборкаДетальныеЗаписи.Качество.УникальныйИдентификатор());
		СтруктураДанныхМассива.Вставить("КачествоПредставление",ВыборкаДетальныеЗаписи.Качество.Наименование);
		СтруктураДанныхМассива.Вставить("СерияНоменклатуры",ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор());
		СтруктураДанныхМассива.Вставить("СерияНоменклатурыПредставление",ВыборкаДетальныеЗаписи.СерияНоменклатуры.Наименование);
		СтруктураДанныхМассива.Вставить("Ячейка",ВыборкаДетальныеЗаписи.Ячейка.УникальныйИдентификатор());
		СтруктураДанныхМассива.Вставить("ЯчейкаПредставление",ВыборкаДетальныеЗаписи.Ячейка.Наименование);
		МассивДанных.Добавить(СтруктураДанныхМассива); 
	КонецЦикла;
	ВыборкаДетальныеЗаписиРезерв = РезультатЗапросаРезерв.Выбрать();
	пока ВыборкаДетальныеЗаписиРезерв.Следующий() цикл
		Если ВыборкаДетальныеЗаписиРезерв.Номенклатура=null Тогда 
			Продолжить;
		КонецЕсли;	
		СтруктураДанныхМассива=новый Структура;
		СтруктураДанныхМассива.Вставить("ИдентификаторУпаковки",ВыборкаДетальныеЗаписиРезерв.ИдентификаторУпаковки);
		СтруктураДанныхМассива.Вставить("Номенклатура",ВыборкаДетальныеЗаписиРезерв.Номенклатура.УникальныйИдентификатор());
		СтруктураДанныхМассива.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписиРезерв.Номенклатура.Наименование);
		СтруктураДанныхМассива.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписиРезерв.ДатаРозлива);
		СтруктураДанныхМассива.Вставить("Количество",ВыборкаДетальныеЗаписиРезерв.КоличествоОстаток);
		СтруктураДанныхМассива.Вставить("Качество",ВыборкаДетальныеЗаписиРезерв.Качество.УникальныйИдентификатор());
		СтруктураДанныхМассива.Вставить("КачествоПредставление",ВыборкаДетальныеЗаписиРезерв.Качество.Наименование);
		СтруктураДанныхМассива.Вставить("СерияНоменклатуры",ВыборкаДетальныеЗаписиРезерв.СерияНоменклатуры.УникальныйИдентификатор());
		СтруктураДанныхМассива.Вставить("СерияНоменклатурыПредставление",ВыборкаДетальныеЗаписиРезерв.СерияНоменклатуры.Наименование);
		СтруктураДанныхМассива.Вставить("Ячейка",ВыборкаДетальныеЗаписиРезерв.Ячейка.УникальныйИдентификатор());
		СтруктураДанныхМассива.Вставить("ЯчейкаПредставление",ВыборкаДетальныеЗаписиРезерв.Ячейка.Наименование);
		МассивДанныхРезерв.Добавить(СтруктураДанныхМассива); 
	КонецЦикла;
	
	
	ДанныеОбработчика.Вставить("МассивДанных",МассивДанных);
	ДанныеОбработчика.Вставить("МассивДанныхРезерв",МассивДанныхРезерв);
	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры	

Процедура ПолучитьДанныеМарки(ДанныеОбработчика)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарокСрезПоследних.Марка КАК Марка,
	|	алкХранилищеАкцизныхМарокСрезПоследних.Упаковка КАК Упаковка,
	|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ КАК СправкаБ,
	|	алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия КАК ОтметкаВыбытия
	|ПОМЕСТИТЬ ВтДанныеМарки
	|ИЗ
	|	РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних(, Марка.ЗначениеШтрихКода = &Марка) КАК алкХранилищеАкцизныхМарокСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеАкцизныхМарокСрезПоследних.Марка,
	|	алкХранилищеАкцизныхМарокСрезПоследних.Упаковка,
	|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ,
	|	алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеМарки.Марка КАК Марка,
	|	ВтДанныеМарки.Упаковка КАК Упаковка,
	|	ВтДанныеМарки.СправкаБ КАК СправкаБ,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец КАК Номенклатура,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры КАК СерияНоменклатуры,
	|	МАКСИМУМ(ВтДанныеМарки.ОтметкаВыбытия) КАК ОтметкаВыбытия
	|ПОМЕСТИТЬ МаркаСерияИНоменклатура
	|ИЗ
	|	ВтДанныеМарки КАК ВтДанныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
	|		ПО ВтДанныеМарки.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеМарки.Марка,
	|	ВтДанныеМарки.Упаковка,
	|	ВтДанныеМарки.СправкаБ,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркаСерияИНоменклатура.Марка КАК Марка,
	|	МаркаСерияИНоменклатура.Упаковка КАК GTIN,
	|	МаркаСерияИНоменклатура.СправкаБ КАК СправкаБ,
	|	МаркаСерияИНоменклатура.Номенклатура КАК Номенклатура,
	|	МаркаСерияИНоменклатура.СерияНоменклатуры КАК СерияНоменклатуры,
	|	МАКСИМУМ(алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки) КАК SSCC,
	|	МаркаСерияИНоменклатура.ОтметкаВыбытия КАК ОтметкаВыбытия
	|ПОМЕСТИТЬ ДанныеМаркаНомеклатураSSCC
	|ИЗ
	|	МаркаСерияИНоменклатура КАК МаркаСерияИНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеУпаковок.СрезПоследних КАК алкХранилищеУпаковокСрезПоследних
	|		ПО МаркаСерияИНоменклатура.Упаковка = алкХранилищеУпаковокСрезПоследних.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	МаркаСерияИНоменклатура.Марка,
	|	МаркаСерияИНоменклатура.Упаковка,
	|	МаркаСерияИНоменклатура.СправкаБ,
	|	МаркаСерияИНоменклатура.Номенклатура,
	|	МаркаСерияИНоменклатура.СерияНоменклатуры,
	|	МаркаСерияИНоменклатура.ОтметкаВыбытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеМаркаНомеклатураSSCC.Марка КАК Марка,
	|	МАКСИМУМ(итWMSЗадачиТСД.ЯчейкаПолучатель) КАК ЯчейкаПолучатель
	|ПОМЕСТИТЬ ДанныеЯчейкиПоРазмещению
	|ИЗ
	|	ДанныеМаркаНомеклатураSSCC КАК ДанныеМаркаНомеклатураSSCC
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|		ПО ДанныеМаркаНомеклатураSSCC.SSCC = итWMSЗадачиТСД.ИдентификаторУпаковки
	|ГДЕ
	|	итWMSЗадачиТСД.ДокументОснование.Проведен = ИСТИНА
	|	И итWMSЗадачиТСД.Состояние = ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Выполнена)
	|	И итWMSЗадачиТСД.ТипЗадачи = ЗНАЧЕНИЕ(Перечисление.итWMSТипыЗадачТСД.Размещение)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеМаркаНомеклатураSSCC.Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеМаркаНомеклатураSSCC.Марка КАК Марка,
	|	ДанныеМаркаНомеклатураSSCC.GTIN КАК GTIN,
	|	ДанныеМаркаНомеклатураSSCC.СправкаБ КАК СправкаБ,
	|	ДанныеМаркаНомеклатураSSCC.Номенклатура КАК Номенклатура,
	|	ДанныеМаркаНомеклатураSSCC.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеМаркаНомеклатураSSCC.SSCC КАК SSCC,
	|	МАКСИМУМ(ЕСТЬNULL(ДанныеЯчейкиПоРазмещению.ЯчейкаПолучатель, ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.ПустаяСсылка))) КАК Ячейка,
	|	ДанныеМаркаНомеклатураSSCC.ОтметкаВыбытия КАК ОтметкаВыбытия
	|ПОМЕСТИТЬ СобранныеДанныеМаркиБезДанныхРегистраОстатков
	|ИЗ
	|	ДанныеМаркаНомеклатураSSCC КАК ДанныеМаркаНомеклатураSSCC
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЯчейкиПоРазмещению КАК ДанныеЯчейкиПоРазмещению
	|		ПО ДанныеМаркаНомеклатураSSCC.Марка = ДанныеЯчейкиПоРазмещению.Марка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеМаркаНомеклатураSSCC.Марка,
	|	ДанныеМаркаНомеклатураSSCC.GTIN,
	|	ДанныеМаркаНомеклатураSSCC.СправкаБ,
	|	ДанныеМаркаНомеклатураSSCC.Номенклатура,
	|	ДанныеМаркаНомеклатураSSCC.СерияНоменклатуры,
	|	ДанныеМаркаНомеклатураSSCC.SSCC,
	|	ДанныеМаркаНомеклатураSSCC.ОтметкаВыбытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.Марка КАК Марка,
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.GTIN КАК GTIN,
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.СправкаБ КАК СправкаБ,
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.Номенклатура КАК Номенклатура,
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.СерияНоменклатуры КАК СерияНоменклатуры,
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.SSCC КАК SSCC,
	|	МАКСИМУМ(ЕСТЬNULL(итТоварыВЯчейкахОстатки.Качество, ЗНАЧЕНИЕ(Справочник.Качество.Новый))) КАК Качество,
	|	МАКСИМУМ(ЕСТЬNULL(итТоварыВЯчейкахОстатки.Ячейка, СобранныеДанныеМаркиБезДанныхРегистраОстатков.Ячейка)) КАК Ячейка,
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.ОтметкаВыбытия КАК ОтметкаВыбытия,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА итТоварыВЯчейкахОстатки.Ячейка ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НетДанныхПоSSCСвОстатках
	|ИЗ
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков КАК СобранныеДанныеМаркиБезДанныхРегистраОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(, ) КАК итТоварыВЯчейкахОстатки
	|		ПО СобранныеДанныеМаркиБезДанныхРегистраОстатков.SSCC = итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
	|			И (итТоварыВЯчейкахОстатки.КоличествоОстаток > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.Марка,
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.GTIN,
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.СправкаБ,
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.Номенклатура,
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.СерияНоменклатуры,
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.SSCC,
	|	СобранныеДанныеМаркиБезДанныхРегистраОстатков.ОтметкаВыбытия";
	
	Запрос.УстановитьПараметр("Марка", СокрЛП(ДанныеОбработчика.КлючПолученияДанных));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтуктураДанныхМарки=новый Структура;
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		СтуктураДанныхМарки.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
		СтуктураДанныхМарки.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.Номенклатура.Наименование);
		СтуктураДанныхМарки.Вставить("ИдентификаторУпаковки",ВыборкаДетальныеЗаписи.SSCC);
		СтуктураДанныхМарки.Вставить("Ячейка",ВыборкаДетальныеЗаписи.Ячейка.УникальныйИдентификатор());
		СтуктураДанныхМарки.Вставить("ЯчейкаПредставление",ВыборкаДетальныеЗаписи.Ячейка.Наименование);
		СтуктураДанныхМарки.Вставить("Качество",ВыборкаДетальныеЗаписи.Качество.УникальныйИдентификатор());
		СтуктураДанныхМарки.Вставить("КачествоПредставление",ВыборкаДетальныеЗаписи.Качество.Наименование);
		СтуктураДанныхМарки.Вставить("ОтметкаВыбытия",ВыборкаДетальныеЗаписи.ОтметкаВыбытия);
		СтуктураДанныхМарки.Вставить("НетДанныхПоSSCСвОстатках",ВыборкаДетальныеЗаписи.НетДанныхПоSSCСвОстатках);
		СтуктураДанныхМарки.Вставить("СерияНоменклатуры",ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор());
		СтуктураДанныхМарки.Вставить("СерияНоменклатурыПредставление",ВыборкаДетальныеЗаписи.СерияНоменклатуры.Наименование);
		ДанныеОбработчика.Вставить("СтуктураДанныхМарки",СтуктураДанныхМарки);
	Иначе 
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","Нет данных марки");
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСинхронизацииСправочныхДанных

Процедура СинхронизацияСправочныхДанных(ДанныеОбработчика)
	ЗаполнитьДанными_итWMS_ПричиныОтменыЗадач(ДанныеОбработчика);	
КонецПроцедуры

Процедура ЗаполнитьДанными_итWMS_ПричиныОтменыЗадач(ДанныеОбработчика)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMS_ПричиныОтменыЗадач.Ссылка,
	|	итWMS_ПричиныОтменыЗадач.ВерсияДанных,
	|	итWMS_ПричиныОтменыЗадач.ПометкаУдаления,
	|	итWMS_ПричиныОтменыЗадач.Предопределенный,
	|	итWMS_ПричиныОтменыЗадач.Код,
	|	итWMS_ПричиныОтменыЗадач.Наименование
	|ИЗ
	|	Справочник.итWMS_ПричиныОтменыЗадач КАК итWMS_ПричиныОтменыЗадач
	|ГДЕ
	|	итWMS_ПричиныОтменыЗадач.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивитWMS_ПричиныОтменыЗадач=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураДанных=новый Структура;
		Для Каждого Колонка из РезультатЗапроса.Колонки цикл
			СтруктураДанных.Вставить(Колонка.Имя);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаДетальныеЗаписи);
		СтруктураДанных.Ссылка=ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		МассивитWMS_ПричиныОтменыЗадач.Добавить(СтруктураДанных);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	ДанныеОбработчика.Вставить("итWMSПричиныОтменыЗадач",МассивитWMS_ПричиныОтменыЗадач);
КонецПроцедуры
#КонецОбласти

#Область ПолучениеДанныхМарокПоЗадачам
// Процедура - Получить данные помарочного учета задач
// процедура заполняет структуру ДанныеОбработчика структурированным массивом
// с данными помарочного учета
// Параметры:
//  ДанныеОбработчика	 - Структура - фиксированная структура со свойствами "ТипЗадачи" и "КлючПолученияДанных"(массив ид задач)  
//
Процедура ПолучитьДанныеПомарочногоУчетаЗадач(ДанныеОбработчика)
	Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипЗадачи") Тогда 
		Возврат
	КонецЕсли;
	Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючПолученияДанных") Тогда 
		Возврат
	КонецЕсли;
	Если ДанныеОбработчика.ТипЗадачи<>Перечисления.итWMSТипыЗадачТСД.Наборка Тогда 
		РезультатЗапроса = ТиповойЗапросДанныхМарокПоЗадачам(ДанныеОбработчика);
	иначе
		РезультатЗапроса = ЗапросДанныхМарокПоНаборке(ДанныеОбработчика);
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивДанныхМарок=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураДанных=новый Структура ;
		СтруктураДанных.Вставить("ИдЗадачи",ПреобразоватьСтроковыйИдЗадачиВГуид(ВыборкаДетальныеЗаписи.ИдЗадачи));
		СтруктураДанных.Вставить("SSCC",ВыборкаДетальныеЗаписи.SSCC);
		СтруктураДанных.Вставить("GTIN",ВыборкаДетальныеЗаписи.GTIN);
		СтруктураДанных.Вставить("Марка",ВыборкаДетальныеЗаписи.Марка);
		СтруктураДанных.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
		СтруктураДанных.Вставить("СерияНоменклатуры",ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор());
		СтруктураДанных.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
		МассивДанныхМарок.Добавить(СтруктураДанных);
	КонецЦикла;
	ДанныеОбработчика.Вставить("МассивДанныхМарок",МассивДанныхМарок);	
	
КонецПроцедуры
// Процедура - Получить данные помарочного учета задач циклом
// процедура заполняет структуру ДанныеОбработчика структурированным массивом
// с данными помарочного учета
// Параметры:
//  ДанныеОбработчика	 - Структура - фиксированная структура со свойствами "ТипЗадачи" и "КлючПолученияДанных"(массив ид задач)  
//
Процедура ПолучитьДанныеПомарочногоУчетаЗадачЦиклом(ДанныеОбработчика)
	Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипЗадачи") Тогда 
		Возврат
	КонецЕсли;
	Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючПолученияДанных") Тогда 
		Возврат
	КонецЕсли;
	ОбщийМассивЗадач=ДанныеОбработчика.КлючПолученияДанных;
	
	Если ТипЗнч(ОбщийМассивЗадач)<>Тип("Массив")  Тогда 
		 ОбщийМассивЗадач=новый Массив;
		 ОбщийМассивЗадач.Добавить(ДанныеОбработчика.КлючПолученияДанных);
	КонецЕсли;
	МассивБуфер=новый Массив;
	МассивДанныхМарок=новый Массив;
	
	РазбитеЗадачНаПорции(МассивБуфер, ОбщийМассивЗадач);
	Для Каждого стр из  МассивБуфер Цикл 
		ДанныеОбработчика.КлючПолученияДанных=стр;
		Если ДанныеОбработчика.ТипЗадачи<>Перечисления.итWMSТипыЗадачТСД.Наборка Тогда 
			РезультатЗапроса = ТиповойЗапросДанныхМарокПоЗадачам(ДанныеОбработчика);
		иначе
			РезультатЗапроса = ЗапросДанныхМарокПоНаборке(ДанныеОбработчика);
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураДанных=новый Структура ;
			СтруктураДанных.Вставить("ИдЗадачи",ПреобразоватьСтроковыйИдЗадачиВГуид(ВыборкаДетальныеЗаписи.ИдЗадачи));
			СтруктураДанных.Вставить("SSCC",ВыборкаДетальныеЗаписи.SSCC);
			СтруктураДанных.Вставить("GTIN",ВыборкаДетальныеЗаписи.GTIN);
			СтруктураДанных.Вставить("Марка",ВыборкаДетальныеЗаписи.Марка);
			СтруктураДанных.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
			СтруктураДанных.Вставить("СерияНоменклатуры",ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор());
			СтруктураДанных.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
			МассивДанныхМарок.Добавить(СтруктураДанных);
		КонецЦикла;
	КонецЦикла;
	ДанныеОбработчика.КлючПолученияДанных=ОбщийМассивЗадач;
	ДанныеОбработчика.Вставить("МассивДанныхМарок",МассивДанныхМарок);	
	
КонецПроцедуры

Процедура РазбитеЗадачНаПорции( МассивБуфер,  ОбщийМассивЗадач)
	
	Перем ВсегоЗадач, МассивЗадачКИсполнению, ОбщийСчетчик, стр, Счетчик;
	
	Счетчик=0;
	ОбщийСчетчик=0;
	ВсегоЗадач=ОбщийМассивЗадач.Количество();
	МассивЗадачКИсполнению=новый Массив;
	Для Каждого стр из ОбщийМассивЗадач Цикл
		ОбщийСчетчик=ОбщийСчетчик+1;
		Счетчик=Счетчик+1;
		МассивЗадачКИсполнению.Добавить(стр);
		Если Счетчик=5 Тогда 
			МассивБуфер.Добавить(МассивЗадачКИсполнению);
			МассивЗадачКИсполнению=новый Массив;
			Счетчик=0;
		КонецЕсли;
		Если ОбщийСчетчик=ВсегоЗадач и Счетчик<5 Тогда 
			МассивБуфер.Добавить(МассивЗадачКИсполнению);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура - Начать процесс сбора данных ПМУЗадача
// процедура зпускает фоновый процесс сбора данных марок  и добавляет новое свойство в ДанныеОбработчика -КлючДанных - 
// которое отвечает за ключ фонового процесса и ключ получения данных из хранилища
// Параметры:
//  ДанныеОбработчика	 - Структура - фиксированная структура со свойствами "ТипЗадачи" и "КлючПолученияДанных"(массив ид задач)   
//
Процедура НачатьПроцессСбораДанныхПМУЗадача(ДанныеОбработчика)
Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипЗадачи") Тогда 
		Возврат
КонецЕсли;
Если ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючПолученияДанных") Тогда 
		Возврат
КонецЕсли;
СтруктураДанных=новый Структура;
СтруктураДанных.Вставить("КлючПолученияДанных",ДанныеОбработчика.КлючПолученияДанных);
СтруктураДанных.Вставить("ТипЗадачи",ДанныеОбработчика.ТипЗадачи);
СтруктураДанных.Вставить("КлючДанных",новый УникальныйИдентификатор());
МассивПараметров=новый Массив;
МассивПараметров.Добавить(СтруктураДанных);
ФоновыеЗадания.Выполнить("итWMSСлужебныеПроцедурыИФункции.ЗаписатьДанныеПМУУчетаЗадач",МассивПараметров,СтруктураДанных.КлючДанных,"WMSПолучениеДанныхПМУЗадач");
ДанныеОбработчика.Вставить("КлючДанных",СтруктураДанных.КлючДанных);
КонецПроцедуры

// Процедура - Записать данные ПМУУчета задач
// процедура для ассихронного запуска сбора и записи данных марок по задачам
// Параметры:
//  Параметры	 - структура - фиксированная структура со свойствами "ТипЗадачи" и "КлючПолученияДанных"(массив ид задач) и КлючДанных -уникальный ид. 
//
Процедура ЗаписатьДанныеПМУУчетаЗадач(Параметры) Экспорт
	Если Параметры.ТипЗадачи<>Перечисления.итWMSТипыЗадачТСД.Наборка Тогда 
		РезультатЗапроса = ТиповойЗапросДанныхМарокПоЗадачам(Параметры);
	иначе
		РезультатЗапроса = ЗапросДанныхМарокПоНаборке(Параметры);
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивДанныхМарок=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураДанных=новый Структура ;
		СтруктураДанных.Вставить("ИдЗадачи",ПреобразоватьСтроковыйИдЗадачиВГуид(ВыборкаДетальныеЗаписи.ИдЗадачи));
		СтруктураДанных.Вставить("SSCC",ВыборкаДетальныеЗаписи.SSCC);
		СтруктураДанных.Вставить("GTIN",ВыборкаДетальныеЗаписи.GTIN);
		СтруктураДанных.Вставить("Марка",ВыборкаДетальныеЗаписи.Марка);
		СтруктураДанных.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
		СтруктураДанных.Вставить("СерияНоменклатуры",ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор());
		СтруктураДанных.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
		МассивДанныхМарок.Добавить(СтруктураДанных);
	КонецЦикла;
	МенеджерЗаписи=РегистрыСведений.ит_WMS_ХранилищеДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КлючХраненияДанных=Параметры.КлючДанных;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.КлючХраненияДанных=Параметры.КлючДанных;
    МенеджерЗаписи.ХранилищеЗначений=новый ХранилищеЗначения(МассивДанныхМарок);
	МенеджерЗаписи.Записать();	
	КонецПроцедуры

// Процедура - Получить данные ПМУЗадач из хранилища
//
// Параметры:
//  ДанныеОбработчика	 - Структура - фиксированная структура со свойствами "ТипЗадачи" и "КлючПолученияДанных"(массив ид задач) и  "КлючДанных"-ид получение данных
//
Процедура ПолучитьДанныеПМУЗадачИзХранилища(ДанныеОбработчика)
	МассивЗаданий=ФоновыеЗадания.ПолучитьФоновыеЗадания(новый Структура("Ключ",ДанныеОбработчика.КлючДанных));
	Для Каждого Задания из МассивЗаданий цикл
		Если Задания.Состояние=СостояниеФоновогоЗадания.Активно тогда
			ДанныеОбработчика.Вставить("Завершён",Ложь);
			Возврат;
		КонецЕсли;	
	КонецЦикла;
	ДанныеОбработчика.Вставить("Завершён",Истина);
    МенеджерЗаписи=РегистрыСведений.ит_WMS_ХранилищеДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КлючХраненияДанных=ДанныеОбработчика.КлючДанных;
	МенеджерЗаписи.Прочитать();
    МассивДанныхМарок= МенеджерЗаписи.ХранилищеЗначений.Получить();
	Если ТипЗнч(МассивДанныхМарок)<>Тип("Массив") Тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных марок");
		Возврат;
    КонецЕсли;
	ДанныеОбработчика.Вставить("МассивДанныхМарок",МассивДанныхМарок);
    МенеджерЗаписи.Удалить();
КонецПроцедуры
	
// Функция - Типовой запрос данных марок по задачам
// возвращает данные помарочного учета задач, для всех задач, где идентифкатор упаковки явно задан в регистре итWmsЗадачиТсд.
// в наборке это итоговый идентификатор , а не идентификатор отправитель, поэтому для нее отдельный запрос.
// Параметры:
//  ДанныеОбработчика	 - Структура - фиксированная структура со свойствами "ТипЗадачи" и "КлючПолученияДанных"(массив ид задач)  
// 
// Возвращаемое значение:
// РезультатЗапроса  - результат выполненного запроса 
//
Функция ТиповойЗапросДанныхМарокПоЗадачам(Знач ДанныеОбработчика)
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСД.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итWMSЗадачиТСД.ИдЗадачи КАК ИдЗадачи
	|ПОМЕСТИТЬ ЗадачиИИдентификаторы
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ИдЗадачи В(&МассивИдЗадачПомарочногоУчета)
	|	И итWMSЗадачиТСД.ТипЗадачи = &ТипЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSЗадачиТСД.ИдентификаторУпаковки,
	|	итWMSЗадачиТСД.ИдЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиИИдентификаторы.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ЗадачиИИдентификаторы.ИдЗадачи КАК ИдЗадачи,
	|	итWMSСтрокиЗадачТСД.Номенклатура КАК Номенклатура,
	|	итWMSСтрокиЗадачТСД.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итWMSСтрокиЗадачТСД.ДатаРозлива КАК ДатаРозлива
	|ПОМЕСТИТЬ ДанныеНоменклатурЗадачиИУпаковки
	|ИЗ
	|	ЗадачиИИдентификаторы КАК ЗадачиИИдентификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
	|		ПО ЗадачиИИдентификаторы.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиИИдентификаторы.ИдентификаторУпаковки,
	|	ЗадачиИИдентификаторы.ИдЗадачи,
	|	итWMSСтрокиЗадачТСД.Номенклатура,
	|	итWMSСтрокиЗадачТСД.СерияНоменклатуры,
	|	итWMSСтрокиЗадачТСД.ДатаРозлива
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ КАК СправкаБ,
	|	ДанныеНоменклатурЗадачиИУпаковки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ДанныеНоменклатурЗадачиИУпаковки.ИдЗадачи КАК ИдЗадачи,
	|	ДанныеНоменклатурЗадачиИУпаковки.Номенклатура КАК Номенклатура,
	|	ДанныеНоменклатурЗадачиИУпаковки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеНоменклатурЗадачиИУпаковки.ДатаРозлива КАК ДатаРозлива
	|ПОМЕСТИТЬ ДанныеОбработкиКОтбору
	|ИЗ
	|	ДанныеНоменклатурЗадачиИУпаковки КАК ДанныеНоменклатурЗадачиИУпаковки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
	|		ПО ДанныеНоменклатурЗадачиИУпаковки.СерияНоменклатуры = алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеНоменклатурЗадачиИУпаковки.ИдентификаторУпаковки,
	|	ДанныеНоменклатурЗадачиИУпаковки.ИдЗадачи,
	|	ДанныеНоменклатурЗадачиИУпаковки.Номенклатура,
	|	ДанныеНоменклатурЗадачиИУпаковки.СерияНоменклатуры,
	|	ДанныеНоменклатурЗадачиИУпаковки.ДатаРозлива,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	алкХранилищеУпаковокСрезПоследних.Упаковка КАК GTIN,
	|	ДанныеОбработкиКОтбору.ИдентификаторУпаковки КАК SSCC,
	|	ДанныеОбработкиКОтбору.СправкаБ КАК СправкаБ,
	|	ДанныеОбработкиКОтбору.ИдЗадачи КАК ИдЗадачи,
	|	ДанныеОбработкиКОтбору.Номенклатура КАК Номенклатура,
	|	ДанныеОбработкиКОтбору.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеОбработкиКОтбору.ДатаРозлива КАК ДатаРозлива
	|ПОМЕСТИТЬ ДанныеКорбовИСправкиПаллет
	|ИЗ
	|	ДанныеОбработкиКОтбору КАК ДанныеОбработкиКОтбору
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеУпаковок.СрезПоследних(, ) КАК алкХранилищеУпаковокСрезПоследних
	|		ПО ДанныеОбработкиКОтбору.ИдентификаторУпаковки = алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеУпаковокСрезПоследних.Упаковка,
	|	ДанныеОбработкиКОтбору.ИдентификаторУпаковки,
	|	ДанныеОбработкиКОтбору.СправкаБ,
	|	ДанныеОбработкиКОтбору.ИдЗадачи,
	|	ДанныеОбработкиКОтбору.Номенклатура,
	|	ДанныеОбработкиКОтбору.СерияНоменклатуры,
	|	ДанныеОбработкиКОтбору.ДатаРозлива
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКорбовИСправкиПаллет.GTIN КАК GTIN,
	|	ДанныеКорбовИСправкиПаллет.SSCC КАК SSCC,
	|	алкХранилищеАкцизныхМарокСрезПоследних.Марка КАК Марка,
	|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ КАК СправкаБ,
	|	алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия КАК ОтметкаВыбытия,
	|	ДанныеКорбовИСправкиПаллет.ИдЗадачи КАК ИдЗадачи,
	|	ДанныеКорбовИСправкиПаллет.Номенклатура КАК Номенклатура,
	|	ДанныеКорбовИСправкиПаллет.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеКорбовИСправкиПаллет.ДатаРозлива КАК ДатаРозлива
	|ПОМЕСТИТЬ МаркиПаллеты
	|ИЗ
	|	ДанныеКорбовИСправкиПаллет КАК ДанныеКорбовИСправкиПаллет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних(, ) КАК алкХранилищеАкцизныхМарокСрезПоследних
	|		ПО ДанныеКорбовИСправкиПаллет.GTIN = алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
	|			И ДанныеКорбовИСправкиПаллет.СправкаБ = алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ
	|ГДЕ
	|	НЕ алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркиПаллеты.СправкаБ КАК СправкаБ,
	|	МаркиПаллеты.SSCC КАК SSCC,
	|	МаркиПаллеты.ИдЗадачи КАК ИдЗадачи,
	|	МаркиПаллеты.Номенклатура КАК Номенклатура,
	|	МаркиПаллеты.СерияНоменклатуры КАК СерияНоменклатуры,
	|	МаркиПаллеты.ДатаРозлива КАК ДатаРозлива,
	|	МаркиПаллеты.GTIN КАК GTIN,
	|	МаркиПаллеты.Марка КАК Марка,
	|	ВЫБОР
	|		КОГДА итWMS_МаркиВОбработке.Марка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СвободнаяМарка
	|ПОМЕСТИТЬ ПолучениеМарокВОбработкеИтоговойТаблицы
	|ИЗ
	|	МаркиПаллеты КАК МаркиПаллеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMS_МаркиВОбработке КАК итWMS_МаркиВОбработке
	|		ПО МаркиПаллеты.Марка = итWMS_МаркиВОбработке.Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗадачиИИдентификаторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеНоменклатурЗадачиИУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеОбработкиКОтбору
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеКорбовИСправкиПаллет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаркиПаллеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СправкаБ КАК СправкаБ,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.SSCC КАК SSCC,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.ИдЗадачи КАК ИдЗадачи,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.Номенклатура КАК Номенклатура,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.ДатаРозлива КАК ДатаРозлива,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.GTIN КАК GTIN,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.Марка.ЗначениеШтрихКода КАК Марка,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СвободнаяМарка КАК СвободнаяМарка
	|ИЗ
	|	ПолучениеМарокВОбработкеИтоговойТаблицы КАК ПолучениеМарокВОбработкеИтоговойТаблицы
	|ГДЕ
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СвободнаяМарка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СправкаБ,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.SSCC,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.ИдЗадачи,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.Номенклатура,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СерияНоменклатуры,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.ДатаРозлива,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.GTIN,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СвободнаяМарка,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.Марка.ЗначениеШтрихКода";
	
	Запрос.УстановитьПараметр("МассивИдЗадачПомарочногоУчета", ДанныеОбработчика.КлючПолученияДанных);
	Запрос.УстановитьПараметр("ТипЗадачи", ДанныеОбработчика.ТипЗадачи);
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросДанныхМарокПоНаборке(Знач ДанныеОбработчика)
	ТаблицаДляПодстановкиВЗапрос=ПолучитьТаблицуДанныеНоменклатурЗадачиИУпаковки(ДанныеОбработчика);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДанныхНаборки.ИдЗадачиПредставление КАК ИдЗадачи,
	|	ТаблицаДанныхНаборки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТаблицаДанныхНаборки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТаблицаДанныхНаборки.ДатаРозлива КАК ДатаРозлива,
	|	ТаблицаДанныхНаборки.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВтДанныхНаборки
	|ИЗ
	|	&ТаблицаДанныхНаборки КАК ТаблицаДанныхНаборки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныхНаборки.ИдЗадачи КАК ИдЗадачи,
	|	ВтДанныхНаборки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВтДанныхНаборки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВтДанныхНаборки.ДатаРозлива КАК ДатаРозлива,
	|	ВтДанныхНаборки.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ДанныеНоменклатурЗадачиИУпаковки
	|ИЗ
	|	ВтДанныхНаборки КАК ВтДанныхНаборки
	|ГДЕ
	|	ВтДанныхНаборки.ИдентификаторУпаковки <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныхНаборки.ИдЗадачи,
	|	ВтДанныхНаборки.ИдентификаторУпаковки,
	|	ВтДанныхНаборки.СерияНоменклатуры,
	|	ВтДанныхНаборки.ДатаРозлива,
	|	ВтДанныхНаборки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ КАК СправкаБ,
	|	ДанныеНоменклатурЗадачиИУпаковки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ДанныеНоменклатурЗадачиИУпаковки.ИдЗадачи КАК ИдЗадачи,
	|	ДанныеНоменклатурЗадачиИУпаковки.Номенклатура КАК Номенклатура,
	|	ДанныеНоменклатурЗадачиИУпаковки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеНоменклатурЗадачиИУпаковки.ДатаРозлива КАК ДатаРозлива
	|ПОМЕСТИТЬ ДанныеОбработкиКОтбору
	|ИЗ
	|	ДанныеНоменклатурЗадачиИУпаковки КАК ДанныеНоменклатурЗадачиИУпаковки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
	|		ПО ДанныеНоменклатурЗадачиИУпаковки.СерияНоменклатуры = алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеНоменклатурЗадачиИУпаковки.ИдентификаторУпаковки,
	|	ДанныеНоменклатурЗадачиИУпаковки.ИдЗадачи,
	|	ДанныеНоменклатурЗадачиИУпаковки.Номенклатура,
	|	ДанныеНоменклатурЗадачиИУпаковки.СерияНоменклатуры,
	|	ДанныеНоменклатурЗадачиИУпаковки.ДатаРозлива,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	алкХранилищеУпаковокСрезПоследних.Упаковка КАК GTIN,
	|	ДанныеОбработкиКОтбору.ИдентификаторУпаковки КАК SSCC,
	|	ДанныеОбработкиКОтбору.СправкаБ КАК СправкаБ
	|ПОМЕСТИТЬ ДанныеКорбовИСправкиПаллет
	|ИЗ
	|	ДанныеОбработкиКОтбору КАК ДанныеОбработкиКОтбору
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеУпаковок.СрезПоследних(, ) КАК алкХранилищеУпаковокСрезПоследних
	|		ПО ДанныеОбработкиКОтбору.ИдентификаторУпаковки = алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеУпаковокСрезПоследних.Упаковка,
	|	ДанныеОбработкиКОтбору.ИдентификаторУпаковки,
	|	ДанныеОбработкиКОтбору.СправкаБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКорбовИСправкиПаллет.GTIN КАК GTIN,
	|	ДанныеКорбовИСправкиПаллет.SSCC КАК SSCC,
	|	ДанныеКорбовИСправкиПаллет.СправкаБ КАК СправкаБ,
	|	алкХранилищеАкцизныхМарокСрезПоследних.Марка КАК Марка
	|ПОМЕСТИТЬ ДанныеМарокИскомыхПаллет
	|ИЗ
	|	ДанныеКорбовИСправкиПаллет КАК ДанныеКорбовИСправкиПаллет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних(, ) КАК алкХранилищеАкцизныхМарокСрезПоследних
	|		ПО ДанныеКорбовИСправкиПаллет.GTIN = алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
	|			И ДанныеКорбовИСправкиПаллет.СправкаБ = алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ
	|ГДЕ
	|	алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОбработкиКОтбору.СправкаБ КАК СправкаБ,
	|	ДанныеОбработкиКОтбору.ИдентификаторУпаковки КАК SSCC,
	|	ДанныеОбработкиКОтбору.ИдЗадачи КАК ИдЗадачи,
	|	ДанныеОбработкиКОтбору.Номенклатура КАК Номенклатура,
	|	ДанныеОбработкиКОтбору.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеОбработкиКОтбору.ДатаРозлива КАК ДатаРозлива,
	|	ДанныеМарокИскомыхПаллет.GTIN КАК GTIN,
	|	ДанныеМарокИскомыхПаллет.Марка КАК Марка
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ДанныеОбработкиКОтбору КАК ДанныеОбработкиКОтбору
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеМарокИскомыхПаллет КАК ДанныеМарокИскомыхПаллет
	|		ПО ДанныеОбработкиКОтбору.ИдентификаторУпаковки = ДанныеМарокИскомыхПаллет.SSCC
	|			И ДанныеОбработкиКОтбору.СправкаБ = ДанныеМарокИскомыхПаллет.СправкаБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.СправкаБ КАК СправкаБ,
	|	ИтоговаяТаблица.SSCC КАК SSCC,
	|	ИтоговаяТаблица.ИдЗадачи КАК ИдЗадачи,
	|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
	|	ИтоговаяТаблица.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ИтоговаяТаблица.ДатаРозлива КАК ДатаРозлива,
	|	ИтоговаяТаблица.GTIN КАК GTIN,
	|	ИтоговаяТаблица.Марка КАК Марка,
	|	ВЫБОР
	|		КОГДА итWMS_МаркиВОбработке.Марка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СвободнаяМарка
	|ПОМЕСТИТЬ ПолучениеМарокВОбработкеИтоговойТаблицы
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMS_МаркиВОбработке КАК итWMS_МаркиВОбработке
	|		ПО ИтоговаяТаблица.Марка = итWMS_МаркиВОбработке.Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныхНаборки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеНоменклатурЗадачиИУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеОбработкиКОтбору
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеКорбовИСправкиПаллет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеМарокИскомыхПаллет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИтоговаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СправкаБ КАК СправкаБ,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.SSCC КАК SSCC,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.ИдЗадачи КАК ИдЗадачи,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.Номенклатура КАК Номенклатура,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.ДатаРозлива КАК ДатаРозлива,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.GTIN КАК GTIN,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.Марка.ЗначениеШтрихКода КАК Марка,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СвободнаяМарка КАК СвободнаяМарка
	|ИЗ
	|	ПолучениеМарокВОбработкеИтоговойТаблицы КАК ПолучениеМарокВОбработкеИтоговойТаблицы
	|ГДЕ
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СвободнаяМарка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СправкаБ,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.SSCC,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.ИдЗадачи,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.Номенклатура,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СерияНоменклатуры,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.ДатаРозлива,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.GTIN,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.СвободнаяМарка,
	|	ПолучениеМарокВОбработкеИтоговойТаблицы.Марка.ЗначениеШтрихКода";
	
	Запрос.УстановитьПараметр("ТаблицаДанныхНаборки",ТаблицаДляПодстановкиВЗапрос);	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуДанныеНоменклатурЗадачиИУпаковки(Знач ДанныеОбработчика)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСД.ИдЗадачи,
	|	итWMSЗадачиТСД.ТипЗадачи,
	|	итWMSЗадачиТСД.ДокументОснование
	|ПОМЕСТИТЬ ЗадачиКОбработке
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ИдЗадачи В(&МассивИдЗадачПомарочногоУчета)
	|	И итWMSЗадачиТСД.ТипЗадачи = &ТипЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКОбработке.ИдЗадачи,
	|	ЗадачиКОбработке.ТипЗадачи,
	|	ЗадачиКОбработке.ДокументОснование,
	|	итWMSСтрокиЗадачТСД.Номенклатура,
	|	итWMSСтрокиЗадачТСД.ДатаРозлива,
	|	итWMSСтрокиЗадачТСД.СерияНоменклатуры,
	|	итWMSСтрокиЗадачТСД.Количество,
	|	итWMSСтрокиЗадачТСД.ДополнительныеДанные
	|ИЗ
	|	ЗадачиКОбработке КАК ЗадачиКОбработке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
	|		ПО ЗадачиКОбработке.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи";
	
	Запрос.УстановитьПараметр("МассивИдЗадачПомарочногоУчета", ДанныеОбработчика.КлючПолученияДанных);
	Запрос.УстановитьПараметр("ТипЗадачи", ДанныеОбработчика.ТипЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Колонки.Добавить("ИдентификаторУпаковки",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(172)));
	РезультатЗапроса.Колонки.Добавить("ИдЗадачиПредставление",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(36)));
	
	
	Для Каждого стр из РезультатЗапроса цикл
		стр.ИдЗадачиПредставление=Строка(стр.ИдЗадачи);
		ДанныеХранилища=стр.ДополнительныеДанные.Получить();
		Если ТипЗнч(ДанныеХранилища)=Тип("Структура") Тогда 
			Если ДанныеХранилища.Свойство("ИдентификаторУпаковкиОтправитель") Тогда 
				стр.ИдентификаторУпаковки=ДанныеХранилища.ИдентификаторУпаковкиОтправитель;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатЗапроса;
	
	
КонецФункции

Функция ПреобразоватьСтроковыйИдЗадачиВГуид(ИдЗадачи)
	Если ТипЗнч(ИдЗадачи)=Тип("УникальныйИдентификатор") Тогда 
		Возврат ИдЗадачи;
	иначе
		Возврат новый УникальныйИдентификатор(ИдЗадачи);
	КонецЕсли;
	Возврат Неопределено		
КонецФункции
#КонецОбласти

#КонецОбласти

#Область СтруктураПодчиненности
// Функция СтрокаТаблицыЗначенийВСтруктуру создает
// структуру со свойствами, как колонки таблицы
// значений передаваемой строки
// и устанавливает этим свойствам значения
// из строки таблицы значений.
// 
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений.
//
// ВозвращаемоеЗначение:
//  Структура
//
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции
#КонецОбласти