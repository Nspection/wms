Процедура ЦентральныйОбработчикДанныхНаборка(ДанныеОбработчика)Экспорт
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипОбработкиДанных") тогда
		Возврат
	КонецЕсли;
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючИнициализацииДанных") тогда
		Возврат
	КонецЕсли;	
	
	Если  ДанныеОбработчика.ТипОбработкиДанных="ВнесениеИзмененийВДокумент" тогда
		
		Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"СостояниеИнициализации")   тогда
			Возврат
		КонецЕсли;	
		////////////Транзакция фиксируется псоле инициализации задачи
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		///////
		ВнестиИзмененияВДокумент(ДанныеОбработчика);
		итWMSОбработчикиРегистрации_И_Загрузки.ИнициализацияДанныхНаСервере(ДанныеОбработчика);
		Если ДанныеОбработчика.Свойство("Статус") тогда
			Если ДанныеОбработчика.Статус=404 тогда
				Возврат
			КонецЕсли;
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	Если  ДанныеОбработчика.ТипОбработкиДанных="ЗаписьДанныхТСД" тогда
		
		Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"СостояниеИнициализации")   тогда
			Возврат
		КонецЕсли;	
		////////////Транзакция фиксируется псоле инициализации задачи
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		///////
		ЗаписьДанныхТСД(ДанныеОбработчика);
		итWMSОбработчикиРегистрации_И_Загрузки.ИнициализацияДанныхНаСервере(ДанныеОбработчика);
		Если ДанныеОбработчика.Свойство("Статус") тогда
			Если ДанныеОбработчика.Статус=404 тогда
				Возврат
			КонецЕсли;
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	Если  ДанныеОбработчика.ТипОбработкиДанных="ИзменениеЯчейкиПолучателя" тогда
		Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТСДИД") тогда
			Возврат
		КонецЕсли;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		ИзменитьЯчейкуЗадачиДокумента(ДанныеОбработчика);
		итWMSОбработчикиРегистрации_И_Загрузки.ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика);
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если  ДанныеОбработчика.ТипОбработкиДанных="ИзменениеЯчейкиПолучателяЗадачи" тогда
		Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТСДИД") тогда
			Возврат
		КонецЕсли;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		ИзменитьЯчейкуЗадачи(ДанныеОбработчика);
		итWMSОбработчикиРегистрации_И_Загрузки.ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика);
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	
КонецПроцедуры

Процедура ВнестиИзмененияВДокумент(ДанныеОбработчика)
	
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"СтрокиЗадачи") тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ИдентификаторУпаковкиПолучатель") тогда
		Возврат
	КонецЕсли;
	
	
	ДанныеЗадачи=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
	Если ДанныеЗадачи=Неопределено тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не найденно данных по ид задачи");
		Возврат
	КонецЕсли;
	Если не итWMSСлужебныеПроцедурыИФункции.ПроверкаНаВозможностьИзменитьЗадачу(ДанныеОбработчика,новый Структура("ТСДИД,ИдЗадачи",ДанныеОбработчика.ТСДИД,ДанныеЗадачи.ИдЗадачи),ДанныеЗадачи) Тогда 
		Возврат
	КонецЕсли;	
	Если ДанныеЗадачи.ИдентификаторУпаковки<>ДанныеОбработчика.ИдентификаторУпаковкиПолучатель тогда
		Если не ПроверкаНаНаличиеSSCCвЯчейкеПолучатель(ДанныеОбработчика.ИдентификаторУпаковкиПолучатель,ДанныеЗадачи.ДокументОснование,ДанныеЗадачи.ЯчейкаПолучатель) тогда
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки","По данным системы, такого SSCC в ячейке "+ДанныеЗадачи.ЯчейкаПолучатель.Наименование+" нет");
			Возврат
		КонецЕсли;
	КонецЕсли;
	СостояниеЗадачи=ДанныеОбработчика.СостояниеИнициализации;
	ИдентификаторУпаковки=ДанныеЗадачи.ИдентификаторУпаковки;
	ЯчейкаПолучатель=ДанныеЗадачи.ЯчейкаПолучатель;
	ОбъектДокумента=ДанныеЗадачи.ДокументОснование.ПолучитьОбъект();
	ВсеСтрокиЗадачиОтменены=Истина;
	для Каждого стр из ДанныеОбработчика.СтрокиЗадачи цикл
		МассиСтрокКИзменению=ОбъектДокумента.Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",стр.ИдСтроки));
		для Каждого СтрокаКИзменению из МассиСтрокКИзменению цикл
			СтрокаКИзменению.СостояниеЗадачи=СостояниеЗадачи;
			//СтрокаКИзменению.ИдентификаторУпаковкиПолучатель= ДанныеОбработчика.ИдентификаторУпаковкиПолучатель;
			СтрокаКИзменению.КоличествоФакт=стр.КоличествоФакт;
			Если стр.Отмена Тогда 
				СтрокаКИзменению.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
				Если стр.ПричинаОтменыЗадачи=Неопределено Тогда 
					ДанныеОбработчика.Вставить("Статус",404);
					ДанныеОбработчика.Вставить("ОписаниеОшибки","не верная причина отмены задачи");
					Возврат
				КонецЕсли;
				СтрокаКИзменению.ПричинаОтменыЗадачи=стр.ПричинаОтменыЗадачи;
			иначе
				ВсеСтрокиЗадачиОтменены=Ложь;
			КонецЕсли;
			СтрокаКИзменению.ДатаИсполнения=ТекущаяДата();
		КонецЦикла;
	КонецЦикла;
	Если ВсеСтрокиЗадачиОтменены  Тогда 
	ДанныеОбработчика.СостояниеИнициализации=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
	КонецЕсли;
	ОбъектДокумента.Записать();
	
	/////Область Обработки ПМУ  ++++++++++++++
	Если ДанныеОбработчика.Свойство("ДанныеАгрегации") тогда
		ДанныеАгрегации=ДанныеОбработчика.ДанныеАгрегации;
		Для Каждого Строка из ДанныеАгрегации цикл
			ОбработатьДанныеАгрегации(Строка,ОбъектДокумента.Ссылка,ДанныеОбработчика.ИдентификаторУпаковкиПолучатель);
		КонецЦикла;
		ДанныеОбработчика.Удалить("ДанныеАгрегации");
	КонецЕсли;	
	////////////////// -----------------------	

КонецПроцедуры



Процедура ЗаписьДанныхТСД(ДанныеОбработчика)
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"СтрокиЗадачи") тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ИдентификаторУпаковкиПолучатель") тогда
		Возврат
	КонецЕсли;
	ДанныеЗадачи=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
	Если ДанныеЗадачи=Неопределено тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не найденно данных по ид задачи");
		Возврат
	КонецЕсли;
	Если не итWMSСлужебныеПроцедурыИФункции.ПроверкаНаВозможностьИзменитьЗадачу(ДанныеОбработчика,новый Структура("ТСДИД,ИдЗадачи",ДанныеОбработчика.ТСДИД,ДанныеЗадачи.ИдЗадачи),ДанныеЗадачи) Тогда 
		Возврат
	КонецЕсли;	
	Если ДанныеЗадачи.ИдентификаторУпаковки<>ДанныеОбработчика.ИдентификаторУпаковкиПолучатель и ДанныеОбработчика.СостояниеИнициализации<>Перечисления.итWMSСостоянияЗадачТСД.Отменена тогда
		Если не ПроверкаНаНаличиеSSCCвЯчейкеПолучатель(ДанныеОбработчика.ИдентификаторУпаковкиПолучатель,ДанныеЗадачи.ДокументОснование,ДанныеЗадачи.ЯчейкаПолучатель) тогда
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки","По данным системы, такого SSCC в ячейке "+ДанныеЗадачи.ЯчейкаПолучатель.Наименование+" нет");
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	ДатаИсполнения=ТекущаяДата();
	СостояниеЗадачи=ДанныеОбработчика.СостояниеИнициализации;
	СостояниеОтмены=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
	ВсеСтрокиЗадачиОтменены=Истина;
	для Каждого стр из ДанныеОбработчика.СтрокиЗадачи цикл
		СтруктураДанных=новый Структура;
		СтруктураДанных.Вставить("КоличествоФакт",стр.КоличествоФакт);
		СтруктураДанных.Вставить("ИдентификаторУпаковкиПолучатель",ДанныеОбработчика.ИдентификаторУпаковкиПолучатель);
		Если стр.Отмена Тогда 
			СтруктураДанных.Вставить("СостояниеСтроки",СостояниеОтмены);
		Иначе 
			СтруктураДанных.Вставить("СостояниеСтроки",СостояниеЗадачи);
			ВсеСтрокиЗадачиОтменены=Ложь;
		КонецЕсли;
		СтруктураДанных.Вставить("ПричинаОтменыЗадачи",Неопределено);
		СтруктураДанных.Вставить("ДатаИсполнения",ДатаИсполнения);
		Если ДанныеОбработчика.СостояниеИнициализации=Перечисления.итWMSСостоянияЗадачТСД.Отменена Тогда 
			Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ПричинаОтменыЗадачи") тогда
				Возврат
			КонецЕсли;
			СтруктураДанных.ПричинаОтменыЗадачи=ДанныеОбработчика.ПричинаОтменыЗадачи;
		КонецЕсли;
		МенеджерЗаписи=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдЗадачи=ДанныеОбработчика.КлючИнициализацииДанных;
		МенеджерЗаписи.идСтроки= стр.ИдСтроки;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ДанныеДокументаТСД=новый ХранилищеЗначения(СтруктураДанных);
		МенеджерЗаписи.Записать();
	КонецЦикла;
	Если ВсеСтрокиЗадачиОтменены  Тогда 
	ДанныеОбработчика.СостояниеИнициализации=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
	КонецЕсли;
	/////Область Обработки ПМУ  ++++++++++++++
	Если ДанныеОбработчика.Свойство("ДанныеАгрегации") тогда
		ДанныеАгрегации=ДанныеОбработчика.ДанныеАгрегации;
		Для Каждого Строка из ДанныеАгрегации цикл
			ОбработатьДанныеАгрегации(Строка,ДанныеЗадачи.ДокументОснование,ДанныеОбработчика.ИдентификаторУпаковкиПолучатель);
		КонецЦикла;
		ДанныеОбработчика.Удалить("ДанныеАгрегации");
	КонецЕсли;	
	////////////////// -----------------------	

КонецПроцедуры

Процедура ВнестиИзмененияВДокументНаборки(Документ) Экспорт 
	РезультатЗапроса=итWMSСлужебныеПроцедурыИФункции.ПолучитьРезультатЗапросаИзмененияДанныхЗадачИСтрокТСД(Документ);
	Выборка=РезультатЗапроса.Выбрать();
	ОбъектДокумента=Документ.ПолучитьОбъект();
	Пока Выборка.Следующий() Цикл 
		ДанныеДокументаТСДСтрока= Выборка.ДанныеДокументаТСДСтрока.Получить();
		МассивСтрок=ОбъектДокумента.Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",Выборка.идСтроки));	
		Для Каждого стр из МассивСтрок Цикл
			стр.СостояниеЗадачи= Выборка.Состояние;
			стр.ЯчейкаПолучатель=Выборка.ЯчейкаПолучатель;
			Если ТипЗнч(ДанныеДокументаТСДСтрока)=Тип("Структура") Тогда 
				стр.КоличествоФакт=ДанныеДокументаТСДСтрока.КоличествоФакт;
				стр.СостояниеЗадачи=ДанныеДокументаТСДСтрока.СостояниеСтроки;
				Если ДанныеДокументаТСДСтрока.ПричинаОтменыЗадачи<>Неопределено Тогда 
					стр.ПричинаОтменыЗадачи=ДанныеДокументаТСДСтрока.ПричинаОтменыЗадачи;
				КонецЕсли;	
				стр.ДатаИсполнения=ДанныеДокументаТСДСтрока.ДатаИсполнения;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	ОбъектДокумента.ОбменДанными.Загрузка=Истина;
	ОбъектДокумента.Записать();
	КонецПроцедуры

Процедура ИзменитьЯчейкуЗадачи(ДанныеОбработчика)
	
Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ЯчейкаПолучатель") тогда
		Возврат
КонецЕсли;
	
ЯчейкаПолучатель=Справочники.итСкладскиеЯчейки.ПолучитьСсылку(ДанныеОбработчика.ЯчейкаПолучатель);

ДанныеЗадачи=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
Если не итWMSСлужебныеПроцедурыИФункции.ПроверкаНаВозможностьИзменитьЗадачу(ДанныеОбработчика,новый Структура("ТСДИД,ИдЗадачи",ДанныеОбработчика.ТСДИД,ДанныеЗадачи.ИдЗадачи),ДанныеЗадачи) Тогда 
	Возврат
КонецЕсли;	
Если ДанныеЗадачи.ЯчейкаПолучатель=ЯчейкаПолучатель Тогда 
	Возврат
КонецЕсли;	
ШтрихКодЯчейки=итWMSСлужебныеПроцедурыИФункции.ПолучитьШтрихКодЯчейки(ЯчейкаПолучатель);
Если ШтрихКодЯчейки =Неопределено Тогда 
	ДанныеОбработчика.Вставить("Статус",404);
	ДанныеОбработчика.Вставить("ОписаниеОшибки","у выбранной ячейки не задан штрих код");
	Возврат
КонецЕсли;
	

НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.ИдЗадачи.Установить(ДанныеОбработчика.КлючИнициализацииДанных);
НаборЗаписей.Прочитать();
Для Каждого Запись из НаборЗаписей Цикл 
Запись.ЯчейкаПолучатель=ЯчейкаПолучатель;
КонецЦикла;
ДанныеОбработчика.Вставить("ШтрихКодЯчейки",ШтрихКодЯчейки);
НаборЗаписей.Записать();


КонецПроцедуры


Процедура ОбработатьДанныеАгрегации(Строка,СсылкаДокумента,ИдентификаторУпаковкиПолучатель)
	Марка=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьМаркуСБлокировкой(Строка.Марка);
	НаборЗаписейКПереупаковки=РегистрыСведений.итWMS_АгрегацияМарок.СоздатьНаборЗаписей();
	НаборЗаписейКПереупаковки.Отбор.Марка.Установить(Марка); 
	НаборЗаписейКПереупаковки.Отбор.ДокументОснование.Установить(СсылкаДокумента);
	НаборЗаписейКПереупаковки.Прочитать();
	НаборЗаписейКПереупаковки.Очистить();
	НоваяЗаписьКПереупаковки=НаборЗаписейКПереупаковки.Добавить();
	НоваяЗаписьКПереупаковки.ДокументОснование=СсылкаДокумента;
	НоваяЗаписьКПереупаковки.Период=ТекущаяДата();
	НоваяЗаписьКПереупаковки.Марка=Марка;
	НоваяЗаписьКПереупаковки.АктивностьЗаписи=Истина;
	НоваяЗаписьКПереупаковки.GTIN=Строка.GTIN;
	НоваяЗаписьКПереупаковки.SSCC=ИдентификаторУпаковкиПолучатель;
	Если ТипЗнч(Строка.Номенклатура)=Тип("УникальныйИдентификатор") Тогда 
		НоваяЗаписьКПереупаковки.Номенклатура=итWMSСлужебныеПроцедурыИФункции.НайтиНоменклатуруПоУникальномуИД(Строка.Номенклатура);
	иначе
		НоваяЗаписьКПереупаковки.Номенклатура=Строка.Номенклатура;
	КонецЕсли;
	НоваяЗаписьКПереупаковки.ДатаРозлива=Строка.ДатаРозлива;
	НаборЗаписейКПереупаковки.Записать();
	
	
	
	НаборЗаписейМаркиВОбработке=РегистрыСведений.итWMS_МаркиВОбработке.СоздатьНаборЗаписей();
	НаборЗаписейМаркиВОбработке.Отбор.Марка.Установить(Марка);
	НаборЗаписейМаркиВОбработке.Отбор.ДокументОснование.Установить(СсылкаДокумента);
	НаборЗаписейМаркиВОбработке.Прочитать();
	НаборЗаписейМаркиВОбработке.Очистить();
	
	
	
	НоваяЗаписьМаркиВОбработке=НаборЗаписейМаркиВОбработке.Добавить();
	НоваяЗаписьМаркиВОбработке.ДокументОснование=СсылкаДокумента;
	НоваяЗаписьМаркиВОбработке.Марка=Марка;
	НаборЗаписейМаркиВОбработке.Записать();
КонецПроцедуры

Процедура ИзменитьЯчейкуЗадачиДокумента(ДанныеОбработчика)
	
Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ЯчейкаПолучатель") тогда
		Возврат
КонецЕсли;
	
ЯчейкаПолучатель=Справочники.итСкладскиеЯчейки.ПолучитьСсылку(ДанныеОбработчика.ЯчейкаПолучатель);

ДанныеЗадачи=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
Если не итWMSСлужебныеПроцедурыИФункции.ПроверкаНаВозможностьИзменитьЗадачу(ДанныеОбработчика,новый Структура("ТСДИД,ИдЗадачи",ДанныеОбработчика.ТСДИД,ДанныеЗадачи.ИдЗадачи),ДанныеЗадачи) Тогда 
	Возврат
КонецЕсли;
Если ДанныеЗадачи.ЯчейкаПолучатель=ЯчейкаПолучатель Тогда 
	Возврат
КонецЕсли;	
ШтрихКодЯчейки=итWMSСлужебныеПроцедурыИФункции.ПолучитьШтрихКодЯчейки(ЯчейкаПолучатель);
Если ШтрихКодЯчейки =Неопределено Тогда 
	ДанныеОбработчика.Вставить("Статус",404);
	ДанныеОбработчика.Вставить("ОписаниеОшибки","у выбранной ячейки не задан штрих код");
	Возврат
КонецЕсли;
	
МассивИдентификаторовСтрокЗадачи=итWMSСлужебныеПроцедурыИФункции.ПолучитьМассивИдентификаторовСтрокЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);

Если  МассивИдентификаторовСтрокЗадачи.Количество()=0 Тогда 
	Возврат
КонецЕсли;

ОбъектДокумента=ДанныеЗадачи.ДокументОснование.ПолучитьОбъект();

Для Каждого ЭлементМассива из МассивИдентификаторовСтрокЗадачи Цикл
	МассиСтрокКИзменению=ОбъектДокумента.Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",ЭлементМассива));
	для Каждого СтрокаКИзменению из МассиСтрокКИзменению цикл
		СтрокаКИзменению.ЯчейкаПолучатель=ЯчейкаПолучатель;
	КонецЦикла;
КонецЦикла;

НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.ИдЗадачи.Установить(ДанныеОбработчика.КлючИнициализацииДанных);
НаборЗаписей.Прочитать();
Для Каждого стр из НаборЗаписей цикл
	стр.ЯчейкаПолучатель=ЯчейкаПолучатель;
КонецЦикла;
ДанныеОбработчика.Вставить("ШтрихКодЯчейки",ШтрихКодЯчейки);
НаборЗаписей.Записать();
ОбъектДокумента.Записать();
КонецПроцедуры

	
Функция ПроверкаНаНаличиеSSCCвЯчейкеПолучатель(ИдентификаторУпаковкиПолучатель,Документ,Ячейка)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки КАК ИдентификаторУпаковки
	|ПОМЕСТИТЬ ДанныеИдентификаторовВЯчейке
	|ИЗ
	|	РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	|ГДЕ
	|	итТоварыВЯчейкахОстатки.Ячейка = &Ячейка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель
	|ИЗ
	|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
	|ГДЕ
	|	итWMSНаборкаТовары.ЯчейкаПолучатель = &Ячейка
	|	И итWMSНаборкаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеИдентификаторовВЯчейке.ИдентификаторУпаковки КАК ИдентификаторУпаковки
	|ИЗ
	|	ДанныеИдентификаторовВЯчейке КАК ДанныеИдентификаторовВЯчейке
	|ГДЕ
	|	ДанныеИдентификаторовВЯчейке.ИдентификаторУпаковки = &ИдентификаторУпаковки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеИдентификаторовВЯчейке.ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("ИдентификаторУпаковки", ИдентификаторУпаковкиПолучатель);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции


#Область АвтоВыдачаНаборокНаТСД

Процедура ВыдатьНаборкуНаТСД(ДанныеОбработчика)  Экспорт 
	Если не ДанныеОбработчика.Свойство("ТСДИД") тогда
		ДанныеОбработчика=новый Структура;
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","отсутсвует ключевое свойство <<ТСДИД>> ");
		Возврат
	КонецЕсли;
	ТСД=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
	Если ПоискАктивныхЗадачНаТСД(ТСД) Тогда 
		ДанныеОбработчика=новый Структура;
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","На тсд имеются активные задачи");
		Возврат
    КонецЕсли;
	РезультатЗапроса=ПолучитьОчередьНаборок();  
	ВыборкаНаборок= РезультатЗапроса.Выбрать();
	ЗадачиНайдены=Ложь;
	КВыполнению=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
	ТСДПустой= Справочники.итWMSСправочникТСД.ПустаяСсылка();
	Пока ВыборкаНаборок.Следующий() Цикл
		Если ЗадачиНайдены Тогда 
			Прервать;
		КонецЕсли;	
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Если ВыборкаНаборок.ДокументОснование.Контрагент.ит_WMS_ВидСкладскойДеятельности=Перечисления.ит_WMS_ВидыСкладскойДеятельности.Розничная Тогда 
			РегистрацияРозницыНаТСД(ВыборкаНаборок.ДокументОснование,ТСД,ЗадачиНайдены);
		иначе
		БлокировкаДанных=новый БлокировкаДанных;
		ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
		ЭлементБлокировки.УстановитьЗначение("ДокументОснование",ВыборкаНаборок.ДокументОснование);
		ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	    БлокировкаДанных.Заблокировать();
		НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(ВыборкаНаборок.ДокументОснование);
		НаборЗаписей.Прочитать();
		Для Каждого стр из НаборЗаписей Цикл
			Если стр.ТСД<>ТСДПустой Тогда 
				Продолжить;
			КонецЕсли;
			Если стр.Состояние<>КВыполнению Тогда 
				Продолжить;
			КонецЕсли;	
			стр.ТСД=ТСД;
			ЗадачиНайдены=Истина;
		КонецЦикла;
		Если ЗадачиНайдены Тогда 
			НаборЗаписей.Записать(Истина);
			Если ВыборкаНаборок.ДокументОснование.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда
				итWMSОбработчикиРегистрации_И_Загрузки.ОбработчикИзмененияСтатусаДокумента(ВыборкаНаборок.ДокументОснование);
            КонецЕсли;
		КонецЕсли;	
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	Если ЗадачиНайдены Тогда
		итWMSОбработчикиРегистрации_И_Загрузки.ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика);
	иначе
	ДанныеОбработчика=новый Структура;
	ДанныеОбработчика.Вставить("Статус",404);
	ДанныеОбработчика.Вставить("ОписаниеОшибки","нет свободных документов наборок");
	КонецЕсли;
		

КонецПроцедуры

Процедура РегистрацияРозницыНаТСД(НаборкаРозницы,ТСД,ЗадачиНайдены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МаршрутизацияДокументыМаршрута.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВтМаршрутНаборки
		|ИЗ
		|	Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
		|ГДЕ
		|	МаршрутизацияДокументыМаршрута.Заказ = &Заказ
		|	И МаршрутизацияДокументыМаршрута.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	МаршрутизацияДокументыМаршрута.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутизацияДокументыМаршрута.Заказ КАК Заказ,
		|	МаршрутизацияДокументыМаршрута.ОчередьДоставки КАК ОчередьДоставки
		|ПОМЕСТИТЬ ЗаказыМаршрута
		|ИЗ
		|	ВтМаршрутНаборки КАК ВтМаршрутНаборки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
		|		ПО ВтМаршрутНаборки.Ссылка = МаршрутизацияДокументыМаршрута.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSНаборка.Ссылка КАК Наборка,
		|	ЗаказыМаршрута.Заказ КАК Заказ,
		|	ЗаказыМаршрута.ОчередьДоставки КАК ОчередьДоставки
		|ПОМЕСТИТЬ НаборкиМаршрута
		|ИЗ
		|	ЗаказыМаршрута КАК ЗаказыМаршрута
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка КАК итWMSНаборка
		|		ПО ЗаказыМаршрута.Заказ = итWMSНаборка.итОснование
		|			И (итWMSНаборка.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаборкиМаршрута.Наборка КАК Наборка,
		|	НаборкиМаршрута.ОчередьДоставки КАК ОчередьДоставки,
		|	итWMSЗадачиТСД.ИдЗадачи КАК ИдЗадачи
		|ПОМЕСТИТЬ ВТДанныезадачНаборок
		|ИЗ
		|	НаборкиМаршрута КАК НаборкиМаршрута
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|		ПО НаборкиМаршрута.Наборка = итWMSЗадачиТСД.ДокументОснование
		|			И (итWMSЗадачиТСД.ТСД = ЗНАЧЕНИЕ(Справочник.итWMSСправочникТСД.ПустаяСсылка))
		|			И (итWMSЗадачиТСД.Состояние = ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.КВыполнению))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДанныезадачНаборок.Наборка КАК Наборка,
		|	ВТДанныезадачНаборок.ОчередьДоставки КАК ОчередьДоставки,
		|	ВТДанныезадачНаборок.ИдЗадачи КАК ИдЗадачи,
		|	СУММА(итWMSСтрокиЗадачТСД.Количество / итWMSСтрокиЗадачТСД.Номенклатура.ЕдиницаИзмеренияМест.итКоличествоНаПаллете) КАК КоэффициентПаллеты
		|ИЗ
		|	ВТДанныезадачНаборок КАК ВТДанныезадачНаборок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
		|		ПО ВТДанныезадачНаборок.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДанныезадачНаборок.Наборка,
		|	ВТДанныезадачНаборок.ОчередьДоставки,
		|	ВТДанныезадачНаборок.ИдЗадачи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьДоставки
		|ИТОГИ ПО
		|	Наборка";
	
	Запрос.УстановитьПараметр("Заказ", НаборкаРозницы.итОснование);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНаборка= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СчетчикПаллет=0;
	ПервыйОбход=Истина;
	КВыполнению=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
	ТСДПустой= Справочники.итWMSСправочникТСД.ПустаяСсылка();
	Пока ВыборкаНаборка.Следующий() Цикл 
		ВыборкаДетальныеЗаписи=ВыборкаНаборка.Выбрать();
		Если не ПервыйОбход Тогда 
			Если СчетчикПаллет >=0.7 Тогда 
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Изменения=Ложь;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			БлокировкаДанных=новый БлокировкаДанных;
			ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
			ЭлементБлокировки.УстановитьЗначение("ИдЗадачи",ВыборкаДетальныеЗаписи.ИдЗадачи);
			ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдЗадачи.Установить(ВыборкаДетальныеЗаписи.ИдЗадачи);
			НаборЗаписей.Прочитать();
			
			для Каждого стр из НаборЗаписей Цикл 
				Если стр.ТСД<>ТСДПустой Тогда 
					Прервать;
				КонецЕсли;
				Если стр.Состояние<>КВыполнению Тогда 
					Продолжить;
				КонецЕсли;	
				СчетчикПаллет=СчетчикПаллет+ВыборкаДетальныеЗаписи.КоэффициентПаллеты;
				Стр.ТСД=ТСД;
				Изменения=Истина;
			КонецЦикла;
			Если Изменения Тогда 
				НаборЗаписей.Записать(Истина);	
			КонецЕсли;
		КонецЦикла;
		Если Изменения Тогда 
			ПервыйОбход=Ложь;
			ЗадачиНайдены=Истина;
			Если ВыборкаНаборка.Наборка.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда
				итWMSОбработчикиРегистрации_И_Загрузки.ОбработчикИзмененияСтатусаДокумента(ВыборкаНаборка.Наборка);
			КонецЕсли;	
		КонецЕсли;

	КонецЦикла;
	
	КонецПроцедуры

Функция ПоискАктивныхЗадачНаТСД(ТСД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSЗадачиТСД.ИдЗадачи КАК ИдЗадачи
		|ИЗ
		|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|ГДЕ
		|	итWMSЗадачиТСД.ТСД = &ТСД
		|	И НЕ итWMSЗадачиТСД.ФиксацияЗадачи";
	
	Запрос.УстановитьПараметр("ТСД", ТСД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	    Возврат Ложь;
КонецФункции

Функция ПолучитьОчередьНаборок() 
	ДатаТекущая=ТекущаяДата();
	ДатаНачала=ДатаТекущая-24*60*60;
	ДатаОкончания=ДатаТекущая+24*60*60;
			
    Значение=итWMSПривилегированныйМодуль.ЗагрузитьНастройкиИзХранилищаОбщихНастроек("итWMSМотивационныйОтчет","итWMSМотивационныйОтчет","итWMSМотивационныйОтчет");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаОтгрузки, ЧАС, ЧАС(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)), МИНУТА, МИНУТА(ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя)) КАК ДатаОтгрузки
		|ПОМЕСТИТЬ ВтДанныеЗаказов
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Проведен
		|	И ЗаказПокупателя.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ ЗаказПокупателя.Набран
		|	И ЗаказПокупателя.Выполнен
		|	И ЗаказПокупателя.итВремяНачалаПогрузкиКакВремя <> ЗаказПокупателя.итВремяЗавершенияПогрузкиКакВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеЗаказов.Ссылка КАК Ссылка,
		|	ВтДанныеЗаказов.ДатаОтгрузки КАК ДатаОтгрузки,
		|	итWMSНаборка.Ссылка КАК Наборка
		|ПОМЕСТИТЬ ВтДанныеНаборок
		|ИЗ
		|	ВтДанныеЗаказов КАК ВтДанныеЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка КАК итWMSНаборка
		|		ПО ВтДанныеЗаказов.Ссылка = итWMSНаборка.итОснование
		|			И (итWMSНаборка.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSСтрокиЗадачТСД.идСтроки КАК идСтроки,
		|	ВложенныйЗапрос.ДокументОснование КАК ДокументОснование,
		|	ВложенныйЗапрос.ИдЗадачи КАК ИдЗадачи,
		|	ВложенныйЗапрос.Состояние КАК Состояние,
		|	ВложенныйЗапрос.ТСД КАК ТСД
		|ПОМЕСТИТЬ РеальноеСостояниеЗадачДокумента
		|ИЗ
		|	(ВЫБРАТЬ
		|		итWMSЗадачиТСД.ДокументОснование КАК ДокументОснование,
		|		итWMSЗадачиТСД.ИдЗадачи КАК ИдЗадачи,
		|		итWMSЗадачиТСД.Состояние КАК Состояние,
		|		итWMSЗадачиТСД.ТСД КАК ТСД
		|	ИЗ
		|		ВтДанныеНаборок КАК ВтДанныеНаборок
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|			ПО ВтДанныеНаборок.Наборка = итWMSЗадачиТСД.ДокументОснование
		|	
		|	СГРУППИРОВАТЬ ПО
		|		итWMSЗадачиТСД.ДокументОснование,
		|		итWMSЗадачиТСД.ИдЗадачи,
		|		итWMSЗадачиТСД.Состояние,
		|		итWMSЗадачиТСД.ТСД) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
		|		ПО ВложенныйЗапрос.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSСтрокиЗадачТСД.идСтроки,
		|	ВложенныйЗапрос.ДокументОснование,
		|	ВложенныйЗапрос.ИдЗадачи,
		|	ВложенныйЗапрос.Состояние,
		|	ВложенныйЗапрос.ТСД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSНаборкаТовары.Ссылка КАК ДокументОснование,
		|	итWMSНаборкаТовары.Номенклатура КАК Номенклатура,
		|	итWMSНаборкаТовары.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итWMSНаборкаТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	итWMSНаборкаТовары.СерияНоменклатуры.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
		|	итWMSНаборкаТовары.ЯчейкаПикинга КАК ЯчейкаПикинга,
		|	СУММА(итWMSНаборкаТовары.КоличествоФакт) КАК КоличествоФакт,
		|	МАКСИМУМ(итWMSНаборкаТовары.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете) КАК КоличествоНаПаллете,
		|	МАКСИМУМ(итWMSНаборкаТовары.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоВСлое) КАК КоличествоВСлое,
		|	МАКСИМУМ(итWMSНаборкаТовары.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент) КАК КоличествоВКоробе,
		|	итWMSНаборкаТовары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
		|	итWMSНаборкаТовары.Ссылка.Контрагент КАК Контрагент,
		|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
		|	итWMSНаборкаТовары.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
		|	итWMSНаборкаТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	итWMSНаборкаТовары.Количество КАК Количество,
		|	ВтДанныеНаборок.Ссылка КАК Заказ,
		|	ВтДанныеНаборок.ДатаОтгрузки КАК ДатаОтгрузкиЗаказа,
		|	РеальноеСостояниеЗадачДокумента.ТСД КАК ТСД
		|ПОМЕСТИТЬ ВтДанныеНаборки
		|ИЗ
		|	ВтДанныеНаборок КАК ВтДанныеНаборок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
		|			ЛЕВОЕ СОЕДИНЕНИЕ РеальноеСостояниеЗадачДокумента КАК РеальноеСостояниеЗадачДокумента
		|			ПО итWMSНаборкаТовары.ИдентификаторСтроки = РеальноеСостояниеЗадачДокумента.идСтроки
		|				И итWMSНаборкаТовары.Ссылка = РеальноеСостояниеЗадачДокумента.ДокументОснование
		|		ПО ВтДанныеНаборок.Наборка = итWMSНаборкаТовары.Ссылка
		|ГДЕ
		|	итWMSНаборкаТовары.Ссылка.Проведен
		|	И ВЫБОР
		|			КОГДА итWMSНаборкаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итwmsСтатусыСкладскихдокументов.Зарезервирован)
		|				ТОГДА итWMSНаборкаТовары.СостояниеЗадачи В (ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению), ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.ПустаяСсылка))
		|			ИНАЧЕ ЕСТЬNULL(РеальноеСостояниеЗадачДокумента.Состояние, итWMSНаборкаТовары.СостояниеЗадачи) В (ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.КВыполнению))
		|		КОНЕЦ
		|	И РеальноеСостояниеЗадачДокумента.ТСД = ЗНАЧЕНИЕ(Справочник.итwmsСправочникТСД.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSНаборкаТовары.Номенклатура,
		|	итWMSНаборкаТовары.СерияНоменклатуры,
		|	итWMSНаборкаТовары.ИдентификаторУпаковки,
		|	итWMSНаборкаТовары.СерияНоменклатуры.итПризнакПомарочногоУчета,
		|	итWMSНаборкаТовары.ЯчейкаПикинга,
		|	итWMSНаборкаТовары.ЯчейкаПолучатель,
		|	итWMSНаборкаТовары.Ссылка.Контрагент,
		|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель,
		|	итWMSНаборкаТовары.ЯчейкаОтправитель,
		|	итWMSНаборкаТовары.ИдентификаторСтроки,
		|	итWMSНаборкаТовары.Количество,
		|	итWMSНаборкаТовары.Ссылка,
		|	ВтДанныеНаборок.Ссылка,
		|	ВтДанныеНаборок.ДатаОтгрузки,
		|	РеальноеСостояниеЗадачДокумента.ТСД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборки.ДокументОснование КАК ДокументОснование,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеНаборки.ИдентификаторСтроки) КАК КоличествоСтрок
		|ПОМЕСТИТЬ ВтКоличествоСтрокНаборки
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеНаборки.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеНаборки.ИдентификаторСтроки) КАК КоличествоСтрокПаллеты,
		|	ВтДанныеНаборки.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВтКоличествоСтрокВПаллете
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеНаборки.ДокументОснование,
		|	ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ДокументОснование КАК ДокументОснование,
		|	СУММА(ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(ВложенныйЗапрос.КоэффициентПаллетНаборки + 0.4999 КАК ЧИСЛО(15, 0))) < 1
		|				ТОГДА 1
		|			ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.КоэффициентПаллетНаборки + 0.4999 КАК ЧИСЛО(15, 0))
		|		КОНЕЦ) КАК КоэффициентПаллетНаборки
		|ПОМЕСТИТЬ КоличествоПаллетНаборкиПоКоэф
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВтДанныеНаборки.ДокументОснование КАК ДокументОснование,
		|		СУММА(ВтДанныеНаборки.Количество / ВЫБОР
		|				КОГДА ЕСТЬNULL(ВтДанныеНаборки.КоличествоНаПаллете, 0) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(ВтДанныеНаборки.КоличествоНаПаллете, 0)
		|			КОНЕЦ) КАК КоэффициентПаллетНаборки
		|	ИЗ
		|		ВтДанныеНаборки КАК ВтДанныеНаборки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВтДанныеНаборки.ДокументОснование) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеНаборки.ЯчейкаОтправитель) КАК КоличествоЯчеек,
		|	ВтДанныеНаборки.ДокументОснование КАК ДокументОснование,
		|	ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель
		|ПОМЕСТИТЬ КоличествоЯчеекНаборки
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеНаборки.ДокументОснование,
		|	ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ВложенныйЗапрос.КоличествоНаПаллете КАК КоличествоНаПаллете,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.ДокументОснование КАК ДокументОснование,
		|	ВложенныйЗапрос.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
		|	ВложенныйЗапрос.Количество КАК Количество
		|ПОМЕСТИТЬ ИнформацияПоНецелымПаллетымНаборки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВтДанныеНаборки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|		ВтДанныеНаборки.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
		|		СУММА(ВтДанныеНаборки.Количество) КАК Количество,
		|		МАКСИМУМ(ВтДанныеНаборки.КоличествоНаПаллете) КАК КоличествоНаПаллете,
		|		ВтДанныеНаборки.Номенклатура КАК Номенклатура,
		|		ВтДанныеНаборки.ДокументОснование КАК ДокументОснование
		|	ИЗ
		|		ВтДанныеНаборки КАК ВтДанныеНаборки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВтДанныеНаборки.ИдентификаторУпаковки,
		|		ВтДанныеНаборки.Номенклатура,
		|		ВтДанныеНаборки.ДокументОснование,
		|		ВтДанныеНаборки.ЯчейкаОтправитель) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Количество <> ВложенныйЗапрос.КоличествоНаПаллете
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНаборки.ДокументОснование КАК ДокументОснование,
		|	ВтДанныеНаборки.Номенклатура КАК Номенклатура,
		|	ВтДанныеНаборки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтДанныеНаборки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ВтДанныеНаборки.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
		|	ВтДанныеНаборки.КоличествоНаПаллете КАК КоличествоНаПаллете,
		|	ВтДанныеНаборки.КоличествоВСлое КАК КоличествоВСлое,
		|	ВтДанныеНаборки.КоличествоВКоробе КАК КоличествоВКоробе,
		|	ВЫБОР
		|		КОГДА НЕ ИнформацияПоНецелымПаллетымНаборки.ИдентификаторУпаковки ЕСТЬ NULL
		|			ТОГДА ВЫРАЗИТЬ(ВтДанныеНаборки.Количество / ЕСТЬNULL(ВтДанныеНаборки.КоличествоВКоробе, 1) - 0.49999 КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоВнепаллетныхКоробов,
		|	1 / ВтКоличествоСтрокВПаллете.КоличествоСтрокПаллеты КАК КоэффициентПаллеты,
		|	ВтДанныеНаборки.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
		|	ВтДанныеНаборки.Контрагент КАК Контрагент,
		|	1 / ВтКоличествоСтрокВПаллете.КоличествоСтрокПаллеты КАК КоэффициентЗадачи,
		|	ВЫБОР
		|		КОГДА НЕ ИнформацияПоНецелымПаллетымНаборки.ИдентификаторУпаковки ЕСТЬ NULL
		|			ТОГДА ВЫРАЗИТЬ((ВтДанныеНаборки.Количество / ЕСТЬNULL(ВтДанныеНаборки.КоличествоВКоробе, 1) - (ВЫРАЗИТЬ(ВтДанныеНаборки.Количество / ЕСТЬNULL(ВтДанныеНаборки.КоличествоВКоробе, 1) - 0.49999 КАК ЧИСЛО(15, 0)))) * ВтДанныеНаборки.КоличествоВКоробе + 0.49999 КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоВнеКоробочныхБутылок,
		|	КоличествоЯчеекНаборки.КоличествоЯчеек КАК КоличествоЯчеекЗадачи,
		|	ВтКоличествоСтрокВПаллете.КоличествоСтрокПаллеты КАК КоличествоСтрокЗадачи,
		|	ВтДанныеНаборки.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
		|	ВтДанныеНаборки.Количество КАК Количество,
		|	ВтДанныеНаборки.ДатаОтгрузкиЗаказа КАК ДатаОтгрузкиЗаказа,
		|	ВтДанныеНаборки.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВтПодготовленныеДанныеНаборки
		|ИЗ
		|	ВтДанныеНаборки КАК ВтДанныеНаборки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИнформацияПоНецелымПаллетымНаборки КАК ИнформацияПоНецелымПаллетымНаборки
		|		ПО ВтДанныеНаборки.ИдентификаторУпаковки = ИнформацияПоНецелымПаллетымНаборки.ИдентификаторУпаковки
		|			И ВтДанныеНаборки.Номенклатура = ИнформацияПоНецелымПаллетымНаборки.Номенклатура
		|			И ВтДанныеНаборки.ДокументОснование = ИнформацияПоНецелымПаллетымНаборки.ДокументОснование
		|			И ВтДанныеНаборки.ЯчейкаОтправитель = ИнформацияПоНецелымПаллетымНаборки.ЯчейкаОтправитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоЯчеекНаборки КАК КоличествоЯчеекНаборки
		|		ПО ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель = КоличествоЯчеекНаборки.ИдентификаторУпаковкиПолучатель
		|			И ВтДанныеНаборки.ДокументОснование = КоличествоЯчеекНаборки.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоличествоСтрокВПаллете КАК ВтКоличествоСтрокВПаллете
		|		ПО ВтДанныеНаборки.ИдентификаторУпаковкиПолучатель = ВтКоличествоСтрокВПаллете.ИдентификаторУпаковкиПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтПодготовленныеДанныеНаборки.ДокументОснование КАК ДокументОснование,
		|	ВтПодготовленныеДанныеНаборки.Номенклатура КАК Номенклатура,
		|	ВтПодготовленныеДанныеНаборки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтПодготовленныеДанныеНаборки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета КАК итПризнакПомарочногоУчета,
		|	ВтПодготовленныеДанныеНаборки.КоличествоНаПаллете КАК КоличествоНаПаллете,
		|	ВтПодготовленныеДанныеНаборки.КоличествоВСлое КАК КоличествоВСлое,
		|	ВтПодготовленныеДанныеНаборки.КоличествоВКоробе КАК КоличествоВКоробе,
		|	ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов КАК КоличествоВнепаллетныхКоробов,
		|	ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета
		|			ТОГДА ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов * &СтоимостьКоробаПМУ
		|		ИНАЧЕ ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов * &СтоимостьКороба
		|	КОНЕЦ КАК СуммаКоробов,
		|	КоличествоПаллетНаборкиПоКоэф.КоэффициентПаллетНаборки * &СтоимостьПаллетыНаборки / ВтКоличествоСтрокНаборки.КоличествоСтрок КАК СуммаПосещения,
		|	ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета
		|			ТОГДА ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов * &СтоимостьКоробаПМУ
		|		ИНАЧЕ ВтПодготовленныеДанныеНаборки.КоличествоВнепаллетныхКоробов * &СтоимостьКороба
		|	КОНЕЦ + КоличествоПаллетНаборкиПоКоэф.КоэффициентПаллетНаборки * &СтоимостьПаллетыНаборки / ВтКоличествоСтрокНаборки.КоличествоСтрок + ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета
		|			ТОГДА ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиПМУНаборка
		|		ИНАЧЕ ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиНаборка
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.Контрагент.ит_WMS_ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА &СтоимостьНаборкиРозница / ЕСТЬNULL(ВтКоличествоСтрокНаборки.КоличествоСтрок, 1)
		|		ИНАЧЕ &СтоимостьНаборки / ЕСТЬNULL(ВтКоличествоСтрокНаборки.КоличествоСтрок, 1)
		|	КОНЕЦ + (ВтПодготовленныеДанныеНаборки.КоличествоЯчеекЗадачи - 1) * &СтоимостьЗаПосещениеЯчейкиНаборка * ВтПодготовленныеДанныеНаборки.КоэффициентЗадачи КАК Всего,
		|	ВтПодготовленныеДанныеНаборки.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
		|	ВтПодготовленныеДанныеНаборки.Контрагент КАК Контрагент,
		|	ВтПодготовленныеДанныеНаборки.КоэффициентЗадачи КАК КоэффициентЗадачи,
		|	ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок КАК КоличествоВнеКоробочныхБутылок,
		|	ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.итПризнакПомарочногоУчета
		|			ТОГДА ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиПМУНаборка
		|		ИНАЧЕ ВтПодготовленныеДанныеНаборки.КоличествоВнеКоробочныхБутылок * &СтоимостьБутылкиНаборка
		|	КОНЕЦ КАК СуммаБутылок,
		|	ВЫБОР
		|		КОГДА ВтПодготовленныеДанныеНаборки.Контрагент.ит_WMS_ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная)
		|			ТОГДА &СтоимостьНаборкиРозница / ЕСТЬNULL(ВтКоличествоСтрокНаборки.КоличествоСтрок, 1)
		|		ИНАЧЕ &СтоимостьНаборки / ЕСТЬNULL(ВтКоличествоСтрокНаборки.КоличествоСтрок, 1)
		|	КОНЕЦ КАК СтоимостьДокумента,
		|	ВтПодготовленныеДанныеНаборки.КоэффициентПаллеты КАК КоэффициентПаллеты,
		|	ВтПодготовленныеДанныеНаборки.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
		|	ВтПодготовленныеДанныеНаборки.Количество КАК Количество,
		|	ВтПодготовленныеДанныеНаборки.ДатаОтгрузкиЗаказа КАК ДатаОтгрузкиЗаказа,
		|	ВтПодготовленныеДанныеНаборки.Заказ КАК Заказ
		|ПОМЕСТИТЬ ИтоговыеДанныеНаборок
		|ИЗ
		|	ВтПодготовленныеДанныеНаборки КАК ВтПодготовленныеДанныеНаборки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоличествоСтрокНаборки КАК ВтКоличествоСтрокНаборки
		|		ПО ВтПодготовленныеДанныеНаборки.ДокументОснование = ВтКоличествоСтрокНаборки.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоПаллетНаборкиПоКоэф КАК КоличествоПаллетНаборкиПоКоэф
		|		ПО ВтПодготовленныеДанныеНаборки.ДокументОснование = КоличествоПаллетНаборкиПоКоэф.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыеДанныеНаборок.ДокументОснование КАК ДокументОснование,
		|	СУММА(ИтоговыеДанныеНаборок.Всего) КАК Всего,
		|	ИтоговыеДанныеНаборок.ДатаОтгрузкиЗаказа КАК ДатаОтгрузкиЗаказа
		|ПОМЕСТИТЬ РассчетВсегоЗаЗаказ
		|ИЗ
		|	ИтоговыеДанныеНаборок КАК ИтоговыеДанныеНаборок
		|
		|СГРУППИРОВАТЬ ПО
		|	ИтоговыеДанныеНаборок.ДокументОснование,
		|	ИтоговыеДанныеНаборок.ДатаОтгрузкиЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РассчетВсегоЗаЗаказ.ДокументОснование КАК ДокументОснование,
		|	ВЫРАЗИТЬ(РассчетВсегоЗаЗаказ.Всего КАК ЧИСЛО(15, 0)) КАК Всего,
		|	РассчетВсегоЗаЗаказ.ДатаОтгрузкиЗаказа КАК ДатаОтгрузкиЗаказа,
		|	ДОБАВИТЬКДАТЕ(РассчетВсегоЗаЗаказ.ДатаОтгрузкиЗаказа, СЕКУНДА, -РассчетВсегоЗаЗаказ.Всего) КАК ДатаОтгрузкиЗаМинусомВремениНабора,
		|	РАЗНОСТЬДАТ(&ДатаТекущая, ДОБАВИТЬКДАТЕ(РассчетВсегоЗаЗаказ.ДатаОтгрузкиЗаказа, СЕКУНДА, -РассчетВсегоЗаЗаказ.Всего), СЕКУНДА) КАК ДоОтгрузкиСУчетомВремениНаборки,
		|	ДОБАВИТЬКДАТЕ(&ДатаТекущая, СЕКУНДА, РассчетВсегоЗаЗаказ.Всего) КАК ПланируемаяДатаЗавершенияДокумента
		|ИЗ
		|	РассчетВсегоЗаЗаказ КАК РассчетВсегоЗаЗаказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоОтгрузкиСУчетомВремениНаборки";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);	
	Запрос.УстановитьПараметр("ДатаТекущая",ДатаТекущая);
	Запрос.УстановитьПараметр("СтоимостьБутылкиНаборка", Значение.СтоимостьБутылкиНаборка);
	Запрос.УстановитьПараметр("СтоимостьБутылкиПМУНаборка", Значение.СтоимостьБутылкиПМУНаборка);
	Запрос.УстановитьПараметр("СтоимостьКороба", Значение.СтоимостьКороба);
	Запрос.УстановитьПараметр("СтоимостьКоробаПМУ", Значение.СтоимостьКоробаПМУ);
	Запрос.УстановитьПараметр("СтоимостьНаборки", Значение.СтоимостьНаборки);
	Запрос.УстановитьПараметр("СтоимостьЗаПосещениеЯчейкиНаборка",Значение.СтоимостьЗаПосещениеЯчейкиНаборка);
	Запрос.УстановитьПараметр("СтоимостьНаборкиРозница", Значение.СтоимостьНаборкиРозница);
	Запрос.УстановитьПараметр("СтоимостьПаллетыНаборки", Значение.СтоимостьПаллетыНаборки);
	

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
КонецФункции

#КонецОбласти




Процедура ЦентральныйОбработчикДанныхРучнойНаборки(ДанныеОбработчика) Экспорт 
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипОбработкиДанных") тогда
		Возврат
	КонецЕсли;
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючИнициализацииДанных") тогда
		Возврат
	КонецЕсли;	
    Если  ДанныеОбработчика.ТипОбработкиДанных="ПоискЗаказа" тогда
		  ПолучитьДанныеЗаказаПоНомеруИДате(ДанныеОбработчика);
	КонецЕсли;
	Если  ДанныеОбработчика.ТипОбработкиДанных="ПоискДанныхПоSSCC" Тогда 
		ПоискДанныхПоSSCC(ДанныеОбработчика);
	КонецЕсли;
	Если  ДанныеОбработчика.ТипОбработкиДанных="ВнесениеИзмененийВРучнуюНаборку" Тогда 
		ВнесениеИзмененийВРучнуюНаборку(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.ТипОбработкиДанных ="ОбновитьДанныеЯчеечногоУчета" Тогда
		ОбновитьДанныеЯчеечногоУчета(ДанныеОбработчика);
	КонецЕсли;
КонецПроцедуры
Процедура ВнесениеИзмененийВРучнуюНаборку(ДанныеОбработчика);
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"Данные") тогда
		Возврат
	КонецЕсли;
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ГуидДокумента") тогда
		Возврат
	КонецЕсли;
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ЗавершениеНаборки") тогда
		Возврат
	КонецЕсли;

	ДанныеПоСотруднику=итWMSСлужебныеПроцедурыИФункции.ПолучитьДанныеПоТСДНаТекущийМомент(ДанныеОбработчика.ТСДИД);
	Заказ= Документы.ЗаказПокупателя.ПолучитьСсылку(ДанныеОбработчика.КлючИнициализацииДанных.Заказ);
	ДокументОтгрузки= Документы.итWMSРучнаяОтгрузка.ПолучитьСсылку(ДанныеОбработчика.ГуидДокумента);
	ОбъектДокумента=ДокументОтгрузки.ПолучитьОбъект();
	Если ОбъектДокумента=Неопределено Тогда 
		ОбъектДокумента=Документы.итWMSРучнаяОтгрузка.СоздатьДокумент();
		ОбъектДокумента.УстановитьСсылкуНового(ДокументОтгрузки);
	КонецЕсли;
	ОбъектДокумента.ЗавершениеНаборки=ДанныеОбработчика.ЗавершениеНаборки ;
	ОбъектДокумента.ОбработкаТСД=Истина;
	ОбъектДокумента.СообщениеДляТСД="";
	ОбъектДокумента.Склад = Заказ.Склад;
	Если ДанныеПоСотруднику<>Неопределено Тогда 
		ОбъектДокумента.Исполнитель=ДанныеПоСотруднику.РаботникСклада.ФизическоеЛицо;	
	КонецЕсли;
	//ВидОперации = Перечисления.итВидыОперацийОтгрузкиРазмещенияТоваров.Отгрузка;
	//ДокументОтгрузки.Ответственный = ;
	ОбъектДокумента.итОснование = Заказ.Ссылка;
	ОбъектДокумента.Контрагент = Заказ.Контрагент; 
	ОбъектДокумента.Организация = Заказ.Организация;
	ОбъектДокумента.Дата=ТекущаяДата();
	ОбъектДокумента.Товары.Очистить();
	Для Каждого стр из ДанныеОбработчика.Данные цикл
		НоваяСтрока=ОбъектДокумента.Товары.Добавить();
		НоваяСтрока.ИдентификаторСтроки=стр.ИдентификаторСтроки;
		НоваяСтрока.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
		НоваяСтрока.Количество=стр.Количество;
		НоваяСтрока.Номенклатура=итWMSСлужебныеПроцедурыИФункции.НайтиНоменклатуруПоУникальномуИД(стр.Номенклатура);
		НоваяСтрока.СерияНоменклатуры=итWMSСлужебныеПроцедурыИФункции.НайтиСериюПоУникальномуИд(стр.СерияНоменклатуры);
		НоваяСтрока.Ячейка=итWMSСлужебныеПроцедурыИФункции.НайтиЯчейкуПоУникальномуИд(стр.Ячейка);
		НоваяСтрока.ДатаРозлива= стр.ДатаРозлива;
		НоваяСтрока.Качество=итWMSСлужебныеПроцедурыИФункции.НайтиКачествоПоУникальномуИд(стр.Качество);
	КонецЦикла;
	Попытка
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки",ОбъектДокумента.СообщениеДляТСД+" 
		|" +ОписаниеОшибки());
		Возврат
	КонецПопытки;
	ДанныеОбработчика.Вставить("СозданДокумент",Истина);
КонецПроцедуры

Функция ПолучитьТекущегоРаботникаСклада()
	КонецФункции

Процедура ОбновитьДанныеЯчеечногоУчета(ДанныеОбработчика)
	Заказ= Документы.ЗаказПокупателя.ПолучитьСсылку(ДанныеОбработчика.КлючИнициализацииДанных);
	//////////// Получение данных настроек wms
	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(НастройкиWMS) Тогда
		итWMSСлужебныеПроцедурыИФункции.WMSОповещениеОТиповыхОшибках(НастройкиWMS);
		ДанныеОбработчика.Вставить("Статус",404);
        ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных по настройкам WMS");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество,
		|	ЗаказПокупателяТовары.Ссылка КАК Ссылка,
		|	ЗаказПокупателяТовары.Ссылка.Номер КАК Номер,
		|	ЗаказПокупателяТовары.Ссылка.Дата КАК Дата
		|ПОМЕСТИТЬ ВтДанныеНмЗаказа
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателяТовары.Номенклатура,
		|	ЗаказПокупателяТовары.Ссылка,
		|	ЗаказПокупателяТовары.Ссылка.Номер,
		|	ЗаказПокупателяТовары.Ссылка.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		|	итТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		|	итТоварыВЯчейкахОстатки.ДатаРозлива КАК ДатаРозлива,
		|	итТоварыВЯчейкахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ ВтДанныеСкладскогоУчета
		|ИЗ
		|	ВтДанныеНмЗаказа КАК ВтДанныеНмЗаказа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
		|		ПО ВтДанныеНмЗаказа.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
		|			И ВтДанныеНмЗаказа.Ссылка.Склад = итТоварыВЯчейкахОстатки.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеСкладскогоУчета.Ячейка КАК Ячейка,
		|	ВтДанныеСкладскогоУчета.Номенклатура КАК Номенклатура,
		|	ВтДанныеСкладскогоУчета.ДатаРозлива КАК ДатаРозлива,
		|	ВтДанныеСкладскогоУчета.СерияНоменклатуры КАК СерияНоменклатуры,
		|	СУММА(ВтДанныеСкладскогоУчета.КоличествоОстаток) КАК Количество
		|ПОМЕСТИТЬ ВтДанныеСкладскогоУчетаГруппировка
		|ИЗ
		|	ВтДанныеСкладскогоУчета КАК ВтДанныеСкладскогоУчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеСкладскогоУчета.Ячейка,
		|	ВтДанныеСкладскогоУчета.Номенклатура,
		|	ВтДанныеСкладскогоУчета.ДатаРозлива,
		|	ВтДанныеСкладскогоУчета.СерияНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеСкладскогоУчетаГруппировка.Ячейка КАК Ячейка,
		|	ВтДанныеСкладскогоУчетаГруппировка.Номенклатура КАК Номенклатура,
		|	ВтДанныеСкладскогоУчетаГруппировка.ДатаРозлива КАК ДатаРозлива,
		|	ВтДанныеСкладскогоУчетаГруппировка.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтДанныеСкладскогоУчетаГруппировка.Количество КАК Количество
		|ИЗ
		|	ВтДанныеСкладскогоУчетаГруппировка КАК ВтДанныеСкладскогоУчетаГруппировка
		|ГДЕ
		|	ВтДанныеСкладскогоУчетаГруппировка.Количество > 0";
	
	Запрос.УстановитьПараметр("СистемнаяЯчейка", НастройкиWMS.СистемнаяЯчейка);
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивДанныхЯчеечногоУчета=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураДанных=новый Структура;
		СтруктураДанных.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
		СтруктураДанных.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.Номенклатура.Наименование);
		СтруктураДанных.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
		СтруктураДанных.Вставить("Количество",ВыборкаДетальныеЗаписи.Количество);
		СтруктураДанных.Вставить("Ячейка",ВыборкаДетальныеЗаписи.Ячейка.УникальныйИдентификатор());
		СтруктураДанных.Вставить("ЯчейкаПредставление",ВыборкаДетальныеЗаписи.Ячейка.Наименование);
		СтруктураДанных.Вставить("СерияНоменклатуры",ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор());
		СтруктураДанных.Вставить("СерияНоменклатурыПредставление",ВыборкаДетальныеЗаписи.СерияНоменклатуры.Наименование);
		МассивДанныхЯчеечногоУчета.Добавить(СтруктураДанных);	
	КонецЦикла;
	ДанныеОбработчика.Вставить("МассивДанныхЯчеечногоУчета",МассивДанныхЯчеечногоУчета);		
КонецПроцедуры

Процедура ПолучитьДанныеЗаказаПоНомеруИДате(ДанныеОбработчика)
СтруктураПоискаЗаказа=ДанныеОбработчика.КлючИнициализацииДанных;	
//////////// Получение данных настроек wms
	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(НастройкиWMS) Тогда
		итWMSСлужебныеПроцедурыИФункции.WMSОповещениеОТиповыхОшибках(НастройкиWMS);
		ДанныеОбработчика.Вставить("Статус",404);
        ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных по настройкам WMS");
		Возврат;
	КонецЕсли;
//////////////////////////////////

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество,
		|	ЗаказПокупателяТовары.Ссылка КАК Ссылка,
		|	ЗаказПокупателяТовары.Ссылка.Номер КАК Номер,
		|	ЗаказПокупателяТовары.Ссылка.Дата КАК Дата
		|ПОМЕСТИТЬ ВтДанныеНмЗаказа
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка.Номер ПОДОБНО ""%"" + &Номер + ""%""
		|	И НАЧАЛОПЕРИОДА(ЗаказПокупателяТовары.Ссылка.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателяТовары.Номенклатура,
		|	ЗаказПокупателяТовары.Ссылка,
		|	ЗаказПокупателяТовары.Ссылка.Номер,
		|	ЗаказПокупателяТовары.Ссылка.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		|	итТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		|	итТоварыВЯчейкахОстатки.ДатаРозлива КАК ДатаРозлива,
		|	итТоварыВЯчейкахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ ВтДанныеСкладскогоУчета
		|ИЗ
		|	ВтДанныеНмЗаказа КАК ВтДанныеНмЗаказа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
		|		ПО ВтДанныеНмЗаказа.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
		|			И ВтДанныеНмЗаказа.Ссылка.Склад = итТоварыВЯчейкахОстатки.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеСкладскогоУчета.Ячейка КАК Ячейка,
		|	ВтДанныеСкладскогоУчета.Номенклатура КАК Номенклатура,
		|	ВтДанныеСкладскогоУчета.ДатаРозлива КАК ДатаРозлива,
		|	ВтДанныеСкладскогоУчета.СерияНоменклатуры КАК СерияНоменклатуры,
		|	СУММА(ВтДанныеСкладскогоУчета.КоличествоОстаток) КАК Количество
		|ПОМЕСТИТЬ ВтДанныеСкладскогоУчетаГруппировка
		|ИЗ
		|	ВтДанныеСкладскогоУчета КАК ВтДанныеСкладскогоУчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеСкладскогоУчета.Ячейка,
		|	ВтДанныеСкладскогоУчета.Номенклатура,
		|	ВтДанныеСкладскогоУчета.ДатаРозлива,
		|	ВтДанныеСкладскогоУчета.СерияНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеСкладскогоУчетаГруппировка.Ячейка КАК Ячейка,
		|	ВтДанныеСкладскогоУчетаГруппировка.Номенклатура КАК Номенклатура,
		|	ВтДанныеСкладскогоУчетаГруппировка.ДатаРозлива КАК ДатаРозлива,
		|	ВтДанныеСкладскогоУчетаГруппировка.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтДанныеСкладскогоУчетаГруппировка.Количество КАК Количество
		|ИЗ
		|	ВтДанныеСкладскогоУчетаГруппировка КАК ВтДанныеСкладскогоУчетаГруппировка
		|ГДЕ
		|	ВтДанныеСкладскогоУчетаГруппировка.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеНмЗаказа.Номенклатура КАК Номенклатура,
		|	ВтДанныеНмЗаказа.Количество КАК Количество,
		|	ВтДанныеНмЗаказа.Ссылка КАК Ссылка,
		|	ВтДанныеНмЗаказа.Номер КАК Номер,
		|	ВтДанныеНмЗаказа.Дата КАК Дата
		|ИЗ
		|	ВтДанныеНмЗаказа КАК ВтДанныеНмЗаказа
		|ИТОГИ
		|	МАКСИМУМ(Номер),
		|	МАКСИМУМ(Дата)
		|ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Дата", СтруктураПоискаЗаказа.ДатаЗаказа);
	Запрос.УстановитьПараметр("Номер", СтруктураПоискаЗаказа.НомерЗаказа);
	Запрос.УстановитьПараметр("СистемнаяЯчейка",НастройкиWMS.СистемнаяЯчейка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаСсылка = МассивРезультатов[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		ДокументСвязи=ПоискПоНаличюКЗаказуДокументовНаборки(ВыборкаСсылка.Ссылка);
		Если ДокументСвязи<> Неопределено Тогда 
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки","По заказу уже есть документ наборки "+Строка(ВыборкаСсылка.Ссылка));
			Возврат	
		КонецЕсли;

		ДанныеОбработчика.Вставить("НомерЗаказа",ВыборкаСсылка.Номер);
		ДанныеОбработчика.Вставить("ДатаЗаказа",ВыборкаСсылка.Ссылка.Дата);
		ДанныеОбработчика.Вставить("Заказ",ВыборкаСсылка.Ссылка.УникальныйИдентификатор());
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
		МассивДанныхНмЗаказа=новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураДанных=новый Структура;
			СтруктураДанных.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
			СтруктураДанных.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.Номенклатура.Наименование);
			СтруктураДанных.Вставить("КоличествоПлан",ВыборкаДетальныеЗаписи.Количество);
			МассивДанныхНмЗаказа.Добавить(СтруктураДанных);	
		КонецЦикла;
		ДанныеОбработчика.Вставить("МассивДанныхНмЗаказа",МассивДанныхНмЗаказа);
	КонецЦикла;
	
	
	ВыборкаЯчеечногоУчета=МассивРезультатов[3].Выбрать();
	МассивДанныхЯчеечногоУчета=новый Массив;
	Пока ВыборкаЯчеечногоУчета.Следующий() цикл
		СтруктураДанных=новый Структура;
			СтруктураДанных.Вставить("Номенклатура",ВыборкаЯчеечногоУчета.Номенклатура.УникальныйИдентификатор());
			СтруктураДанных.Вставить("НоменклатураПредставление",ВыборкаЯчеечногоУчета.Номенклатура.Наименование);
			СтруктураДанных.Вставить("ДатаРозлива",ВыборкаЯчеечногоУчета.ДатаРозлива);
			СтруктураДанных.Вставить("Количество",ВыборкаЯчеечногоУчета.Количество);
			СтруктураДанных.Вставить("Ячейка",ВыборкаЯчеечногоУчета.Ячейка.УникальныйИдентификатор());
			СтруктураДанных.Вставить("ЯчейкаПредставление",ВыборкаЯчеечногоУчета.Ячейка.Наименование);
            СтруктураДанных.Вставить("СерияНоменклатуры",ВыборкаЯчеечногоУчета.СерияНоменклатуры.УникальныйИдентификатор());
			СтруктураДанных.Вставить("СерияНоменклатурыПредставление",ВыборкаЯчеечногоУчета.СерияНоменклатуры.Наименование);
			МассивДанныхЯчеечногоУчета.Добавить(СтруктураДанных);
	КонецЦикла;
	ДанныеОбработчика.Вставить("МассивДанныхЯчеечногоУчета",МассивДанныхЯчеечногоУчета);

КонецПроцедуры

Функция ПоискПоНаличюКЗаказуДокументовНаборки(Заказ)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSНаборка.Ссылка
		|ИЗ
		|	Документ.итWMSНаборка КАК итWMSНаборка
		|ГДЕ
		|	итWMSНаборка.итОснование = &итОснование
		|	И итWMSНаборка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSРучнаяОтгрузка.Ссылка
		|ИЗ
		|	Документ.итWMSРучнаяОтгрузка КАК итWMSРучнаяОтгрузка
		|ГДЕ
		|	итWMSРучнаяОтгрузка.итОснование = &итОснование
		|	И итWMSРучнаяОтгрузка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итОтгрузкаРазмещениеТоваров.Ссылка
		|ИЗ
		|	Документ.итОтгрузкаРазмещениеТоваров КАК итОтгрузкаРазмещениеТоваров
		|ГДЕ
		|	итОтгрузкаРазмещениеТоваров.Основание = &итОснование
		|	И итОтгрузкаРазмещениеТоваров.Проведен";
	
	Запрос.УстановитьПараметр("итОснование", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	    Возврат Неопределено;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецФункции

Процедура ПоискДанныхПоSSCC(ДанныеОбработчика)
Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"Заказ") тогда
		Возврат
КонецЕсли;
//////////// Получение данных настроек wms
	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(НастройкиWMS) Тогда
		итWMSСлужебныеПроцедурыИФункции.WMSОповещениеОТиповыхОшибках(НастройкиWMS);
		ДанныеОбработчика.Вставить("Статус",404);
        ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных по настройкам WMS");
		Возврат;
	КонецЕсли;
//////////////////////////////////
ЗаказПокупателя=Документы.ЗаказПокупателя.ПолучитьСсылку(ДанныеОбработчика.Заказ);

ОбъектЗаказа=ЗаказПокупателя.ПолучитьОбъект();
Если ОбъектЗаказа=Неопределено Тогда 
ДанныеОбработчика.Вставить("Статус",404);
ДанныеОбработчика.Вставить("ОписаниеОшибки","нет данных по заказу");
Возврат
КонецЕсли;
Склад=ЗаказПокупателя.СкладГруппа;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		|	итТоварыВЯчейкахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итТоварыВЯчейкахОстатки.ДатаРозлива КАК ДатаРозлива,
		|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток КАК КоличествоОстаток,
		|	итТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	итТоварыВЯчейкахОстатки.Качество КАК Качество
		|ПОМЕСТИТЬ ВтДанныеПоSSCC
		|ИЗ
		|	РегистрНакопления.итТоварыВЯчейках.Остатки(
		|			,
		|			Склад = &Склад
		|				И ИдентификаторУпаковки = &ИдентификаторУпаковки) КАК итТоварыВЯчейкахОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеПоSSCC.Номенклатура КАК Номенклатура,
		|	ВтДанныеПоSSCC.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтДанныеПоSSCC.ДатаРозлива КАК ДатаРозлива,
		|	СУММА(ВтДанныеПоSSCC.КоличествоОстаток) КАК Количество,
		|	ВтДанныеПоSSCC.Ячейка КАК Ячейка,
		|	ВтДанныеПоSSCC.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ВтДанныеПоSSCC.Качество КАК Качество
		|ИЗ
		|	ВтДанныеПоSSCC КАК ВтДанныеПоSSCC
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеПоSSCC.Номенклатура,
		|	ВтДанныеПоSSCC.СерияНоменклатуры,
		|	ВтДанныеПоSSCC.ДатаРозлива,
		|	ВтДанныеПоSSCC.Ячейка,
		|	ВтДанныеПоSSCC.ИдентификаторУпаковки,
		|	ВтДанныеПоSSCC.Качество";
	
	Запрос.УстановитьПараметр("ИдентификаторУпаковки", ДанныеОбработчика.КлючИнициализацииДанных);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("СистемнаяЯчейка",НастройкиWMS.СистемнаяЯчейка);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивДанных=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураДанных=новый Структура;
		СтруктураДанных.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
		СтруктураДанных.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.Номенклатура.Наименование);
        СтруктураДанных.Вставить("СерияНоменклатуры",ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор());
        СтруктураДанных.Вставить("СерияНоменклатурыПредставление",ВыборкаДетальныеЗаписи.СерияНоменклатуры.Наименование);
        СтруктураДанных.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
        СтруктураДанных.Вставить("Ячейка",ВыборкаДетальныеЗаписи.Ячейка.УникальныйИдентификатор());
        СтруктураДанных.Вставить("ЯчейкаПредставление",ВыборкаДетальныеЗаписи.Ячейка.Наименование);
        СтруктураДанных.Вставить("ИдентификаторУпаковки",ВыборкаДетальныеЗаписи.ИдентификаторУпаковки);                 
		СтруктураДанных.Вставить("Количество",ВыборкаДетальныеЗаписи.Количество);
		СтруктураДанных.Вставить("Качество",ВыборкаДетальныеЗаписи.Качество.УникальныйИдентификатор());
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	ДанныеОбработчика.Вставить("МассивДанных",МассивДанных);
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	КонецПроцедуры