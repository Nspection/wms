///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Установить компоненту для интеграции с НСПК
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение вызываемое после установки
//     * Результат - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
Процедура УстановитьКомпонентуИнтеграцииНСПК(ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОповещениеМетода = Новый ОписаниеОповещения("УстановитьКомпонентуИнтеграцииНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	ОбщегоНазначенияКлиент.УстановитьКомпонентуИзМакета(ОповещениеМетода, "ОбщийМакет.КомпонентаИнтеграцииНСПК");
	
КонецПроцедуры

// Завершить установку компоненты для интеграции с НСПК и вызвать оповещение пользователя
//
// Параметры:
//   РезультатПодключения - Структура - См. ОбщегоНазначенияКлиент.РезультатУстановкиКомпоненты()
//   ДополнительныеПараметры - Структура - 
//     * ОповещениеПриЗавершении - ОписаниеОповещения - 
Процедура УстановитьКомпонентуИнтеграцииНСПКЗавершение(РезультатПодключения, ДополнительныеПараметры) Экспорт
	
	РезультатВыполнения = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации(РезультатПодключения.Установлено, РезультатПодключения.ОписаниеОшибки);
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Подключает компоненту и начинает получение версии внешней компоненты НСПК
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение куда будет передана версия компоненты
//     * Результат - Структура - в случае ошибки См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
//                 - Строка - в случае успеха номер версии
Процедура НачатьПолучениеВерсииВК(ОповещениеПриЗавершении) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеВерсииВКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, Неопределено);
	
КонецПроцедуры

// Завершить получение версии компоненты для интеграции с НСПК и вызвать оповещение пользователя в случае ошибки
//
// Параметры:
//   РезультатВыполнения - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
//   ДополнительныеПараметры - Структура - 
//     * ОповещениеПриЗавершении - ОписаниеОповещения - оповещение пользователя
Процедура НачатьПолучениеВерсииВКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеВерсииВКВозврат", ЭтотОбъект, ДополнительныеПараметры); 
		
		ВнешняяКомпонента.НачатьВызовВерсия(ОповещениеМетода);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Завершить получение версии компоненты и вызвать оповещение пользователя в случае успеха
//
// Параметры:
//   ТекстРезультата - Строка - Текст результата выполнения операции
//   ПараметрыВызова - Массив -
//   ДополнительныеПараметры - Структура -
//     * ОповещениеПриЗавершении - ОписаниеОповещения - оповещение пользователя
//     * ВнешняяКомпонента - Объект - Объект внешней компоненты
Процедура НачатьПолучениеВерсииВКВозврат(ТекстРезультата, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, ТекстРезультата);
	
КонецПроцедуры

// Подключает компоненту и начинает тестовое подключение к НСПК
//
// Параметры: 
//   ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения. 
//     * Результат - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
//   ПараметрыОперации - Структура - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Процедура НачатьТестовоеПодключение(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьТестовоеПодключениеЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

// Выполняет тестовое подключение к НСПК
//
// Параметры:
//   РезультатВыполнения - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
//   ДополнительныеПараметры - Структура -
//     * ОповещениеПриЗавершении - ОписаниеОповещения - оповещение пользователя
//     * ПараметрыОперации - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
Процедура НачатьТестовоеПодключениеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		
		ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
		ИдентификаторКассы = ПараметрыОперации.ИдентификаторКассы;
		ТестовоеСообщение = НСтр("ru = 'Тест 1С'");
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ОповещениеМетода = Новый ОписаниеОповещения("ВызовМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		
		ТекстРезультата = ВнешняяКомпонента.НачатьВызовэхо(ОповещениеМетода, ИдентификаторЗапроса, ИдентификаторКассы, ТестовоеСообщение);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Подключает компоненту и начинает предварительное одобрение использования сертификатов
//
// Параметры: 
//   ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения. 
//     * Результат - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
//   ПараметрыОперации - Структура - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Процедура НачатьПредварительноеОдобрениеИспользования(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПредварительноеОдобрениеИспользованияЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

// Выполняет операцию предварительного одобрения использования сертификатов
//
// Параметры:
//   РезультатВыполнения - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
//   ДополнительныеПараметры - Структура -
//     * ОповещениеПриЗавершении - ОписаниеОповещения - оповещение пользователя
//     * ПараметрыОперации - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
Процедура НачатьПредварительноеОдобрениеИспользованияЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		
		ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
		ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;
		ХешНомерКарты        = ПараметрыОперации.ХешНомерКарты;
		
		ТоварныеПозицииJSON = ЭлектронныеСертификатыНСПКВызовСервера.ПолучитьJSONТоварныеПозиции(ПараметрыОперации.ТоварныеПозиции);
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ОповещениеМетода = Новый ОписаниеОповещения("ВызовМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		
		ТекстРезультата = ВнешняяКомпонента.НачатьВызовЗапросНаПредварительноеОдобрениеИспользования(ОповещениеМетода, ИдентификаторЗапроса, ИдентификаторКассы, ХешНомерКарты, "", ТоварныеПозицииJSON);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Подключает компоненту и начинает предварительное одобрение возврата сертификатов
//
// Параметры: 
//   ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения. 
//     * Результат - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
//   ПараметрыОперации - Структура - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Процедура НачатьПредварительноеОдобрениеВозврата(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПредварительноеОдобрениеВозвратаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

// Выполняет предварительное одобрение возврата сертификатов
//
// Параметры:
//   РезультатВыполнения - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
//   ДополнительныеПараметры - Структура -
//     * ОповещениеПриЗавершении - ОписаниеОповещения - оповещение пользователя
//     * ПараметрыОперации - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
Процедура НачатьПредварительноеОдобрениеВозвратаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		
		ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
		ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;
		ХешНомерКарты        = ПараметрыОперации.ХешНомерКарты;
		ИдентификаторКорзины = ПараметрыОперации.ИдентификаторКорзины;
		
		ТоварныеПозицииJSON = ЭлектронныеСертификатыНСПКВызовСервера.ПолучитьJSONТоварныеПозиции(ПараметрыОперации.ТоварныеПозиции);
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ОповещениеМетода = Новый ОписаниеОповещения("ВызовМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		
		ТекстРезультата = ВнешняяКомпонента.НачатьВызовЗапросНаПредварительноеОдобрениеВозврата(ОповещениеМетода, ИдентификаторЗапроса, ИдентификаторКассы, ИдентификаторКорзины, ХешНомерКарты, "", ТоварныеПозицииJSON);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Подключает компоненту и начинает выполнение получения состава корзины
//
// Параметры: 
//   ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения. 
//     * Результат - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
//   ПараметрыОперации - Структура - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Процедура НачатьПолучениеСоставаКорзины(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеСоставаКорзиныЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

// Выполняет получение состава корзины
//
// Параметры:
//   РезультатВыполнения - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
//   ДополнительныеПараметры - Структура -
//     * ОповещениеПриЗавершении - ОписаниеОповещения - оповещение пользователя
//     * ПараметрыОперации - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
Процедура НачатьПолучениеСоставаКорзиныЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		
		ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
		ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;        
		ИдентификаторКорзины = ПараметрыОперации.ИдентификаторКорзины;
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ОповещениеМетода = Новый ОписаниеОповещения("ВызовМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		
		ТекстРезультата = ВнешняяКомпонента.НачатьВызовЗапросНаПолучениеСоставаКорзиныОригинальнойПокупки(ОповещениеМетода, ИдентификаторЗапроса, ИдентификаторКассы, ИдентификаторКорзины);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Подключает компоненту и начинает передача данных фискального чека
//
// Параметры: 
//   ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения. 
//     * Результат - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
//   ПараметрыОперации - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Процедура НачатьПередачуДанныхФискальногоЧека(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПередачуДанныхФискальногоЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

// Выполняет передачу данных фискального чека
//
// Параметры:
//   РезультатВыполнения - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
//   ДополнительныеПараметры - Структура -
//     * ОповещениеПриЗавершении - ОписаниеОповещения - оповещение пользователя
//     * ПараметрыОперации - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
Процедура НачатьПередачуДанныхФискальногоЧекаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		
		ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
		ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;
		ИдентификаторКорзины = ПараметрыОперации.ИдентификаторКорзины;
		
		НомерФискальногоНакопителя = Строка(ПараметрыОперации.НомерФискальногоНакопителя);
		ФискальныйТипРасчета = Число(ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодРасчетаДенежнымиСредствами(ПараметрыОперации.ФискальныйТипРасчета));
		ФискальныйПризнакЧека = Строка(ПараметрыОперации.ФискальныйПризнакЧека);
		ФискальныйЧекНомер = Строка(ПараметрыОперации.ФискальныйЧекНомер);
		ФискальныйЧекСумма = Формат(ПараметрыОперации.ФискальныйЧекСумма, "ЧГ=0;ЧДЦ=2;ЧРД=.");
		ФискальныйМестоРасчетов = Строка(ПараметрыОперации.ФискальныйМестоРасчетов); 
		// АПК: 1367-выкл особенность локального законодательства
		ФискальныйЧекДатаВремя = Формат(ПараметрыОперации.ФискальныйЧекДатаВремя, "ДФ=""ггггММддЧЧмм""");
		// АПК: 1367
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ОповещениеМетода = Новый ОписаниеОповещения("ВызовМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		
		ТекстРезультата = ВнешняяКомпонента.НачатьВызовПередачаДанныхФискальногоЧека(
			ОповещениеМетода,
			ИдентификаторЗапроса, // Строка
			ИдентификаторКассы, // Строка
			ИдентификаторКорзины, // Строка 
			НомерФискальногоНакопителя, // Строка
			ФискальныйЧекНомер, // Строка
			ФискальныйПризнакЧека, // Строка
			ФискальныйЧекСумма,  // Строка
			ФискальныйЧекДатаВремя, // Строка
			ФискальныйТипРасчета, // Число
			ФискальныйМестоРасчетов); // Строка
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Завершает операции с компонентой НСПК и выполняет вызов оповещения пользователя
//
// Параметры:
//   ТекстРезультата - Строка - Текст результата выполнения операции
//   ПараметрыВызова - Массив -
//   ДополнительныеПараметры - Структура -
//     * ОповещениеПриЗавершении - ОписаниеОповещения - оповещение пользователя
//     * ПараметрыОперации - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
//     * ВнешняяКомпонента - Объект - Объект внешней компоненты
Процедура ВызовМетодаЗавершение(ТекстРезультата, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	СписокОшибок = ДополнительныеПараметры.ВнешняяКомпонента.СписокОшибок;
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ПрочитатьJSONРезультатОперации(ТекстРезультата, СписокОшибок);   
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Начинает подключение компоненты интеграции НСПК
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение которое будет вызвано после подключения
//     * Результат - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации()
//   ПараметрыОперации - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
Процедура ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("ПодключитьКомпонентуИнтеграцииНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	ОбщегоНазначенияКлиент.ПодключитьКомпонентуИзМакета(ОповещениеМетода, "FECNSPK", "ОбщийМакет.КомпонентаИнтеграцииНСПК");
	
КонецПроцедуры

// Завершает подключение компоненты НСПК и вызывает оповещение пользователя
//
// Параметры:
//   РезультатПодключения - Структура - См. ОбщегоНазначенияКлиент.РезультатПодключенияКомпоненты()
//   ДополнительныеПараметры - Структура - 
//     * ОповещениеПриЗавершении - ОписаниеОповещения - оповещение пользователя при завершении
//     * ПараметрыОперации - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
Процедура ПодключитьКомпонентуИнтеграцииНСПКЗавершение(РезультатПодключения, ДополнительныеПараметры) Экспорт
	
	Если РезультатПодключения.Подключено Тогда 
		РезультатВыполнения = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации(Истина);
		РезультатВыполнения.Вставить("ВнешняяКомпонента", РезультатПодключения.ПодключаемыйМодуль);
		
		ПодготовитьКомпонентуИнтеграцииНСПК(РезультатВыполнения.ВнешняяКомпонента, ДополнительныеПараметры.ПараметрыОперации);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ОписаниеОшибки =  НСтр("ru = 'Компонента FECNSPK не подключена.'");
		РезультатВыполнения = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет подготовку внешней компоненты.
//
// Параметры:
//   ВнешняяКомпонента - Объект - Созданный объект внешней компоненты
//   ПараметрыОперации - Структура - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК()
//
// Возвращаемое значение: 
//   ОбъектВнешнейКомпоненты
//   Неопределено - если компоненту не удалось загрузить.
//
Функция ПодготовитьКомпонентуИнтеграцииНСПК(ВнешняяКомпонента, ПараметрыОперации = Неопределено) Экспорт 
	
	Если ПараметрыОперации <> Неопределено Тогда
		
		Если ПараметрыОперации.Свойство("АдресСервера") Тогда
			ВнешняяКомпонента.АдресСервера = ПараметрыОперации.АдресСервера;
		КонецЕсли;
	
		Если ПараметрыОперации.Свойство("КлючДоступа") Тогда
			ВнешняяКомпонента.КлючДоступа = ПараметрыОперации.КлючДоступа;
		КонецЕсли;
	
		Если ПараметрыОперации.Свойство("КлючКассы") Тогда
			ВнешняяКомпонента.КлючКассы = ПараметрыОперации.КлючКассы;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВнешняяКомпонента;
	
КонецФункции  

#КонецОбласти
