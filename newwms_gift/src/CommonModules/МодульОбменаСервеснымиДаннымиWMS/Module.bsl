Процедура WMS_ВыгрузкаСервесныйДанных() Экспорт
	Выборка=ПланыОбмена.СервесныйОбменWMS.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка=ПланыОбмена.СервесныйОбменWMS.ЭтотУзел() Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.РежимОтладки Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.IPАдресСервера="" или Выборка.URLПространствоВебСервиса="" или Выборка.ИмяПубликацииБазы="" Тогда 
			Продолжить;
		КонецЕсли;	
		ВыгрузитьДанныеWMS(Выборка.Ссылка);
	КонецЦикла;
КонецПроцедуры


#Область ВыгрузкаДанных
Процедура ВыгрузитьДанныеWMS(Узел) Экспорт 
ОбъектУзла=Узел.ПолучитьОбъект();
ОбъектУзла.НомерОтправленного=ОбъектУзла.НомерОтправленного+1;
ОбъектУзла.Записать();
ПланыОбмена.ВыбратьИзменения(Узел,ОбъектУзла.НомерОтправленного);
СтруктураОбменаДанными=новый Структура;
СтруктураОбменаДанными.Вставить("НомерСообщения",ОбъектУзла.НомерОтправленного);
СтруктураОбменаДанными.Вставить("УзелОбмена",Узел.УникальныйИдентификатор());
ВыгрузитьДанныеСправочников(СтруктураОбменаДанными,Узел);
ВыгрузитьДокументы(СтруктураОбменаДанными,Узел);
Данные=СериализаторДанных(СтруктураОбменаДанными);
Определение=новый WSОпределения(СформироватьСтрокуПодключения(Узел) ,"webserv","111");
ПараметрыПрокиСервера=СформироватьПараметрыПроксиСервера(Узел);
Прокси = новый WSПрокси(Определение,ПараметрыПрокиСервера.URLПространствоИменСервиса,ПараметрыПрокиСервера.ИмяСервиса,ПараметрыПрокиСервера.ИмяТочкиПодключения);
Прокси.Пользователь="webserv";
Прокси.Пароль="111";
Попытка
	Ответ=ДесериализаторДанных(Прокси.ToGetData(Данные));
Исключение
	ТекстОшибки=ОписаниеОшибки();
	Сообщить(ТекстОшибки);
	ЗаписьЖурналаРегистрации("ОбменСервесныйWMS",УровеньЖурналаРегистрации.Ошибка,Метаданные.ПланыОбмена.СервесныйОбменWMS,ТекстОшибки);
КонецПопытки;
Если ТипЗнч(Ответ)<>Тип("Структура") Тогда 
	Сообщить("ошибка формата данных");
	ЗаписьЖурналаРегистрации("ОбменСервесныйWMS",УровеньЖурналаРегистрации.Ошибка,Метаданные.ПланыОбмена.СервесныйОбменWMS,"ошибка формата данных");
КонецЕсли;
Если Ответ.Свойство("Статус") Тогда 
	Если Ответ.Статус=404 тогда
		Сообщить(Ответ.ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("ОбменСервесныйWMS",УровеньЖурналаРегистрации.Ошибка,Метаданные.ПланыОбмена.СервесныйОбменWMS,Ответ.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
КонецЕсли;
Если  Ответ.ДанныеПриняты Тогда 
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Ответ.НомерСообщения);
	ОбъектУзла=Узел.ПолучитьОбъект();
	Если ОбъектУзла.НомерОтправленного=Ответ.НомерСообщения Тогда 
		 ОбъектУзла.НомерОтправленного=0;
		 ОбъектУзла.Записать();
	КонецЕсли;	 
КонецЕсли;

КонецПроцедуры

#Область ВыгрузкаСправочников

Процедура ВыгрузитьДанныеСправочников(СтруктураОбменаДанными,Узел)
	ВыгрузитьДанныеТерриторийСкладов(СтруктураОбменаДанными,Узел);
	ВыгрузитьСкладскиеПомещения(СтруктураОбменаДанными,Узел);
	ВыгрузитьТипоразмерыЯчеек(СтруктураОбменаДанными,Узел);
	ВыгрузитьЯчейки(СтруктураОбменаДанными,Узел);
	ВыгрузитьПричиныОтменыЗадач(СтруктураОбменаДанными,Узел);
	ВыгрузитьАссортиментныеУчасткиСклада(СтруктураОбменаДанными,Узел);
КонецПроцедуры

	
Процедура ВыгрузитьДанныеТерриторийСкладов(СтруктураОбменаДанными,Узел)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итТерриторииСкладовИзменения.Ссылка.Ссылка КАК Ссылка,
		|	итТерриторииСкладовИзменения.Ссылка.Наименование КАК Наименование,
		|	итТерриторииСкладовИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.итТерриторииСкладов.Изменения КАК итТерриторииСкладовИзменения
		|ГДЕ
		|	итТерриторииСкладовИзменения.Узел = &Узел
		|	И итТерриторииСкладовИзменения.НомерСообщения <= &НомерСообщения";
	
	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТаблицаДанных=новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("Наименование");
	ТаблицаДанных.Колонки.Добавить("ПометкаУдаления");
	ТаблицаДанных.Колонки.Добавить("СсылкаВДругойИБ");
	ТаблицаДанных.Колонки.Добавить("ИмяТипаПриемника");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	НоваяСтрока=ТаблицаДанных.Добавить();
	НоваяСтрока.Ссылка=ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
	НоваяСтрока.Наименование=ВыборкаДетальныеЗаписи.Наименование;
	НоваяСтрока.ПометкаУдаления=ВыборкаДетальныеЗаписи.ПометкаУдаления;
	НоваяСтрока.ИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ссылка.Метаданные().ПолноеИмя();
	НоваяСтрока.СсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Ссылка,Узел);
	КонецЦикла;
	СтруктураОбменаДанными.Вставить("ТерриторийСкладов",ТаблицаДанных);

КонецПроцедуры

Процедура ВыгрузитьСкладскиеПомещения(СтруктураОбменаДанными,Узел)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итСкладскиеПомещенияИзменения.Ссылка.Ссылка КАК Ссылка,
		|	итСкладскиеПомещенияИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
		|	итСкладскиеПомещенияИзменения.Ссылка.Наименование КАК Наименование,
		|	итСкладскиеПомещенияИзменения.Ссылка.Префикс КАК Префикс,
		|	итСкладскиеПомещенияИзменения.Ссылка.ТерриторияСклада КАК ТерриторияСклада
		|ИЗ
		|	Справочник.итСкладскиеПомещения.Изменения КАК итСкладскиеПомещенияИзменения
		|ГДЕ
		|	итСкладскиеПомещенияИзменения.Узел = &Узел
		|	И итСкладскиеПомещенияИзменения.НомерСообщения <= &НомерСообщения";
	
	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных=новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("ПометкаУдаления");
	ТаблицаДанных.Колонки.Добавить("Наименование");
	ТаблицаДанных.Колонки.Добавить("Префикс");
    ТаблицаДанных.Колонки.Добавить("ТерриторияСклада");
	ТаблицаДанных.Колонки.Добавить("СсылкаВДругойИБ");
	ТаблицаДанных.Колонки.Добавить("ИмяТипаПриемника");

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи,,"Ссылка,ТерриторияСклада");
		НоваяСтрока.Ссылка=ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
        НоваяСтрока.ТерриторияСклада=ВыборкаДетальныеЗаписи.ТерриторияСклада.УникальныйИдентификатор();
		НоваяСтрока.ИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ссылка.Метаданные().ПолноеИмя();
		НоваяСтрока.СсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Ссылка,Узел);
	КонецЦикла;
    СтруктураОбменаДанными.Вставить("СкладскиеПомещения",ТаблицаДанных);

КонецПроцедуры

Процедура ВыгрузитьТипоразмерыЯчеек(СтруктураОбменаДанными,Узел)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итТипоразмерыЯчеекИзменения.Ссылка.Ссылка КАК Ссылка,
		|	итТипоразмерыЯчеекИзменения.Ссылка.Наименование КАК Наименование,
		|	итТипоразмерыЯчеекИзменения.Ссылка.итВысота КАК итВысота,
		|	итТипоразмерыЯчеекИзменения.Ссылка.итГлубина КАК итГлубина,
		|	итТипоразмерыЯчеекИзменения.Ссылка.Грузоподъемность КАК Грузоподъемность,
		|	итТипоразмерыЯчеекИзменения.Ссылка.НеОграниченаПоГрузоподъемности КАК НеОграниченаПоГрузоподъемности,
		|	итТипоразмерыЯчеекИзменения.Ссылка.НеОграниченаПоРазмерам КАК НеОграниченаПоРазмерам,
		|	итТипоразмерыЯчеекИзменения.Ссылка.итОбъем КАК итОбъем,
		|	итТипоразмерыЯчеекИзменения.Ссылка.итШирина КАК итШирина,
		|	итТипоразмерыЯчеекИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.итТипоразмерыЯчеек.Изменения КАК итТипоразмерыЯчеекИзменения
		|ГДЕ
		|	итТипоразмерыЯчеекИзменения.Узел = &Узел
		|	И итТипоразмерыЯчеекИзменения.НомерСообщения <= &НомерСообщения";
	
	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаДанных=новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("Наименование");
	ТаблицаДанных.Колонки.Добавить("итВысота");
	ТаблицаДанных.Колонки.Добавить("итГлубина");
    ТаблицаДанных.Колонки.Добавить("Грузоподъемность");
	ТаблицаДанных.Колонки.Добавить("НеОграниченаПоГрузоподъемности");
    ТаблицаДанных.Колонки.Добавить("НеОграниченаПоРазмерам");
    ТаблицаДанных.Колонки.Добавить("итОбъем");
    ТаблицаДанных.Колонки.Добавить("итШирина");
	ТаблицаДанных.Колонки.Добавить("ПометкаУдаления");
	ТаблицаДанных.Колонки.Добавить("СсылкаВДругойИБ");
	ТаблицаДанных.Колонки.Добавить("ИмяТипаПриемника");

	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл	
		НоваяСтрока=ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи,,"Ссылка");
		НоваяСтрока.Ссылка=ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		НоваяСтрока.ИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ссылка.Метаданные().ПолноеИмя();
    	НоваяСтрока.СсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Ссылка,Узел);	
	КонецЦикла;
    СтруктураОбменаДанными.Вставить("ТипоразмерыЯчеек",ТаблицаДанных);  
КонецПроцедуры


Процедура ВыгрузитьЯчейки(СтруктураОбменаДанными,Узел) 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итСкладскиеЯчейкиИзменения.Ссылка.Ссылка КАК Ссылка,
		|	итСкладскиеЯчейкиИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
		|	итСкладскиеЯчейкиИзменения.Ссылка.Родитель КАК Родитель,
		|	итСкладскиеЯчейкиИзменения.Ссылка.ЭтоГруппа КАК ЭтоГруппа,
		|	итСкладскиеЯчейкиИзменения.Ссылка.Наименование КАК Наименование,
		|	итСкладскиеЯчейкиИзменения.Ссылка.СкладскоеПомещение КАК СкладскоеПомещение,
		|	итСкладскиеЯчейкиИзменения.Ссылка.Линия КАК Линия,
		|	итСкладскиеЯчейкиИзменения.Ссылка.Секция КАК Секция,
		|	итСкладскиеЯчейкиИзменения.Ссылка.Стеллаж КАК Стеллаж,
		|	итСкладскиеЯчейкиИзменения.Ссылка.Ярус КАК Ярус,
		|	итСкладскиеЯчейкиИзменения.Ссылка.Позиция КАК Позиция,
		|	итСкладскиеЯчейкиИзменения.Ссылка.ПорядокОбхода КАК ПорядокОбхода,
		|	итСкладскиеЯчейкиИзменения.Ссылка.Типоразмер КАК Типоразмер,
		|	итСкладскиеЯчейкиИзменения.Ссылка.УровеньДоступности КАК УровеньДоступности,
		|	итСкладскиеЯчейкиИзменения.Ссылка.МаксимальныйКоэффициентНаполненностиПоВесу КАК МаксимальныйКоэффициентНаполненностиПоВесу,
		|	итСкладскиеЯчейкиИзменения.Ссылка.МаксимальныйКоэффициентНаполненностиПоОбъему КАК МаксимальныйКоэффициентНаполненностиПоОбъему,
		|	итСкладскиеЯчейкиИзменения.Ссылка.Заблокирована КАК Заблокирована,
		|	итСкладскиеЯчейкиИзменения.Ссылка.Комментарий КАК Комментарий,
		|	итСкладскиеЯчейкиИзменения.Ссылка.КоличествоПалет КАК КоличествоПалет,
		|	итСкладскиеЯчейкиИзменения.Ссылка.Зона КАК Зона,
		|	итСкладскиеЯчейкиИзменения.Ссылка.НомерРяда_Пролета КАК НомерРяда_Пролета,
		|	итСкладскиеЯчейкиИзменения.Ссылка.ЯчейкаНачалаРазмещения КАК ЯчейкаНачалаРазмещения,
		|	итСкладскиеЯчейкиИзменения.Ссылка.ДатаСнятияБлокировкиИнвентаризации КАК ДатаСнятияБлокировкиИнвентаризации,
		|	итСкладскиеЯчейкиИзменения.Ссылка.ВидСкладскойДеятельности КАК ВидСкладскойДеятельности
		|ИЗ
		|	Справочник.итСкладскиеЯчейки.Изменения КАК итСкладскиеЯчейкиИзменения
		|ГДЕ
		|	итСкладскиеЯчейкиИзменения.Узел = &Узел
		|	И итСкладскиеЯчейкиИзменения.НомерСообщения <= &НомерСообщения";
	
	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных=новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("ПометкаУдаления");
	ТаблицаДанных.Колонки.Добавить("Родитель");
	ТаблицаДанных.Колонки.Добавить("РодительСсылкаВДругойИБ");
	ТаблицаДанных.Колонки.Добавить("ЭтоГруппа");
    ТаблицаДанных.Колонки.Добавить("Наименование");
	ТаблицаДанных.Колонки.Добавить("СкладскоеПомещение");
    ТаблицаДанных.Колонки.Добавить("Линия");
    ТаблицаДанных.Колонки.Добавить("Секция");
    ТаблицаДанных.Колонки.Добавить("Стеллаж");
	ТаблицаДанных.Колонки.Добавить("Ярус");
	ТаблицаДанных.Колонки.Добавить("Позиция");
	ТаблицаДанных.Колонки.Добавить("ПорядокОбхода");
    ТаблицаДанных.Колонки.Добавить("Типоразмер");
    ТаблицаДанных.Колонки.Добавить("УровеньДоступности");
	ТаблицаДанных.Колонки.Добавить("МаксимальныйКоэффициентНаполненностиПоВесу");
	ТаблицаДанных.Колонки.Добавить("МаксимальныйКоэффициентНаполненностиПоОбъему");
	ТаблицаДанных.Колонки.Добавить("Заблокирована");
	ТаблицаДанных.Колонки.Добавить("Комментарий");
	ТаблицаДанных.Колонки.Добавить("КоличествоПалет");
	ТаблицаДанных.Колонки.Добавить("Зона");
	ТаблицаДанных.Колонки.Добавить("НомерРяда_Пролета");
	ТаблицаДанных.Колонки.Добавить("ЯчейкаНачалаРазмещения");
	ТаблицаДанных.Колонки.Добавить("ЯчейкаНачалаРазмещенияСсылкаВДругойИБ");
	ТаблицаДанных.Колонки.Добавить("ДатаСнятияБлокировкиИнвентаризации");
	ТаблицаДанных.Колонки.Добавить("ВидСкладскойДеятельности");
    ТаблицаДанных.Колонки.Добавить("СсылкаВДругойИБ");
	ТаблицаДанных.Колонки.Добавить("ИмяТипаПриемника");




	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	НоваяСтрока=ТаблицаДанных.Добавить();
    ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи,,"Ссылка,СкладскоеПомещение,Типоразмер,ЯчейкаНачалаРазмещения,Родитель");
	НоваяСтрока.Ссылка=ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
	НоваяСтрока.СкладскоеПомещение=ВыборкаДетальныеЗаписи.СкладскоеПомещение.УникальныйИдентификатор();
	Если не ВыборкаДетальныеЗаписи.ЭтоГруппа Тогда
    НоваяСтрока.Типоразмер=ВыборкаДетальныеЗаписи.Типоразмер.УникальныйИдентификатор();
    НоваяСтрока.ЯчейкаНачалаРазмещения=ВыборкаДетальныеЗаписи.ЯчейкаНачалаРазмещения.УникальныйИдентификатор();
	НоваяСтрока.ЯчейкаНачалаРазмещенияСсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.ЯчейкаНачалаРазмещения,Узел);
	КонецЕсли;
    НоваяСтрока.Родитель=ВыборкаДетальныеЗаписи.Родитель.УникальныйИдентификатор();
	НоваяСтрока.РодительСсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Родитель,Узел);
	НоваяСтрока.ИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ссылка.Метаданные().ПолноеИмя();
    НоваяСтрока.СсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Ссылка,Узел);	
	КонецЦикла;
	 СтруктураОбменаДанными.Вставить("Ячейки",ТаблицаДанных);  

	КонецПроцедуры

Процедура ВыгрузитьПричиныОтменыЗадач(СтруктураОбменаДанными,Узел)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMS_ПричиныОтменыЗадачИзменения.Ссылка.Ссылка КАК Ссылка,
		|	итWMS_ПричиныОтменыЗадачИзменения.Ссылка.Наименование КАК Наименование,
		|	итWMS_ПричиныОтменыЗадачИзменения.Ссылка.Предопределенный КАК Предопределенный,
		|	итWMS_ПричиныОтменыЗадачИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.итWMS_ПричиныОтменыЗадач.Изменения КАК итWMS_ПричиныОтменыЗадачИзменения
		|ГДЕ
		|	итWMS_ПричиныОтменыЗадачИзменения.Узел = &Узел
		|	И итWMS_ПричиныОтменыЗадачИзменения.НомерСообщения <= &НомерСообщения";
	
	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаДанных=новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("Наименование");
	ТаблицаДанных.Колонки.Добавить("Предопределенный");
	ТаблицаДанных.Колонки.Добавить("ПометкаУдаления");
    ТаблицаДанных.Колонки.Добавить("СсылкаВДругойИБ");
	ТаблицаДанных.Колонки.Добавить("ИмяТипаПриемника");

	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи,,"Ссылка");
		НоваяСтрока.Ссылка=ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		НоваяСтрока.ИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ссылка.Метаданные().ПолноеИмя();
    	НоваяСтрока.СсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Ссылка,Узел);	
	КонецЦикла;
	СтруктураОбменаДанными.Вставить("ПричиныОтменыЗадач",ТаблицаДанных);  

КонецПроцедуры

Процедура ВыгрузитьАссортиментныеУчасткиСклада(СтруктураОбменаДанными,Узел)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ит_WMS_АссортиментныеУчасткиСкладаИзменения.Ссылка.Ссылка КАК Ссылка,
		|	ит_WMS_АссортиментныеУчасткиСкладаИзменения.Ссылка.Наименование КАК Наименование,
		|	ит_WMS_АссортиментныеУчасткиСкладаИзменения.Ссылка.СоставЯчеек.(
		|		Ячейка КАК Ячейка
		|	) КАК ТЧ,
		|	ит_WMS_АссортиментныеУчасткиСкладаИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.ит_WMS_АссортиментныеУчасткиСклада.Изменения КАК ит_WMS_АссортиментныеУчасткиСкладаИзменения
		|ГДЕ
		|	ит_WMS_АссортиментныеУчасткиСкладаИзменения.Узел = &Узел
		|	И ит_WMS_АссортиментныеУчасткиСкладаИзменения.НомерСообщения <= &НомерСообщения";
	
	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных=новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("Наименование");
	ТаблицаДанных.Колонки.Добавить("ПометкаУдаления");
	ТаблицаДанных.Колонки.Добавить("ТЧ");
    ТаблицаДанных.Колонки.Добавить("СсылкаВДругойИБ");
	ТаблицаДанных.Колонки.Добавить("ИмяТипаПриемника");


	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока=ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи,,"Ссылка,ТЧ");
		НоваяСтрока.Ссылка=ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		НоваяСтрока.СсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Ссылка,Узел);
		НоваяСтрока.ИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ссылка.Метаданные().ПолноеИмя();
		ТаблицаТЧ=новый ТаблицаЗначений;
		ТаблицаТЧ.Колонки.Добавить("Ячейка");
		ТаблицаТЧ.Колонки.Добавить("СсылкаВДругойИБ");
		ТаблицаТЧ.Колонки.Добавить("ИмяТипаПриемника");
		ВыборкаТЧ=ВыборкаДетальныеЗаписи.ТЧ.Выбрать();
		пока ВыборкаТЧ.Следующий() Цикл 
			НоваяСтрокаТЧ=ТаблицаТЧ.Добавить();
			НоваяСтрокаТЧ.Ячейка=ВыборкаТЧ.Ячейка.УникальныйИдентификатор();
			НоваяСтрокаТЧ.СсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаТЧ.Ячейка,Узел);	
			НоваяСтрокаТЧ.ИмяТипаПриемника=ВыборкаТЧ.Ячейка.Метаданные().ПолноеИмя();
		КонецЦикла;
		НоваяСтрока.ТЧ=ТаблицаТЧ;	
	КонецЦикла;
	
    СтруктураОбменаДанными.Вставить("АссортиментныеУчасткиСклада",ТаблицаДанных);  
	КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДокументов

Процедура ВыгрузитьДокументы(СтруктураОбменаДанными,Узел)
	Конфа=Метаданные.Представление();
	Если Конфа="1С: Комплексная автоматизация торговли алкогольной продукцией 8, редакция 1.1" Тогда 
		ВыгрузкаДокументовПоДвижениямСтарыйКА11(СтруктураОбменаДанными,Узел);
	иначе
		ВыгрузкаДокументовПоДвижениям(СтруктураОбменаДанными,Узел);
	КонецЕсли;
 
 	 КонецПроцедуры

Процедура ВыгрузкаДокументовПоДвижениям(СтруктураОбменаДанными,Узел)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSПриемкаИзменения.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВтДокументыДвижения
		|ИЗ
		|	Документ.итWMSПриемка.Изменения КАК итWMSПриемкаИзменения
		|ГДЕ
		|	итWMSПриемкаИзменения.Узел = &Узел
		|	И итWMSПриемкаИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSРазмещениеИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSРазмещение.Изменения КАК итWMSРазмещениеИзменения
		|ГДЕ
		|	итWMSРазмещениеИзменения.Узел = &Узел
		|	И итWMSРазмещениеИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSРучноеРазмещениеИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSРучноеРазмещение.Изменения КАК итWMSРучноеРазмещениеИзменения
		|ГДЕ
		|	итWMSРучноеРазмещениеИзменения.Узел = &Узел
		|	И итWMSРучноеРазмещениеИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSРучноеПеремещениеИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSРучноеПеремещение.Изменения КАК итWMSРучноеПеремещениеИзменения
		|ГДЕ
		|	итWMSРучноеПеремещениеИзменения.Узел = &Узел
		|	И итWMSРучноеПеремещениеИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSПеремещениеИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSПеремещение.Изменения КАК итWMSПеремещениеИзменения
		|ГДЕ
		|	итWMSПеремещениеИзменения.Узел = &Узел
		|	И итWMSПеремещениеИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSНаборкаИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSНаборка.Изменения КАК итWMSНаборкаИзменения
		|ГДЕ
		|	итWMSНаборкаИзменения.Узел = &Узел
		|	И итWMSНаборкаИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSОтгрузкаИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSОтгрузка.Изменения КАК итWMSОтгрузкаИзменения
		|ГДЕ
		|	итWMSОтгрузкаИзменения.Узел = &Узел
		|	И итWMSОтгрузкаИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSРучнаяОтгрузкаИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSРучнаяОтгрузка.Изменения КАК итWMSРучнаяОтгрузкаИзменения
		|ГДЕ
		|	итWMSРучнаяОтгрузкаИзменения.Узел = &Узел
		|	И итWMSРучнаяОтгрузкаИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSДанныеИнвентаризацииИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSДанныеИнвентаризации.Изменения КАК итWMSДанныеИнвентаризацииИзменения
		|ГДЕ
		|	итWMSДанныеИнвентаризацииИзменения.Узел = &Узел
		|	И итWMSДанныеИнвентаризацииИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSИзменениеПараметровТовараВЯчейкахИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSИзменениеПараметровТовараВЯчейках.Изменения КАК итWMSИзменениеПараметровТовараВЯчейкахИзменения
		|ГДЕ
		|	итWMSИзменениеПараметровТовараВЯчейкахИзменения.Узел = &Узел
		|	И итWMSИзменениеПараметровТовараВЯчейкахИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSСписаниеТовараИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSСписаниеТовара.Изменения КАК итWMSСписаниеТовараИзменения
		|ГДЕ
		|	итWMSСписаниеТовараИзменения.Узел = &Узел
		|	И итWMSСписаниеТовараИзменения.НомерСообщения <= &НомерСообщения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.Ссылка.Номер КАК НомерИсточника,
		|	ВложенныйЗапрос.Ссылка.Дата КАК Дата,
		|	ВложенныйЗапрос.Ссылка.Проведен КАК Проведен,
		|	ВложенныйЗапрос.Ссылка.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВтДокументыДвижения.Ссылка КАК Ссылка
		|	ИЗ
		|		ВтДокументыДвижения КАК ВтДокументыДвижения
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВтДокументыДвижения.Ссылка) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных=новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("НомерИсточника");
    ТаблицаДанных.Колонки.Добавить("ПометкаУдаления");
    ТаблицаДанных.Колонки.Добавить("Проведен");
	ТаблицаДанных.Колонки.Добавить("Дата");
	ТаблицаДанных.Колонки.Добавить("Движения");
    ТаблицаДанных.Колонки.Добавить("СсылкаВДругойИБ");
	ТаблицаДанных.Колонки.Добавить("ИмяТипаПриемника");

    ВыборкаРегистратор=РезультатЗапроса.Выбрать();             	
	Пока ВыборкаРегистратор.Следующий() Цикл
		НоваяСтрока=ТаблицаДанных.Добавить();
		НоваяСтрока.Ссылка=ВыборкаРегистратор.Ссылка.УникальныйИдентификатор();
		НоваяСтрока.СсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаРегистратор.Ссылка,Узел);
        НоваяСтрока.ИмяТипаПриемника=ВыборкаРегистратор.Ссылка.Метаданные().ПолноеИмя();
		НоваяСтрока.Дата=ВыборкаРегистратор.Дата;
		НоваяСтрока.НомерИсточника= ВыборкаРегистратор.НомерИсточника;
		НоваяСтрока.ПометкаУдаления= ВыборкаРегистратор.ПометкаУдаления;
		НоваяСтрока.Проведен = ВыборкаРегистратор.Проведен;
		
		
		
		РезультатЗапросаДвижения=РезультатыДвиженияДокумента(ВыборкаРегистратор.Ссылка);
	    ВыборкаДетальныеЗаписи = РезультатЗапросаДвижения.Выбрать();     
		ТаблицаТЧ=новый ТаблицаЗначений;
		ТаблицаТЧ.Колонки.Добавить("Период");
		ТаблицаТЧ.Колонки.Добавить("Регистратор");
		ТаблицаТЧ.Колонки.Добавить("Активность");
		ТаблицаТЧ.Колонки.Добавить("ВидДвижения");
		ТаблицаТЧ.Колонки.Добавить("Организация");
		ТаблицаТЧ.Колонки.Добавить("ИдентификаторУпаковки");
		ТаблицаТЧ.Колонки.Добавить("Ячейка");
		ТаблицаТЧ.Колонки.Добавить("ЯчейкаСсылкаВДругойИБ");
		ТаблицаТЧ.Колонки.Добавить("ЯчейкаИмяТипаПриемника");
		ТаблицаТЧ.Колонки.Добавить("Номенклатура");
		ТаблицаТЧ.Колонки.Добавить("Характеристика");
		ТаблицаТЧ.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаТЧ.Колонки.Добавить("СерияНоменклатурыВДругойИБ");
		ТаблицаТЧ.Колонки.Добавить("СерияНоменклатурыИмяТипаПриемника");
		ТаблицаТЧ.Колонки.Добавить("Склад");
		ТаблицаТЧ.Колонки.Добавить("ДатаРозлива");
		ТаблицаТЧ.Колонки.Добавить("Качество");
		ТаблицаТЧ.Колонки.Добавить("Количество");
		ТаблицаТЧ.Колонки.Добавить("КОтбору");
		ТаблицаТЧ.Колонки.Добавить("КРазмещению");

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрокаТЧ=ТаблицаТЧ.Добавить();	
			НоваяСтрокаТЧ.Период=ВыборкаДетальныеЗаписи.Период;
			//НоваяСтрокаТЧ.Регистратор=ВыборкаДетальныеЗаписи.Регистратор.УникальныйИдентификатор();
			НоваяСтрокаТЧ.Активность=ВыборкаДетальныеЗаписи.Активность;
			НоваяСтрокаТЧ.ВидДвижения=ВыборкаДетальныеЗаписи.ВидДвижения;
			НоваяСтрокаТЧ.Организация=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Организация,Узел.СсылкаНаУзелУпрДанных);
			//ВыборкаДетальныеЗаписи.Организация.УникальныйИдентификатор();
			НоваяСтрокаТЧ.ИдентификаторУпаковки=ВыборкаДетальныеЗаписи.ИдентификаторУпаковки;
			НоваяСтрокаТЧ.Ячейка=ВыборкаДетальныеЗаписи.Ячейка.УникальныйИдентификатор();
			НоваяСтрокаТЧ.ЯчейкаСсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Ячейка,Узел);
			НоваяСтрокаТЧ.ЯчейкаИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ячейка.Метаданные().ПолноеИмя();

			
			НоваяСтрокаТЧ.Номенклатура=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Номенклатура,Узел.СсылкаНаУзелУпрДанных);
			//ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор();
			НоваяСтрокаТЧ.Характеристика=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Характеристика,Узел.СсылкаНаУзелУпрДанных);
			//ВыборкаДетальныеЗаписи.Характеристика.УникальныйИдентификатор();
			НоваяСтрокаТЧ.СерияНоменклатуры=ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор();
			НоваяСтрокаТЧ.СерияНоменклатурыВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.СерияНоменклатуры,Узел.СсылкаНаУзелУпрДанных);
			НоваяСтрокаТЧ.СерияНоменклатурыИмяТипаПриемника=ВыборкаДетальныеЗаписи.СерияНоменклатуры.Метаданные().ПолноеИмя();

			НоваяСтрокаТЧ.Склад= ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Склад,Узел.СсылкаНаУзелУпрДанных);
						
			НоваяСтрокаТЧ.Качество=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Качество,Узел.СсылкаНаУзелУпрДанных);
			//ВыборкаДетальныеЗаписи.Качество.УникальныйИдентификатор();
			НоваяСтрокаТЧ.ДатаРозлива=ВыборкаДетальныеЗаписи.ДатаРозлива;
			НоваяСтрокаТЧ.Количество=ВыборкаДетальныеЗаписи.Количество;
			НоваяСтрокаТЧ.КОтбору=ВыборкаДетальныеЗаписи.КОтбору;
			НоваяСтрокаТЧ.КРазмещению=ВыборкаДетальныеЗаписи.КРазмещению;
		КонецЦикла;
		НоваяСтрока.Движения=ТаблицаТЧ;

	КонецЦикла;
	
	   СтруктураОбменаДанными.Вставить("ДокументыКА11",ТаблицаДанных);

КонецПроцедуры


Процедура ВыгрузкаДокументовПоДвижениямСтарыйКА11(СтруктураОбменаДанными,Узел)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSПриемкаИзменения.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВтДокументыДвижения
		|ИЗ
		|	Документ.итWMSПриемка.Изменения КАК итWMSПриемкаИзменения
		|ГДЕ
		|	итWMSПриемкаИзменения.Узел = &Узел
		|	И итWMSПриемкаИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSРазмещениеИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSРазмещение.Изменения КАК итWMSРазмещениеИзменения
		|ГДЕ
		|	итWMSРазмещениеИзменения.Узел = &Узел
		|	И итWMSРазмещениеИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSРучноеРазмещениеИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSРучноеРазмещение.Изменения КАК итWMSРучноеРазмещениеИзменения
		|ГДЕ
		|	итWMSРучноеРазмещениеИзменения.Узел = &Узел
		|	И итWMSРучноеРазмещениеИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSРучноеПеремещениеИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSРучноеПеремещение.Изменения КАК итWMSРучноеПеремещениеИзменения
		|ГДЕ
		|	итWMSРучноеПеремещениеИзменения.Узел = &Узел
		|	И итWMSРучноеПеремещениеИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSПеремещениеИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSПеремещение.Изменения КАК итWMSПеремещениеИзменения
		|ГДЕ
		|	итWMSПеремещениеИзменения.Узел = &Узел
		|	И итWMSПеремещениеИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSНаборкаИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSНаборка.Изменения КАК итWMSНаборкаИзменения
		|ГДЕ
		|	итWMSНаборкаИзменения.Узел = &Узел
		|	И итWMSНаборкаИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSОтгрузкаИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSОтгрузка.Изменения КАК итWMSОтгрузкаИзменения
		|ГДЕ
		|	итWMSОтгрузкаИзменения.Узел = &Узел
		|	И итWMSОтгрузкаИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSРучнаяОтгрузкаИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSРучнаяОтгрузка.Изменения КАК итWMSРучнаяОтгрузкаИзменения
		|ГДЕ
		|	итWMSРучнаяОтгрузкаИзменения.Узел = &Узел
		|	И итWMSРучнаяОтгрузкаИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSДанныеИнвентаризацииИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSДанныеИнвентаризации.Изменения КАК итWMSДанныеИнвентаризацииИзменения
		|ГДЕ
		|	итWMSДанныеИнвентаризацииИзменения.Узел = &Узел
		|	И итWMSДанныеИнвентаризацииИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSИзменениеПараметровТовараВЯчейкахИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSИзменениеПараметровТовараВЯчейках.Изменения КАК итWMSИзменениеПараметровТовараВЯчейкахИзменения
		|ГДЕ
		|	итWMSИзменениеПараметровТовараВЯчейкахИзменения.Узел = &Узел
		|	И итWMSИзменениеПараметровТовараВЯчейкахИзменения.НомерСообщения <= &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSСписаниеТовараИзменения.Ссылка
		|ИЗ
		|	Документ.итWMSСписаниеТовара.Изменения КАК итWMSСписаниеТовараИзменения
		|ГДЕ
		|	итWMSСписаниеТовараИзменения.Узел = &Узел
		|	И итWMSСписаниеТовараИзменения.НомерСообщения <= &НомерСообщения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.Ссылка.Номер КАК НомерИсточника,
		|	ВложенныйЗапрос.Ссылка.Дата КАК Дата,
		|	ВложенныйЗапрос.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
		|	ВложенныйЗапрос.Ссылка.Проведен КАК Проведен
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВтДокументыДвижения.Ссылка КАК Ссылка
		|	ИЗ
		|		ВтДокументыДвижения КАК ВтДокументыДвижения
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВтДокументыДвижения.Ссылка) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("НомерСообщения", СтруктураОбменаДанными.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных=новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("НомерИсточника");
    ТаблицаДанных.Колонки.Добавить("ПометкаУдаления");
    ТаблицаДанных.Колонки.Добавить("Проведен");
	ТаблицаДанных.Колонки.Добавить("Дата");
	ТаблицаДанных.Колонки.Добавить("Движения");
    ТаблицаДанных.Колонки.Добавить("СсылкаВДругойИБ");
	ТаблицаДанных.Колонки.Добавить("ИмяТипаПриемника");


	ВыборкаРегистратор = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаРегистратор.Следующий() Цикл
		НоваяСтрока=ТаблицаДанных.Добавить();
		НоваяСтрока.Ссылка=ВыборкаРегистратор.Ссылка.УникальныйИдентификатор();
		НоваяСтрока.ПометкаУдаления=ВыборкаРегистратор.ПометкаУдаления;
        НоваяСтрока.Проведен=ВыборкаРегистратор.Проведен;
        НоваяСтрока.ИмяТипаПриемника=ВыборкаРегистратор.Ссылка.Метаданные().ПолноеИмя();
		НоваяСтрока.Дата=ВыборкаРегистратор.Дата;
		НоваяСтрока.СсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаРегистратор.Ссылка,Узел);
		НоваяСтрока.НомерИсточника= ВыборкаРегистратор.НомерИсточника;
        		
		
		
		
		РезультатЗапросаДвижения=РезультатыДвиженияДокументаКА11(ВыборкаРегистратор.Ссылка);
		ВыборкаДетальныеЗаписи = РезультатЗапросаДвижения.Выбрать();
		ТаблицаТЧ=новый ТаблицаЗначений;
		ТаблицаТЧ.Колонки.Добавить("Период");
		ТаблицаТЧ.Колонки.Добавить("Регистратор");
		ТаблицаТЧ.Колонки.Добавить("Активность");
		ТаблицаТЧ.Колонки.Добавить("ВидДвижения");
		ТаблицаТЧ.Колонки.Добавить("Организация");
		ТаблицаТЧ.Колонки.Добавить("ИдентификаторУпаковки");
		ТаблицаТЧ.Колонки.Добавить("Ячейка");
		ТаблицаТЧ.Колонки.Добавить("ЯчейкаСсылкаВДругойИБ");
		ТаблицаТЧ.Колонки.Добавить("ЯчейкаИмяТипаПриемника");
		ТаблицаТЧ.Колонки.Добавить("Номенклатура");
		ТаблицаТЧ.Колонки.Добавить("Характеристика");
		ТаблицаТЧ.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаТЧ.Колонки.Добавить("СерияНоменклатурыВДругойИБ");
		ТаблицаТЧ.Колонки.Добавить("СерияНоменклатурыИмяТипаПриемника");
		ТаблицаТЧ.Колонки.Добавить("Склад");
		ТаблицаТЧ.Колонки.Добавить("ДатаРозлива");
		ТаблицаТЧ.Колонки.Добавить("Качество");
		ТаблицаТЧ.Колонки.Добавить("Количество");
		ТаблицаТЧ.Колонки.Добавить("КОтбору");
		ТаблицаТЧ.Колонки.Добавить("КРазмещению");

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрокаТЧ=ТаблицаТЧ.Добавить();	
			НоваяСтрокаТЧ.Период=ВыборкаДетальныеЗаписи.Период;
			//НоваяСтрокаТЧ.Регистратор=ВыборкаДетальныеЗаписи.Регистратор.УникальныйИдентификатор();
			НоваяСтрокаТЧ.Активность=ВыборкаДетальныеЗаписи.Активность;
			НоваяСтрокаТЧ.ВидДвижения=ВыборкаДетальныеЗаписи.ВидДвижения;
			НоваяСтрокаТЧ.Организация=ВернутьОрганизациюДляобмена().УникальныйИдентификатор();
			НоваяСтрокаТЧ.ИдентификаторУпаковки=ВыборкаДетальныеЗаписи.ИдентификаторУпаковки;
			НоваяСтрокаТЧ.Ячейка=ВыборкаДетальныеЗаписи.Ячейка.УникальныйИдентификатор();
			НоваяСтрокаТЧ.ЯчейкаСсылкаВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.Ячейка,Узел);
			НоваяСтрокаТЧ.ЯчейкаИмяТипаПриемника=ВыборкаДетальныеЗаписи.Ячейка.Метаданные().ПолноеИмя();

			НоваяСтрокаТЧ.Номенклатура=ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор();
			НоваяСтрокаТЧ.Характеристика=ВыборкаДетальныеЗаписи.Характеристика.УникальныйИдентификатор();
			НоваяСтрокаТЧ.СерияНоменклатуры=ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор();
			НоваяСтрокаТЧ.СерияНоменклатурыВДругойИБ=ПоискЭлементаСоответствияОбменаДругойИБ(ВыборкаДетальныеЗаписи.СерияНоменклатуры,Узел.СсылкаНаУзелУпрДанных);
			НоваяСтрокаТЧ.СерияНоменклатурыИмяТипаПриемника=ВыборкаДетальныеЗаписи.СерияНоменклатуры.Метаданные().ПолноеИмя();
			
			НоваяСтрокаТЧ.Склад=ВыборкаДетальныеЗаписи.Склад.УникальныйИдентификатор();
			
			НоваяСтрокаТЧ.Качество=ВыборкаДетальныеЗаписи.Качество.УникальныйИдентификатор();
			НоваяСтрокаТЧ.ДатаРозлива=ВыборкаДетальныеЗаписи.ДатаРозлива;
			НоваяСтрокаТЧ.Количество=ВыборкаДетальныеЗаписи.Количество;
			НоваяСтрокаТЧ.КОтбору=ВыборкаДетальныеЗаписи.КОтбору;
			НоваяСтрокаТЧ.КРазмещению=ВыборкаДетальныеЗаписи.КРазмещению;
		КонецЦикла;
		НоваяСтрока.Движения=ТаблицаТЧ;

	КонецЦикла;
	
	СтруктураОбменаДанными.Вставить("Документы",ТаблицаДанных);

КонецПроцедуры


Функция РезультатыДвиженияДокументаКА11(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итТоварыВЯчейках.Период КАК Период,
		|	итТоварыВЯчейках.Регистратор КАК Регистратор,
		|	итТоварыВЯчейках.Активность КАК Активность,
		|	итТоварыВЯчейках.ВидДвижения КАК ВидДвижения,
		|	итТоварыВЯчейках.Склад КАК Склад,
		|	итТоварыВЯчейках.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	итТоварыВЯчейках.Ячейка КАК Ячейка,
		|	итТоварыВЯчейках.Номенклатура КАК Номенклатура,
		|	итТоварыВЯчейках.Характеристика КАК Характеристика,
		|	итТоварыВЯчейках.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итТоварыВЯчейках.ДатаРозлива КАК ДатаРозлива,
		|	итТоварыВЯчейках.Качество КАК Качество,
		|	итТоварыВЯчейках.Количество КАК Количество,
		|	0 КАК КРазмещению,
		|	0 КАК КОтбору
		|ИЗ
		|	РегистрНакопления.итТоварыВЯчейках КАК итТоварыВЯчейках
		|ГДЕ
		|	итТоварыВЯчейках.Регистратор = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итТоварыВЯчейкахРезерв.Период,
		|	итТоварыВЯчейкахРезерв.Регистратор,
		|	итТоварыВЯчейкахРезерв.Активность,
		|	итТоварыВЯчейкахРезерв.ВидДвижения,
		|	итТоварыВЯчейкахРезерв.Склад,
		|	итТоварыВЯчейкахРезерв.ИдентификаторУпаковки,
		|	итТоварыВЯчейкахРезерв.Ячейка,
		|	итТоварыВЯчейкахРезерв.Номенклатура,
		|	итТоварыВЯчейкахРезерв.Характеристика,
		|	итТоварыВЯчейкахРезерв.СерияНоменклатуры,
		|	итТоварыВЯчейкахРезерв.ДатаРозлива,
		|	итТоварыВЯчейкахРезерв.Качество,
		|	0,
		|	итТоварыВЯчейкахРезерв.Количество,
		|	0
		|ИЗ
		|	РегистрНакопления.итТоварыВЯчейкахРезерв КАК итТоварыВЯчейкахРезерв
		|ГДЕ
		|	итТоварыВЯчейкахРезерв.Регистратор = &Регистратор
		|	И итТоварыВЯчейкахРезерв.ЯчейкаОтправитель = ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.ПустаяЯчейка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итТоварыВЯчейкахРезерв.Период,
		|	итТоварыВЯчейкахРезерв.Регистратор,
		|	итТоварыВЯчейкахРезерв.Активность,
		|	итТоварыВЯчейкахРезерв.ВидДвижения,
		|	итТоварыВЯчейкахРезерв.Склад,
		|	итТоварыВЯчейкахРезерв.ИдентификаторУпаковки,
		|	итТоварыВЯчейкахРезерв.ЯчейкаОтправитель,
		|	итТоварыВЯчейкахРезерв.Номенклатура,
		|	итТоварыВЯчейкахРезерв.Характеристика,
		|	итТоварыВЯчейкахРезерв.СерияНоменклатуры,
		|	итТоварыВЯчейкахРезерв.ДатаРозлива,
		|	итТоварыВЯчейкахРезерв.Качество,
		|	0,
		|	0,
		|	итТоварыВЯчейкахРезерв.Количество
		|ИЗ
		|	РегистрНакопления.итТоварыВЯчейкахРезерв КАК итТоварыВЯчейкахРезерв
		|ГДЕ
		|	итТоварыВЯчейкахРезерв.Регистратор = &Регистратор
		|	И итТоварыВЯчейкахРезерв.Ячейка = ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.ПустаяЯчейка)";
	
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;	

	КонецФункции

	
Функция РезультатыДвиженияДокумента(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итТоварыВЯчейках.Период КАК Период,
		|	итТоварыВЯчейках.Регистратор КАК Регистратор,
		|	итТоварыВЯчейках.Активность КАК Активность,
		|	итТоварыВЯчейках.ВидДвижения КАК ВидДвижения,
		|	итТоварыВЯчейках.Организация КАК Организация,
		|	итТоварыВЯчейках.Склад КАК Склад,
		|	итТоварыВЯчейках.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	итТоварыВЯчейках.Ячейка КАК Ячейка,
		|	итТоварыВЯчейках.Номенклатура КАК Номенклатура,
		|	итТоварыВЯчейках.Характеристика КАК Характеристика,
		|	итТоварыВЯчейках.СерияНоменклатуры КАК СерияНоменклатуры,
		|	итТоварыВЯчейках.ДатаРозлива КАК ДатаРозлива,
		|	итТоварыВЯчейках.Качество КАК Качество,
		|	итТоварыВЯчейках.Количество КАК Количество,
		|	итТоварыВЯчейках.КОтбору КАК КОтбору,
		|	итТоварыВЯчейках.КРазмещению КАК КРазмещению
		|ИЗ
		|	РегистрНакопления.итТоварыВЯчейках КАК итТоварыВЯчейках
		|ГДЕ
		|	итТоварыВЯчейках.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;	
	КонецФункции
	

Функция ВернутьОрганизациюДляобмена()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат  ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;

	КонецФункции
 
 

	#КонецОбласти

#КонецОбласти


#Область ПолучениеДанных
Функция ПолучениеДанных(знач СтруктураДанных) Экспорт	
Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(СтруктураДанных,"НомерСообщения") Тогда
СтруктураОтвета=новый Структура();
СтруктураОтвета.Вставить("НомерСообщения",СтруктураДанных.НомерСообщения);
СтруктураОтвета.Вставить("ДанныеПриняты",Ложь);
СтруктураОтвета.Вставить("Статус",СтруктураДанных.Статус);
СтруктураОтвета.Вставить("ОписаниеОшибки",СтруктураДанных.ОписаниеОшибки);
Возврат СтруктураОтвета;
КонецЕсли;	
Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(СтруктураДанных,"УзелОбмена") Тогда
СтруктураОтвета=новый Структура();
СтруктураОтвета.Вставить("НомерСообщения",СтруктураДанных.НомерСообщения);
СтруктураОтвета.Вставить("ДанныеПриняты",Ложь);
СтруктураОтвета.Вставить("Статус",СтруктураДанных.Статус);
СтруктураОтвета.Вставить("ОписаниеОшибки",СтруктураДанных.ОписаниеОшибки);
Возврат СтруктураОтвета;
КонецЕсли;	
Отказ=Ложь;
ПолучитьДанные(СтруктураДанных,Отказ);
СтруктураОтвета=новый Структура();
СтруктураОтвета.Вставить("НомерСообщения",СтруктураДанных.НомерСообщения);
СтруктураОтвета.Вставить("ДанныеПриняты",не Отказ);
Если СтруктураДанных.Свойство("Статус") Тогда
СтруктураОтвета.Вставить("Статус",СтруктураДанных.Статус);
СтруктураОтвета.Вставить("ОписаниеОшибки",СтруктураДанных.ОписаниеОшибки);	
КонецЕсли;
Возврат СтруктураОтвета;
КонецФункции

Процедура ПолучитьДанные(СтруктураДанных,Отказ)
	УзелОбмена=ПолучитьУзелОбмена(СтруктураДанных.УзелОбмена);
	Если ТипЗнч(УзелОбмена)<>Тип("ПланОбменаСсылка.СервесныйОбменWMS") Тогда
		СтруктураДанных.Вставить("Статус",404);
		СтруктураДанных.Вставить("ОписаниеОшибки","Не верный тип узла обмена");
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	ПолучениеДанныхСправочников(СтруктураДанных,УзелОбмена,Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ПолучитьДанныеДокументов(СтруктураДанных,УзелОбмена,Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//ПолучениеДанныхРегистровКА11(СтруктураДанных,УзелОбмена,Отказ);
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;
	//ПолучитьДанныеДокументовКА11(СтруктураДанных,УзелОбмена,Отказ);
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;


КонецПроцедуры

#Область ПолучениеСправочников

Процедура ПолучениеДанныхСправочников(СтруктураДанных,УзелОбмена,Отказ)
	ПолучитьТерриторииСкладов(СтруктураДанных,УзелОбмена,Отказ);
	ПолучитьСкладскиеПомещения(СтруктураДанных,УзелОбмена,Отказ);
	ПолучитьТипоРазмерЯчейки(СтруктураДанных,УзелОбмена,Отказ);
	ПолучитьЯчейки(СтруктураДанных,УзелОбмена,Отказ);
	ПолучитьДанныеПричинОтмены(СтруктураДанных,УзелОбмена,Отказ);
	ПолучитьАссортиментныйУчасток(СтруктураДанных,УзелОбмена,Отказ);
КонецПроцедуры
	
Процедура ПолучитьТерриторииСкладов(СтруктураДанных,УзелОбмена,Отказ)
	Если не СтруктураДанных.Свойство("ТерриторийСкладов") Тогда
		Возврат;	
	КонецЕсли;
	ТерриторийСкладов=СтруктураДанных.ТерриторийСкладов;
	Для Каждого стр Из ТерриторийСкладов Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйЭлемент=Ложь;
		СсылкаНаТерриторию=ПоискЭлементаСоответствияОбмена(стр.Ссылка,УзелОбмена);
		Если СсылкаНаТерриторию=Неопределено Тогда
			Если стр.СсылкаВДругойИБ<>Неопределено Тогда 
				СсылкаВДругойИБ=Справочники.итТерриторииСкладов.ПолучитьСсылку(стр.СсылкаВДругойИБ);
				ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
				Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
					ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
					СсылкаНаТерриторию=ОбъектСсылкиДругойИБ.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если СсылкаНаТерриторию=Неопределено Тогда 
				ОбъектТерритории=Справочники.итТерриторииСкладов.СоздатьЭлемент();
				НовыйЭлемент=Истина;
			иначе
				ОбъектТерритории= СсылкаНаТерриторию.ПолучитьОбъект();
			КонецЕсли;
		иначе
			ОбъектТерритории= СсылкаНаТерриторию.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектТерритории,стр,,"Ссылка");
		ОбъектТерритории.ОбменДанными.Отправитель=УзелОбмена;
		ОбъектТерритории.Записать();
		Если НовыйЭлемент тогда
			ЗаписьСоотвОбмена(ОбъектТерритории.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
    КонецЦикла;
КонецПроцедуры

Процедура ПолучитьСкладскиеПомещения(СтруктураДанных,УзелОбмена,Отказ)
	Если не СтруктураДанных.Свойство("СкладскиеПомещения") Тогда
		Возврат;	
	КонецЕсли;
	СкладскиеПомещения=СтруктураДанных.СкладскиеПомещения;
	Для Каждого стр Из СкладскиеПомещения Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйЭлемент=Ложь;
		СсылкаНаСкладскоеПомещение=ПоискЭлементаСоответствияОбмена(стр.Ссылка,УзелОбмена);
		Если СсылкаНаСкладскоеПомещение=Неопределено Тогда
			Если стр.СсылкаВДругойИБ<>Неопределено Тогда 
				СсылкаВДругойИБ=Справочники.итСкладскиеПомещения.ПолучитьСсылку(стр.СсылкаВДругойИБ);
				ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
				Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
					ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
					СсылкаНаСкладскоеПомещение=ОбъектСсылкиДругойИБ.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если СсылкаНаСкладскоеПомещение=Неопределено Тогда 
				ОбъектДанных=Справочники.итСкладскиеПомещения.СоздатьЭлемент();
				НовыйЭлемент=Истина;
			иначе
				ОбъектДанных= СсылкаНаСкладскоеПомещение.ПолучитьОбъект();
			КонецЕсли;
		иначе
			ОбъектДанных= СсылкаНаСкладскоеПомещение.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектДанных,стр,,"Ссылка,ТерриторияСклада");
		ТерриторияСклада=ПоискЭлементаСоответствияОбмена(стр.ТерриторияСклада,УзелОбмена);
		Если ТерриторияСклада<>Неопределено Тогда
			ОбъектДанных.ТерриторияСклада=ТерриторияСклада;
		КонецЕсли;
		ОбъектДанных.ОбменДанными.Отправитель=УзелОбмена;
		ОбъектДанных.Записать();
		Если НовыйЭлемент Тогда 
				ЗаписьСоотвОбмена(ОбъектДанных.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
    КонецЦикла;

	
	КонецПроцедуры

Процедура ПолучитьТипоРазмерЯчейки(СтруктураДанных,УзелОбмена,Отказ)
	Если не СтруктураДанных.Свойство("ТипоразмерыЯчеек") Тогда
		Возврат;	
	КонецЕсли;
	ТипоразмерыЯчеек=СтруктураДанных.ТипоразмерыЯчеек;
	Для Каждого стр Из ТипоразмерыЯчеек Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйЭлемент=Ложь;
		СсылкаНаТипоразмерыЯчеек=ПоискЭлементаСоответствияОбмена(стр.Ссылка,УзелОбмена);
		Если СсылкаНаТипоразмерыЯчеек=Неопределено Тогда
			Если стр.СсылкаВДругойИБ<>Неопределено Тогда 
				СсылкаВДругойИБ=Справочники.итТипоразмерыЯчеек.ПолучитьСсылку(стр.СсылкаВДругойИБ);
				ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
				Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
					ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
					СсылкаНаТипоразмерыЯчеек=ОбъектСсылкиДругойИБ.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если СсылкаНаТипоразмерыЯчеек=Неопределено Тогда 
				ОбъектДанных=Справочники.итТипоразмерыЯчеек.СоздатьЭлемент();
				НовыйЭлемент=Истина;
			иначе
				ОбъектДанных= СсылкаНаТипоразмерыЯчеек.ПолучитьОбъект();
			КонецЕсли;
		иначе
			ОбъектДанных= СсылкаНаТипоразмерыЯчеек.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектДанных,стр,,"Ссылка");
		ОбъектДанных.ОбменДанными.Отправитель=УзелОбмена;
		ОбъектДанных.Записать();
		Если НовыйЭлемент Тогда 
		ЗаписьСоотвОбмена(ОбъектДанных.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
		КонецЕсли;
ЗафиксироватьТранзакцию();
    КонецЦикла;
	
		
	КонецПроцедуры

Процедура ПолучитьЯчейки(СтруктураДанных,УзелОбмена,Отказ)
Если не СтруктураДанных.Свойство("Ячейки") Тогда
		Возврат;	
	КонецЕсли;
	СтруктураДанных.Ячейки.Колонки.Добавить("Обработано",новый ОписаниеТипов("Булево"));
	ТаблицаЯчейки=СтруктураДанных.Ячейки;
	Для Каждого стр Из ТаблицаЯчейки Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Если стр.Обработано Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		СсылкаНаОбъект=ПоискЭлементаСоответствияОбмена(стр.Ссылка,УзелОбмена);
		Если СсылкаНаОбъект=Неопределено Тогда
			Если стр.СсылкаВДругойИБ<>Неопределено Тогда 
				СсылкаВДругойИБ=Справочники.итСкладскиеЯчейки.ПолучитьСсылку(стр.СсылкаВДругойИБ);
				ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
				Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
					ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
					СсылкаНаОбъект=ОбъектСсылкиДругойИБ.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если СсылкаНаОбъект=Неопределено Тогда
				
				Ссылка=СоздатьОбъектЯчейки(стр,УзелОбмена,СтруктураДанных);
				Если Ссылка=Неопределено Тогда
					СтруктураДанных.Вставить("Статус",404);
					СтруктураДанных.Вставить("ОписаниеОшибки","Объект ячейки не был создан "+стр.Наименование);
					Отказ=Истина;
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			иначе
			Статус=Неопределено;
			ИзменитьОбъектЯчейки(стр,УзелОбмена,СтруктураДанных,СсылкаНаОбъект);
			СтруктураДанных.Свойство("Статус",Статус);
	        Если Статус=404 Тогда
	        	Отказ=Истина;
				ОтменитьТранзакцию();
		      Возврат;
	        КонецЕсли;
			КонецЕсли;
		Иначе
			Статус=Неопределено;
			ИзменитьОбъектЯчейки(стр,УзелОбмена,СтруктураДанных,СсылкаНаОбъект);
			СтруктураДанных.Свойство("Статус",Статус);
	        Если Статус=404 Тогда
	        	Отказ=Истина;
				ОтменитьТранзакцию();
		      Возврат;
	        КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
		
КонецПроцедуры

Функция СоздатьОбъектЯчейки(СтрокаДанных,УзелОбмена,СтруктураДанных)
	СсылкаОбъекта=Неопределено;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель<>ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель,УзелОбмена);
		Если Родитель=Неопределено Тогда		
			Если СтрокаДанных.РодительСсылкаВДругойИБ <>Неопределено Тогда
				СсылкаВДругойИБ=Справочники.итСкладскиеЯчейки.ПолучитьСсылку(СтрокаДанных.РодительСсылкаВДругойИБ);
				ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
				Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
					ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,СтрокаДанных.РодительСсылкаВДругойИБ,СтрокаДанных.ИмяТипаПриемника,УзелОбмена);
					Родитель=ОбъектСсылкиДругойИБ.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если Родитель=Неопределено Тогда 
				
				СтрокиСРодителем=СтруктураДанных.Ячейки.НайтиСтроки(новый Структура("Ссылка",СтрокаДанных.Родитель ));
				Если СтрокиСРодителем.Количество()>0 Тогда
					Родитель=СоздатьОбъектЯчейки(СтрокиСРодителем[0],УзелОбмена,СтруктураДанных);
				КонецЕсли;							
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Родитель=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	Если Родитель=Неопределено Тогда
		Возврат СсылкаОбъекта;
	КонецЕсли;
	
	Если СтрокаДанных.ЭтоГруппа Тогда
		НовыйОбъект=Справочники.итСкладскиеЯчейки.СоздатьГруппу();
		НовыйОбъект.Наименование=СтрокаДанных.Наименование;
		НовыйОбъект.ПометкаУдаления=СтрокаДанных.ПометкаУдаления;
	Иначе
		НовыйОбъект=Справочники.итСкладскиеЯчейки.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйОбъект,СтрокаДанных,,"Ссылка,Родитель,СкладскоеПомещение,Типоразмер,ЯчейкаНачалаРазмещения");
		Типоразмер=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Типоразмер,УзелОбмена);
		Если Типоразмер<>Неопределено Тогда
			НовыйОбъект.Типоразмер=Типоразмер;
		КонецЕсли;
		Если СтрокаДанных.ЯчейкаНачалаРазмещения<>ПустойИдентификатор() и СтрокаДанных.ЯчейкаНачалаРазмещения<>СтрокаДанных.Ссылка Тогда 
			ЯчейкаНачалаРазмещения=ПоискЭлементаСоответствияОбмена(СтрокаДанных.ЯчейкаНачалаРазмещения,УзелОбмена);
			Если ЯчейкаНачалаРазмещения=Неопределено Тогда
				Если СтрокаДанных.ЯчейкаНачалаРазмещенияСсылкаВДругойИБ<>Неопределено Тогда 
					СсылкаВДругойИБ=Справочники.итСкладскиеЯчейки.ПолучитьСсылку(СтрокаДанных.ЯчейкаНачалаРазмещенияСсылкаВДругойИБ);
					ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
					Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
						ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,СтрокаДанных.ЯчейкаНачалаРазмещенияСсылкаВДругойИБ,СтрокаДанных.ИмяТипаПриемника,УзелОбмена);
						ЯчейкаНачалаРазмещения=ОбъектСсылкиДругойИБ.Ссылка;
					КонецЕсли;
				КонецЕсли;
				Если ЯчейкаНачалаРазмещения=Неопределено Тогда 
					СтрокиСЯчейкой=СтруктураДанных.Ячейки.НайтиСтроки(новый Структура("Ссылка",СтрокаДанных.ЯчейкаНачалаРазмещения ));
					Если СтрокиСЯчейкой.Количество()>0 Тогда
						ЯчейкаНачалаРазмещения=СоздатьОбъектЯчейки(СтрокиСРодителем[0],УзелОбмена,СтруктураДанных);	
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		Если ЯчейкаНачалаРазмещения<>Неопределено Тогда 
			НовыйОбъект.ЯчейкаНачалаРазмещения=ЯчейкаНачалаРазмещения;
		КонецЕсли;
	КонецЕсли; 
	СкладскоеПомещение=ПоискЭлементаСоответствияОбмена(СтрокаДанных.СкладскоеПомещение,УзелОбмена);
	Если СкладскоеПомещение<>Неопределено Тогда
		НовыйОбъект.СкладскоеПомещение=СкладскоеПомещение;
	КонецЕсли;
	НовыйОбъект.ОбменДанными.Отправитель=УзелОбмена;
	НовыйОбъект.Родитель=Родитель;
	НовыйОбъект.Записать();
	СсылкаОбъекта=НовыйОбъект.Ссылка;
	ЗаписьСоотвОбмена(СсылкаОбъекта,СтрокаДанных.Ссылка,СтрокаДанных.ИмяТипаПриемника,УзелОбмена);
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
	Возврат СсылкаОбъекта;

	КонецФункции

Процедура ИзменитьОбъектЯчейки(СтрокаДанных,УзелОбмена,СтруктураДанных,СсылкаНаОбъект)
НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Родитель=Неопределено;
	Если СтрокаДанных.Родитель<>ПустойИдентификатор() Тогда
		Родитель=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Родитель,УзелОбмена);
		Если Родитель=Неопределено Тогда		
			Если СтрокаДанных.РодительСсылкаВДругойИБ <>Неопределено Тогда
				СсылкаВДругойИБ=Справочники.итСкладскиеЯчейки.ПолучитьСсылку(СтрокаДанных.РодительСсылкаВДругойИБ);
				ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
				Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
					ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,СтрокаДанных.РодительСсылкаВДругойИБ,СтрокаДанных.ИмяТипаПриемника,УзелОбмена);
					Родитель=ОбъектСсылкиДругойИБ.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если Родитель=Неопределено Тогда 
				
				СтрокиСРодителем=СтруктураДанных.Ячейки.НайтиСтроки(новый Структура("Ссылка",СтрокаДанных.Родитель ));
				Если СтрокиСРодителем.Количество()>0 Тогда
					Родитель=СоздатьОбъектЯчейки(СтрокиСРодителем[0],УзелОбмена,СтруктураДанных);
				КонецЕсли;							
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Родитель=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
    Если Родитель=Неопределено Тогда
    	СтруктураДанных.Вставить("Статус",404);
	    СтруктураДанных.Вставить("ОписаниеОшибки","Объект ячейки  не был изменен "+СтрокаДанных.Наименование);
    	Возврат;
	КонецЕсли;
	ОбъектИзменения=СсылкаНаОбъект.ПолучитьОбъект();
	Если СтрокаДанных.ЭтоГруппа Тогда 
		ОбъектИзменения.Наименование=СтрокаДанных.Наименование;
		ОбъектИзменения.ПометкаУдаления=СтрокаДанных.ПометкаУдаления;
		
	Иначе 
		//НовыйОбъект=Справочники.итСкладскиеЯчейки.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОбъектИзменения,СтрокаДанных,,"Ссылка,Родитель,СкладскоеПомещение,Типоразмер,ЯчейкаНачалаРазмещения");
		Типоразмер=ПоискЭлементаСоответствияОбмена(СтрокаДанных.Типоразмер,УзелОбмена);
		Если Типоразмер<>Неопределено Тогда
			ОбъектИзменения.Типоразмер=Типоразмер;
		КонецЕсли;
		Если СтрокаДанных.ЯчейкаНачалаРазмещения<>ПустойИдентификатор() и СтрокаДанных.ЯчейкаНачалаРазмещения<>СтрокаДанных.Ссылка Тогда 
			ЯчейкаНачалаРазмещения=ПоискЭлементаСоответствияОбмена(СтрокаДанных.ЯчейкаНачалаРазмещения,УзелОбмена);
			Если ЯчейкаНачалаРазмещения=Неопределено Тогда
				Если СтрокаДанных.ЯчейкаНачалаРазмещенияСсылкаВДругойИБ<>Неопределено Тогда 
					СсылкаВДругойИБ=Справочники.итСкладскиеЯчейки.ПолучитьСсылку(СтрокаДанных.ЯчейкаНачалаРазмещенияСсылкаВДругойИБ);
					ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
					Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
						ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,СтрокаДанных.ЯчейкаНачалаРазмещенияСсылкаВДругойИБ,СтрокаДанных.ИмяТипаПриемника,УзелОбмена);
						ЯчейкаНачалаРазмещения=ОбъектСсылкиДругойИБ.Ссылка;
					КонецЕсли;
				КонецЕсли;
				Если ЯчейкаНачалаРазмещения=Неопределено Тогда 
					СтрокиСЯчейкой=СтруктураДанных.Ячейки.НайтиСтроки(новый Структура("Ссылка",СтрокаДанных.ЯчейкаНачалаРазмещения ));
					Если СтрокиСЯчейкой.Количество()>0 Тогда
						ЯчейкаНачалаРазмещения=СоздатьОбъектЯчейки(СтрокиСРодителем[0],УзелОбмена,СтруктураДанных);	
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		Если ЯчейкаНачалаРазмещения<>Неопределено Тогда 
			ОбъектИзменения.ЯчейкаНачалаРазмещения=ЯчейкаНачалаРазмещения;
		КонецЕсли;
	КонецЕсли;

	СкладскоеПомещение=ПоискЭлементаСоответствияОбмена(СтрокаДанных.СкладскоеПомещение,УзелОбмена);
	Если СкладскоеПомещение<>Неопределено Тогда
		ОбъектИзменения.СкладскоеПомещение=СкладскоеПомещение;
	КонецЕсли;
	ОбъектИзменения.ОбменДанными.Отправитель=УзелОбмена;
	ОбъектИзменения.Родитель=Родитель;
	ОбъектИзменения.Записать();
	ЗафиксироватьТранзакцию();
	СтрокаДанных.Обработано=Истина;
КонецПроцедуры
	
Процедура ПолучитьДанныеПричинОтмены(СтруктураДанных,УзелОбмена,Отказ)
	Если не СтруктураДанных.Свойство("ПричиныОтменыЗадач") Тогда
		Возврат;	
	КонецЕсли;
	ПричиныОтменыЗадач=СтруктураДанных.ПричиныОтменыЗадач;
	Для Каждого стр Из ПричиныОтменыЗадач Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйЭлемент=Ложь;
		СсылкаНаОбъект=ПоискЭлементаСоответствияОбмена(стр.Ссылка,УзелОбмена);
		Если СсылкаНаОбъект=Неопределено Тогда
			Если стр.СсылкаВДругойИБ<>Неопределено Тогда 
				СсылкаВДругойИБ=Справочники.итWMS_ПричиныОтменыЗадач.ПолучитьСсылку(стр.СсылкаВДругойИБ);
				ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
				Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
					ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
					СсылкаНаОбъект=ОбъектСсылкиДругойИБ.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если СсылкаНаОбъект=Неопределено Тогда 
				ОбъектДанных=Справочники.итWMS_ПричиныОтменыЗадач.СоздатьЭлемент();
				НовыйЭлемент=Истина;
			иначе
				ОбъектДанных= СсылкаНаОбъект.ПолучитьОбъект();
			КонецЕсли;
		иначе
			ОбъектДанных= СсылкаНаОбъект.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектДанных,стр,,"Ссылка");
		ОбъектДанных.ОбменДанными.Отправитель=УзелОбмена;
		ОбъектДанных.Записать();
		Если НовыйЭлемент Тогда
			ЗаписьСоотвОбмена(ОбъектДанных.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
		КонецЕсли;
ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьАссортиментныйУчасток(СтруктураДанных,УзелОбмена,Отказ)
	Если не СтруктураДанных.Свойство("АссортиментныеУчасткиСклада") Тогда
		Возврат;	
	КонецЕсли;
	АссортиментныеУчасткиСклада=СтруктураДанных.АссортиментныеУчасткиСклада;
	Для Каждого стр Из АссортиментныеУчасткиСклада Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйЭлемент=Ложь;
		СсылкаНаОбъект=ПоискЭлементаСоответствияОбмена(стр.Ссылка,УзелОбмена);
		Если СсылкаНаОбъект=Неопределено Тогда
			Если стр.СсылкаВДругойИБ<>Неопределено Тогда 
				СсылкаВДругойИБ=Справочники.ит_WMS_АссортиментныеУчасткиСклада.ПолучитьСсылку(стр.СсылкаВДругойИБ);
				ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
				Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
					ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
					СсылкаНаОбъект=ОбъектСсылкиДругойИБ.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если СсылкаНаОбъект=Неопределено Тогда 
				ОбъектДанных=Справочники.ит_WMS_АссортиментныеУчасткиСклада.СоздатьЭлемент();
				НовыйЭлемент=Истина;
			иначе
				ОбъектДанных= СсылкаНаОбъект.ПолучитьОбъект();
			КонецЕсли;
		иначе
			ОбъектДанных= СсылкаНаОбъект.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектДанных,стр,,"Ссылка");
		СоставЯчеек=ОбъектДанных.СоставЯчеек;
		СоставЯчеек.Очистить();
		Для Каждого СтрокаТч из стр.ТЧ Цикл 
			Ячейка= Неопределено;
			Ячейка=ПоискЭлементаСоответствияОбмена(СтрокаТч.Ячейка,УзелОбмена);
			Если Ячейка=Неопределено Тогда
				Если СтрокаТч.СсылкаВДругойИБ<>Неопределено Тогда 
					СсылкаВДругойИБ=Справочники.итСкладскиеЯчейки.ПолучитьСсылку(СтрокаТч.СсылкаВДругойИБ);
					ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
					Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
						ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,СтрокаТч.Ячейка,СтрокаТч.ИмяТипаПриемника,УзелОбмена);
						Ячейка=ОбъектСсылкиДругойИБ.Ссылка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			Если Ячейка<>Неопределено Тогда 
				НоваяСтрока=СоставЯчеек.Добавить();
				НоваяСтрока.Ячейка=Ячейка;
			КонецЕсли;		
		КонецЦикла;
		ОбъектДанных.ОбменДанными.Отправитель=УзелОбмена;
		Если не НовыйЭлемент Тогда 
			ОбъектДанных.ОбменДанными.Загрузка=Истина;
		КонецЕсли;	
		ОбъектДанных.Записать();
		Если НовыйЭлемент Тогда
			ЗаписьСоотвОбмена(ОбъектДанных.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
		КонецЕсли;
ЗафиксироватьТранзакцию();
	КонецЦикла;

	КонецПроцедуры
	
#КонецОбласти

#Область ПолучениеДокументов

Процедура ПолучитьДанныеДокументов(СтруктураДанных,УзелОбмена,Отказ)
	ПолучитьДокументыКакКорректировкуРегистров(СтруктураДанных,УзелОбмена,Отказ);
	ПолучитьДокументыКакКорректировкуРегистровКА11(СтруктураДанных,УзелОбмена,Отказ);

КонецПроцедуры

Процедура ПолучитьДокументыКакКорректировкуРегистров(СтруктураДанных,УзелОбмена,Отказ)
	Если не СтруктураДанных.Свойство("Документы") Тогда
		Возврат;	
	КонецЕсли;
	ДанныеДокументов=СтруктураДанных.Документы;
	Для Каждого стр Из ДанныеДокументов Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйЭлемент=Ложь;
		СсылкаНаОбъект=ПоискЭлементаСоответствияОбмена(стр.Ссылка,УзелОбмена);
        Если СсылкаНаОбъект=Неопределено Тогда
			Если стр.СсылкаВДругойИБ<>Неопределено Тогда 
				СсылкаВДругойИБ=Документы.КорректировкаЗаписейРегистров.ПолучитьСсылку(стр.СсылкаВДругойИБ);
				ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
				Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
					ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
					СсылкаНаОбъект=ОбъектСсылкиДругойИБ.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если СсылкаНаОбъект=Неопределено Тогда 
				ОбъектДанных=Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
				НовыйЭлемент=Истина;
			иначе
				ОбъектДанных= СсылкаНаОбъект.ПолучитьОбъект();
			КонецЕсли;
		иначе
			ОбъектДанных= СсылкаНаОбъект.ПолучитьОбъект();
		КонецЕсли;
		Организация=Неопределено;
		Если стр.Движения.Количество()>0 Тогда 
			Организация=ПоискЭлементаСоответствияОбмена(стр.Движения[0].Организация,УзелОбмена.СсылкаНаУзелУпрДанных);
		КонецЕсли;
		Если Организация<>Неопределено Тогда 
			ОбъектДанных.Организация=Организация;
		КонецЕсли;
		Если не ОбъектДанных.Ссылка.Пустая() Тогда
			ОчиститьДвиженияДокумента(ОбъектДанных);
		КонецЕсли;
		ОбъектДанных.Дата=стр.Дата;
		ОбъектДанных.ПометкаУдаления=стр.ПометкаУдаления;
		ОбъектДанных.НомерИсточника=стр.НомерИсточника;
		ОбъектДанных.Записать();
		Если НовыйЭлемент Тогда 
			ЗаписьСоотвОбмена(ОбъектДанных.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
		КонецЕсли;
		ЗаписатьДвиженияДокументаИтТоварыВЯчейках(стр.Движения,ОбъектДанных.Ссылка,СтруктураДанных,УзелОбмена,Отказ);
		Если Отказ Тогда 
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьДвиженияДокумента(ДокОбъект)
	
Для Каждого Движение ИЗ ДокОбъект.Движения Цикл

        Если Движение.Количество() > 0 Тогда
            Точка = Найти(Строка(Движение), ".");
            ВидРегистра = Лев(Строка(Движение), Точка - 13);
            РегистрИмя = СокрП(Сред(Строка(Движение), Точка + 1));
            Если ВидРегистра = "РегистрНакопления" Тогда
                НаборЗаписей = РегистрыНакопления[РегистрИмя].СоздатьНаборЗаписей();            
            КонецЕсли;
            НаборЗаписей.Отбор.Регистратор.Установить(ДокОбъект.Ссылка);            
        Иначе
            НаборЗаписей = Движение;
        КонецЕсли;
        Попытка
            НаборЗаписей.Записать();
        Исключение
            Сообщить(ОписаниеОшибки());
        КонецПопытки;
	КонецЦикла;
	
	КонецПроцедуры

Процедура ЗаписатьДвиженияДокументаИтТоварыВЯчейках(ТаблицаДвижений,Документ,СтруктураДанных,УзелОбмена,Отказ)
	НаборЗаписей=РегистрыНакопления.итТоварыВЯчейках.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.Регистратор.Установить(Документ);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Для Каждого стр из ТаблицаДвижений Цикл 
	НоваяЗапись=НаборЗаписей.Добавить();
	НоваяЗапись.Период=стр.Период;
	НоваяЗапись.Регистратор=Документ;
	НоваяЗапись.Активность=стр.Активность;
	НоваяЗапись.ВидДвижения=стр.ВидДвижения;
    НоваяЗапись.Организация=ПоискЭлементаСоответствияОбмена(стр.Организация,УзелОбмена.СсылкаНаУзелУпрДанных);
	НоваяЗапись.Склад=ПоискЭлементаСоответствияОбмена(стр.Склад,УзелОбмена.СсылкаНаУзелУпрДанных);
    НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
	Ячейка=ПоискЭлементаСоответствияОбмена(стр.Ячейка,УзелОбмена);
	Если Ячейка=Неопределено Тогда
		Если стр.ЯчейкаСсылкаВДругойИБ<>Неопределено Тогда 
			СсылкаВДругойИБ=Справочники.итСкладскиеЯчейки.ПолучитьСсылку(стр.ЯчейкаСсылкаВДругойИБ);
			ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
			Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
				ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,стр.ЯчейкаСсылкаВДругойИБ,стр.ЯчейкаИмяТипаПриемника,УзелОбмена);
				Ячейка=ОбъектСсылкиДругойИБ.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Ячейка=Неопределено Тогда 
		Если стр.Ячейка<>ПустойИдентификатор() Тогда
			Отказ=Истина;
			СтруктураДанных.Вставить("Статус",404);
			СтруктураДанных.Вставить("ОписаниеОшибки","Ячейка не найдена");
			Отказ=Истина;	
			Возврат;
		КонецЕсли;
	КонецЕсли;
	НоваяЗапись.Ячейка=Ячейка;
    НоваяЗапись.Номенклатура=ПоискЭлементаСоответствияОбмена(стр.Номенклатура,УзелОбмена.СсылкаНаУзелУпрДанных);
    НоваяЗапись.Характеристика=ПоискЭлементаСоответствияОбмена(стр.Характеристика,УзелОбмена.СсылкаНаУзелУпрДанных);
	СерияНоменклатуры=ПоискЭлементаСоответствияОбмена(стр.СерияНоменклатуры,УзелОбмена.СсылкаНаУзелУпрДанных);
	Если СерияНоменклатуры=Неопределено Тогда
		Если стр.СерияНоменклатурыВДругойИБ<>Неопределено Тогда 
			СсылкаВДругойИБ=Справочники.итСкладскиеЯчейки.ПолучитьСсылку(стр.СерияНоменклатурыВДругойИБ);
			ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
			Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
				ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,стр.СерияНоменклатуры,стр.СерияНоменклатурыИмяТипаПриемника,УзелОбмена.СсылкаНаУзелУпрДанных);
				СерияНоменклатуры=ОбъектСсылкиДругойИБ.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если  СерияНоменклатуры =Неопределено и  стр.СерияНоменклатуры<>ПустойИдентификатор() Тогда 
		ЗаписьЖурналаРегистрации("ОшибкаПолученияСерии",УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.СерииНоменклатуры,,"Ошибка получения данных серии по идентифкатору "+ НоваяЗапись.ИдентификаторУпаковки+" и Номенклатуры"+Строка(НоваяЗапись.Номенклатура));
		СерияНм=Справочники.СерииНоменклатуры.СоздатьЭлемент();
		СерияНм.Наименование="НеопределеннаяСерия";
		СерияНм.Владелец=НоваяЗапись.Номенклатура;
		СерияНм.ОбменДанными.Отправитель=УзелОбмена.СсылкаНаУзелУпрДанных;
		СерияНм.Записать();
		ЗаписьСоотвОбмена(СерияНм.Ссылка,стр.СерияНоменклатуры,стр.СерияНоменклатурыИмяТипаПриемника,УзелОбмена.СсылкаНаУзелУпрДанных);
		СерияНоменклатуры=СерияНм.Ссылка;
    КонецЕсли;
	Если СерияНоменклатуры =Неопределено Тогда 
		Если стр.СерияНоменклатуры<>ПустойИдентификатор() Тогда
			Отказ=Истина;
			СтруктураДанных.Вставить("Статус",404);
			СтруктураДанных.Вставить("ОписаниеОшибки","Серия не найдена");
			Отказ=Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
    НоваяЗапись.СерияНоменклатуры=СерияНоменклатуры;
    НоваяЗапись.ДатаРозлива=стр.ДатаРозлива;
    НоваяЗапись.Качество=ПоискЭлементаСоответствияОбмена(стр.Качество,УзелОбмена.СсылкаНаУзелУпрДанных);
    НоваяЗапись.Количество=стр.Количество;
	НоваяЗапись.КОтбору=стр.КОтбору;
	НоваяЗапись.КРазмещению=стр.КРазмещению;
КонецЦикла;
НаборЗаписей.Записать();
		
КонецПроцедуры

Процедура ПолучитьДокументыКакКорректировкуРегистровКА11(СтруктураДанных,УзелОбмена,Отказ)
	
Если не СтруктураДанных.Свойство("ДокументыКА11") Тогда
		Возврат;	
	КонецЕсли;
	ДанныеДокументов=СтруктураДанных.ДокументыКА11;
	Для Каждого стр Из ДанныеДокументов Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НовыйЭлемент=Ложь;
		СсылкаНаОбъект=ПоискЭлементаСоответствияОбмена(стр.Ссылка,УзелОбмена);
        Если СсылкаНаОбъект=Неопределено Тогда
			Если стр.СсылкаВДругойИБ<>Неопределено Тогда 
				СсылкаВДругойИБ=Документы.КорректировкаЗаписейРегистров.ПолучитьСсылку(стр.СсылкаВДругойИБ);
				ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
				Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
					ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
					СсылкаНаОбъект=ОбъектСсылкиДругойИБ.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если СсылкаНаОбъект=Неопределено Тогда 
				ОбъектДанных=Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
				НовыйЭлемент=Истина;
			иначе
				ОбъектДанных= СсылкаНаОбъект.ПолучитьОбъект();
			КонецЕсли;
		иначе
			ОбъектДанных= СсылкаНаОбъект.ПолучитьОбъект();
		КонецЕсли;
		Если не ОбъектДанных.Ссылка.Пустая() Тогда
			ОчиститьДвиженияДокумента(ОбъектДанных);
		КонецЕсли;
		ОбъектДанных.ПометкаУдаления=стр.ПометкаУдаления;
		ОбъектДанных.Дата=стр.Дата;
		ОбъектДанных.НомерИсточника=стр.НомерИсточника;
		ОбъектДанных.Записать();
		Если НовыйЭлемент Тогда 
			ЗаписьСоотвОбмена(ОбъектДанных.Ссылка,стр.Ссылка,стр.ИмяТипаПриемника,УзелОбмена);
		КонецЕсли;
	  ЗаписатьДвиженияДокументаИтТоварыВЯчейкахКА11(стр.Движения,ОбъектДанных.Ссылка,СтруктураДанных,УзелОбмена,Отказ);
	  ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	
КонецПроцедуры


Процедура ЗаписатьДвиженияДокументаКА11(ТаблицаДвижений,Документ,СтруктураДанных,УзелОбмена,Отказ)
	ЗаписатьДвиженияДокументаИтТоварыВЯчейкахКА11(ТаблицаДвижений,Документ,СтруктураДанных,УзелОбмена,Отказ);
	
КонецПроцедуры

Процедура ЗаписатьДвиженияДокументаИтТоварыВЯчейкахКА11(ТаблицаДвижений,Документ,СтруктураДанных,УзелОбмена,Отказ);
	НаборЗаписей=РегистрыНакопления.итТоварыВЯчейках.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.Регистратор.Установить(Документ);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Для Каждого стр из ТаблицаДвижений Цикл 
		Если стр.Количество=0 Тогда 
			Продолжить;
		КонецЕсли;
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.Период=стр.Период;
		НоваяЗапись.Регистратор=Документ;
		НоваяЗапись.Активность=стр.Активность;
		НоваяЗапись.ВидДвижения=стр.ВидДвижения;
		НоваяЗапись.Организация=ПроверкаНеопределеноСсылки(стр.Организация,Справочники.Организации.ПолучитьСсылку(стр.Организация));
		НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
		Ячейка=ПоискЭлементаСоответствияОбмена(стр.Ячейка,УзелОбмена);
		Если Ячейка=Неопределено Тогда
			Если стр.ЯчейкаСсылкаВДругойИБ<>Неопределено Тогда 
				СсылкаВДругойИБ=Справочники.итСкладскиеЯчейки.ПолучитьСсылку(стр.ЯчейкаСсылкаВДругойИБ);
				ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
				Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
					ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,стр.ЯчейкаСсылкаВДругойИБ,стр.ЯчейкаИмяТипаПриемника,УзелОбмена);
					Ячейка=ОбъектСсылкиДругойИБ.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НоваяЗапись.Ячейка=Ячейка;
		НоваяЗапись.Номенклатура=ПроверкаНеопределеноСсылки(стр.Номенклатура,Справочники.Номенклатура.ПолучитьСсылку(стр.Номенклатура));
		НоваяЗапись.Характеристика=ПроверкаНеопределеноСсылки(стр.Характеристика,Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(стр.Характеристика));
		СерияНоменклатуры=ПоискЭлементаСоответствияОбмена(стр.СерияНоменклатуры,УзелОбмена.СсылкаНаУзелУпрДанных);
		Если СерияНоменклатуры=Неопределено Тогда
			Если стр.СерияНоменклатурыВДругойИБ<>Неопределено Тогда 
				СсылкаВДругойИБ=Справочники.итСкладскиеЯчейки.ПолучитьСсылку(стр.СерияНоменклатурыВДругойИБ);
				ОбъектСсылкиДругойИБ=СсылкаВДругойИБ.ПолучитьОбъект();
				Если  ОбъектСсылкиДругойИБ<>Неопределено Тогда 
					ЗаписьСоотвОбмена(ОбъектСсылкиДругойИБ.Ссылка,стр.СерияНоменклатуры,стр.СерияНоменклатурыИмяТипаПриемника,УзелОбмена.СсылкаНаУзелУпрДанных);
					СерияНоменклатуры=ОбъектСсылкиДругойИБ.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НоваяЗапись.СерияНоменклатуры=СерияНоменклатуры;
		НоваяЗапись.ДатаРозлива=стр.ДатаРозлива;
		НоваяЗапись.Качество=ПроверкаНеопределеноСсылки(стр.Качество,Справочники.Качество.ПолучитьСсылку(стр.Качество));
		НоваяЗапись.Количество=стр.Количество;
	КонецЦикла;
	НаборЗаписей.Записать();
		

	КонецПроцедуры

#КонецОбласти


Процедура ЗаписьСоотвОбмена(Знач СсылкаБазы, Знач СсылкаВИточнике, Знач ИмяТипаПриемника, Знач УзелОбмена)
	
	Перем МенеджерЗаписиСоотвОбмена;
	МенеджерЗаписиСоотвОбмена=РегистрыСведений.СоответствиеОбъектовДляОбмена.СоздатьМенеджерЗаписи();
	МенеджерЗаписиСоотвОбмена.УзелОбмена=УзелОбмена;
	МенеджерЗаписиСоотвОбмена.СобственнаяСсылка=СсылкаБазы;
	МенеджерЗаписиСоотвОбмена.СсылкаВДругойИБ=Строка(СсылкаВИточнике);
	МенеджерЗаписиСоотвОбмена.ИмяТипаПриемника=ИмяТипаПриемника;
	МенеджерЗаписиСоотвОбмена.Записать(Истина);

КонецПроцедуры

Функция ПроверкаНеопределеноСсылки(Значение,ЗначениеДействия)
	Если Значение=Неопределено Тогда 
		ТипЗначения = ТипЗнч(ЗначениеДействия);
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			Возврат  Справочники[ЗначениеДействия.Метаданные().имя].ПустаяСсылка(); 
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			Возврат  Документы[ЗначениеДействия.Метаданные().имя].ПустаяСсылка(); 
		КонецЕсли;		
	иначе
		Возврат ЗначениеДействия;
	КонецЕсли;	
	Возврат Неопределено;
	КонецФункции

#КонецОбласти





#Область КонвертацияДанных
Функция ДесериализаторДанных(Данные)Экспорт 
	ЧтениеданныхXML=новый ЧтениеXML;
	ЧтениеданныхXML.УстановитьСтроку(Данные);
	Данные= СериализаторXDTO.ПрочитатьXML(ЧтениеданныхXML);
	ЧтениеданныхXML.Закрыть();
	Возврат Данные;
КонецФункции
Функция  СериализаторДанных(Данные)Экспорт
	ДеревоДанныхXDTO=СериализаторXDTO.ЗаписатьXDTO(Данные);
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,ДеревоДанныхXDTO);
	Возврат ЗаписьXML.Закрыть();
КонецФункции
#КонецОбласти



#Область ФормированиеПараметровПодключенияWeb
Функция СформироватьСтрокуПодключения(Узел)  
	Параметры=СформироватьПараметрыПодключения(Узел);
	IPАдресСервера=Параметры.IPАдресСервера;
	ИмяПубликацииБазы=Параметры.ИмяПубликацииБазы;
	URLПространствоВебСервиса=Параметры.URLПространствоВебСервиса;	
	СтрокаWSОпределения = "http://"+СокрЛП(IPАдресСервера)+"/"+СокрЛП(ИмяПубликацииБазы)+"/ws/"+СокрЛП(URLПространствоВебСервиса)+".1cws?wsdl";
	Возврат СтрокаWSОпределения;
КонецФункции
Функция СформироватьПараметрыПодключения(Узел)
	IPАдресСервера=СокрЛП(Узел.IPАдресСервера);
	ИмяПубликацииБазы=СокрЛП(Узел.ИмяПубликацииБазы);
	URLПространствоВебСервиса=СокрЛП(Узел.URLПространствоВебСервиса);
	Структура=новый Структура("IPАдресСервера,ИмяПубликацииБазы,URLПространствоВебСервиса",IPАдресСервера,ИмяПубликацииБазы,URLПространствоВебСервиса);
	Возврат Структура
КонецФункции
Функция СформироватьПараметрыПроксиСервера(Узел)  
	URLПространствоВебСервиса=Узел.URLПространствоВебСервиса;
	Структура=новый Структура;
	Структура.Вставить("URLПространствоИменСервиса",СокрЛП(URLПространствоВебСервиса));
	Структура.Вставить("ИмяСервиса",СокрЛП(URLПространствоВебСервиса));
	Структура.Вставить("ИмяТочкиПодключения",СокрЛП(URLПространствоВебСервиса)+"Soap");
	
	Возврат Структура
КонецФункции
#КонецОбласти



#Область СлужебныеФункцииИпроцедуры

Функция ПолучитьУзелОбмена(СсылкаВДругойИБ)

	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствиеОбъектовДляОбмена.УзелОбмена КАК УзелОбмена
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
		|ГДЕ
		|	СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ = ПОДСТРОКА(&СсылкаВДругойИБ, 1, 100)
		|	И СоответствиеОбъектовДляОбмена.СобственнаяСсылка = НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("СсылкаВДругойИБ", Строка(СсылкаВДругойИБ));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
         Возврат ВыборкаДетальныеЗаписи.УзелОбмена;
	КонецЦикла;
         Возврат Неопределено;
КонецФункции

Функция ПоискЭлементаСоответствияОбмена(СсылкаВДругойИБ,УзелОбмена=Неопределено)
	ТаблицаДляБлокировки=Новый ТаблицаЗначений;
	ТаблицаДляБлокировки.Колонки.Добавить("СсылкаВДругойИБ");
	ТаблицаДляБлокировки.Колонки.Добавить("УзелОбмена");
	НоваяСтрока=ТаблицаДляБлокировки.Добавить();
	НоваяСтрока.СсылкаВДругойИБ=Строка(СсылкаВДругойИБ);
	НоваяСтрока.УзелОбмена=УзелОбмена;
	
	БлокировкаДанных=новый БлокировкаДанных;
	ЭлементБлокировки=БлокировкаДанных.Добавить("РегистрСведений.СоответствиеОбъектовДляОбмена");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных=ТаблицаДляБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СсылкаВДругойИБ","СсылкаВДругойИБ");
	Если УзелОбмена<>Неопределено Тогда 
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("УзелОбмена","УзелОбмена");
	КонецЕсли;
	БлокировкаДанных.Заблокировать();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствиеОбъектовДляОбмена.СобственнаяСсылка КАК СобственнаяСсылка
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &УзелОбмена = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ СоответствиеОбъектовДляОбмена.УзелОбмена = &УзелОбмена
		|		КОНЕЦ
		|	И СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ = ПОДСТРОКА(&СсылкаВДругойИБ, 1, 100)";
	
	Запрос.УстановитьПараметр("СсылкаВДругойИБ", Строка(СсылкаВДругойИБ));
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СобственнаяСсылка;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция ПоискЭлементаСоответствияОбменаДругойИБ(СобственнаяСсылка,УзелОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ КАК СсылкаВДругойИБ
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
		|ГДЕ
		|	СоответствиеОбъектовДляОбмена.УзелОбмена = &УзелОбмена
		|	И СоответствиеОбъектовДляОбмена.СобственнаяСсылка = &СобственнаяСсылка";
	
	Запрос.УстановитьПараметр("СобственнаяСсылка", СобственнаяСсылка);
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат новый УникальныйИдентификатор(ВыборкаДетальныеЗаписи.СсылкаВДругойИБ);
	КонецЦикла;
	Возврат Неопределено;
КонецФункции


Функция ПолучитьСписокПлановОбмена() Экспорт
	СоответсвиеДанных=новый Соответствие();
	Для Каждого ЭлементПлана Из Метаданные.ПланыОбмена Цикл
		Выборка=ПланыОбмена[ЭлементПлана.имя].Выбрать();
		МассивВыборки=новый Массив();
		Пока Выборка.Следующий() Цикл
			СтруктураДанных=новый Структура();
			СтруктураДанных.Вставить("Имя",Выборка.Наименование);
			СтруктураДанных.Вставить("Ссылка",Выборка.Ссылка.УникальныйИдентификатор());
			СтруктураДанных.Вставить("Тип",Выборка.Ссылка.Метаданные().ПолноеИмя());
			МассивВыборки.Добавить(СтруктураДанных);
		КонецЦикла;
		СоответсвиеДанных.Вставить(ЭлементПлана.Имя,МассивВыборки);
	КонецЦикла;
	Возврат СоответсвиеДанных;
КонецФункции

Функция ПустойИдентификатор()
	Возврат новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
КонецФункции

Функция ЗаписатьДанныеСоотвПлановОбмена(СтруктураДанных) Экспорт
СсылкаНаПланОбмена=ПланыОбмена[СтруктураДанных.Имя].ПолучитьСсылку(СтруктураДанных.Ссылка);
НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
НаборЗаписей=РегистрыСведений.СоответствиеОбъектовДляОбмена.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.УзелОбмена.Установить(СсылкаНаПланОбмена);
НаборЗаписей.Отбор.СобственнаяСсылка.Установить(Неопределено);
НаборЗаписей.Прочитать();
НаборЗаписей.Очистить();
НаборЗаписей.Записать();
НоваяЗапись=НаборЗаписей.Добавить();
НоваяЗапись.УзелОбмена=СсылкаНаПланОбмена;
НоваяЗапись.СсылкаВДругойИБ=СтруктураДанных.СсылкаИсточник;
НоваяЗапись.ИмяТипаПриемника=СтруктураДанных.ИмяТипаПриемника;
НаборЗаписей.Записать();
ЗафиксироватьТранзакцию();
СтруктураОтвета=новый Структура("ДанныеЗаписаны",Истина);
Возврат СтруктураОтвета;
КонецФункции



#КонецОбласти