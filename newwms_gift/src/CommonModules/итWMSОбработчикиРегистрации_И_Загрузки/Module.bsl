Процедура ОбработчикРегистрации_ПолученияДанных(ДанныеОбработчика)Экспорт 
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТСДИД")   тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипПолученияДанных") тогда
		Возврат
	КонецЕсли;
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючПолученияДанных") тогда
		Возврат
	КонецЕсли;  
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипЗадачи")   тогда
		Возврат
	КонецЕсли;
	Если ДанныеОбработчика.ТипПолученияДанных="Документ" тогда
		РегистрацияВсехЗадачДокументаНаТСД(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.ТипПолученияДанных="Задача" тогда
		РегистрацияЗадачиНаТСД(ДанныеОбработчика);
	КонецЕсли;
	Если ДанныеОбработчика.Свойство("Статус") тогда
		Если ДанныеОбработчика.Статус=404 тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
	ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика);
КонецПроцедуры

Процедура РегистрацияВсехЗадачДокументаНаТСД(ДанныеОбработчика) 
	ТСД=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокаОснования.ДокументОснование,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА итWMSЗадачиТСД.ТСД = ЗНАЧЕНИЕ(Справочник.итWMSСправочникТСД.ПустаяСсылка)
	|				ТОГДА 0
	|			КОГДА итWMSЗадачиТСД.ТСД = &ТСД
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ТригерДоступности
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК СтрокаОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|		ПО СтрокаОснования.ДокументОснование = итWMSЗадачиТСД.ДокументОснование
	|ГДЕ
	|	СтрокаОснования.ИдЗадачи = &ИдЗадачи
	|	И итWMSЗадачиТСД.ТипЗадачи = &ТипЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокаОснования.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ДокументОснование,
	|	итWMSЗадачиТСД.ИдЗадачи,
	|	МАКСИМУМ(ВТ.ТригерДоступности) КАК ТригерДоступности
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|		ПО ВТ.ДокументОснование = итWMSЗадачиТСД.ДокументОснование
	|ГДЕ
	|	итWMSЗадачиТСД.ТипЗадачи = &ТипЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ДокументОснование,
	|	итWMSЗадачиТСД.ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ДанныеОбработчика.КлючПолученияДанных);
	Запрос.УстановитьПараметр("ТипЗадачи", ДанныеОбработчика.ТипЗадачи);
	Запрос.УстановитьПараметр("ТСД", ТСД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки"," Нет Данных");
		Возврат
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если   ВыборкаДетальныеЗаписи.Следующий() тогда
		Если ВыборкаДетальныеЗаписи.ТригерДоступности=1 тогда
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки", Строка(ВыборкаДетальныеЗаписи.ДокументОснование) +" уже в обработке на другом ТСД");
			Возврат;			
		КонецЕсли;
	КонецЕсли;
	ДокументОснование=ВыборкаДетальныеЗаписи.ДокументОснование;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",ДокументОснование);
	БлокировкаДанных.Заблокировать();
	
	ВыборкаДетальныеЗаписи.Сбросить();
	ПустойТСД=Справочники.итWMSСправочникТСД.ПустаяСсылка();
	Пока ВыборкаДетальныеЗаписи.Следующий() цикл
		НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдЗадачи.Установить(ВыборкаДетальныеЗаписи.ИдЗадачи);
		НаборЗаписей.Прочитать();
		для Каждого стр из НаборЗаписей цикл
			Если стр.ТСД = ПустойТСД или стр.ТСД=ТСД  Тогда 
			стр.ТСД=ТСД;
		иначе
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки", Строка(ВыборкаДетальныеЗаписи.ДокументОснование) +" уже в обработке на другом ТСД");
			Возврат
		КонецЕсли;	
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	Если ДокументОснование.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда
		ОбработчикИзмененияСтатусаДокумента(ДокументОснование);
	КонецЕсли;	
	ЗафиксироватьТранзакцию();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
Процедура РегистрацияЗадачиНаТСД(ДанныеОбработчика)
	ТСД=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА итWMSЗадачиТСД.ТСД = ЗНАЧЕНИЕ(Справочник.итWMSСправочникТСД.ПустаяСсылка)
	|				ТОГДА 0
	|			КОГДА итWMSЗадачиТСД.ТСД = &ТСД
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ТригерДоступности,
	|	итWMSЗадачиТСД.ДокументОснование
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ИдЗадачи = &ИдЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSЗадачиТСД.ДокументОснование";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ДанныеОбработчика.КлючПолученияДанных);
	Запрос.УстановитьПараметр("ТСД", ТСД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки"," Нет Данных");
		Возврат
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    ПустойТСД=Справочники.итWMSСправочникТСД.ПустаяСсылка();	
	Если   ВыборкаДетальныеЗаписи.Следующий() тогда
		Если ВыборкаДетальныеЗаписи.ТригерДоступности=1 тогда
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки", Строка(ВыборкаДетальныеЗаписи.ДокументОснование) +" уже в обработке на другом ТСД");
			Возврат;			
		КонецЕсли;
	КонецЕсли;
	
	ДокументОснование=ВыборкаДетальныеЗаписи.ДокументОснование;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ИдЗадачи",ДанныеОбработчика.КлючПолученияДанных);
	БлокировкаДанных.Заблокировать();
	
	
	НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ДанныеОбработчика.КлючПолученияДанных);
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей цикл
		Если стр.ТСД = ПустойТСД или стр.ТСД=ТСД  Тогда
			стр.ТСД=ТСД;
		иначе
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки", Строка(ВыборкаДетальныеЗаписи.ДокументОснование) +" уже в обработке на другом ТСД");
			Возврат
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
	
	Если ДокументОснование.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда
		ОбработчикИзмененияСтатусаДокумента(ДокументОснование);
	КонецЕсли;	
	ЗафиксироватьТранзакцию();
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Процедура ОбработчикИзмененияСтатусаДокумента(Знач ДокументОснование) Экспорт 
	
	Перем ОбъектДокумента;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.итWMSРазмещение")
		или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.итWMSПеремещение") 
		или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.итWMSНаборка") 
		или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.итWMSПриемка") 
		или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.итWMSПроверка") 
		или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.итWMSОтгрузка")Тогда 
		ОбъектДокумента=ДокументОснование.ПолучитьОбъект();
		ОбъектДокумента.ОбменДанными.Загрузка=Истина;
		ОбъектДокумента.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен;
		ОбъектДокумента.Записать();
	Иначе 
		ОбъектДокумента=ДокументОснование.ПолучитьОбъект();
		ОбъектДокумента.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен;
		ОбъектДокумента.Записать();
	КонецЕсли;

КонецПроцедуры


Процедура ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика) Экспорт 
	ТСД=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//ЗаписьСообщения=ПланыОбмена.СоздатьЗаписьСообщения();
	НомерСообщения=итWMSСлужебныеПроцедурыИФункции.ПолучитьПоследнийНомерИзмененийНаУзле(ТСД.УзелПланаОбмена);
	ПланыОбмена.ВыбратьИзменения(ТСД.УзелПланаОбмена,НомерСообщения+1);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСДИзменения.Узел,
	|	итWMSЗадачиТСДИзменения.НомерСообщения КАК НомерСообщения,
	|	итWMSЗадачиТСДИзменения.ТСД,
	|	итWMSЗадачиТСДИзменения.ДокументОснование КАК ДокументОснование,
	|	итWMSЗадачиТСДИзменения.ТипЗадачи КАК ТипЗадачи,
	|	итWMSЗадачиТСДИзменения.ИдЗадачи,
	|	итWMSЗадачиТСДИзменения.ИдЗадачиРодителя
	|ПОМЕСТИТЬ ТаблицаИзменений
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД.Изменения КАК итWMSЗадачиТСДИзменения
	|ГДЕ
	|	итWMSЗадачиТСДИзменения.Узел = &Узел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзменений.Узел,
	|	МАКСИМУМ(ТаблицаИзменений.НомерСообщения) КАК НомерСообщения,
	|	ТаблицаИзменений.ТСД,
	|	ТаблицаИзменений.ДокументОснование,
	|	ТаблицаИзменений.ТипЗадачи,
	|	ТаблицаИзменений.ИдЗадачи,
	|	ТаблицаИзменений.ИдЗадачиРодителя
	|ПОМЕСТИТЬ МаксимальныйНомерИзмененияВРазрезе
	|ИЗ
	|	ТаблицаИзменений КАК ТаблицаИзменений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.Узел,
	|	ТаблицаИзменений.ТСД,
	|	ТаблицаИзменений.ДокументОснование,
	|	ТаблицаИзменений.ТипЗадачи,
	|	ТаблицаИзменений.ИдЗадачи,
	|	ТаблицаИзменений.ИдЗадачиРодителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныйНомерИзмененияВРазрезе.Узел,
	|	МаксимальныйНомерИзмененияВРазрезе.НомерСообщения,
	|	МаксимальныйНомерИзмененияВРазрезе.ТСД,
	|	МаксимальныйНомерИзмененияВРазрезе.ДокументОснование,
	|	МаксимальныйНомерИзмененияВРазрезе.ТипЗадачи,
	|	МаксимальныйНомерИзмененияВРазрезе.ИдЗадачи,
	|	МаксимальныйНомерИзмененияВРазрезе.ИдЗадачиРодителя
	|ПОМЕСТИТЬ ВтИтговыеИзменения
	|ИЗ
	|	МаксимальныйНомерИзмененияВРазрезе КАК МаксимальныйНомерИзмененияВРазрезе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИзменений КАК ТаблицаИзменений
	|		ПО МаксимальныйНомерИзмененияВРазрезе.Узел = ТаблицаИзменений.Узел
	|			И МаксимальныйНомерИзмененияВРазрезе.ТСД = ТаблицаИзменений.ТСД
	|			И МаксимальныйНомерИзмененияВРазрезе.НомерСообщения = ТаблицаИзменений.НомерСообщения
	|			И МаксимальныйНомерИзмененияВРазрезе.ТипЗадачи = ТаблицаИзменений.ТипЗадачи
	|			И МаксимальныйНомерИзмененияВРазрезе.ИдЗадачи = ТаблицаИзменений.ИдЗадачи
	|			И МаксимальныйНомерИзмененияВРазрезе.ИдЗадачиРодителя = ТаблицаИзменений.ИдЗадачиРодителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзменений.Узел,
	|	МАКСИМУМ(ТаблицаИзменений.НомерСообщения) КАК МаксимальныйНомерСообщений
	|ПОМЕСТИТЬ МаксимальныйНомерСообщения
	|ИЗ
	|	ТаблицаИзменений КАК ТаблицаИзменений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.Узел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтговыеИзменения.Узел,
	|	ВтИтговыеИзменения.НомерСообщения КАК НомерСообщения,
	|	ВтИтговыеИзменения.ТСД,
	|	ВтИтговыеИзменения.ДокументОснование КАК ДокументОснование,
	|	ВтИтговыеИзменения.ТипЗадачи КАК ТипЗадачи,
	|	ВтИтговыеИзменения.ИдЗадачи,
	|	ВтИтговыеИзменения.ИдЗадачиРодителя,
	|	МаксимальныйНомерСообщения.МаксимальныйНомерСообщений КАК МаксимальныйНомерСообщений
	|ИЗ
	|	ВтИтговыеИзменения КАК ВтИтговыеИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныйНомерСообщения КАК МаксимальныйНомерСообщения
	|		ПО ВтИтговыеИзменения.Узел = МаксимальныйНомерСообщения.Узел
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСообщения
	|ИТОГИ
	|	МАКСИМУМ(МаксимальныйНомерСообщений)
	|ПО
	|	ТипЗадачи,
	|	ДокументОснование";
	
	Запрос.УстановитьПараметр("Узел", ТСД.УзелПланаОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		ДанныеОбработчика.Вставить("ИзмененийНет",Истина);
		Возврат
	КонецЕсли;
	ВыборкаПоТипамЗадач = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоТипамЗадач.Следующий() Цикл
		ТипОперацииПредставление=СтрЗаменить(ТРег(Строка(ВыборкаПоТипамЗадач.ТипЗадачи))," ","");
		ДанныеОбработчика.Вставить(ТипОперацииПредставление);
		ДанныеОбработчика.Вставить("МаксимальныйНомерСообщений",ВыборкаПоТипамЗадач.МаксимальныйНомерСообщений);
		МассивДокументов=новый Массив;
		ВыборкаПоДокументам=ВыборкаПоТипамЗадач.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		пока ВыборкаПоДокументам.Следующий() цикл
			СтруктураДанных=новый Структура;
			СтруктураДанных.Вставить("ГУИД",ВыборкаПоДокументам.ДокументОснование.УникальныйИдентификатор());
			СтруктураДанных.Вставить("Дата",ВыборкаПоДокументам.ДокументОснование.Дата);
			СтруктураДанных.Вставить("Номер",ВыборкаПоДокументам.ДокументОснование.Номер);
			МассивЗадач=новый Массив;
			ВыборкаДетальныхЗаписей=ВыборкаПоДокументам.Выбрать();
			Пока  ВыборкаДетальныхЗаписей.Следующий() Цикл
				НаборЗаписейЧтение=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
				НаборЗаписейЧтение.Отбор.ИдЗадачи.Установить(ВыборкаДетальныхЗаписей.ИдЗадачи);
				НаборЗаписейЧтение.Отбор.ТСД.Установить(ТСД);
				НаборЗаписейЧтение.Отбор.ТипЗадачи.Установить(ВыборкаПоТипамЗадач.ТипЗадачи);
				НаборЗаписейЧтение.Отбор.ДокументОснование.Установить(ВыборкаПоДокументам.ДокументОснование);
				НаборЗаписейЧтение.Прочитать();
				Если НаборЗаписейЧтение.Количество()= 0 тогда
					СтруктураЗадачи=новый Структура;
					ЗаполнениеДанныхУдаленияЗадачи(СтруктураЗадачи,ВыборкаДетальныхЗаписей.ИдЗадачи);
					МассивЗадач.Добавить(СтруктураЗадачи);
					Продолжить;
				КонецЕсли;
				для Каждого стр из НаборЗаписейЧтение цикл
					СтруктураЗадачи=новый Структура;
					Если стр.ФиксацияЗадачи тогда
						ЗаполнениеДанныхУдаленияЗадачи(СтруктураЗадачи,стр.ИдЗадачи);
					иначе
						СтруктураЗадачи.Вставить("ИдЗадачи",стр.ИдЗадачи);
						СтруктураЗадачи.Вставить("ИдентификаторУпаковки",стр.ИдентификаторУпаковки);
						СтруктураЗадачи.Вставить("ЯчейкаОтправитель",стр.ЯчейкаОтправитель.УникальныйИдентификатор());
						СтруктураЗадачи.Вставить("ЯчейкаОтправительПредставление",стр.ЯчейкаОтправитель.Наименование);
						СтруктураЗадачи.Вставить("ЯчейкаПолучатель",стр.ЯчейкаПолучатель.УникальныйИдентификатор());
						СтруктураЗадачи.Вставить("ЯчейкаПолучательПредставление",стр.ЯчейкаПолучатель.Наименование);
						СтруктураЗадачи.Вставить("Состояние",стр.Состояние);
						СтруктураЗадачи.Вставить("СтрокиЗадачТСД",ПолучитьСтрокиЗадачТСД(стр.ИдЗадачи));
						ЗначениеДополнительныхДанных=стр.ДополнительныеДанные.Получить();
						Если ТипЗнч(ЗначениеДополнительныхДанных)<>Тип("Структура") тогда
							ЗначениеДополнительныхДанных=новый Структура;
						КонецЕсли;	
						СтруктураЗадачи.Вставить("ДополнительныеДанные",ЗначениеДополнительныхДанных);
						СтруктураЗадачи.Вставить("Действие","НоваяЗапись_Изменение");
					КонецЕсли;
					МассивЗадач.Добавить(СтруктураЗадачи);
				КонецЦикла;
			КонецЦикла;
			СтруктураДанных.Вставить("МассивЗадач",МассивЗадач);
			СтруктураДанных.Вставить("ДополнительныеДанные",ПолучитьСопроводительныеДанныеДокумента(ВыборкаПоДокументам.ДокументОснование));
			СтруктураДанных.Вставить("ПомарочныйУчет",ПолучитьДанныеОПомарочномУчете(ВыборкаПоДокументам.ДокументОснование));
			МассивДокументов.Добавить(СтруктураДанных);
		КонецЦикла;
		ДанныеОбработчика[ТипОперацииПредставление]= МассивДокументов;
	КонецЦикла;
	//ЗаписьСообщения.ЗакончитьЗапись();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Процедура ЗаполнениеДанныхУдаленияЗадачи(СтруктураЗадачи,ИдЗадачи)
	СтруктураЗадачи.Вставить("ИдЗадачи",ИдЗадачи);
	СтруктураЗадачи.Вставить("ИдентификаторУпаковки","-");
	СтруктураЗадачи.Вставить("ЯчейкаОтправитель","-");
	СтруктураЗадачи.Вставить("ЯчейкаОтправительПредставление","-");
	СтруктураЗадачи.Вставить("ЯчейкаПолучатель","-");
	СтруктураЗадачи.Вставить("ЯчейкаПолучательПредставление","-");
	СтруктураЗадачи.Вставить("Состояние","-");
	СтруктураЗадачи.Вставить("СтрокиЗадачТСД",Неопределено);
	СтруктураЗадачи.Вставить("ДополнительныеДанные",Неопределено);
	СтруктураЗадачи.Вставить("Действие","Удаление");
КонецПроцедуры

Функция ПолучитьСопроводительныеДанныеДокумента(ДокументОснование)
	СтруктураСопроводительныхДанных = новый Структура;		
	Если ТипЗнч(ДокументОснование)=тип("ДокументСсылка.итWMSПриемка") и не ДокументОснование.ПриемкаИзТранзита тогда
		ПолучитьДанныеФизическихДокументовПриемки(ДокументОснование,СтруктураСопроводительныхДанных);
	КонецЕсли;
	Если ТипЗнч(ДокументОснование)=тип("ДокументСсылка.итWMSРазмещение")  тогда
		ПолучитьДанныеШтрихКодовЯчеекДокумента(ДокументОснование,СтруктураСопроводительныхДанных);
	КонецЕсли;
	Если ТипЗнч(ДокументОснование)=тип("ДокументСсылка.итWMSОтгрузка")  тогда
		ПолучитьДанныеШтрихКодовЯчеекДокумента(ДокументОснование,СтруктураСопроводительныхДанных);
		ПолучитьКраткуюИнформациюОтгрузки(ДокументОснование,СтруктураСопроводительныхДанных)
	КонецЕсли;
	Если ТипЗнч(ДокументОснование)= Тип("ДокументСсылка.итWMSПеремещение") тогда
		ПолучитьДанныеШтрихКодовЯчеекДокумента(ДокументОснование,СтруктураСопроводительныхДанных);
	КонецЕсли;
	Если ТипЗнч(ДокументОснование)= Тип("ДокументСсылка.итWMSНаборка") тогда
		ПолучитьДанныеШтрихКодовЯчеекНаборки(ДокументОснование,СтруктураСопроводительныхДанных);
		ПолучитьДанныеЗаказаНаборки(ДокументОснование,СтруктураСопроводительныхДанных);
		ДополнитьСопроводительныеДанныеFSRARIDФилиала(ДокументОснование,СтруктураСопроводительныхДанных);
		ПризнакРозничногоКонтрагента(ДокументОснование,СтруктураСопроводительныхДанных);
		ВесНаборки(ДокументОснование,СтруктураСопроводительныхДанных);
		МаршрутНаборки(ДокументОснование,СтруктураСопроводительныхДанных);
	КонецЕсли;
	Если ТипЗнч(ДокументОснование)=тип("ДокументСсылка.итWMSЗадачиИнвентаризации") тогда
		ПолучитьДанныеШтрихКодовЯчеекДокумента(ДокументОснование,СтруктураСопроводительныхДанных);
	КонецЕсли;
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.итWMSКонтрольнаяОперацияАгрегации") тогда
		ПолучитьДОполнительныеДанныеКонтрольнойАгрегации(ДокументОснование,СтруктураСопроводительныхДанных)
	КонецЕсли;
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.итWMSПроверка") тогда
		ПолучитьКраткуюИнформациюПроверки(ДокументОснование,СтруктураСопроводительныхДанных)
	КонецЕсли;

	
	Возврат  СтруктураСопроводительныхДанных;
КонецФункции

Процедура ДополнитьСопроводительныеДанныеFSRARIDФилиала(ДокументОснование,СтруктураСопроводительныхДанных)
	Организация=ДокументОснование.Организация;
	СтруктураСопроводительныхДанных.Вставить("FSRARID",итWMSСлужебныеПроцедурыИФункции.ПолучитьFSRARIDТекущегоФилилала(Организация));
КонецПроцедуры
Процедура ПризнакРозничногоКонтрагента(ДокументОснование,СтруктураСопроводительныхДанных)
	Если ДокументОснование.Контрагент.ит_WMS_ВидСкладскойДеятельности=Перечисления.ит_WMS_ВидыСкладскойДеятельности.Розничная Тогда 
		СтруктураСопроводительныхДанных.Вставить("РозничныйКА",Истина);
	иначе
		СтруктураСопроводительныхДанных.Вставить("РозничныйКА",Ложь);
	КонецЕсли;
	КонецПроцедуры
Процедура ПолучитьКраткуюИнформациюПроверки(ДокументОснование,СтруктураСопроводительныхДанных)
	ТабличныйДокумент=новый ТабличныйДокумент;
	СтруктураКраткогоСодежимого=новый Структура;
	Документы.итWMSПроверка.СформироватьПечатнуюФорму(ДокументОснование.Ссылка,ТабличныйДокумент,СтруктураКраткогоСодежимого);
	СтруктураСопроводительныхДанных.Вставить("СтруктураКраткогоСодежимого",СтруктураКраткогоСодежимого);
КонецПроцедуры
Процедура ПолучитьКраткуюИнформациюОтгрузки(ДокументОснование,СтруктураСопроводительныхДанных)
	ТабличныйДокумент=новый ТабличныйДокумент;
	СтруктураКраткогоСодежимого=новый Структура;
	Документы.итWMSОтгрузка.ПолучитьКраткуюИнформациюОтгрузки(ДокументОснование.Ссылка,СтруктураКраткогоСодежимого);
	СтруктураСопроводительныхДанных.Вставить("СтруктураКраткогоСодежимого",СтруктураКраткогоСодежимого);
	КонецПроцедуры

Процедура ВесНаборки(ДокументОснование,СтруктураСопроводительныхДанных)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(итWMSНаборкаТовары.Количество * итWMSНаборкаТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес) КАК ВЕС,
		|	итWMSНаборкаТовары.Ссылка
		|ИЗ
		|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
		|ГДЕ
		|	итWMSНаборкаТовары.СостояниеЗадачи <> ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Отменена)
		|	И итWMSНаборкаТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSНаборкаТовары.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураСопроводительныхДанных.Вставить("ВесНаборки",ВыборкаДетальныеЗаписи.ВЕС);
	КонецЦикла;
	
КонецПроцедуры

Процедура МаршрутНаборки(ДокументОснование,СтруктураСопроводительныхДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыМаршрута.Ссылка.Номер КАК Номер,
		|	ДокументыМаршрута.Ссылка.Дата КАК Дата,
		|	ДокументыМаршрута.Ссылка КАК Ссылка,
		|	ДокументыМаршрута.ОчередьДоставки КАК ОчередьДоставки
		|ИЗ
		|	Документ.Маршрутизация.ДокументыМаршрута КАК ДокументыМаршрута
		|ГДЕ
		|	ДокументыМаршрута.Заказ = &Документ
		|	И ДокументыМаршрута.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("Документ", ДокументОснование.итОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтруктураСопроводительныхДанных.Вставить("Маршрут",новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	СтруктураСопроводительныхДанных.Вставить("ПредставлениеМаршрута","№000000 от 01.01.0001");
	СтруктураСопроводительныхДанных.Вставить("ОчередьДоставки",0);


	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураСопроводительныхДанных.Вставить("Маршрут",ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
		СтруктураСопроводительныхДанных.Вставить("ПредставлениеМаршрута","№"+ВыборкаДетальныеЗаписи.Номер+" от "+ Строка(ВыборкаДетальныеЗаписи.Дата)); 
		СтруктураСопроводительныхДанных.Вставить("ОчередьДоставки",ВыборкаДетальныеЗаписи.ОчередьДоставки); 
	КонецЦикла;

	КонецПроцедуры
	
Процедура ПолучитьДанныеЗаказаНаборки(ДокументОснование,СтруктураСопроводительныхДанных)
	Если ТипЗнч(ДокументОснование.итОснование)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
		ДатаЗаказа=ДокументОснование.итОснование.Дата;
		НомерЗаказа=ДокументОснование.итОснование.Номер;
		СтруктураСопроводительныхДанных.Вставить("ЗаказНаборки","Заказ № "+НомерЗаказа+" от "+ДатаЗаказа);
	КонецЕсли;
	КонецПроцедуры
	
Процедура ПолучитьДанныеШтрихКодовЯчеекНаборки(ДокументОснование,СтруктураСопроводительныхДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSНаборкаТовары.ЯчейкаПикинга КАК Ячейка
		|ПОМЕСТИТЬ ВтЯчейки
		|ИЗ
		|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
		|ГДЕ
		|	итWMSНаборкаТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итWMSНаборкаТовары.ЯчейкаПолучатель
		|ИЗ
		|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
		|ГДЕ
		|	итWMSНаборкаТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтЯчейки.Ячейка
		|ПОМЕСТИТЬ ВтЯчейкиГруппировка
		|ИЗ
		|	ВтЯчейки КАК ВтЯчейки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтЯчейки.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтWMSШтрихКоды.ШтрихКод,
		|	ВтЯчейкиГруппировка.Ячейка
		|ИЗ
		|	ВтЯчейкиГруппировка КАК ВтЯчейкиГруппировка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИтWMSШтрихКоды КАК ИтWMSШтрихКоды
		|		ПО ВтЯчейкиГруппировка.Ячейка = ИтWMSШтрихКоды.Объект";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивДанных=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураДанных=новый Структура;
		СтруктураДанных.Вставить("Ячейка",ВыборкаДетальныеЗаписи.Ячейка.УникальныйИдентификатор());
		СтруктураДанных.Вставить("ШтрихКод",ВыборкаДетальныеЗаписи.ШтрихКод);
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	Если  МассивДанных.Количество()>0 тогда
		СтруктураСопроводительныхДанных.Вставить("ДанныеШтрихКодовЯчеекДокумента",МассивДанных);
	КонецЕсли;

	
	
	КонецПроцедуры
Процедура ПолучитьДанныеШтрихКодовЯчеекДокумента(ДокументОснование,СтруктураСопроводительныхДанных)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСД.ЯчейкаОтправитель КАК Ячейка
	|ПОМЕСТИТЬ ЯчейкиДокумента
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	итWMSЗадачиТСД.ЯчейкаПолучатель
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтWMSШтрихКоды.ШтрихКод,
	|	ЯчейкиДокумента.Ячейка
	|ИЗ
	|	ЯчейкиДокумента КАК ЯчейкиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИтWMSШтрихКоды КАК ИтWMSШтрихКоды
	|		ПО ЯчейкиДокумента.Ячейка = ИтWMSШтрихКоды.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	ЯчейкиДокумента.Ячейка,
	|	ИтWMSШтрихКоды.ШтрихКод";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивДанных=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураДанных=новый Структура;
		СтруктураДанных.Вставить("Ячейка",ВыборкаДетальныеЗаписи.Ячейка.УникальныйИдентификатор());
		СтруктураДанных.Вставить("ШтрихКод",ВыборкаДетальныеЗаписи.ШтрихКод);
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	Если  МассивДанных.Количество()>0 тогда
		СтруктураСопроводительныхДанных.Вставить("ДанныеШтрихКодовЯчеекДокумента",МассивДанных);
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
Процедура ПолучитьДанныеФизическихДокументовПриемки(ДокументОснование,СтруктураСопроводительныхДанных)
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSПриемкаДанныеФизическогоНосителя.Номенклатура,
	|	итWMSПриемкаДанныеФизическогоНосителя.Номенклатура.Наименование КАК НоменклатураПредставление,
	|	итWMSПриемкаДанныеФизическогоНосителя.ДатаРозлива,
	|	итWMSПриемкаДанныеФизическогоНосителя.Количество
	|ИЗ
	|	Документ.итWMSПриемка.ДанныеФизическогоНосителя КАК итWMSПриемкаДанныеФизическогоНосителя
	|ГДЕ
	|	итWMSПриемкаДанныеФизическогоНосителя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если  РезультатЗапроса.Пустой() тогда
		Возврат  ;
	КонецЕсли;	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивДополнительныхДанных=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктраДанныхФизическихНосителей=новый Структура;
		СтруктраДанныхФизическихНосителей.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
		СтруктраДанныхФизическихНосителей.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.НоменклатураПредставление);
		СтруктраДанныхФизическихНосителей.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
		СтруктраДанныхФизическихНосителей.Вставить("Количество",ВыборкаДетальныеЗаписи.Количество);
		МассивДополнительныхДанных.Добавить(СтруктраДанныхФизическихНосителей);
	КонецЦикла;
	
	СтруктураСопроводительныхДанных.Вставить("ДанныеФизическихНосителей",МассивДополнительныхДанных);
	//Возврат МассивДополнительныхДанных;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Процедура ПолучитьДОполнительныеДанныеКонтрольнойАгрегации(ДокументОснование,СтруктураСопроводительныхДанных)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Ссылка,
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Номенклатура,
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Характиристика,
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.ДатаРозлива,
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.СерияНоменклатуры,
	|	СУММА(итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.итWMSКонтрольнаяОперацияАгрегации.ДанныеДляАгрегацииДокумента КАК итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента
	|ГДЕ
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.СерияНоменклатуры,
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Ссылка,
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Номенклатура,
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.Характиристика,
	|	итWMSКонтрольнаяОперацияАгрегацииДанныеДляАгрегацииДокумента.ДатаРозлива
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура КАК НоменклатураДляПредставления,
	|	ТаблицаДокумента.СерияНоменклатуры КАК СерияНоменклатурыДляПредставления,
	|	ТаблицаДокумента.Количество
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	ДанныеДокументаКСканированию = Запрос.Выполнить().Выгрузить();
	ДанныеДокументаКСканированию.Колонки.Добавить("НоменклатураПредставление");
	ДанныеДокументаКСканированию.Колонки.Добавить("СерияНоменклатурыПредставление");
	ДанныеДокументаКСканированию.Колонки.Добавить("Номенклатура");
	ДанныеДокументаКСканированию.Колонки.добавить("СерияНоменклатуры");
	
	для Каждого ДанныхКСакнированию из ДанныеДокументаКСканированию цикл
		ДанныхКСакнированию.НоменклатураПредставление=ДанныхКСакнированию.НоменклатураДляПредставления.Наименование;
		ДанныхКСакнированию.СерияНоменклатурыПредставление=ДанныхКСакнированию.СерияНоменклатурыДляПредставления.Наименование;
		ДанныхКСакнированию.Номенклатура=ДанныхКСакнированию.НоменклатураДляПредставления.УникальныйИдентификатор();
		ДанныхКСакнированию.СерияНоменклатуры=ДанныхКСакнированию.СерияНоменклатурыДляПредставления.УникальныйИдентификатор();
	КонецЦикла;
	
	ДанныеДокументаКСканированию.Колонки.Удалить("НоменклатураДляПредставления");
	ДанныеДокументаКСканированию.Колонки.Удалить("СерияНоменклатурыДляПредставления");
	
	СтруктураСопроводительныхДанных.Вставить("ДанныеДокументаКСканированию",ДанныеДокументаКСканированию);
КонецПроцедуры
Функция ПолучитьСтрокиЗадачТСД(ИдЗадачи)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSСтрокиЗадачТСД.ИдЗадачи,
	|	итWMSСтрокиЗадачТСД.идСтроки,
	|	итWMSСтрокиЗадачТСД.Номенклатура,
	|	итWMSСтрокиЗадачТСД.ДатаРозлива,
	|	итWMSСтрокиЗадачТСД.СерияНоменклатуры,
	|	итWMSСтрокиЗадачТСД.Количество,
	|	итWMSСтрокиЗадачТСД.Номенклатура.Наименование КАК НоменклатураПредставление,
	|	итWMSСтрокиЗадачТСД.СерияНоменклатуры.Наименование КАК СерияНоменклатурыПредставление,
	|	итWMSСтрокиЗадачТСД.ДополнительныеДанные
	|ИЗ
	|	РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
	|ГДЕ
	|	итWMSСтрокиЗадачТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		Возврат Неопределено
	КонецЕсли;	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивСтрокЗадачи=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураСтроки=новый Структура;
		СтруктураСтроки.Вставить("ИдЗадачи",ВыборкаДетальныеЗаписи.ИдЗадачи);
		СтруктураСтроки.Вставить("идСтроки",ВыборкаДетальныеЗаписи.идСтроки);
		СтруктураСтроки.Вставить("Номенклатура",ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
		СтруктураСтроки.Вставить("НоменклатураПредставление",ВыборкаДетальныеЗаписи.НоменклатураПредставление);
		СтруктураСтроки.Вставить("ДатаРозлива",ВыборкаДетальныеЗаписи.ДатаРозлива);
		СтруктураСтроки.Вставить("СерияНоменклатуры",ВыборкаДетальныеЗаписи.СерияНоменклатуры.УникальныйИдентификатор());
		СтруктураСтроки.Вставить("СерияНоменклатурыПредставление",ВыборкаДетальныеЗаписи.СерияНоменклатурыПредставление);
		СтруктураСтроки.Вставить("Количество",ВыборкаДетальныеЗаписи.Количество);
		ЗначениеДополнительныхДанных=ВыборкаДетальныеЗаписи.ДополнительныеДанные.Получить();
		Если ТипЗнч(ЗначениеДополнительныхДанных)<> Тип("Структура") тогда
			ЗначениеДополнительныхДанных=новый Структура;
		КонецЕсли;
		СтруктураСтроки.Вставить("ДополнительныеДанные",ЗначениеДополнительныхДанных);
		МассивСтрокЗадачи.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат МассивСтрокЗадачи;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

Функция ПолучитьДанныеОПомарочномУчете(ДокументОснование)
	Если ТипЗнч(ДокументОснование)=тип("ДокументСсылка.итWMSПриемка")  тогда
		Если ДокументОснование.ДокументыПомарочногоУчета.Количество()>0 Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;
	///// 22.03.19 если через- 2-3 месяца с наборкой будет ок, перевести на метод наборки
	//Если ТипЗнч(ДокументОснование)=тип("ДокументСсылка.итWMSПеремещение")  тогда
	//	Возврат НаличиеПомарочнойПродукцииВПеремещении(ДокументОснование);	
	//КонецЕсли;
	// 22.10.2019  Перевод на метод наборки 
	Если ТипЗнч(ДокументОснование)=тип("ДокументСсылка.итWMSПеремещение")  тогда
		Возврат ВДокументеИмеютсяСерииПомарочнойПродукции(ДокументОснование);	
	КонецЕсли;
	Если ТипЗнч(ДокументОснование)=тип("ДокументСсылка.итWMSПроверка")  тогда
		Возврат ВДокументеИмеютсяСерииПомарочнойПродукции(ДокументОснование);	
	КонецЕсли;
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.итWMSНаборка") Тогда
		Возврат ВДокументеИмеютсяСерииПомарочнойПродукции(ДокументОснование);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
Функция ВДокументеИмеютсяСерииПомарочнойПродукции(ДокументОснование)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSЗадачиТСД.ИдЗадачи,
		|	итWMSЗадачиТСД.ДокументОснование
		|ПОМЕСТИТЬ ЗадачиДокумента
		|ИЗ
		|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|ГДЕ
		|	итWMSЗадачиТСД.ДокументОснование = &ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSЗадачиТСД.ДокументОснование,
		|	итWMSЗадачиТСД.ИдЗадачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSСтрокиЗадачТСД.идСтроки,
		|	итWMSСтрокиЗадачТСД.СерияНоменклатуры
		|ИЗ
		|	ЗадачиДокумента КАК ЗадачиДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
		|		ПО ЗадачиДокумента.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи
		|ГДЕ
		|	итWMSСтрокиЗадачТСД.СерияНоменклатуры.итПризнакПомарочногоУчета";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат Истина
	КонецЕсли;
	Возврат Ложь;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецФункции

Функция НаличиеПомарочнойПродукцииВПеремещении(ДокументОснование)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSПеремещениеТовары.Ссылка,
	|	итWMSПеремещениеТовары.НомерСтроки,
	|	итWMSПеремещениеТовары.ИдентификаторСтроки,
	|	итWMSПеремещениеТовары.ИдентификаторУпаковки,
	|	итWMSПеремещениеТовары.Номенклатура,
	|	итWMSПеремещениеТовары.Характеристика,
	|	итWMSПеремещениеТовары.СерияНоменклатуры,
	|	итWMSПеремещениеТовары.Качество,
	|	итWMSПеремещениеТовары.ДатаРозлива,
	|	итWMSПеремещениеТовары.Количество,
	|	итWMSПеремещениеТовары.КоличествоФакт,
	|	итWMSПеремещениеТовары.ЯчейкаОтправитель,
	|	итWMSПеремещениеТовары.ЯчейкаПолучатель,
	|	итWMSПеремещениеТовары.СостояниеЗадачи,
	|	итWMSПеремещениеТовары.ИдентификаторУпаковкиПолучатель
	|ПОМЕСТИТЬ ДанныеПеремещения
	|ИЗ
	|	Документ.итWMSПеремещение.Товары КАК итWMSПеремещениеТовары
	|ГДЕ
	|	итWMSПеремещениеТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПеремещения.ИдентификаторУпаковки
	|ПОМЕСТИТЬ ИдентификаторыПоиска
	|ИЗ
	|	ДанныеПеремещения КАК ДанныеПеремещения
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПеремещения.ИдентификаторУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	алкХранилищеУпаковокСрезПоследних.Упаковка КАК GTIN,
	|	ИдентификаторыПоиска.ИдентификаторУпаковки КАК SSCC
	|ПОМЕСТИТЬ ИерархияУпаковок
	|ИЗ
	|	ИдентификаторыПоиска КАК ИдентификаторыПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеУпаковок.СрезПоследних КАК алкХранилищеУпаковокСрезПоследних
	|		ПО ИдентификаторыПоиска.ИдентификаторУпаковки = алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки
	|
	|СГРУППИРОВАТЬ ПО
	|	алкХранилищеУпаковокСрезПоследних.Упаковка,
	|	ИдентификаторыПоиска.ИдентификаторУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИерархияУпаковок.GTIN,
	|	ИерархияУпаковок.SSCC,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ алкХранилищеАкцизныхМарокСрезПоследних.Марка) КАК Марка
	|ИЗ
	|	ИерархияУпаковок КАК ИерархияУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
	|		ПО ИерархияУпаковок.GTIN = алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
	|ГДЕ
	|	алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ИерархияУпаковок.GTIN,
	|	ИерархияУпаковок.SSCC";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецФункции

Процедура ИнициализацияДанныхНаСервере(ДанныеОбработчика) Экспорт 
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТСДИД")   тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипИнициализации") тогда
		Возврат
	КонецЕсли;
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючИнициализацииДанных") тогда
		Возврат
	КонецЕсли;  
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипЗадачи")   тогда
		Возврат
	КонецЕсли;
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"СостояниеИнициализации")   тогда
		Возврат
	КонецЕсли;	
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ФиксацияЗадачи")   тогда
		Возврат
	КонецЕсли;	
	
	
	Если ДанныеОбработчика.ТипИнициализации="Документ" тогда
		ИнициализацияДанныхДокумента(ДанныеОбработчика);	
	КонецЕсли;
	Если ДанныеОбработчика.ТипИнициализации="ДокументОтказ" Тогда
		ИнициализацияДанныхДокументаОтказ(ДанныеОбработчика);
	КонецЕсли;	
	Если ДанныеОбработчика.ТипИнициализации="Задача" Тогда 
		ИнициализацияДанныхЗадачи(ДанныеОбработчика);
	КонецЕсли;	
	Если ДанныеОбработчика.ТипИнициализации="ЗадачаОтказ" Тогда 
		ИнициализацияДанныхЗадачиОтказ(ДанныеОбработчика);
	КонецЕсли;
	
	
	Если ДанныеОбработчика.Свойство("Статус") тогда
		Если ДанныеОбработчика.Статус=404 тогда
			Возврат
		КонецЕсли;
	КонецЕсли;	
	ВыгрузитьЗарегестрированныеИзменения(ДанныеОбработчика);
КонецПроцедуры
Функция ЗапросИницализацииДокумента(ДанныеОбработчика)
	ТСД=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокаОснования.ДокументОснование,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА итWMSЗадачиТСД.ТСД = ЗНАЧЕНИЕ(Справочник.итWMSСправочникТСД.ПустаяСсылка)
	|				ТОГДА 0
	|			КОГДА итWMSЗадачиТСД.ТСД = &ТСД
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ТригерДоступности
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК СтрокаОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|		ПО СтрокаОснования.ДокументОснование = итWMSЗадачиТСД.ДокументОснование
	|ГДЕ
	|	СтрокаОснования.ИдЗадачи = &ИдЗадачи
	|	И итWMSЗадачиТСД.ТипЗадачи = &ТипЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокаОснования.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ДокументОснование,
	|	итWMSЗадачиТСД.ИдЗадачи,
	|	МАКСИМУМ(ВТ.ТригерДоступности) КАК ТригерДоступности
	|ПОМЕСТИТЬ ДанныеВыборкиЗадачи
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|		ПО ВТ.ДокументОснование = итWMSЗадачиТСД.ДокументОснование
	|ГДЕ
	|	итWMSЗадачиТСД.ТипЗадачи = &ТипЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ДокументОснование,
	|	итWMSЗадачиТСД.ИдЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеВыборкиЗадачи.ДокументОснование,
	|	ДанныеВыборкиЗадачи.ИдЗадачи,
	|	ДанныеВыборкиЗадачи.ТригерДоступности
	|ИЗ
	|	ДанныеВыборкиЗадачи КАК ДанныеВыборкиЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMSСтрокиЗадачТСД.идСтроки,
	|	ДанныеВыборкиЗадачи.ДокументОснование
	|ИЗ
	|	ДанныеВыборкиЗадачи КАК ДанныеВыборкиЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
	|		ПО ДанныеВыборкиЗадачи.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSСтрокиЗадачТСД.идСтроки,
	|	ДанныеВыборкиЗадачи.ДокументОснование";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ДанныеОбработчика.КлючИнициализацииДанных);
	Запрос.УстановитьПараметр("ТипЗадачи", ДанныеОбработчика.ТипЗадачи);
	Запрос.УстановитьПараметр("ТСД", ТСД);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Если МассивРезультатов[2].Пустой() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки"," Нет Данных");
		Возврат  "";
	КонецЕсли;
	ВыборкаДетальныеЗаписи = МассивРезультатов[2].Выбрать();
	
	Если   ВыборкаДетальныеЗаписи.Следующий() тогда
		Если ВыборкаДетальныеЗаписи.ТригерДоступности=1 тогда
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки", Строка(ВыборкаДетальныеЗаписи.ДокументОснование) +" уже в обработке на другом ТСД");
			Возврат "";			
		КонецЕсли;
	КонецЕсли;
	Возврат МассивРезультатов;
КонецФункции
Процедура ИнициализацияДанныхДокумента(ДанныеОбработчика) Экспорт 
	МассивРезультатов=ЗапросИницализацииДокумента(ДанныеОбработчика);
	ВыборкаДетальныеЗаписи=МассивРезультатов[2].Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	Если ДанныеОбработчика.Свойство("Статус") тогда
		Если ДанныеОбработчика.Статус=404 тогда
			Возврат
		КонецЕсли;
	КонецЕсли;	
	ДокументОснование=ВыборкаДетальныеЗаписи.ДокументОснование;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",ДокументОснование);
	БлокировкаДанных.Заблокировать();
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() цикл
		НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдЗадачи.Установить(ВыборкаДетальныеЗаписи.ИдЗадачи);
		НаборЗаписей.Прочитать();
		для Каждого стр из НаборЗаписей цикл
			Если ДанныеОбработчика.СостояниеИнициализации=Перечисления.итWMSСостоянияЗадачТСД.Выполняется и стр.Состояние=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению  тогда
				стр.ДатаНачала=ТекущаяДата();
			ИначеЕсли ДанныеОбработчика.СостояниеИнициализации=Перечисления.итWMSСостоянияЗадачТСД.Выполнена и стр.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполняется тогда
				стр.ДатаОкончания=ТекущаяДата();
			ИначеЕсли ДанныеОбработчика.СостояниеИнициализации= Перечисления.итWMSСостоянияЗадачТСД.Отменена тогда
				стр.ДатаОкончания=ТекущаяДата();
			ИначеЕсли   ДанныеОбработчика.СостояниеИнициализации= Перечисления.итWMSСостоянияЗадачТСД.КВыполнению тогда
				стр.ДатаНачала='00010101';
				стр.ДатаОкончания='00010101';
			КонецЕсли;
			стр.Состояние=ДанныеОбработчика.СостояниеИнициализации;
			стр.ФиксацияЗадачи=ДанныеОбработчика.ФиксацияЗадачи;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	//Если ДанныеОбработчика.СостояниеИнициализации<> Перечисления.итWMSСостоянияЗадачТСД.КВыполнению тогда
	//итWMSСлужебныеПроцедурыИФункции.ИзменитьДанныеСостоянияСтрокДокумента(МассивРезультатов[3],
	//ДанныеОбработчика.СостояниеИнициализации,ДокументОснование);
	//КонецЕсли;
	МассивДокументов=новый Массив;
	МассивДокументов.Добавить(ДокументОснование);
	итWMSСлужебныеПроцедурыИФункции.ПроверитьДокументыНаИзменениеСтатуса(МассивДокументов);
	ДанныеОбработчика.Вставить("Инициализация",Истина);
	ЗафиксироватьТранзакцию();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры
Процедура ИнициализацияДанныхДокументаОтказ(ДанныеОбработчика) Экспорт
	МассивРезультатов=ЗапросИницализацииДокумента(ДанныеОбработчика);
	ВыборкаДетальныеЗаписи=МассивРезультатов[2].Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	Если ДанныеОбработчика.Свойство("Статус") тогда
		Если ДанныеОбработчика.Статус=404 тогда
			Возврат
		КонецЕсли;
	КонецЕсли;	
	ДокументОснование=ВыборкаДетальныеЗаписи.ДокументОснование;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",ДокументОснование);
	БлокировкаДанных.Заблокировать();
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() цикл
		НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдЗадачи.Установить(ВыборкаДетальныеЗаписи.ИдЗадачи);
		НаборЗаписей.Прочитать();
		для Каждого стр из НаборЗаписей цикл
			Если стр.ФиксацияЗадачи Тогда 
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки","задача в конечном состоянии отказаться не возможно");
			Возврат	
		    КонецЕсли;
			стр.Состояние=ДанныеОбработчика.СостояниеИнициализации;
			стр.ТСД=Справочники.итWMSСправочникТСД.ПустаяСсылка();
			стр.ФиксацияЗадачи=ДанныеОбработчика.ФиксацияЗадачи;
			стр.ДатаНачала='00010101';
			стр.ДатаОкончания='00010101';
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	//Если ДанныеОбработчика.СостояниеИнициализации<> Перечисления.итWMSСостоянияЗадачТСД.КВыполнению тогда
	//итWMSСлужебныеПроцедурыИФункции.ИзменитьДанныеСостоянияСтрокДокумента(МассивРезультатов[3],
	//ДанныеОбработчика.СостояниеИнициализации,ДокументОснование);
	//КонецЕсли;
	МассивДокументов=новый Массив;
	МассивДокументов.Добавить(ДокументОснование);
	итWMSСлужебныеПроцедурыИФункции.ПроверитьДокументыНаИзменениеСтатуса(МассивДокументов,Истина);
	ДанныеОбработчика.Вставить("Инициализация",Истина);
	ЗафиксироватьТранзакцию();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Функция ЗапросИнициализацияДанныхЗадачи(ДанныеОбработчика)
	ТСД=итWMSСлужебныеПроцедурыИФункции.НайтиСоздатьТерминалСбораДанных(ДанныеОбработчика.ТСДИД);
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСД.ДокументОснование,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА итWMSЗадачиТСД.ТСД = ЗНАЧЕНИЕ(Справочник.итWMSСправочникТСД.ПустаяСсылка)
	|				ТОГДА 0
	|			КОГДА итWMSЗадачиТСД.ТСД = &ТСД
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ТригерДоступности,
	|	МАКСИМУМ(итWMSЗадачиТСД.ИдентификаторУпаковки) КАК ИдентификаторУпаковки
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ИдЗадачи = &ИдЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSЗадачиТСД.ДокументОснование";
	
	Запрос.УстановитьПараметр("ИдЗадачи",  ДанныеОбработчика.КлючИнициализацииДанных);
	Запрос.УстановитьПараметр("ТСД", ТСД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() тогда
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки"," Нет Данных");
		Возврат  "";
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если   ВыборкаДетальныеЗаписи.Следующий() тогда
		Если ВыборкаДетальныеЗаписи.ТригерДоступности=1 тогда
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки", Строка(ВыборкаДетальныеЗаписи.ИдентификаторУпаковки) +" уже в обработке на другом ТСД");
			Возврат "";			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыборкаДетальныеЗаписи;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
Процедура ИнициализацияДанныхЗадачи(ДанныеОбработчика) Экспорт
	ВыборкаДетальныеЗаписи=ЗапросИнициализацияДанныхЗадачи(ДанныеОбработчика);
	Если ДанныеОбработчика.Свойство("Статус") тогда
		Если ДанныеОбработчика.Статус=404 тогда
			Возврат
		КонецЕсли;
	КонецЕсли;	
	ДокументОснование=ВыборкаДетальныеЗаписи.ДокументОснование;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ИдЗадачи",ДанныеОбработчика.КлючИнициализацииДанных);
	БлокировкаДанных.Заблокировать();
	
	НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ДанныеОбработчика.КлючИнициализацииДанных);
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей цикл
		Если ДанныеОбработчика.СостояниеИнициализации=Перечисления.итWMSСостоянияЗадачТСД.Выполняется и стр.Состояние=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению  тогда
			стр.ДатаНачала=ТекущаяДата();
		ИначеЕсли ДанныеОбработчика.СостояниеИнициализации=Перечисления.итWMSСостоянияЗадачТСД.Выполнена и стр.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполняется тогда
			стр.ДатаОкончания=ТекущаяДата();
		ИначеЕсли ДанныеОбработчика.СостояниеИнициализации= Перечисления.итWMSСостоянияЗадачТСД.Отменена тогда
			стр.ДатаОкончания=ТекущаяДата();
		ИначеЕсли   ДанныеОбработчика.СостояниеИнициализации= Перечисления.итWMSСостоянияЗадачТСД.КВыполнению тогда
			стр.ДатаНачала='00010101';
			стр.ДатаОкончания='00010101';
		КонецЕсли;
		стр.Состояние=ДанныеОбработчика.СостояниеИнициализации;
		стр.ФиксацияЗадачи=ДанныеОбработчика.ФиксацияЗадачи;
	КонецЦикла;
	НаборЗаписей.Записать();
	//итWMSСлужебныеПроцедурыИФункции.ИзменитьДанныеСостоянияСтрокДокумента(,
	//ДанныеОбработчика.СостояниеИнициализации,ДокументОснование,ДанныеОбработчика.КлючИнициализацииДанных);
	МассивДокументов=новый Массив;
	МассивДокументов.Добавить(ДокументОснование);
	итWMSСлужебныеПроцедурыИФункции.ПроверитьДокументыНаИзменениеСтатуса(МассивДокументов);
	ДанныеОбработчика.Вставить("Инициализация",Истина);
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры
Процедура ИнициализацияДанныхЗадачиОтказ(ДанныеОбработчика) Экспорт
	ВыборкаДетальныеЗаписи=ЗапросИнициализацияДанныхЗадачи(ДанныеОбработчика);
	Если ДанныеОбработчика.Свойство("Статус") тогда
		Если ДанныеОбработчика.Статус=404 тогда
			Возврат
		КонецЕсли;
	КонецЕсли;	
	ДокументОснование=ВыборкаДетальныеЗаписи.ДокументОснование;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ИдЗадачи",ДанныеОбработчика.КлючИнициализацииДанных);
	БлокировкаДанных.Заблокировать();
	
	НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ДанныеОбработчика.КлючИнициализацииДанных);
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей цикл
		Если стр.ФиксацияЗадачи Тогда 
			ДанныеОбработчика.Вставить("Статус",404);
			ДанныеОбработчика.Вставить("ОписаниеОшибки","задача в конечном состоянии отказаться не возможно");
			Возврат	
		КонецЕсли;
		стр.ДатаНачала='00010101';
		стр.ДатаОкончания='00010101';
		стр.Состояние=ДанныеОбработчика.СостояниеИнициализации;
		стр.ФиксацияЗадачи=ДанныеОбработчика.ФиксацияЗадачи;
		стр.ТСД=Справочники.итWMSСправочникТСД.ПустаяСсылка();
	КонецЦикла;
	НаборЗаписей.Записать();
	//итWMSСлужебныеПроцедурыИФункции.ИзменитьДанныеСостоянияСтрокДокумента(,
	//ДанныеОбработчика.СостояниеИнициализации,ДокументОснование,ДанныеОбработчика.КлючИнициализацииДанных);
	
	МассивДокументов=новый Массив;
	МассивДокументов.Добавить(ДокументОснование);
	итWMSСлужебныеПроцедурыИФункции.ПроверитьДокументыНаИзменениеСтатуса(МассивДокументов,Истина);
	ДанныеОбработчика.Вставить("Инициализация",Истина);
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

