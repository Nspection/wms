
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Документ") тогда
		Если ТипЗнч(Параметры.Документ)=тип("УникальныйИдентификатор") тогда
		 ЗаполнитьДанныеФормы(Параметры.Документ);
		иначе
			Отказ=Истина;
		КонецЕсли;	
	иначе
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьДанныеФормы(Документ,Отказ=Ложь)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMS_ДанныеДокументов.Документ,
		|	итWMS_ДанныеДокументов.ДанныеДокумента,
		|	итWMS_ДанныеДокументов.Дата,
		|	итWMS_ДанныеДокументов.Номер,
		|	итWMS_ДанныеДокументов.Филиал,
		|	итWMS_ДанныеДокументов.ВерсияДанных,
		|	итWMS_ДанныеДокументов.ФилиалПриемник,
		|	итWMS_ДанныеДокументов.ПринятНаИсполнение
		|ИЗ
		|	РегистрСведений.итWMS_ДанныеДокументов КАК итWMS_ДанныеДокументов
		|ГДЕ
		|	итWMS_ДанныеДокументов.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ВыборкаДетальныеЗаписи);
		ДанныеХранилища=ВыборкаДетальныеЗаписи.ДанныеДокумента;
		Если ТипЗнч(ДанныеХранилища) <> Тип("ХранилищеЗначения") тогда
			Отказ=Истина;
			Возврат
		КонецЕсли;
		ДанныеХранилища=ДанныеХранилища.Получить();
		Если ТипЗнч(ДанныеХранилища) <> Тип("Структура") тогда
			Отказ=Истина;
			Возврат
		КонецЕсли;
        СтрокаИсключающихСвойств="";
		для Каждого Свойства из ДанныеХранилища цикл
			Если Свойства.Значение=Неопределено тогда
				СтрокаИсключающихСвойств=СтрокаИсключающихСвойств+","+Свойства.Ключ;
			КонецЕсли;
		КонецЦикла;
		СтрокаИсключающихСвойств=Прав(СтрокаИсключающихСвойств,СтрДлина(СтрокаИсключающихСвойств)-1);
		Если СтрокаИсключающихСвойств<>"" тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеХранилища,,СтрокаИсключающихСвойств);
		иначе
			ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеХранилища);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеХранилища.ТранспортнаяИнформация);
		Для  Каждого стр из ДанныеХранилища.ТаблицаДанных цикл
			НоваяСтрока=ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
			НоваяСтрока.ИТП=Справочники.итИндентификаторыТоварныхПозиций.ПолучитьСсылку(новый УникальныйИдентификатор(стр.ИТПСтрокой));
			НоваяСтрока.Номенклатура=ПолучитьНоменклатуруПоИТП(НоваяСтрока.ИТП);
		КонецЦикла;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруПоИТП(ИТП)
	Если ИТП.Пустая() тогда
		Возврат  Справочники.Номенклатура.ПустаяСсылка();
    КонецЕсли;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.итИдентификаторНоменклатурнойПозиции = &итИдентификаторНоменклатурнойПозиции
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Ссылка";
	
	Запрос.УстановитьПараметр("итИдентификаторНоменклатурнойПозиции", ИТП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат  ВыборкаДетальныеЗаписи.Номенклатура;
	КонецЕсли;
	Возврат Справочники.Номенклатура.ПустаяСсылка();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецФункции