#Область ОбработчикиСобытий
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтруктураАдресаКартинок= новый Структура;
	СтруктураАдресаКартинок.Вставить("АктивныеПользователи",ПоместитьВоВременноеХранилище(новый Картинка(ПолучитьДвоичныеданныеКартинокССервера("АктивныеПользователи")),ЭтаФорма.УникальныйИдентификатор));
	СтруктураАдресаКартинок.Вставить("Офлайн",ПоместитьВоВременноеХранилище(новый Картинка(ПолучитьДвоичныеданныеКартинокССервера("Остановить")),ЭтаФорма.УникальныйИдентификатор));
	СтруктураАдресаКартинок.Вставить("ТСД",ПоместитьВоВременноеХранилище(новый Картинка(ПолучитьДвоичныеданныеКартинокССервера("ТОТерминалСбораДанных32")),ЭтаФорма.УникальныйИдентификатор));
	АдресБуфераКартинок = ПоместитьВоВременноеХранилище(СтруктураАдресаКартинок,ЭтаФорма.УникальныйИдентификатор);
	ЗаполнитьДеревоЗначенийКлиент();	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаТерминалахДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка=Ложь;
	СтрокаПеретаскиванияКуда=Элементы.ЗаданияНаТерминалахДерево.ДанныеСтроки(Строка);
	ТСД=ПолучитьТСДИзДерева(СтрокаПеретаскиванияКуда);
	//СтрокаПеретаскиванияКуда.
	Если ТСД=Неопределено тогда
		Возврат
	КонецЕсли;	 
	для Каждого стр из ПараметрыПеретаскивания.Значение цикл
		ОбработчикПеретаскиванияСервер(стр,ТСД);
	КонецЦикла;	
	Элементы.ЗаданияКРаспределению.Обновить();
	ДинамическоеОбновление("");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура Развернуть(Команда)
	//СтрокиПаллет=ПаллетМеста.ПолучитьЭлементы();
	//для Каждого Паллета из СтрокиПаллет цикл
	//	Элементы.ПаллетМеста.Развернуть(Паллета.ПолучитьИдентификатор());
	//КонецЦикла;
	Строки=ЗаданияНаТерминалахДерево.ПолучитьЭлементы();
	Если Строки.Количество()>0 тогда
		РазвернутьДанные(Строки);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура РазвернутьДанные(Строки)
	для Каждого Строка из Строки цикл
		Элементы.ЗаданияНаТерминалахДерево.Развернуть(Строка.ПолучитьИдентификатор());
		ПодчиненныеСтроки= Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество()>0 тогда
			РазвернутьДанные(ПодчиненныеСтроки);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	Строки=ЗаданияНаТерминалахДерево.ПолучитьЭлементы();
	Если Строки.Количество()>0 тогда
		СвернутьДанные(Строки);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте	
Процедура СвернутьДанные(Строки)
	для Каждого Строка из Строки цикл
		ПодчиненныеСтроки= Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество()>0 тогда
			СвернутьДанные(ПодчиненныеСтроки);
		КонецЕсли;	
		Элементы.ЗаданияНаТерминалахДерево.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;	
КонецПроцедуры
&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьДеревоЗначений();
	Развернуть("");
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаспределение(Команда)
	Если ТекущийЭлемент.Имя="ЗаданияНаТерминалахДерево" или ТекущийЭлемент.Имя = "ВернутьВРаспределение" тогда
		ТекущийЭлемент=Элементы.ЗаданияНаТерминалахДерево;
		МассивИндексаСтрок=новый Массив;
		//ИндексТекущейСтроки=ТекущийЭлемент.ТекущаяСтрока;
		МассивВыделенныхСтрок=новый  Массив;
		для Каждого стр из ТекущийЭлемент.ВыделенныеСтроки цикл
			МассивВыделенныхСтрок.Добавить(стр);
		КонецЦикла;
		для Каждого стр из МассивВыделенныхСтрок цикл
			ТекущийЭлемент.ТекущаяСтрока=стр;
			Если ТекущийЭлемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено тогда
				//ТекущийЭлемент.ТекущиеДанные.ВБуфере=Истина;
				МассивИндексаСтрок.Добавить(ТекущийЭлемент.ТекущиеДанные.ПолучитьИдентификатор());
			КонецЕсли;
			
			//для Каждого ПодичненногоЭлемента из ТекущийЭлемент.ПодчиненныеЭлементы цикл
			//	ПодичненногоЭлемента.ЦветТекста=WebЦвета.Серый;
			//КонецЦикла;
		КонецЦикла;
		ВернутьВРаспределениеНаСервере(МассивИндексаСтрок);
		Элементы.ЗаданияКРаспределению.Обновить();
		ДинамическоеОбновление("");
		
	КонецЕсли;
	
	
КонецПроцедуры
&НаКлиенте
Процедура ЗавершитьЗадачуПринудительно(Команда)
	ИдентификаторСтроки=ТекущийЭлемент.ТекущиеДанные.ПолучитьИдентификатор();
	ЗавершитьЗадачуПринудительноНаСервере(ИдентификаторСтроки);
	ДинамическоеОбновление("");
КонецПроцедуры

&НаСервере
Процедура ЗавершитьЗадачуПринудительноНаСервере(ИдентификаторСтроки)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
		Строка=ЗаданияНаТерминалахДерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если не  Строка.Данные.Свойство("ИдЗадачи") тогда
			Сообщить("для завершения задачи, наведите курсор на строку с конкретной задачей");
			Возврат
		КонецЕсли;
		БлокировкаДанныхИдЗадачиТСД(Строка);
		ДокументЗадачи=Неопределено;
		НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдЗадачи.Установить(Строка.Данные.ИдЗадачи);
		НаборЗаписей.Прочитать();
		для Каждого стр из НаборЗаписей цикл
			Если стр.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполняется тогда
				Сообщить("Задача <<ВЫПОЛНЯЕТСЯ>> и завершена или отклонена может быть только на ТСД");
				Продолжить;
			КонецЕсли;	
			стр.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполнена;
			стр.ФиксацияЗадачи=Истина;
			ДокументЗадачи=стр.ДокументОснование;
		КонецЦикла;
		Если ДокументЗадачи=Неопределено тогда
			Сообщить("Ошибка!");
			Возврат
		КонецЕсли;
		ОбъектИзменения=ДокументЗадачи.ПолучитьОбъект();
		НаборЗаписейСтрокиЗадачи=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
		НаборЗаписейСтрокиЗадачи.Отбор.ИдЗадачи.Установить(Строка.Данные.ИдЗадачи);
		НаборЗаписейСтрокиЗадачи.Прочитать();
		ФиксацияСтроки=ТипДокументаСФиксациейСтроки(ДокументЗадачи);
		для Каждого Запись из НаборЗаписейСтрокиЗадачи цикл
			МассивСтрокТабличнойЧасти=ОбъектИзменения.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки",Запись.идСтроки));
			для Каждого СтрокаТаблицы из МассивСтрокТабличнойЧасти цикл
				СтрокаТаблицы.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.Выполнена;
				Если ФиксацияСтроки Тогда 
					СтрокаТаблицы.ФиксацияСтроки=Истина;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		
		Попытка
			ОбъектИзменения.Записать();
			НаборЗаписей.Записать();
			
			МассивДокументов=новый Массив;
			МассивДокументов.Добавить(ОбъектИзменения.Ссылка);
			итWMSСлужебныеПроцедурыИФункции.ПроверитьДокументыНаИзменениеСтатуса(МассивДокументов);
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		ЗафиксироватьТранзакцию();

КонецПроцедуры



&НаСервере
Процедура ОтклонитьЗадачуНаСервере(ИдентификаторСтроки)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
		Строка=ЗаданияНаТерминалахДерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если не  Строка.Данные.Свойство("ИдЗадачи") тогда
			Сообщить("для завершения задачи, наведите курсор на строку с конкретной задачей");
			Возврат
		КонецЕсли;
		БлокировкаДанныхИдЗадачиТСД(Строка);
		ДокументЗадачи=Неопределено;
		НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдЗадачи.Установить(Строка.Данные.ИдЗадачи);
		НаборЗаписей.Прочитать();
		для Каждого стр из НаборЗаписей цикл
			Если стр.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Выполняется тогда
				Сообщить("Задача <<ВЫПОЛНЯЕТСЯ>> и завершена или отклонена может быть только на ТСД");
				Продолжить;
			КонецЕсли;	
			стр.Состояние=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
			стр.ФиксацияЗадачи=Истина;
			ДокументЗадачи=стр.ДокументОснование;
		КонецЦикла;
		Если ДокументЗадачи=Неопределено тогда
			Сообщить("Ошибка!");
			Возврат
		КонецЕсли;
		ОбъектИзменения=ДокументЗадачи.ПолучитьОбъект();
		НаборЗаписейСтрокиЗадачи=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
		НаборЗаписейСтрокиЗадачи.Отбор.ИдЗадачи.Установить(Строка.Данные.ИдЗадачи);
		НаборЗаписейСтрокиЗадачи.Прочитать();
		ФиксацияСтроки=ТипДокументаСФиксациейСтроки(ДокументЗадачи);
		для Каждого Запись из НаборЗаписейСтрокиЗадачи цикл
			МассивСтрокТабличнойЧасти=ОбъектИзменения.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки",Запись.идСтроки));
			для Каждого СтрокаТаблицы из МассивСтрокТабличнойЧасти цикл
				СтрокаТаблицы.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
				Если ФиксацияСтроки Тогда 
					СтрокаТаблицы.ФиксацияСтроки=Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Попытка
			ОбъектИзменения.Записать();
			НаборЗаписей.Записать();
			
			МассивДокументов=новый Массив;
			МассивДокументов.Добавить(ОбъектИзменения.Ссылка);
			итWMSСлужебныеПроцедурыИФункции.ПроверитьДокументыНаИзменениеСтатуса(МассивДокументов);

		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьЗадачу(Команда)
	ИдентификаторСтроки=ТекущийЭлемент.ТекущиеДанные.ПолучитьИдентификатор();
	ОтклонитьЗадачуНаСервере(ИдентификаторСтроки);
	ДинамическоеОбновление("");
КонецПроцедуры
&НаКлиенте
Процедура ДинамическоеОбновление(Команда)
	ДинамическоеОбновлениеДерева();
КонецПроцедуры
&НаКлиенте
Процедура ОткатитьДокумент(Команда)
	Оповещение=новый ОписаниеОповещения("ОткатитьДокументОповещение",ЭтаФорма);
	Штрифт=новый Шрифт("Impact", 14, Ложь, Ложь, Истина); 
	ПоказатьВопрос(Оповещение,новый ФорматированнаяСтрока("Выбранный документ и все его текущенные данные,а так же данные исполнителя ТСД задачи
	|будут возвращены к начальному положению и утеряны без возвратно, вы уверены?",Штрифт,WebЦвета.Красный),РежимДиалогаВопрос.ДаНет);
КонецПроцедуры
&НаКлиенте
Процедура ОткатитьДокументОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;	
		ТекущийЭлемент=Элементы.ЗаданияНаТерминалахДерево;
		МассивИндексаСтрок=новый Массив;
		МассивВыделенныхСтрок=новый  Массив;
		для Каждого стр из ТекущийЭлемент.ВыделенныеСтроки цикл
			МассивВыделенныхСтрок.Добавить(стр);
		КонецЦикла;
		для Каждого стр из МассивВыделенныхСтрок цикл
			ТекущийЭлемент.ТекущаяСтрока=стр;
			Если ТекущийЭлемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено тогда
				МассивИндексаСтрок.Добавить(ТекущийЭлемент.ТекущиеДанные.ПолучитьИдентификатор());
			КонецЕсли;
			КонецЦикла;
		ОткатитьДокументНаСервере(МассивИндексаСтрок);
		Элементы.ЗаданияКРаспределению.Обновить();
		ДинамическоеОбновление("");

КонецПроцедуры
&НаСервере
Процедура ОткатитьДокументНаСервере(МассивИндексаСтрок)
	МассивДокументовКПроверке=новый Массив;
	Если МассивИндексаСтрок.Количество()=0 Тогда 
		Возврат
	КонецЕсли;	
	СтрокаДерева=ЗаданияНаТерминалахДерево.НайтиПоИдентификатору(МассивИндексаСтрок[0]);
	Если СтрокаДерева.Данные.Свойство("ДокументОснование") и СтрокаДерева.Данные.Свойство("ТипЗадачи")  тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);		
		БлокировкаДанныхИдЗадачиТСД(СтрокаДерева,"ДокументОснование","ДанныеТранзакции.Данные.ДокументОснование");
		//Если  СтрокаДерева.Данные.СостояниеЗадачи<> Перечисления.итWMSСостоянияЗадачТСД.Выполняется  тогда
		Если ТипДокументаСФиксациейСтроки(СтрокаДерева.Данные.ДокументОснование) Тогда
			ОбработчикОткатаДокументовСФиксацией(МассивДокументовКПроверке, СтрокаДерева);		
		иначе				
			ОткатДокументовБезРежимаФиксации(МассивДокументовКПроверке, СтрокаДерева);
		КонецЕсли;
		ОбъектДокумента= СтрокаДерева.Данные.ДокументОснование.ПолучитьОбъект();
		ОбъектДокумента.ДействияПриОтказеОтИсполненияДокумента();
		/////////Игнорирует ошибки при откате, реализованно пока только на размещении, в дальнейшем реализация на все 
		///////// документы WMS работающие через wms задачи.
		Если ТипЗнч(ОбъектДокумента)=Тип("ДокументОбъект.итWMSРазмещение") Тогда 
			ОбъектДокумента.ИгнорироватьОтказПриПроверках=Истина;
		КонецЕсли;
		ОбъектДокумента.Записать();
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
		КонецПроцедуры
		
		
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Функция ПолучитьТСДИзДерева(СтрокаПеретаскиванияКуда);
	Если ТипЗнч(СтрокаПеретаскиванияКуда.Данные)= тип("Структура")  тогда
		Если СтрокаПеретаскиванияКуда.Данные.Свойство("ТСД") тогда
			Возврат  СтрокаПеретаскиванияКуда.Данные.ТСД;
		иначе
			Если  СтрокаПеретаскиванияКуда.ПолучитьРодителя() = Неопределено тогда
				Возврат Неопределено
			КонецЕсли;	
			Возврат ПолучитьТСДИзДерева(СтрокаПеретаскиванияКуда.ПолучитьРодителя());
		КонецЕсли;	
	иначе
		Если  СтрокаПеретаскиванияКуда.ПолучитьРодителя() = Неопределено тогда
			Возврат Неопределено
		КонецЕсли;	
		Возврат ПолучитьТСДИзДерева(СтрокаПеретаскиванияКуда.ПолучитьРодителя())
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
&НаСервере
Процедура  ОбработчикПеретаскиванияСервер(стр,ТСД)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);	
	Если ТипЗнч(стр) = Тип("РегистрСведенийКлючЗаписи.итWMSЗадачиТСД") тогда
		БлокировкаДанныхИдЗадачиТСД(стр,"ИдЗадачи","ДанныеТранзакции.ИдЗадачи");
		МенеджерЗаписи = РегистрыСведений.итWMSЗадачиТСД.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,стр);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.ТСД=Справочники.итWMSСправочникТСД.ПустаяСсылка() тогда
			МенеджерЗаписи.ТСД=ТСД;
			Если МенеджерЗаписи.ДокументОснование.СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда
				ДокументОбъект=МенеджерЗаписи.ДокументОснование.ПолучитьОбъект();
				ДокументОбъект.СтатусДокумента= Перечисления.итWMSСтатусыСкладскихДокументов.Распределен;
				ДокументОбъект.Записать();
			КонецЕсли;	 	
		КонецЕсли;
		МенеджерЗаписи.Записать(Истина);
	ИначеЕсли ТипЗнч(стр) = тип("СтрокаГруппировкиДинамическогоСписка")  тогда
		Если  стр.ИмяГруппировки = "ДокументОснование" тогда
			БлокировкаДанныхИдЗадачиТСД(стр,"ДокументОснование","ДанныеТранзакции.Ключ");
			НаборЗаписей = РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументОснование.Установить(стр.Ключ);
			НаборЗаписей.Отбор.ТипЗадачи.Установить(стр.РодительскаяГруппировка.Ключ);
			НаборЗаписей.Прочитать();
			для Каждого Запись из НаборЗаписей цикл
				Если Запись.ТСД=Справочники.итWMSСправочникТСД.ПустаяСсылка() тогда
					Запись.ТСД=ТСД;
					Если Запись.ДокументОснование.СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда
						ДокументОбъект=Запись.ДокументОснование.ПолучитьОбъект();
						ДокументОбъект.СтатусДокумента= Перечисления.итWMSСтатусыСкладскихДокументов.Распределен;
						ДокументОбъект.Записать();
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();
			
		КонецЕсли;
	КонецЕсли;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗначений()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСД.ТСД,
	|	итWMSЗадачиТСД.ДокументОснование,
	|	итWMSЗадачиТСД.ТипЗадачи,
	|	итWMSЗадачиТСД.ИдЗадачи,
	|	итWMSЗадачиТСД.ИдЗадачиРодителя,
	|	итWMSЗадачиТСД.ИдентификаторУпаковки,
	|	итWMSЗадачиТСД.ЯчейкаОтправитель,
	|	итWMSЗадачиТСД.ЯчейкаПолучатель,
	|	итWMSЗадачиТСД.ДатаНачала,
	|	итWMSЗадачиТСД.ДатаОкончания,
	|	итWMSЗадачиТСД.Состояние
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ФиксацияЗадачи = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMSСостояниеТСДСрезПоследних.ТСД КАК ТСД,
	|	итWMSСостояниеТСДСрезПоследних.РаботникСклада КАК РаботникСклада,
	|	итWMSСостояниеТСДСрезПоследних.Роль КАК Роль,
	|	итWMSСостояниеТСДСрезПоследних.ТерриторияСклада КАК ТерриторияСклада,
	|	итWMSСостояниеТСДСрезПоследних.Состояние КАК Состояние,
	|	ВТ.ДокументОснование КАК ДокументОснование,
	|	ВТ.ТипЗадачи КАК ТипЗадачи,
	|	ВТ.ИдентификаторУпаковки,
	|	ВТ.ЯчейкаОтправитель,
	|	ВТ.ЯчейкаПолучатель,
	|	ВТ.Состояние КАК СостояниеЗадачи,
	|	ВТ.ИдЗадачи
	|ПОМЕСТИТЬ ВтДанныеДерева
	|ИЗ
	|	РегистрСведений.итWMSСостояниеТСД.СрезПоследних КАК итWMSСостояниеТСДСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	|		ПО итWMSСостояниеТСДСрезПоследних.ТСД = ВТ.ТСД
	|ГДЕ
	|	итWMSСостояниеТСДСрезПоследних.ТСД.Заблокирован = ЛОЖЬ
	|	И итWMSСостояниеТСДСрезПоследних.ТСД.ПометкаУдаления = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА &НеПоказыватьОтключенныеТерминалы
	|				ТОГДА итWMSСостояниеТСДСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияТСД.Отключен)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ИдентификаторУпаковки,
	|	ВТ.ИдЗадачи,
	|	ВТ.ЯчейкаОтправитель,
	|	ВТ.Состояние,
	|	ВТ.ЯчейкаПолучатель,
	|	итWMSСостояниеТСДСрезПоследних.ТерриторияСклада,
	|	итWMSСостояниеТСДСрезПоследних.Состояние,
	|	ВТ.ДокументОснование,
	|	итWMSСостояниеТСДСрезПоследних.Роль,
	|	ВТ.ТипЗадачи,
	|	итWMSСостояниеТСДСрезПоследних.ТСД,
	|	итWMSСостояниеТСДСрезПоследних.РаботникСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеДерева.ТСД КАК ТСД,
	|	ВтДанныеДерева.РаботникСклада КАК РаботникСклада,
	|	ВтДанныеДерева.Роль КАК Роль,
	|	ВтДанныеДерева.ТерриторияСклада КАК ТерриторияСклада,
	|	ВтДанныеДерева.Состояние КАК Состояние,
	|	ВтДанныеДерева.ДокументОснование КАК ДокументОснование,
	|	ВтДанныеДерева.ТипЗадачи КАК ТипЗадачи,
	|	ВтДанныеДерева.ИдентификаторУпаковки,
	|	ВтДанныеДерева.ЯчейкаОтправитель,
	|	ВтДанныеДерева.ЯчейкаПолучатель,
	|	ВтДанныеДерева.СостояниеЗадачи,
	|	ВтДанныеДерева.ИдЗадачи
	|ИЗ
	|	ВтДанныеДерева КАК ВтДанныеДерева
	|ИТОГИ
	|	МАКСИМУМ(РаботникСклада),
	|	МАКСИМУМ(Роль),
	|	МАКСИМУМ(ТерриторияСклада)
	|ПО
	|	Состояние,
	|	ТСД,
	|	ТипЗадачи,
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВтДанныеДерева.ТСД, ЗНАЧЕНИЕ(Справочник.итWMSСправочникТСД.ПустаяССылка)) КАК ТСД,
	|	ЕСТЬNULL(ВтДанныеДерева.РаботникСклада, ЗНАЧЕНИЕ(Справочник.итWMSРаботникиСклада.ПустаяСсылка)) КАК РаботникСклада,
	|	ЕСТЬNULL(ВтДанныеДерева.Роль, ЗНАЧЕНИЕ(Справочник.итWMSРолиРаботниковСклада.ПустаяСсылка)) КАК Роль,
	|	ЕСТЬNULL(ВтДанныеДерева.ТерриторияСклада, ЗНАЧЕНИЕ(Справочник.итТерриторииСкладов.ПустаяСсылка)) КАК ТерриторияСклада,
	|	ЕСТЬNULL(ВтДанныеДерева.Состояние, ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияТСД.ПустаяСсылка)) КАК Состояние,
	|	ЕСТЬNULL(ВтДанныеДерева.ДокументОснование, ЗНАЧЕНИЕ(Документ.итWMSПриемка.ПустаяСсылка)) КАК ДокументОснование,
	|	ЕСТЬNULL(ВтДанныеДерева.ТипЗадачи, ЗНАЧЕНИЕ(Перечисление.итWMSТипыЗадачТСД.ПустаяСсылка)) КАК ТипЗадачи,
	|	ЕСТЬNULL(ВтДанныеДерева.ИдентификаторУпаковки, """") КАК ИдентификаторУпаковки,
	|	ЕСТЬNULL(ВтДанныеДерева.ЯчейкаОтправитель, ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.пустаяСсылка)) КАК ЯчейкаОтправитель,
	|	ЕСТЬNULL(ВтДанныеДерева.ЯчейкаПолучатель, ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.пустаяСсылка)) КАК ЯчейкаПолучатель,
	|	ЕСТЬNULL(ВтДанныеДерева.СостояниеЗадачи, ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.ПустаяСсылка)) КАК СостояниеЗадачи,
	|	ЕСТЬNULL(ВтДанныеДерева.ИдЗадачи, """") КАК ИдЗадачи
	|ИЗ
	|	ВтДанныеДерева КАК ВтДанныеДерева";
	
	Запрос.УстановитьПараметр("НеПоказыватьОтключенныеТерминалы",НеПоказыватьОтключенныеТерминалы);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	СтруктураКартинок = ПолучитьИзВременногоХранилища(АдресБуфераКартинок);
	ВыборкаСостояние=МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаДетальныхДанных=МассивРезультатов[3].Выбрать();
	ТаблицаАнализаДерева.Очистить();
	Пока ВыборкаДетальныхДанных.Следующий() цикл
		НоваяСтрока=ТаблицаАнализаДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныхДанных);
		НоваяСтрока.ИдЗадачи=Строка(ВыборкаДетальныхДанных.ИдЗадачи);
	КонецЦикла;
	ДеревоСервера=РеквизитФормыВЗначение("ЗаданияНаТерминалахДерево");
	ДеревоСервера.Строки.Очистить();
	//ЗаданияНаТерминалахДерево.ПолучитьЭлементы().Очистить();
	пока ВыборкаСостояние.Следующий() цикл
		НоваяСтрокаДереваСостояние = ДеревоСервера.Строки.Добавить();
		НоваяСтрокаДереваСостояние.Представление=Строка(ВыборкаСостояние.Состояние);
		НоваяСтрокаДереваСостояние.Данные = ВыборкаСостояние.Состояние;
		НоваяСтрокаДереваСостояние.Состояние=ВыборкаСостояние.Состояние;
		Если ВыборкаСостояние.Состояние=Перечисления.итWMSСостоянияТСД.ВРаботе тогда
			НоваяСтрокаДереваСостояние.ПолеКартинки = СтруктураКартинок.АктивныеПользователи;
		иначе
			НоваяСтрокаДереваСостояние.ПолеКартинки = СтруктураКартинок.Офлайн;
		КонецЕсли;
		ВыборкаТСД=ВыборкаСостояние.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТСД.Следующий() цикл
			НоваяСтрокаДереваТСД=	НоваяСтрокаДереваСостояние.Строки.Добавить();
			НоваяСтрокаДереваТСД.Представление=Строка(ВыборкаТСД.ТСД)+"-"+ Строка(ВыборкаТСД.РаботникСклада)+" "+Строка(ВыборкаТСД.Роль)+" "+Строка(ВыборкаТСД.ТерриторияСклада);
			НоваяСтрокаДереваТСД.Данные = новый Структура("ТСД,РаботникСклада,Роль,ТерриторияСклада",ВыборкаТСД.ТСД,ВыборкаТСД.РаботникСклада,ВыборкаТСД.Роль,ВыборкаТСД.ТерриторияСклада);
			НоваяСтрокаДереваТСД.ПолеКартинки= СтруктураКартинок.ТСД;
            ЗаполнитьЗначенияСвойств(НоваяСтрокаДереваТСД,ВыборкаТСД);
			ВыборкаПоТипамЗадач = ВыборкаТСД.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			пока ВыборкаПоТипамЗадач.Следующий() цикл
				Если ВыборкаПоТипамЗадач.ТипЗадачи= null  тогда
					Продолжить;
				КонецЕсли;	
				НоваяСтрокаДереваПоЗадачам = НоваяСтрокаДереваТСД.Строки.Добавить();
				НоваяСтрокаДереваПоЗадачам.Представление= Строка(ВыборкаПоТипамЗадач.ТипЗадачи);
				НоваяСтрокаДереваПоЗадачам.Данные=ВыборкаПоТипамЗадач.ТипЗадачи;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДереваПоЗадачам,ВыборкаПоТипамЗадач);
				ВыборкаДокуметОснование=ВыборкаПоТипамЗадач.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				пока ВыборкаДокуметОснование.Следующий() Цикл 
					НоваяСтрокаДереваДокуметОснование=НоваяСтрокаДереваПоЗадачам.Строки.Добавить();
					НоваяСтрокаДереваДокуметОснование.Представление= Строка(ВыборкаДокуметОснование.ДокументОснование);
					НоваяСтрокаДереваДокуметОснование.Данные =новый Структура("ДокументОснование,ТипЗадачи",ВыборкаДокуметОснование.ДокументОснование,ВыборкаДокуметОснование.ТипЗадачи);	
					ЗаполнитьЗначенияСвойств(НоваяСтрокаДереваДокуметОснование,ВыборкаДокуметОснование);
					ВыборкаДетальныхЗаписей = ВыборкаДокуметОснование.Выбрать();
					пока ВыборкаДетальныхЗаписей.Следующий() цикл
						НоваяСтрокаДереваДетальнойЗаписи=НоваяСтрокаДереваДокуметОснование.Строки.Добавить();
						НоваяСтрокаДереваДетальнойЗаписи.Представление= СформироватьПредставлениеДлядетальнойЗаписиДляТипаЗадачи(ВыборкаДетальныхЗаписей);
						НоваяСтрокаДереваДетальнойЗаписи.Данные =новый Структура("ДокументОснование,ИдентификаторУпаковки,ЯчейкаОтправитель,ЯчейкаПолучатель,СостояниеЗадачи,ИдЗадачи,ТипЗадачи",
						ВыборкаДетальныхЗаписей.ДокументОснование,ВыборкаДетальныхЗаписей.ИдентификаторУпаковки,ВыборкаДетальныхЗаписей.ЯчейкаОтправитель,
						ВыборкаДетальныхЗаписей.ЯчейкаПолучатель,ВыборкаДетальныхЗаписей.СостояниеЗадачи,ВыборкаДетальныхЗаписей.ИдЗадачи,ВыборкаДетальныхЗаписей.ТипЗадачи); 
						ЗаполнитьЗначенияСвойств(НоваяСтрокаДереваДетальнойЗаписи,ВыборкаДетальныхЗаписей);
						НоваяСтрокаДереваДетальнойЗаписи.ИдЗадачи=Строка(ВыборкаДетальныхЗаписей.ИдЗадачи);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;
 
	
	ЗначениеВРеквизитФормы(ДеревоСервера,"ЗаданияНаТерминалахДерево");
КонецПроцедуры
&НаСервере
Процедура ДинамическоеОбновлениеДерева()
	ТаблицаНовыхДанных=ПолучитьТаблицыСНовымиДанными();
	Запрос=новый Запрос;
	Запрос.Текст=ПолучитьЗапросДинамическогоОбновления();
	Запрос.УстановитьПараметр("ТаблицаСтарыхДанных",ТаблицаАнализаДерева.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаНовыхДанных",ТаблицаНовыхДанных);
	МассивРезультатов= Запрос.ВыполнитьПакет();
	УдалениеТСДИзДерева(МассивРезультатов[10]);
	УдалениеЗадачТСДДерево(МассивРезультатов[14]);
    ДобавитьТСДвДерево(МассивРезультатов[11]);
	ИзменениеДанныхТСДДерево(МассивРезультатов[12]);
    ДобавитьЗадачиДереваТСД(МассивРезультатов[13]);
	ТаблицаАнализаДерева.Очистить();
	Для Каждого стр из ТаблицаНовыхДанных Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаАнализаДерева.Добавить(),стр);
	КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура УдалениеТСДИзДерева(РезультатЗапроса)
	Выборка=РезультатЗапроса.Выбрать();
	ЭлементыДерева=ЗаданияНаТерминалахДерево.ПолучитьЭлементы();
	Пока Выборка.Следующий() Цикл
		СтрокаСостояния=НайтиСтрочкуДерева(ЭлементыДерева,новый Структура("Состояние",Выборка.Состояние));
		Если СтрокаСостояния=Неопределено Тогда 
			ВызватьИсключение "Критическая ошибка обновления данных динамическим способом";
		КонецЕсли;
		ЭлементыСостояния=СтрокаСостояния.ПолучитьЭлементы();
		СтрокаТСД=НайтиСтрочкуДерева(ЭлементыСостояния,новый Структура("ТСД",Выборка.ТСД));
        Если СтрокаТСД=Неопределено Тогда 
			ВызватьИсключение "Критическая ошибка обновления данных динамическим способом";
		КонецЕсли;
		ЭлементыСостояния.Удалить(СтрокаТСД);
		Если ЭлементыСостояния.Количество()=0 Тогда 
			ЭлементыДерева.Удалить(СтрокаСостояния);
		КонецЕсли;
	КонецЦикла;
	КонецПроцедуры
&НаСервере	
Процедура УдалениеЗадачТСДДерево(РезультатЗапроса)
	ЭлементыДерева=ЗаданияНаТерминалахДерево.ПолучитьЭлементы();	
	ВыборкаСостояние=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСостояние.Следующий() цикл
		СтрокаСостояния=НайтиСтрочкуДерева(ЭлементыДерева,новый Структура("Состояние",ВыборкаСостояние.Состояние));
		Если СтрокаСостояния=Неопределено Тогда 
			ВызватьИсключение "Критическая ошибка обновления данных динамическим способом";
		КонецЕсли;	
		ЭлементыСостояния=СтрокаСостояния.ПолучитьЭлементы();
		ВыборкаТСД=ВыборкаСостояние.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТСД.Следующий() цикл
			СтрокаТСД= НайтиСтрочкуДерева(ЭлементыСостояния,новый Структура("ТСД",ВыборкаТСД.ТСД));
			Если СтрокаТСД=Неопределено Тогда 
				ВызватьИсключение "Критическая ошибка обновления данных динамическим способом";
			КонецЕсли;
			ЭлементыТСД=СтрокаТСД.ПолучитьЭлементы();
			ВыборкаТипЗадачи=ВыборкаТСД.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаТипЗадачи.Следующий() цикл
				СтрокаТипаЗадач=НайтиСтрочкуДерева(ЭлементыТСД,новый Структура("ТипЗадачи",ВыборкаТипЗадачи.ТипЗадачи));
				Если СтрокаТипаЗадач=Неопределено Тогда 
					ВызватьИсключение "Критическая ошибка обновления данных динамическим способом";
				КонецЕсли;
				ЭлементыСтрокиТипаЗадач=СтрокаТипаЗадач.ПолучитьЭлементы();
				ВыборкаДокументОснование= ВыборкаТипЗадачи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаДокументОснование.Следующий() цикл
					СтрокаДокументаОснования=НайтиСтрочкуДерева(ЭлементыСтрокиТипаЗадач,новый Структура("ДокументОснование",ВыборкаДокументОснование.ДокументОснование));
					Если СтрокаДокументаОснования=Неопределено Тогда 
						ВызватьИсключение "Критическая ошибка обновления данных динамическим способом";
					КонецЕсли;
					ЭлементыДокументаОснования=СтрокаДокументаОснования.ПолучитьЭлементы();
					ВыборкаДетальнойЗаписи=ВыборкаДокументОснование.Выбрать();
					Пока ВыборкаДетальнойЗаписи.Следующий() цикл
						СтрокаЗадачи=НайтиСтрочкуДерева(ЭлементыДокументаОснования,новый Структура("ИдЗадачи",ВыборкаДетальнойЗаписи.ИдЗадачи));
						Если СтрокаЗадачи=Неопределено Тогда 
							ВызватьИсключение "Критическая ошибка обновления данных динамическим способом";
						КонецЕсли;
						ЭлементыДокументаОснования.Удалить(СтрокаЗадачи);
					КонецЦикла;
					Если ЭлементыДокументаОснования.Количество()=0 Тогда 
						ЭлементыСтрокиТипаЗадач.Удалить(СтрокаДокументаОснования);
					КонецЕсли;
				КонецЦикла;
				Если ЭлементыСтрокиТипаЗадач.Количество()=0 Тогда 
					ЭлементыТСД.Удалить(СтрокаТипаЗадач);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура ИзменениеДанныхТСДДерево(РезультатЗапроса)
	Выборка=РезультатЗапроса.Выбрать();
	ЭлементыДерева=ЗаданияНаТерминалахДерево.ПолучитьЭлементы();
	Пока Выборка.Следующий() Цикл
		СтрокаСостояния=НайтиСтрочкуДерева(ЭлементыДерева,новый Структура("Состояние",Выборка.СостояниеНовое));
		Если СтрокаСостояния=Неопределено Тогда 
			ВызватьИсключение "Критическая ошибка обновления данных динамическим способом";
		КонецЕсли;
		Если Выборка.СостояниеНовое<> Выборка.СостояниеСтарое Тогда 
			СтрокаСостоянияСтарое=НайтиСтрочкуДерева(ЭлементыДерева,новый Структура("Состояние",Выборка.СостояниеСтарое));
			Если СтрокаСостоянияСтарое=Неопределено Тогда 
				ВызватьИсключение "Критическая ошибка обновления данных динамическим способом";
			КонецЕсли;
			ЭлементыСостоянияСтарого=СтрокаСостоянияСтарое.ПолучитьЭлементы();
			СтрокаТСДСтароеСостояние=НайтиСтрочкуДерева(ЭлементыСостоянияСтарого,новый Структура("ТСД",Выборка.ТСД));
			ПересоздатьЭлементСНовымПодчинением(СтрокаТСДСтароеСостояние,СтрокаСостояния.ПолучитьЭлементы());
			ЭлементыСостоянияСтарого.Удалить(СтрокаТСДСтароеСостояние);
		КонецЕсли;
		ЭлементыСостояния=СтрокаСостояния.ПолучитьЭлементы();
		СтрокаТСД=НайтиСтрочкуДерева(ЭлементыСостояния,новый Структура("ТСД",Выборка.ТСД));
		Если СтрокаТСД=Неопределено Тогда 
			ВызватьИсключение "Критическая ошибка обновления данных динамическим способом";
    	КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТСД,Выборка);
		СтрокаТСД.Представление=Строка(Выборка.ТСД)+"-"+ Строка(Выборка.РаботникСклада)+" "+Строка(Выборка.Роль)+" "+Строка(Выборка.ТерриторияСклада);
		СтрокаТСД.Данные=новый Структура("ТСД,РаботникСклада,Роль,ТерриторияСклада",Выборка.ТСД,Выборка.РаботникСклада,Выборка.Роль,Выборка.ТерриторияСклада);
	КонецЦикла;
	КонецПроцедуры
&НаСервере		
Процедура ДобавитьТСДвДерево(РезультатЗапроса)
	СтруктураКартинок = ПолучитьИзВременногоХранилища(АдресБуфераКартинок);
	Выборка=РезультатЗапроса.Выбрать();
	ЭлементыДерева=ЗаданияНаТерминалахДерево.ПолучитьЭлементы();
	Пока Выборка.Следующий() Цикл
		СтрокаСостояния=НайтиСтрочкуДерева(ЭлементыДерева,новый Структура("Состояние",Выборка.Состояние));
		Если СтрокаСостояния=Неопределено Тогда 
			СтрокаСостояния=ЭлементыДерева.Добавить();
			СтрокаСостояния.Состояние=Выборка.Состояние;
			СтрокаСостояния.Представление=Строка(Выборка.Состояние);
			СтрокаСостояния.Данные=Выборка.Состояние;
			Если Выборка.Состояние=Перечисления.итWMSСостоянияТСД.ВРаботе тогда
				СтрокаСостояния.ПолеКартинки = СтруктураКартинок.АктивныеПользователи;
			иначе
				СтрокаСостояния.ПолеКартинки = СтруктураКартинок.Офлайн;
			КонецЕсли;
		КонецЕсли;
		ЭлементыСостояния=СтрокаСостояния.ПолучитьЭлементы();
		СтрокаТСД=НайтиСтрочкуДерева(ЭлементыСостояния,новый Структура("ТСД",Выборка.ТСД));
		Если СтрокаТСД<>Неопределено Тогда 
			ВызватьИсключение "Критическая ошибка обновления данных динамическим способом";
		КонецЕсли;
		СтрокаТСД=ЭлементыСостояния.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТСД,Выборка);
		СтрокаТСД.Представление=Строка(Выборка.ТСД)+"-"+ Строка(Выборка.РаботникСклада)+" "+Строка(Выборка.Роль)+" "+Строка(Выборка.ТерриторияСклада);
		СтрокаТСД.Данные=новый Структура("ТСД,РаботникСклада,Роль,ТерриторияСклада",Выборка.ТСД,Выборка.РаботникСклада,Выборка.Роль,Выборка.ТерриторияСклада);
		СтрокаТСД.ПолеКартинки= СтруктураКартинок.ТСД;
		КонецЦикла;
	
	КонецПроцедуры
&НаСервере
Процедура ДобавитьЗадачиДереваТСД(РезультатЗапроса)
	ЭлементыДерева=ЗаданияНаТерминалахДерево.ПолучитьЭлементы();	
	ВыборкаСостояние=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСостояние.Следующий() цикл
		СтрокаСостояния=НайтиСтрочкуДерева(ЭлементыДерева,новый Структура("Состояние",ВыборкаСостояние.Состояние));
		Если СтрокаСостояния=Неопределено Тогда 
			ВызватьИсключение "Критическая ошибка обновления данных динамическим способом";
		КонецЕсли;	
		ЭлементыСостояния=СтрокаСостояния.ПолучитьЭлементы();
		ВыборкаТСД=ВыборкаСостояние.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТСД.Следующий() цикл
			СтрокаТСД= НайтиСтрочкуДерева(ЭлементыСостояния,новый Структура("ТСД",ВыборкаТСД.ТСД));
			Если СтрокаТСД=Неопределено Тогда 
				ВызватьИсключение "Критическая ошибка обновления данных динамическим способом";
			КонецЕсли;
			ЭлементыТСД=СтрокаТСД.ПолучитьЭлементы();
			ВыборкаТипЗадачи=ВыборкаТСД.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаТипЗадачи.Следующий() цикл
				СтрокаТипаЗадач=НайтиСтрочкуДерева(ЭлементыТСД,новый Структура("ТипЗадачи",ВыборкаТипЗадачи.ТипЗадачи));
				Если СтрокаТипаЗадач=Неопределено Тогда 
					СтрокаТипаЗадач= ЭлементыТСД.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТипаЗадач,ВыборкаТипЗадачи);
					СтрокаТипаЗадач.Представление=Строка(ВыборкаТипЗадачи.ТипЗадачи);
					СтрокаТипаЗадач.Данные=ВыборкаТипЗадачи.ТипЗадачи;
				КонецЕсли;
				ЭлементыСтрокиТипаЗадач=СтрокаТипаЗадач.ПолучитьЭлементы();
				ВыборкаДокументОснование= ВыборкаТипЗадачи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаДокументОснование.Следующий() цикл
					СтрокаДокументаОснования=НайтиСтрочкуДерева(ЭлементыСтрокиТипаЗадач,новый Структура("ДокументОснование",ВыборкаДокументОснование.ДокументОснование));
					Если СтрокаДокументаОснования=Неопределено Тогда
						СтрокаДокументаОснования= ЭлементыСтрокиТипаЗадач.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДокументаОснования,ВыборкаДокументОснование);
						СтрокаДокументаОснования.Представление=Строка(ВыборкаДокументОснование.ДокументОснование);
						СтрокаДокументаОснования.Данные=новый Структура("ДокументОснование,ТипЗадачи",ВыборкаДокументОснование.ДокументОснование,ВыборкаДокументОснование.ТипЗадачи);
					КонецЕсли;
					ЭлементыДокументаОснования=СтрокаДокументаОснования.ПолучитьЭлементы();
					ВыборкаДетальнойЗаписи=ВыборкаДокументОснование.Выбрать();
					Пока ВыборкаДетальнойЗаписи.Следующий() цикл
						СтрокаЗадачи=ЭлементыДокументаОснования.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаЗадачи,ВыборкаДетальнойЗаписи);
						СтрокаЗадачи.Представление=СформироватьПредставлениеДлядетальнойЗаписиДляТипаЗадачи(ВыборкаДетальнойЗаписи);
						СтрокаЗадачи.Данные=новый Структура("ДокументОснование,ИдентификаторУпаковки,ЯчейкаОтправитель,ЯчейкаПолучатель,СостояниеЗадачи,ИдЗадачи,ТипЗадачи",
						ВыборкаДетальнойЗаписи.ДокументОснование,ВыборкаДетальнойЗаписи.ИдентификаторУпаковки,ВыборкаДетальнойЗаписи.ЯчейкаОтправитель,
						ВыборкаДетальнойЗаписи.ЯчейкаПолучатель,ВыборкаДетальнойЗаписи.СостояниеЗадачи,новый УникальныйИдентификатор(ВыборкаДетальнойЗаписи.ИдЗадачи),ВыборкаДетальнойЗаписи.ТипЗадачи); 
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
&НаСервере	
Функция  ПересоздатьЭлементСНовымПодчинением(СтарыйЭлемент,СтрокаНовогоПодчинения)
	НовыйЭлемент=СтрокаНовогоПодчинения.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент,СтарыйЭлемент);
	Если СтарыйЭлемент.ПолучитьЭлементы().Количество()>0 Тогда 
		РекурсияПересозданияЭлементов(НовыйЭлемент,СтарыйЭлемент);
	КонецЕсли;
    Возврат НовыйЭлемент;
	КонецФункции
&НаСервере	
Процедура РекурсияПересозданияЭлементов(НовыйЭлемент,СтарыйЭлемент)
ЭлементыПодчинения=СтарыйЭлемент.ПолучитьЭлементы();
Для Каждого стр из ЭлементыПодчинения цикл
	СтрокаНовогоЭлемента=НовыйЭлемент.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНовогоЭлемента,стр);
	Если ЭлементыПодчинения.ПолучитьЭлементы().Количество()>0 Тогда
		РекурсияПересозданияЭлементов(СтрокаНовогоЭлемента,стр);
	КонецЕсли;
КонецЦикла;
		КонецПроцедуры
	
&НаСервере
Функция НайтиСтрочкуДерева(КолекцияЭлементов,СтруктураПоиска)
	СтрокаДерева=Неопределено;
	Для Каждого стр из КолекцияЭлементов цикл
		ВсеСошлись=Истина;
		Для Каждого Элемент из СтруктураПоиска Цикл 
			Если стр[Элемент.Ключ]<>Элемент.Значение Тогда 
				ВсеСошлись=Ложь;
			КонецЕсли;	
		КонецЦикла;
		Если ВсеСошлись Тогда 
			СтрокаДерева=стр;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат СтрокаДерева;
	КонецФункции
&НаСервере
Функция ПолучитьЗапросДинамическогоОбновления()
	Текст="ВЫБРАТЬ
	      |	ТаблицаСтарыхДанных.ТСД,
	      |	ТаблицаСтарыхДанных.РаботникСклада,
	      |	ТаблицаСтарыхДанных.Роль,
	      |	ТаблицаСтарыхДанных.ТерриторияСклада,
	      |	ТаблицаСтарыхДанных.Состояние,
	      |	ТаблицаСтарыхДанных.ДокументОснование КАК ДокументОснование,
	      |	ТаблицаСтарыхДанных.ТипЗадачи,
	      |	ТаблицаСтарыхДанных.ИдентификаторУпаковки,
	      |	ТаблицаСтарыхДанных.ЯчейкаОтправитель,
	      |	ТаблицаСтарыхДанных.ЯчейкаПолучатель,
	      |	ТаблицаСтарыхДанных.СостояниеЗадачи,
	      |	ТаблицаСтарыхДанных.ИдЗадачи
	      |ПОМЕСТИТЬ Вт1
	      |ИЗ
	      |	&ТаблицаСтарыхДанных КАК ТаблицаСтарыхДанных
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ТаблицаНовыхДанных.ТСД,
	      |	ТаблицаНовыхДанных.РаботникСклада,
	      |	ТаблицаНовыхДанных.Роль,
	      |	ТаблицаНовыхДанных.ТерриторияСклада,
	      |	ТаблицаНовыхДанных.Состояние,
	      |	ТаблицаНовыхДанных.ДокументОснование КАК ДокументОснование,
	      |	ТаблицаНовыхДанных.ТипЗадачи,
	      |	ТаблицаНовыхДанных.ИдентификаторУпаковки,
	      |	ТаблицаНовыхДанных.ЯчейкаОтправитель,
	      |	ТаблицаНовыхДанных.ЯчейкаПолучатель,
	      |	ТаблицаНовыхДанных.СостояниеЗадачи,
	      |	ТаблицаНовыхДанных.ИдЗадачи
	      |ПОМЕСТИТЬ Вт2
	      |ИЗ
	      |	&ТаблицаНовыхДанных КАК ТаблицаНовыхДанных
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ЕСТЬNULL(Вт1.ТСД, ЗНАЧЕНИЕ(Справочник.итWMSСправочникТСД.ПустаяССылка)) КАК ТСД,
	      |	ЕСТЬNULL(Вт1.РаботникСклада, ЗНАЧЕНИЕ(Справочник.итWMSРаботникиСклада.ПустаяСсылка)) КАК РаботникСклада,
	      |	ЕСТЬNULL(Вт1.Роль, ЗНАЧЕНИЕ(Справочник.итWMSРолиРаботниковСклада.ПустаяСсылка)) КАК Роль,
	      |	ЕСТЬNULL(Вт1.ТерриторияСклада, ЗНАЧЕНИЕ(Справочник.итТерриторииСкладов.ПустаяСсылка)) КАК ТерриторияСклада,
	      |	ЕСТЬNULL(Вт1.Состояние, ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияТСД.ПустаяСсылка)) КАК Состояние,
	      |	ВЫБОР
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт1.ДокументОснование) = ТИП(Документ.итWMSПриемка)
	      |			ТОГДА ВЫРАЗИТЬ(Вт1.ДокументОснование КАК Документ.итWMSПриемка)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт1.ДокументОснование) = ТИП(Документ.итWMSРазмещение)
	      |			ТОГДА ВЫРАЗИТЬ(Вт1.ДокументОснование КАК Документ.итWMSРазмещение)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт1.ДокументОснование) = ТИП(Документ.итWMSПеремещение)
	      |			ТОГДА ВЫРАЗИТЬ(Вт1.ДокументОснование КАК Документ.итWMSПеремещение)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт1.ДокументОснование) = ТИП(Документ.итWMSНаборка)
	      |			ТОГДА ВЫРАЗИТЬ(Вт1.ДокументОснование КАК Документ.итWMSНаборка)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт1.ДокументОснование) = ТИП(Документ.итWMSЗадачиИнвентаризации)
	      |			ТОГДА ВЫРАЗИТЬ(Вт1.ДокументОснование КАК Документ.итWMSЗадачиИнвентаризации)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт1.ДокументОснование) = ТИП(Документ.итWMSОтгрузка)
	      |			ТОГДА ВЫРАЗИТЬ(Вт1.ДокументОснование КАК Документ.итWMSОтгрузка)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт1.ДокументОснование) = ТИП(Документ.итWMSКонтрольнаяОперацияАгрегации)
	      |			ТОГДА ВЫРАЗИТЬ(Вт1.ДокументОснование КАК Документ.итWMSКонтрольнаяОперацияАгрегации)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт1.ДокументОснование) = ТИП(Документ.итWMSПроверка)
	      |			ТОГДА ВЫРАЗИТЬ(Вт1.ДокументОснование КАК Документ.итWMSПроверка)
	      |		ИНАЧЕ ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Документ.итWMSПриемка.ПустаяСсылка) КАК Документ.итWMSПриемка)
	      |	КОНЕЦ КАК ДокументОснование,
	      |	ЕСТЬNULL(Вт1.ТипЗадачи, ЗНАЧЕНИЕ(Перечисление.итWMSТипыЗадачТСД.ПустаяСсылка)) КАК ТипЗадачи,
	      |	ЕСТЬNULL(Вт1.ИдентификаторУпаковки, """""""") КАК ИдентификаторУпаковки,
	      |	ЕСТЬNULL(Вт1.ЯчейкаОтправитель, ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.пустаяСсылка)) КАК ЯчейкаОтправитель,
	      |	ЕСТЬNULL(Вт1.ЯчейкаПолучатель, ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.пустаяСсылка)) КАК ЯчейкаПолучатель,
	      |	ЕСТЬNULL(Вт1.СостояниеЗадачи, ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.ПустаяСсылка)) КАК СостояниеЗадачи,
	      |	ЕСТЬNULL(Вт1.ИдЗадачи, """""""") КАК ИдЗадачи
	      |ПОМЕСТИТЬ Вт1Типовизированная
	      |ИЗ
	      |	Вт1 КАК Вт1
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ЕСТЬNULL(Вт2.ТСД, ЗНАЧЕНИЕ(Справочник.итWMSСправочникТСД.ПустаяССылка)) КАК ТСД,
	      |	ЕСТЬNULL(Вт2.РаботникСклада, ЗНАЧЕНИЕ(Справочник.итWMSРаботникиСклада.ПустаяСсылка)) КАК РаботникСклада,
	      |	ЕСТЬNULL(Вт2.Роль, ЗНАЧЕНИЕ(Справочник.итWMSРолиРаботниковСклада.ПустаяСсылка)) КАК Роль,
	      |	ЕСТЬNULL(Вт2.ТерриторияСклада, ЗНАЧЕНИЕ(Справочник.итТерриторииСкладов.ПустаяСсылка)) КАК ТерриторияСклада,
	      |	ЕСТЬNULL(Вт2.Состояние, ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияТСД.ПустаяСсылка)) КАК Состояние,
	      |	ВЫБОР
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт2.ДокументОснование) = ТИП(Документ.итWMSПриемка)
	      |			ТОГДА ВЫРАЗИТЬ(Вт2.ДокументОснование КАК Документ.итWMSПриемка)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт2.ДокументОснование) = ТИП(Документ.итWMSРазмещение)
	      |			ТОГДА ВЫРАЗИТЬ(Вт2.ДокументОснование КАК Документ.итWMSРазмещение)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт2.ДокументОснование) = ТИП(Документ.итWMSПеремещение)
	      |			ТОГДА ВЫРАЗИТЬ(Вт2.ДокументОснование КАК Документ.итWMSПеремещение)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт2.ДокументОснование) = ТИП(Документ.итWMSНаборка)
	      |			ТОГДА ВЫРАЗИТЬ(Вт2.ДокументОснование КАК Документ.итWMSНаборка)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт2.ДокументОснование) = ТИП(Документ.итWMSЗадачиИнвентаризации)
	      |			ТОГДА ВЫРАЗИТЬ(Вт2.ДокументОснование КАК Документ.итWMSЗадачиИнвентаризации)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт2.ДокументОснование) = ТИП(Документ.итWMSОтгрузка)
	      |			ТОГДА ВЫРАЗИТЬ(Вт2.ДокументОснование КАК Документ.итWMSОтгрузка)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт2.ДокументОснование) = ТИП(Документ.итWMSКонтрольнаяОперацияАгрегации)
	      |			ТОГДА ВЫРАЗИТЬ(Вт2.ДокументОснование КАК Документ.итWMSКонтрольнаяОперацияАгрегации)
	      |		КОГДА ТИПЗНАЧЕНИЯ(Вт2.ДокументОснование) = ТИП(Документ.итWMSПроверка)
	      |			ТОГДА ВЫРАЗИТЬ(Вт2.ДокументОснование КАК Документ.итWMSПроверка)
	      |		ИНАЧЕ ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Документ.итWMSПриемка.ПустаяСсылка) КАК Документ.итWMSПриемка)
	      |	КОНЕЦ КАК ДокументОснование,
	      |	ЕСТЬNULL(Вт2.ТипЗадачи, ЗНАЧЕНИЕ(Перечисление.итWMSТипыЗадачТСД.ПустаяСсылка)) КАК ТипЗадачи,
	      |	ЕСТЬNULL(Вт2.ИдентификаторУпаковки, """""""") КАК ИдентификаторУпаковки,
	      |	ЕСТЬNULL(Вт2.ЯчейкаОтправитель, ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.пустаяСсылка)) КАК ЯчейкаОтправитель,
	      |	ЕСТЬNULL(Вт2.ЯчейкаПолучатель, ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.пустаяСсылка)) КАК ЯчейкаПолучатель,
	      |	ЕСТЬNULL(Вт2.СостояниеЗадачи, ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.ПустаяСсылка)) КАК СостояниеЗадачи,
	      |	ЕСТЬNULL(Вт2.ИдЗадачи, """""""") КАК ИдЗадачи
	      |ПОМЕСТИТЬ Вт2Типовизированная
	      |ИЗ
	      |	Вт2 КАК Вт2
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Вт1Типовизированная.ТСД,
	      |	МАКСИМУМ(Вт1Типовизированная.Состояние) КАК Состояние
	      |ПОМЕСТИТЬ ТСДКУдалению
	      |ИЗ
	      |	Вт1Типовизированная КАК Вт1Типовизированная
	      |ГДЕ
	      |	НЕ Вт1Типовизированная.ТСД В
	      |				(ВЫБРАТЬ
	      |					Вт2Типовизированная.ТСД
	      |				ИЗ
	      |					Вт2Типовизированная КАК Вт2Типовизированная
	      |				СГРУППИРОВАТЬ ПО
	      |					Вт2Типовизированная.ТСД)
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	Вт1Типовизированная.ТСД
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Вт2Типовизированная.ТСД,
	      |	МАКСИМУМ(Вт2Типовизированная.Состояние) КАК Состояние,
	      |	МАКСИМУМ(Вт2Типовизированная.Роль) КАК Роль,
	      |	МАКСИМУМ(Вт2Типовизированная.ТерриторияСклада) КАК ТерриторияСклада,
	      |	МАКСИМУМ(Вт2Типовизированная.РаботникСклада) КАК РаботникСклада
	      |ПОМЕСТИТЬ ВтТсдКДобавлению
	      |ИЗ
	      |	Вт2Типовизированная КАК Вт2Типовизированная
	      |ГДЕ
	      |	НЕ Вт2Типовизированная.ТСД В
	      |				(ВЫБРАТЬ
	      |					Вт1Типовизированная.ТСД
	      |				ИЗ
	      |					Вт1Типовизированная КАК Вт1Типовизированная)
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	Вт2Типовизированная.ТСД
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Вт2Типовизированная.ИдЗадачи
	      |ПОМЕСТИТЬ ИзмененныеЗадачи
	      |ИЗ
	      |	Вт2Типовизированная КАК Вт2Типовизированная
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт1Типовизированная КАК Вт1Типовизированная
	      |		ПО Вт2Типовизированная.ИдЗадачи = Вт1Типовизированная.ИдЗадачи
	      |			И (Вт2Типовизированная.ИдЗадачи <> """")
	      |ГДЕ
	      |	ВЫБОР
	      |			КОГДА ТИПЗНАЧЕНИЯ(Вт1Типовизированная.ДокументОснование) <> ТИПЗНАЧЕНИЯ(Вт2Типовизированная.ДокументОснование)
	      |				ТОГДА ИСТИНА
	      |			КОГДА Вт1Типовизированная.ТипЗадачи <> Вт2Типовизированная.ТипЗадачи
	      |				ТОГДА ИСТИНА
	      |			КОГДА Вт1Типовизированная.ИдентификаторУпаковки <> Вт2Типовизированная.ИдентификаторУпаковки
	      |				ТОГДА ИСТИНА
	      |			КОГДА Вт1Типовизированная.ЯчейкаОтправитель <> Вт2Типовизированная.ЯчейкаОтправитель
	      |				ТОГДА ИСТИНА
	      |			КОГДА Вт1Типовизированная.ЯчейкаПолучатель <> Вт2Типовизированная.ЯчейкаПолучатель
	      |				ТОГДА ИСТИНА
	      |			КОГДА Вт1Типовизированная.СостояниеЗадачи <> Вт2Типовизированная.СостояниеЗадачи
	      |				ТОГДА ИСТИНА
	      |			КОГДА ТИПЗНАЧЕНИЯ(Вт1Типовизированная.ДокументОснование) = ТИПЗНАЧЕНИЯ(Вт2Типовизированная.ДокументОснование)
	      |				ТОГДА ВЫБОР
	      |						КОГДА Вт1Типовизированная.ДокументОснование = Вт2Типовизированная.ДокументОснование
	      |							ТОГДА ЛОЖЬ
	      |						ИНАЧЕ ИСТИНА
	      |					КОНЕЦ
	      |			ИНАЧЕ ЛОЖЬ
	      |		КОНЕЦ
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	Вт2Типовизированная.ИдЗадачи
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Вт2Типовизированная.ТСД,
	      |	Вт2Типовизированная.РаботникСклада,
	      |	Вт2Типовизированная.Роль,
	      |	Вт2Типовизированная.ТерриторияСклада,
	      |	Вт2Типовизированная.Состояние,
	      |	Вт2Типовизированная.ДокументОснование,
	      |	Вт2Типовизированная.ТипЗадачи,
	      |	Вт2Типовизированная.ИдентификаторУпаковки,
	      |	Вт2Типовизированная.ЯчейкаОтправитель,
	      |	Вт2Типовизированная.ЯчейкаПолучатель,
	      |	Вт2Типовизированная.СостояниеЗадачи,
	      |	Вт2Типовизированная.ИдЗадачи
	      |ПОМЕСТИТЬ НовыеЗадачи
	      |ИЗ
	      |	Вт2Типовизированная КАК Вт2Типовизированная
	      |ГДЕ
	      |	НЕ Вт2Типовизированная.ИдЗадачи В
	      |				(ВЫБРАТЬ
	      |					Вт1Типовизированная.ИдЗадачи
	      |				ИЗ
	      |					Вт1Типовизированная КАК Вт1Типовизированная
	      |				СГРУППИРОВАТЬ ПО
	      |					Вт1Типовизированная.ИдЗадачи)
	      |	И Вт2Типовизированная.ИдЗадачи <> """"
	      |
	      |ОБЪЕДИНИТЬ ВСЕ
	      |
	      |ВЫБРАТЬ
	      |	Вт2Типовизированная.ТСД,
	      |	Вт2Типовизированная.РаботникСклада,
	      |	Вт2Типовизированная.Роль,
	      |	Вт2Типовизированная.ТерриторияСклада,
	      |	Вт2Типовизированная.Состояние,
	      |	Вт2Типовизированная.ДокументОснование,
	      |	Вт2Типовизированная.ТипЗадачи,
	      |	Вт2Типовизированная.ИдентификаторУпаковки,
	      |	Вт2Типовизированная.ЯчейкаОтправитель,
	      |	Вт2Типовизированная.ЯчейкаПолучатель,
	      |	Вт2Типовизированная.СостояниеЗадачи,
	      |	Вт2Типовизированная.ИдЗадачи
	      |ИЗ
	      |	ИзмененныеЗадачи КАК ИзмененныеЗадачи
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт2Типовизированная КАК Вт2Типовизированная
	      |		ПО ИзмененныеЗадачи.ИдЗадачи = Вт2Типовизированная.ИдЗадачи
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Вт1Типовизированная.ТСД,
	      |	Вт1Типовизированная.РаботникСклада,
	      |	Вт1Типовизированная.Роль,
	      |	Вт1Типовизированная.ТерриторияСклада,
	      |	Вт1Типовизированная.Состояние,
	      |	Вт1Типовизированная.ДокументОснование,
	      |	Вт1Типовизированная.ТипЗадачи,
	      |	Вт1Типовизированная.ИдентификаторУпаковки,
	      |	Вт1Типовизированная.ЯчейкаОтправитель,
	      |	Вт1Типовизированная.ЯчейкаПолучатель,
	      |	Вт1Типовизированная.СостояниеЗадачи,
	      |	Вт1Типовизированная.ИдЗадачи
	      |ПОМЕСТИТЬ ЗадачиПодУдаление
	      |ИЗ
	      |	Вт1Типовизированная КАК Вт1Типовизированная
	      |ГДЕ
	      |	НЕ Вт1Типовизированная.ИдЗадачи В
	      |				(ВЫБРАТЬ
	      |					Вт2Типовизированная.ИдЗадачи
	      |				ИЗ
	      |					Вт2Типовизированная КАК Вт2Типовизированная
	      |				СГРУППИРОВАТЬ ПО
	      |					Вт2Типовизированная.ИдЗадачи)
	      |	И Вт1Типовизированная.ИдЗадачи <> """"
	      |	И НЕ Вт1Типовизированная.ТСД В
	      |				(ВЫБРАТЬ
	      |					ТСДКУдалению.ТСД
	      |				ИЗ
	      |					ТСДКУдалению КАК ТСДКУдалению)
	      |
	      |ОБЪЕДИНИТЬ ВСЕ
	      |
	      |ВЫБРАТЬ
	      |	Вт1Типовизированная.ТСД,
	      |	Вт1Типовизированная.РаботникСклада,
	      |	Вт1Типовизированная.Роль,
	      |	Вт1Типовизированная.ТерриторияСклада,
	      |	Вт1Типовизированная.Состояние,
	      |	Вт1Типовизированная.ДокументОснование,
	      |	Вт1Типовизированная.ТипЗадачи,
	      |	Вт1Типовизированная.ИдентификаторУпаковки,
	      |	Вт1Типовизированная.ЯчейкаОтправитель,
	      |	Вт1Типовизированная.ЯчейкаПолучатель,
	      |	Вт1Типовизированная.СостояниеЗадачи,
	      |	Вт1Типовизированная.ИдЗадачи
	      |ИЗ
	      |	ИзмененныеЗадачи КАК ИзмененныеЗадачи
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт1Типовизированная КАК Вт1Типовизированная
	      |		ПО ИзмененныеЗадачи.ИдЗадачи = Вт1Типовизированная.ИдЗадачи
	      |ГДЕ
	      |	НЕ Вт1Типовизированная.ТСД В
	      |				(ВЫБРАТЬ
	      |					ТСДКУдалению.ТСД
	      |				ИЗ
	      |					ТСДКУдалению КАК ТСДКУдалению)
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Вт2Типовизированная.ТСД,
	      |	Вт2Типовизированная.Состояние КАК СостояниеНовое,
	      |	Вт2Типовизированная.РаботникСклада,
	      |	Вт2Типовизированная.Роль,
	      |	Вт2Типовизированная.ТерриторияСклада,
	      |	Вт1Типовизированная.Состояние КАК СостояниеСтарое
	      |ПОМЕСТИТЬ ИзменениеСостоянияТСД
	      |ИЗ
	      |	Вт2Типовизированная КАК Вт2Типовизированная
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт1Типовизированная КАК Вт1Типовизированная
	      |		ПО Вт2Типовизированная.ТСД = Вт1Типовизированная.ТСД
	      |ГДЕ
	      |	ВЫБОР
	      |			КОГДА Вт1Типовизированная.РаботникСклада <> Вт2Типовизированная.РаботникСклада
	      |				ТОГДА ИСТИНА
	      |			КОГДА Вт2Типовизированная.Роль <> Вт1Типовизированная.Роль
	      |				ТОГДА ИСТИНА
	      |			КОГДА Вт1Типовизированная.ТерриторияСклада <> Вт2Типовизированная.ТерриторияСклада
	      |				ТОГДА ИСТИНА
	      |			КОГДА Вт2Типовизированная.Состояние <> Вт1Типовизированная.Состояние
	      |				ТОГДА ИСТИНА
	      |			ИНАЧЕ ЛОЖЬ
	      |		КОНЕЦ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ТСДКУдалению.ТСД,
	      |	ТСДКУдалению.Состояние
	      |ИЗ
	      |	ТСДКУдалению КАК ТСДКУдалению
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ВтТсдКДобавлению.ТСД,
	      |	ВтТсдКДобавлению.Состояние,
	      |	ВтТсдКДобавлению.Роль,
	      |	ВтТсдКДобавлению.ТерриторияСклада,
	      |	ВтТсдКДобавлению.РаботникСклада
	      |ИЗ
	      |	ВтТсдКДобавлению КАК ВтТсдКДобавлению
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ИзменениеСостоянияТСД.ТСД,
	      |	ИзменениеСостоянияТСД.СостояниеНовое,
	      |	ИзменениеСостоянияТСД.РаботникСклада,
	      |	ИзменениеСостоянияТСД.Роль,
	      |	ИзменениеСостоянияТСД.ТерриторияСклада,
	      |	ИзменениеСостоянияТСД.СостояниеСтарое
	      |ИЗ
	      |	ИзменениеСостоянияТСД КАК ИзменениеСостоянияТСД
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	НовыеЗадачи.ТСД КАК ТСД,
	      |	НовыеЗадачи.РаботникСклада КАК РаботникСклада,
	      |	НовыеЗадачи.Роль КАК Роль,
	      |	НовыеЗадачи.ТерриторияСклада КАК ТерриторияСклада,
	      |	НовыеЗадачи.Состояние КАК Состояние,
	      |	НовыеЗадачи.ДокументОснование КАК ДокументОснование,
	      |	НовыеЗадачи.ТипЗадачи КАК ТипЗадачи,
	      |	НовыеЗадачи.ИдентификаторУпаковки,
	      |	НовыеЗадачи.ЯчейкаОтправитель,
	      |	НовыеЗадачи.ЯчейкаПолучатель,
	      |	НовыеЗадачи.СостояниеЗадачи,
	      |	НовыеЗадачи.ИдЗадачи
	      |ИЗ
	      |	НовыеЗадачи КАК НовыеЗадачи
	      |ИТОГИ
	      |	МАКСИМУМ(РаботникСклада),
	      |	МАКСИМУМ(Роль),
	      |	МАКСИМУМ(ТерриторияСклада)
	      |ПО
	      |	Состояние,
	      |	ТСД,
	      |	ТипЗадачи,
	      |	ДокументОснование
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ЗадачиПодУдаление.ТСД КАК ТСД,
	      |	ЗадачиПодУдаление.РаботникСклада КАК РаботникСклада,
	      |	ЗадачиПодУдаление.Роль КАК Роль,
	      |	ЗадачиПодУдаление.ТерриторияСклада КАК ТерриторияСклада,
	      |	ЗадачиПодУдаление.Состояние КАК Состояние,
	      |	ЗадачиПодУдаление.ДокументОснование КАК ДокументОснование,
	      |	ЗадачиПодУдаление.ТипЗадачи КАК ТипЗадачи,
	      |	ЗадачиПодУдаление.ИдентификаторУпаковки,
	      |	ЗадачиПодУдаление.ЯчейкаОтправитель,
	      |	ЗадачиПодУдаление.ЯчейкаПолучатель,
	      |	ЗадачиПодУдаление.СостояниеЗадачи,
	      |	ЗадачиПодУдаление.ИдЗадачи
	      |ИЗ
	      |	ЗадачиПодУдаление КАК ЗадачиПодУдаление
	      |ИТОГИ
	      |	МАКСИМУМ(РаботникСклада),
	      |	МАКСИМУМ(Роль),
	      |	МАКСИМУМ(ТерриторияСклада)
	      |ПО
	      |	Состояние,
	      |	ТСД,
	      |	ТипЗадачи,
	      |	ДокументОснование";
	Возврат Текст;
	КонецФункции
&НаСервере
Функция  ПолучитьТаблицыСНовымиДанными()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСД.ТСД,
	|	итWMSЗадачиТСД.ДокументОснование,
	|	итWMSЗадачиТСД.ТипЗадачи,
	|	итWMSЗадачиТСД.ИдЗадачи,
	|	итWMSЗадачиТСД.ИдЗадачиРодителя,
	|	итWMSЗадачиТСД.ИдентификаторУпаковки,
	|	итWMSЗадачиТСД.ЯчейкаОтправитель,
	|	итWMSЗадачиТСД.ЯчейкаПолучатель,
	|	итWMSЗадачиТСД.ДатаНачала,
	|	итWMSЗадачиТСД.ДатаОкончания,
	|	итWMSЗадачиТСД.Состояние
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ФиксацияЗадачи = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMSСостояниеТСДСрезПоследних.ТСД КАК ТСД,
	|	итWMSСостояниеТСДСрезПоследних.РаботникСклада КАК РаботникСклада,
	|	итWMSСостояниеТСДСрезПоследних.Роль КАК Роль,
	|	итWMSСостояниеТСДСрезПоследних.ТерриторияСклада КАК ТерриторияСклада,
	|	итWMSСостояниеТСДСрезПоследних.Состояние КАК Состояние,
	|	ВТ.ДокументОснование КАК ДокументОснование,
	|	ВТ.ТипЗадачи КАК ТипЗадачи,
	|	ВТ.ИдентификаторУпаковки,
	|	ВТ.ЯчейкаОтправитель,
	|	ВТ.ЯчейкаПолучатель,
	|	ВТ.Состояние КАК СостояниеЗадачи,
	|	ВТ.ИдЗадачи
	|ПОМЕСТИТЬ ВтДанныеДерева
	|ИЗ
	|	РегистрСведений.итWMSСостояниеТСД.СрезПоследних КАК итWMSСостояниеТСДСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	|		ПО итWMSСостояниеТСДСрезПоследних.ТСД = ВТ.ТСД
	|ГДЕ
	|	итWMSСостояниеТСДСрезПоследних.ТСД.Заблокирован = ЛОЖЬ
	|	И итWMSСостояниеТСДСрезПоследних.ТСД.ПометкаУдаления = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА &НеПоказыватьОтключенныеТерминалы
	|				ТОГДА итWMSСостояниеТСДСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияТСД.Отключен)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ИдентификаторУпаковки,
	|	ВТ.ИдЗадачи,
	|	ВТ.ЯчейкаОтправитель,
	|	ВТ.Состояние,
	|	ВТ.ЯчейкаПолучатель,
	|	итWMSСостояниеТСДСрезПоследних.ТерриторияСклада,
	|	итWMSСостояниеТСДСрезПоследних.Состояние,
	|	ВТ.ДокументОснование,
	|	итWMSСостояниеТСДСрезПоследних.Роль,
	|	ВТ.ТипЗадачи,
	|	итWMSСостояниеТСДСрезПоследних.ТСД,
	|	итWMSСостояниеТСДСрезПоследних.РаботникСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВтДанныеДерева.ТСД, ЗНАЧЕНИЕ(Справочник.итWMSСправочникТСД.ПустаяССылка)) КАК ТСД,
	|	ЕСТЬNULL(ВтДанныеДерева.РаботникСклада, ЗНАЧЕНИЕ(Справочник.итWMSРаботникиСклада.ПустаяСсылка)) КАК РаботникСклада,
	|	ЕСТЬNULL(ВтДанныеДерева.Роль, ЗНАЧЕНИЕ(Справочник.итWMSРолиРаботниковСклада.ПустаяСсылка)) КАК Роль,
	|	ЕСТЬNULL(ВтДанныеДерева.ТерриторияСклада, ЗНАЧЕНИЕ(Справочник.итТерриторииСкладов.ПустаяСсылка)) КАК ТерриторияСклада,
	|	ЕСТЬNULL(ВтДанныеДерева.Состояние, ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияТСД.ПустаяСсылка)) КАК Состояние,
	|	ЕСТЬNULL(ВтДанныеДерева.ДокументОснование, ЗНАЧЕНИЕ(Документ.итWMSПриемка.ПустаяСсылка)) КАК ДокументОснование,
	|	ЕСТЬNULL(ВтДанныеДерева.ТипЗадачи, ЗНАЧЕНИЕ(Перечисление.итWMSТипыЗадачТСД.ПустаяСсылка)) КАК ТипЗадачи,
	|	ЕСТЬNULL(ВтДанныеДерева.ИдентификаторУпаковки, """") КАК ИдентификаторУпаковки,
	|	ЕСТЬNULL(ВтДанныеДерева.ЯчейкаОтправитель, ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.пустаяСсылка)) КАК ЯчейкаОтправитель,
	|	ЕСТЬNULL(ВтДанныеДерева.ЯчейкаПолучатель, ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.пустаяСсылка)) КАК ЯчейкаПолучатель,
	|	ЕСТЬNULL(ВтДанныеДерева.СостояниеЗадачи, ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.ПустаяСсылка)) КАК СостояниеЗадачи,
	|	ЕСТЬNULL(ВтДанныеДерева.ИдЗадачи, """") КАК ИдЗадачи
	|ИЗ
	|	ВтДанныеДерева КАК ВтДанныеДерева";
	
	Запрос.УстановитьПараметр("НеПоказыватьОтключенныеТерминалы", НеПоказыватьОтключенныеТерминалы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныхДанных = РезультатЗапроса.Выбрать();
	
	ТаблицаОбновления=ПолучитьТаблицуОбновления(РезультатЗапроса);
	Пока ВыборкаДетальныхДанных.Следующий() цикл
		НоваяСтрока=ТаблицаОбновления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныхДанных);
		НоваяСтрока.ИдЗадачи=Строка(ВыборкаДетальныхДанных.ИдЗадачи);
	КонецЦикла;
	
	
	Возврат ТаблицаОбновления;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере
Функция ПолучитьТаблицуОбновления(РезультатЗапроса)
	ТаблицаОбновления=новый ТаблицаЗначений;
	Для Каждого Колонка из РезультатЗапроса.Колонки цикл
		Если Колонка.Имя="ИдЗадачи" Тогда
			ТаблицаОбновления.Колонки.Добавить(Колонка.Имя,новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(36)));
		иначе
			ТаблицаОбновления.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаОбновления;
КонецФункции
&НаКлиенте
Процедура ЗаполнитьДеревоЗначенийКлиент()Экспорт 
	ЗаполнитьДеревоЗначений();
	//ПодключитьОбработчикОжидания("ЗаполнитьДеревоЗначенийКлиент",60,Истина);
	Развернуть("");
КонецПроцедуры
&НаСервере
Процедура ВернутьВРаспределениеНаСервере(МассивИндексаСтрок)
	МассивДокументовКПроверке=новый Массив;
	для Каждого стр из МассивИндексаСтрок цикл
		СтрокаДерева=ЗаданияНаТерминалахДерево.НайтиПоИдентификатору(стр);
		Если ТипЗнч(СтрокаДерева.Данные)=Тип("Структура") тогда
			Если СтрокаДерева.Данные.Свойство("ИдЗадачи") тогда
				Если СтрокаДерева.Данные.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Приемка или СтрокаДерева.Данные.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть тогда
					Перейти ~ПеретаскиваниеДокумента;
				КонецЕсли;	
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);		
				ВернутьВРаспределениеПозадачно(МассивДокументовКПроверке, СтрокаДерева);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			~ПеретаскиваниеДокумента:
			Если СтрокаДерева.Данные.Свойство("ДокументОснование") и СтрокаДерева.Данные.Свойство("ТипЗадачи")  тогда
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);		
				БлокировкаДанныхИдЗадачиТСД(СтрокаДерева,"ДокументОснование","ДанныеТранзакции.Данные.ДокументОснование");
				Если ТипДокументаСФиксациейСтроки(СтрокаДерева.Данные.ДокументОснование) Тогда 
					ОбработчикОткатаДокументовСФиксацией(МассивДокументовКПроверке, СтрокаДерева);
				иначе
					ОткатДокументовБезРежимаФиксации( МассивДокументовКПроверке,  СтрокаДерева);
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	ПроверитьДокументыНаИзменениеСтатуса(МассивДокументовКПроверке);
КонецПроцедуры

&НаСервере
Процедура ВернутьВРаспределениеПозадачно(Знач МассивДокументовКПроверке, Знач СтрокаДерева)
	
	Перем Запись, НаборЗаписей;
	
	БлокировкаДанныхИдЗадачиТСД(СтрокаДерева);
	//Если  СтрокаДерева.Данные.СостояниеЗадачи<> Перечисления.итWMSСостоянияЗадачТСД.Выполняется  тогда
	НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(СтрокаДерева.Данные.ИдЗадачи);
	НаборЗаписей.Прочитать();
	для Каждого  Запись из НаборЗаписей цикл
		Если Запись.Состояние<>Перечисления.итWMSСостоянияЗадачТСД.Выполняется или Запись.Состояние<>Перечисления.итWMSСостоянияЗадачТСД.Выполнена тогда
			Запись.ТСД=Справочники.итWMSСправочникТСД.ПустаяСсылка();
			Запись.ФиксацияЗадачи=Ложь;
			Запись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
			МассивДокументовКПроверке.Добавить(Запись.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();

КонецПроцедуры

&НаСервере
Процедура ОбработчикОткатаДокументовСФиксацией(Знач МассивДокументовКПроверке, Знач СтрокаДерева)
	
	Перем Запись, МассивЗадачКОткату, НаборЗаписей, стр;
	
	МассивЗадачКОткату=ПолучитьМассивЗадачРазрешённыхкОткату(СтрокаДерева.Данные.ДокументОснование);
	Если МассивЗадачКОткату.Количество()=0 Тогда 
		ВызватьИсключение "Нет данных для отката";
	КонецЕсли;
	Для Каждого стр из МассивЗадачКОткату Цикл 
		
		НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдЗадачи.Установить(стр);
		НаборЗаписей.Прочитать();
		для Каждого  Запись из НаборЗаписей цикл
			Если Запись.Состояние<>Перечисления.итWMSСостоянияЗадачТСД.Выполняется или Запись.Состояние<>Перечисления.итWMSСостоянияЗадачТСД.Выполнена тогда
				Запись.ТСД=Справочники.итWMSСправочникТСД.ПустаяСсылка();
				Запись.ФиксацияЗадачи=Ложь;
				Запись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
				МассивДокументовКПроверке.Добавить(Запись.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры
&НаСервере
Процедура ОткатДокументовБезРежимаФиксации(Знач МассивДокументовКПроверке, Знач СтрокаДерева)
			
			Перем Запись, НаборЗаписей;
			
			НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументОснование.Установить(СтрокаДерева.Данные.ДокументОснование);
			НаборЗаписей.Отбор.ТипЗадачи.Установить(СтрокаДерева.Данные.ТипЗадачи);
			
			НаборЗаписей.Прочитать();
			для Каждого  Запись из НаборЗаписей цикл
				Если Запись.Состояние<>Перечисления.итWMSСостоянияЗадачТСД.Выполняется или Запись.Состояние<>Перечисления.итWMSСостоянияЗадачТСД.Выполнена тогда
					Запись.ТСД=Справочники.итWMSСправочникТСД.ПустаяСсылка();
					Запись.ФиксацияЗадачи=Ложь;
					Запись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
					МассивДокументовКПроверке.Добавить(Запись.ДокументОснование);
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();

КонецПроцедуры

&НаСервере
Процедура ПроверитьДокументыНаИзменениеСтатуса(МассивДокументовКПроверке)
	итWMSСлужебныеПроцедурыИФункции.ПроверитьДокументыНаИзменениеСтатуса(МассивДокументовКПроверке,Истина);	
КонецПроцедуры
&НаСервере
Процедура БлокировкаДанныхИдЗадачиТСД(ДанныеТранзакции,ПолеБлокировки="ИдЗадачи",ИсполняемыйКод="ДанныеТранзакции.Данные.ИдЗадачи")
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение(ПолеБлокировки,Вычислить(ИсполняемыйКод));
	БлокировкаДанных.Заблокировать();
КонецПроцедуры
&НаСервере
Функция СформироватьПредставлениеДлядетальнойЗаписиДляТипаЗадачи(Выборка)
	Если Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Приемка Тогда
		Возврат ПредставлениеПриемкиФормирование(Выборка);
	КонецЕсли;
	Если Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.ПриемкаКакЕсть Тогда
		Возврат ПредставлениеПриемкиФормирование(Выборка);
	КонецЕсли;
	Если Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Размещение Тогда
		Возврат ПредставлениеРазмещенияФормирование(Выборка);
	КонецЕсли;
	Если Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Наборка Тогда
		Возврат ПредставлениеНаборкиФормирование(Выборка);
	КонецЕсли;
    Если Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Отгрузка Тогда
		Возврат ПредставлениеОтгрузкиФормирование(Выборка);
	КонецЕсли;
	Если Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.КонтрольнаяАгрегация Тогда
		Возврат ПредставлениеКОАФормирование(Выборка);
	КонецЕсли;
	Если Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Переупаковка Тогда
		Возврат "------";
	КонецЕсли;
	Если Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Проверка Тогда
		Возврат "------";
	КонецЕсли;
	Если Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Перемещение Тогда
		Возврат ПредставлениеПеремещенияФормирование(Выборка);
	КонецЕсли;


    Если Выборка.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Инвентаризация Тогда
		Возврат ПредставлениеИнвентаризацииФормирование(Выборка);
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПредставлениеПеремещенияФормирование(Выборка)
	Представление="Перемещение SSCC № "+Выборка.ИдентификаторУпаковки+ "
	| << "+Строка(Выборка.ЯчейкаОтправитель) +" -> "+Строка(Выборка.ЯчейкаПолучатель)+" >>"+
	" Состояние:"+Выборка.СостояниеЗадачи; 
	Возврат Представление;
	КонецФункции

&НаСервере
Функция ПредставлениеИнвентаризацииФормирование(Выборка)
	Представление="Инвентаризация ячейки "+Строка(Выборка.ЯчейкаОтправитель)+" 
	| Состояние:"+Выборка.СостояниеЗадачи;
	Возврат Представление;	
	КонецФункции
&НаСервере
Функция ПредставлениеКОАФормирование(Выборка)
	Представление="Контрольная агрегация в SSCC № "+Выборка.ИдентификаторУпаковки+" 
	| Состояние:"+Выборка.СостояниеЗадачи;
	Возврат Представление;	
КонецФункции
&НаСервере
Функция  ПредставлениеОтгрузкиФормирование(Выборка)
	Представление="Отгрузка SSCC № "+Выборка.ИдентификаторУпаковки+ "
	| << " +Строка(Выборка.ЯчейкаОтправитель) +" -> "+Строка(Выборка.ЯчейкаПолучатель)+" >>"+" Состояние:"+Выборка.СостояниеЗадачи; 
	Возврат Представление;

	КонецФункции
&НаСервере
Функция ПредставлениеНаборкиФормирование(Выборка)
	Представление="Наборка SSCC № "+Выборка.ИдентификаторУпаковки+ "
	| << "+?(Выборка.ЯчейкаОтправитель.Пустая(),"Сборная ячейка ",Строка(Выборка.ЯчейкаОтправитель)) +" -> "+Строка(Выборка.ЯчейкаПолучатель)+" >>"+
	" Состояние:"+Выборка.СостояниеЗадачи; 
	Возврат Представление;

	КонецФункции
&НаСервере
Функция  ПредставлениеРазмещенияФормирование(Выборка)
	Представление="Размещение SSCC № "+Выборка.ИдентификаторУпаковки+ "
	| << "+Строка(Выборка.ЯчейкаОтправитель) +" -> "+Строка(Выборка.ЯчейкаПолучатель)+" >>"+
	" Состояние:"+Выборка.СостояниеЗадачи; 
	Возврат Представление;
	КонецФункции
&НаСервере
Функция  ПредставлениеПриемкиФормирование(Выборка)
	Представление="";
	Если Выборка.ЯчейкаПолучатель<>Справочники.итСкладскиеЯчейки.ПустаяСсылка() и Выборка.ИдентификаторУпаковки<>"" Тогда 
		Представление="Приемка продукции в ячейке " +Строка(Выборка.ЯчейкаПолучатель)+ " c 
		|SSCC № "+Выборка.ИдентификаторУпаковки +" Состояние:"+Строка(Выборка.СостояниеЗадачи);
	иначе
		Представление="Новая Задача приемки как есть";
	КонецЕсли;
	Возврат Представление;
	КонецФункции
&НаСервере
Функция ТипДокументаСФиксациейСтроки(СсылкаНаДокумент)
		Если ТипЗнч(СсылкаНаДокумент)=Тип("ДокументСсылка.итWMSНаборка") тогда
			Возврат Истина;
		КонецЕсли;	
		Если ТипЗнч(СсылкаНаДокумент)=Тип("ДокументСсылка.итWMSПеремещение") тогда
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
КонецФункции
&НаСервере
Функция ПолучитьМассивЗадачРазрешённыхкОткату(Документ)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSЗадачиТСД.ИдЗадачи,
		|	итWMSЗадачиТСД.ДокументОснование
		|ПОМЕСТИТЬ ВтСписокЗадач
		|ИЗ
		|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|ГДЕ
		|	итWMSЗадачиТСД.ДокументОснование = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSСтрокиЗадачТСД.идСтроки,
		|	ВтСписокЗадач.ИдЗадачи,
		|	ВтСписокЗадач.ДокументОснование
		|ПОМЕСТИТЬ ЗадачаИИдСтроки
		|ИЗ
		|	ВтСписокЗадач КАК ВтСписокЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
		|		ПО ВтСписокЗадач.ИдЗадачи = итWMSСтрокиЗадачТСД.ИдЗадачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачаИИдСтроки.ИдЗадачи
		|ПОМЕСТИТЬ ЗафиксированныеЗадачи
		|ИЗ
		|	ЗадачаИИдСтроки КАК ЗадачаИИдСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
		|		ПО ЗадачаИИдСтроки.ДокументОснование = итWMSНаборкаТовары.Ссылка
		|			И ЗадачаИИдСтроки.идСтроки = итWMSНаборкаТовары.ИдентификаторСтроки
		|			И (итWMSНаборкаТовары.ФиксацияСтроки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗадачаИИдСтроки.ИдЗадачи
		|ИЗ
		|	ЗадачаИИдСтроки КАК ЗадачаИИдСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПеремещение.Товары КАК итWMSПеремещениеТовары
		|		ПО ЗадачаИИдСтроки.ДокументОснование = итWMSПеремещениеТовары.Ссылка
		|			И ЗадачаИИдСтроки.идСтроки = итWMSПеремещениеТовары.ИдентификаторСтроки
		|			И (итWMSПеремещениеТовары.ФиксацияСтроки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтСписокЗадач.ИдЗадачи
		|ИЗ
		|	ВтСписокЗадач КАК ВтСписокЗадач
		|ГДЕ
		|	НЕ ВтСписокЗадач.ИдЗадачи В
		|				(ВЫБРАТЬ
		|					ЗафиксированныеЗадачи.ИдЗадачи
		|				ИЗ
		|					ЗафиксированныеЗадачи КАК ЗафиксированныеЗадачи)";
	
	Запрос.УстановитьПараметр("ДокументОснование", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивЗадачРазрешенныхКОткату=новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивЗадачРазрешенныхКОткату.Добавить(ВыборкаДетальныеЗаписи.ИдЗадачи);
	КонецЦикла;
	Возврат МассивЗадачРазрешенныхКОткату;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецФункции
	
&НаСервереБезКонтекста
Функция ПолучитьДвоичныеданныеКартинокССервера(ИмяКартинки)
	Возврат БиблиотекаКартинок[ИмяКартинки].ПолучитьДвоичныеДанные();
КонецФункции
	#КонецОбласти














