Процедура ЦентральныйОбработчикДанныхОтгрузки(ДанныеОбработчика)Экспорт
	Если  итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"КлючИнициализацииДанных") тогда
		Возврат
	КонецЕсли;  
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"СостояниеИнициализации")   тогда
		Возврат
	КонецЕсли;	
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ТипОбработкиДанных") тогда
		Возврат
	КонецЕсли;
	Если  ДанныеОбработчика.ТипОбработкиДанных="ВнесениеИзмененийВДокумент" тогда
		////////////Транзакция фиксируется после инициализации задачи
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		///////
		ВнестиИзмененияВДокумент(ДанныеОбработчика);
		итWMSОбработчикиРегистрации_И_Загрузки.ИнициализацияДанныхНаСервере(ДанныеОбработчика);
		Если ДанныеОбработчика.Свойство("Статус") тогда
			Если ДанныеОбработчика.Статус=404 тогда
				Возврат
			КонецЕсли;
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	Если  ДанныеОбработчика.ТипОбработкиДанных="ЗаписатьДанныеТСД" тогда
		////////////Транзакция фиксируется после инициализации задачи
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		///////
		ЗаписьДанныхТСД(ДанныеОбработчика);
		итWMSОбработчикиРегистрации_И_Загрузки.ИнициализацияДанныхНаСервере(ДанныеОбработчика);
		Если ДанныеОбработчика.Свойство("Статус") тогда
			Если ДанныеОбработчика.Статус=404 тогда
				Возврат
			КонецЕсли;
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	Если ДанныеОбработчика.ТипОбработкиДанных="ФиксацияЗадачДокумента"  Тогда
		////////////Транзакция фиксируется после инициализации задачи
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		///////
		ФиксацияЗадачДокумента(ДанныеОбработчика);
		Если ДанныеОбработчика.Свойство("Статус") тогда
			Если ДанныеОбработчика.Статус=404 тогда
				Возврат
			КонецЕсли;
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	Если ДанныеОбработчика.ТипОбработкиДанных="ЗавернитьВ1Сканирование"  Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		ЗаврешитьВОдноСканирование(ДанныеОбработчика);
		ЗафиксироватьТранзакцию();
	КонецЕсли;

КонецПроцедуры
	
Процедура ВнестиИзмененияВДокумент(ДанныеОбработчика)
	ИдУпаковкиИДокумент=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
    Если ИдУпаковкиИДокумент=Неопределено тогда
	ДанныеОбработчика.Вставить("Статус",404);
	ДанныеОбработчика.Вставить("ОписаниеОшибки","не найденно данных по ид задачи");
	Возврат
    КонецЕсли;
    СостояниеЗадачи=ДанныеОбработчика.СостояниеИнициализации;
	СостояниеОтмены=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
    ИдентификаторУпаковки=ИдУпаковкиИДокумент.ИдентификаторУпаковки;
    ОбъектДокумента=ИдУпаковкиИДокумент.ДокументОснование.ПолучитьОбъект();
    МассиСтрокКИзменению=ОбъектДокумента.Товары.НайтиСтроки(новый Структура("ИдентификаторУпаковки",ИдентификаторУпаковки));
	для Каждого СтрокаКИзменению из МассиСтрокКИзменению цикл
		СтрокаКИзменению.СостояниеЗадачи=СостояниеЗадачи;
		Если СостояниеЗадачи=СостояниеОтмены Тогда 
			Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ПричинаОтменыЗадачи") тогда
				Возврат
			КонецЕсли;
			СтрокаКИзменению.ПричинаОтменыЗадачи=ДанныеОбработчика.ПричинаОтменыЗадачи;
		КонецЕсли;	
	КонецЦикла;
    ОбъектДокумента.Записать();
КонецПроцедуры


Процедура ЗаписьДанныхТСД(ДанныеОбработчика)
	ДанныеЗадачи=ДанныеДляМенеджера(ДанныеОбработчика.КлючИнициализацииДанных);
	Если не итWMSСлужебныеПроцедурыИФункции.ПроверкаНаВозможностьИзменитьЗадачу(ДанныеОбработчика,новый Структура("ТСДИД,ИдЗадачи",ДанныеОбработчика.ТСДИД,ДанныеЗадачи.ИдЗадачи),ДанныеЗадачи) Тогда 
		Возврат
	КонецЕсли;
    СостояниеЗадачи=ДанныеОбработчика.СостояниеИнициализации;
	СостояниеОтмены=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
    МенеджерЗаписи=РегистрыСведений.итWMSЗадачиТСД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИдЗадачи=ДанныеОбработчика.КлючИнициализацииДанных;
	МенеджерЗаписи.ТСД=ДанныеЗадачи.ТСД;
	МенеджерЗаписи.ДокументОснование=ДанныеЗадачи.ДокументОснование;
    МенеджерЗаписи.ТипЗадачи=ДанныеЗадачи.ТипЗадачи;
    МенеджерЗаписи.ИдЗадачиРодителя=ДанныеЗадачи.ИдЗадачиРодителя;
	МенеджерЗаписи.Прочитать();
	Если СостояниеЗадачи=СостояниеОтмены Тогда 
		Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(ДанныеОбработчика,"ПричинаОтменыЗадачи") тогда
			Возврат
		КонецЕсли;
		МенеджерЗаписи.ДанныеДокументаТСД=новый ХранилищеЗначения(новый Структура("ПричинаОтменыЗадачи",ДанныеОбработчика.ПричинаОтменыЗадачи));
	КонецЕсли;	
	//МенеджерЗаписи.Состояние=СостояниеЗадачи;
    МенеджерЗаписи.Записать();
КонецПроцедуры

Процедура ЗаврешитьВОдноСканирование(ДанныеОбработчика)
	ИдУпаковкиИДокумент=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
	Документ=ИдУпаковкиИДокумент.ДокументОснование;
	Если Документ.Пустая() Тогда 
		ДанныеОбработчика.Вставить("Статус",404);
		ДанныеОбработчика.Вставить("ОписаниеОшибки","не найдено соотв. документа клиента и сервера");
		Возврат
	КонецЕсли;
	ОбъектИзменения=Документ.ПолучитьОбъект();
	Для Каждого стр из ОбъектИзменения.Товары Цикл 
		стр.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.Выполнена;
	КонецЦикла;
	ОбъектИзменения.Записать();
	
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",Документ);
	БлокировкаДанных.Заблокировать();
	
	НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Документ);
	НаборЗаписей.Прочитать();
	Для Каждого стр из НаборЗаписей цикл
		стр.Состояние=ДанныеОбработчика.СостояниеИнициализации;
		стр.ДатаНачала=ТекущаяДата();
		стр.ДатаОкончания=ТекущаяДата();
	КонецЦикла;
	НаборЗаписей.Записать();
	ФиксацияЗадачДокумента(ДанныеОбработчика);	
КонецПроцедуры

Процедура ФиксацияЗадачДокумента(ДанныеОбработчика)
	ИдУпаковкиИДокумент=итWMSСлужебныеПроцедурыИФункции.НайтиДанныеЗадачиПоИдЗадачи(ДанныеОбработчика.КлючИнициализацииДанных);
	БлокировкаДанных = новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование",ИдУпаковкиИДокумент.ДокументОснование);
	БлокировкаДанных.Заблокировать();

	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSЗадачиТСД.ИдЗадачи,
		|	итWMSЗадачиТСД.ДокументОснование,
		|	итWMSЗадачиТСД.ТипЗадачи,
		|	итWMSЗадачиТСД.ФиксацияЗадачи,
		|	итWMSЗадачиТСД.Состояние
		|ИЗ
		|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|ГДЕ
		|	итWMSЗадачиТСД.ДокументОснование = &ДокументОснование
		|	И НЕ итWMSЗадачиТСД.ФиксацияЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", ИдУпаковкиИДокумент.ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеОбработчика.Вставить("КлючИнициализацииДанных",ВыборкаДетальныеЗаписи.ИдЗадачи);
		ДанныеОбработчика.Вставить("ТипИнициализации","Задача");
		ДанныеОбработчика.Вставить("СостояниеИнициализации",ВыборкаДетальныеЗаписи.Состояние);
		итWMSОбработчикиРегистрации_И_Загрузки.ИнициализацияДанныхНаСервере(ДанныеОбработчика);
		Если ДанныеОбработчика.Свойство("Статус") тогда
		Если ДанныеОбработчика.Статус=404 тогда
			Возврат
		КонецЕсли;
	КонецЕсли;	
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	КонецПроцедуры
	
Процедура ВнестиИзмененияВДокументОтгрузки(Документ) Экспорт 
	РезультатЗапроса=итWMSСлужебныеПроцедурыИФункции.ПолучитьРезультатЗапросаИзмененияДанныхЗадачИСтрокТСД(Документ);
	Выборка=РезультатЗапроса.Выбрать();
	ОбъектДокумента=Документ.ПолучитьОбъект();
	Пока Выборка.Следующий() Цикл 
		ДанныеДокументаТСДЗадача=Выборка.ДанныеДокументаТСДЗадача.Получить();
		СтрокиКИзменению=ОбъектДокумента.Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",Выборка.идСтроки));
		Для Каждого Строка из СтрокиКИзменению Цикл 
			Строка.СостояниеЗадачи=Выборка.Состояние;
			Строка.ФиксацияСтроки=Выборка.ФиксацияЗадачи;
			Если ТипЗнч(ДанныеДокументаТСДЗадача)=Тип("Структура") Тогда 
				Если ДанныеДокументаТСДЗадача.Свойство("ПричинаОтменыЗадачи") Тогда
					Строка.ПричинаОтменыЗадачи=ДанныеДокументаТСДЗадача.ПричинаОтменыЗадачи;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ОбъектДокумента.ОбменДанными.Загрузка=Истина;
	ОбъектДокумента.Записать();

КонецПроцедуры
Функция ДанныеДляМенеджера(ИдЗадачи)
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSЗадачиТСД.ТСД,
	|	итWMSЗадачиТСД.ДокументОснование,
	|	итWMSЗадачиТСД.ТипЗадачи,
	|	итWMSЗадачиТСД.ИдЗадачи,
	|	итWMSЗадачиТСД.ИдЗадачиРодителя,
	|	итWMSЗадачиТСД.ИдентификаторУпаковки,
	|	итWMSЗадачиТСД.ЯчейкаОтправитель,
	|	итWMSЗадачиТСД.ЯчейкаПолучатель,
	|	итWMSЗадачиТСД.ДополнительныеДанные,
	|	итWMSЗадачиТСД.ДатаНачала,
	|	итWMSЗадачиТСД.ДатаОкончания,
	|	итWMSЗадачиТСД.Состояние,
	|	итWMSЗадачиТСД.ФиксацияЗадачи,
	|	итWMSЗадачиТСД.ДанныеДокументаТСД
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ИдЗадачи = &ИдЗадачи";
	
	Запрос.УстановитьПараметр("ИдЗадачи", ИдЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураДанныхЗадачи=новый Структура;
		для Каждого Колонка из РезультатЗапроса.Колонки цикл
			СтруктураДанныхЗадачи.Вставить(Колонка.Имя,ВыборкаДетальныеЗаписи[Колонка.Имя]);
			//Возврат новый Структура("ДокументОснование,ИдентификаторУпаковки",ВыборкаДетальныеЗаписи.ДокументОснование,ВыборкаДетальныеЗаписи.ИдентификаторУпаковки);
		КонецЦикла;
		Возврат СтруктураДанныхЗадачи;
		
	КонецЦикла;
	
	Возврат Неопределено;	
		КонецФункции
	