
Процедура РегистрацияWMSКОбменуПриЗаписи(Источник, Отказ) Экспорт
		Выборка=ПланыОбмена.СервесныйОбменWMS.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Источник.ОбменДанными.Отправитель=Выборка.Ссылка Тогда 
		    Продолжить;
		КонецЕсли;
		Если Выборка.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка=ПланыОбмена.СервесныйОбменWMS.ЭтотУзел() Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.РежимОтладки Тогда 
			Продолжить;
		КонецЕсли;	
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка,Источник);
	КонецЦикла;
КонецПроцедуры

Процедура РегистрацияУпрРегистровКОбменуПередЗаписью(Источник, Отказ, Замещение) Экспорт
	МетаданныеИсточника=Источник.Метаданные();
	СтарыйНабор=РегистрыСведений[МетаданныеИсточника.Имя].СоздатьНаборЗаписей();
	Для каждого ЭлементОтбора из Источник.Отбор Цикл 
		СтарыйНабор.Отбор[ЭлементОтбора.Имя].Установить(ЭлементОтбора.Значение);
	КонецЦикла;
	СтарыйНабор.Прочитать();
	Выборка=ПланыОбмена.ОбменКА11.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка=ПланыОбмена.ОбменКА11.ЭтотУзел() Тогда 
			Продолжить;
		КонецЕсли;
		Если Источник.ОбменДанными.Отправитель=Выборка.Ссылка Тогда 
		    Продолжить;
		КонецЕсли;
		Если Выборка.РежимОтладки Тогда 
			Продолжить;
		КонецЕсли;	
		НаборИзменен=Ложь;
		Набор=РегистрыСведений[МетаданныеИсточника.Имя].СоздатьНаборЗаписей();
		Для Каждого Строка из СтарыйНабор Цикл 
			Если Выборка.ИспользоватьОтборПоОрганизациям Тогда 
				Если ТипЗнч(СтарыйНабор)=Тип("РегистрСведенийНаборЗаписей.алкСоответствияСправокАиБЕГАИСИСерий") Тогда 
					Если не ПроверкаНаНаличиеДанныхМетаданным(Строка.СправкаБ,Выборка.Организация,"Организация")Тогда 
						Возврат
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	
			Для Каждого Измерения из МетаданныеИсточника.измерения Цикл
				Если Измерения.ОсновнойОтбор Тогда 
					Набор.Отбор[Измерения.Имя].Установить(Строка[Измерения.Имя]);
					НаборИзменен=Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если НаборИзменен Тогда 
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка,Набор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РегистрацияУпрРегистровКОбменуЗаписьПриЗаписи(Источник, Отказ, Замещение) Экспорт
	МетаданныеИсточника=Источник.Метаданные();
	Выборка=ПланыОбмена.ОбменКА11.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка=ПланыОбмена.ОбменКА11.ЭтотУзел() Тогда 
			Продолжить;
		КонецЕсли;
		Если Источник.ОбменДанными.Отправитель=Выборка.Ссылка Тогда 
		    Продолжить;
		КонецЕсли;
		Если Выборка.РежимОтладки Тогда 
			Продолжить;
		КонецЕсли;	
		НаборИзменен=Ложь;
		Набор=РегистрыСведений[МетаданныеИсточника.Имя].СоздатьНаборЗаписей();
		Для Каждого Строка из Источник Цикл
			Если Выборка.ИспользоватьОтборПоОрганизациям Тогда 
				Если ТипЗнч(Источник)=Тип("РегистрСведенийНаборЗаписей.алкСоответствияСправокАиБЕГАИСИСерий") Тогда 
					Если не ПроверкаНаНаличиеДанныхМетаданным(Строка.СправкаБ,Выборка.Организация,"Организация")Тогда 
						Возврат
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			 
			Для Каждого Измерения из МетаданныеИсточника.измерения Цикл
				Если Измерения.ОсновнойОтбор Тогда 
					Набор.Отбор[Измерения.Имя].Установить(Строка[Измерения.Имя]);
					НаборИзменен=Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если НаборИзменен Тогда 
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка,Набор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РегистрацияУпрОбменаСправочникиПриЗаписи(Источник, Отказ) Экспорт
	Выборка=ПланыОбмена.ОбменКА11.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Источник.ОбменДанными.Отправитель=Выборка.Ссылка Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка=ПланыОбмена.ОбменКА11.ЭтотУзел() Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.РежимОтладки Тогда 
			Продолжить;
		КонецЕсли;	
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка,Источник);
	КонецЦикла;
КонецПроцедуры

Процедура РегистрацияУпрОбменаДокументыПриЗаписи(Источник, Отказ) Экспорт
	Выборка=ПланыОбмена.ОбменКА11.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Источник.ОбменДанными.Отправитель=Выборка.Ссылка Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка=ПланыОбмена.ОбменКА11.ЭтотУзел() Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.РежимОтладки Тогда 
			Продолжить;
		КонецЕсли;	
		Если Выборка.ИспользоватьОтборПоОрганизациям Тогда 
			Если не ПроверкаНаНаличиеДанныхМетаданным(Источник,Выборка.Организация,"Организация") Тогда 
				Возврат
			КонецЕсли;
		КонецЕсли;
		Если Выборка.ИспользоватьОтборПоСкладам Тогда 
			Склады=Выборка.Склады.ВыгрузитьКолонку("Склад");
			Если  ТипЗнч(Источник)=Тип("ДокументОбъект.ПеремещениеТоваров") Тогда 
				Если не ПроверкаНаНаличиеДанныхМетаданным(Источник,Склады,"СкладОтправитель") и не ПроверкаНаНаличиеДанныхМетаданным(Источник,Склады,"СкладПолучатель") Тогда 
					Возврат
				КонецЕсли;
			иначе
				Если не ПроверкаНаНаличиеДанныхМетаданным(Источник,Склады,"Склад") Тогда 
					Возврат
				КонецЕсли;	
				
			КонецЕсли;
		КонецЕсли;

		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка,Источник);
	КонецЦикла;
КонецПроцедуры

Процедура РегистрацияАлкПереупаковкиПриЗаписи(Источник, Отказ) Экспорт
	Выборка=ПланыОбмена.WMSОбменМарками.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Источник.ОбменДанными.Отправитель=Выборка.Ссылка Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка=ПланыОбмена.WMSОбменМарками.ЭтотУзел() Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.РежимОтладки Тогда 
			Продолжить;
		КонецЕсли;
		Если Источник.ОбменДанными.Загрузка Тогда 
			Продолжить;
		КонецЕсли;
		Если Выборка.ИспользоватьОтборПоОрганизациям Тогда 
			Если не ПроверкаНаНаличиеДанныхМетаданным(Источник,Выборка.Организация,"Организация") Тогда 
				Возврат
			КонецЕсли;
		КонецЕсли;
		Если Выборка.ИспользоватьОтборПоПунктамРазгрузки Тогда
			Если не ПроверкаНаНаличиеДанныхМетаданным(Источник,Выборка.алкПунктРазгрузки,"ПунктРазгрузки") Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		итWMSПривилегированныйМодуль.ЗарегестрироватьМаркиКДвижениюWMS(Выборка.Ссылка,Источник.Ссылка);
	КонецЦикла;

КонецПроцедуры



// Проверка на наличие данных метаданным.
// 
// Параметры:
//  Объект - ДокументСсылка,СправочникСсылка - Объект
//  Ссылки - СправочникСсылка, Массив из СправочникСсылка - Ссылки
//  ИмяРеквизита - Строка - Имя реквизита
// 
// Возвращаемое значение:
//  Булево - Проверка на наличие данных метаданным
Функция ПроверкаНаНаличиеДанныхМетаданным(Объект,знач Ссылки,ИмяРеквизита)
	МассивТабличныхЧастейСРеквизитом=новый Массив;
	МетаданныеИсточника=Объект.Метаданные();
	РеквизитВШапке=МетаданныеИсточника.Реквизиты.Найти(ИмяРеквизита)<>Неопределено;
	Для Каждого Таблица из МетаданныеИсточника.ТабличныеЧасти Цикл
		Если Таблица.Реквизиты.Найти(ИмяРеквизита)<>Неопределено Тогда 
			МассивТабличныхЧастейСРеквизитом.Добавить(Таблица.Имя);
		КонецЕсли;
	КонецЦикла;
	Если ТипЗнч(Ссылки) <> Тип("Массив") Тогда 
		МассивСсылок=новый Массив();
		МассивСсылок.Добавить(Ссылки);
	иначе
		МассивСсылок=Ссылки;
	КонецЕсли;
	Для Каждого Ссылка из МассивСсылок Цикл 
		Если  РеквизитВШапке Тогда 
			Если Объект[ИмяРеквизита]=Ссылка Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		Для Каждого Табл из МассивТабличныхЧастейСРеквизитом Цикл 
			Если 	Объект[Табл][ИмяРеквизита] = Ссылка  Тогда 
				Возврат Истина;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Процедура УстановкаНовогоНомераВГодуПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Ссылка=Источник.Ссылка;
	Если Ссылка.Пустая() Тогда 
		Возврат
	КонецЕсли;	
	Если Год(Ссылка.Дата)<>Год(Источник.Дата) Тогда
		Источник.УстановитьНовыйНомер();
	КонецЕсли;
		
	КонецПроцедуры
