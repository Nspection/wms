

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Ключ.Пустая() тогда
		Если не Объект.СозданНаОснованиСерверногоВызова Тогда 
			Объект.итОснование=Неопределено;
		КонецЕсли;
		Если Объект.Товары.Количество()>0 тогда
			для Каждого стр из Объект.Товары цикл
				стр.ИдентификаторСтроки=новый УникальныйИдентификатор;	
			КонецЦикла;
		КонецЕсли;
		Объект.Ответственный=ПараметрыСеанса.ТекущийПользователь;
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		Объект.Дата=ТекущаяДата();
		Если Параметры.Свойство("ИтОснование") тогда
			Объект.итОснование=Параметры.ИтОснование;
		КонецЕсли;
	    ПроверитьОснованиеНаНесколькоПодчиненныхДокументов(Отказ);
		Если ТипЗнч(Объект.итОснование)=Тип("ДокументСсылка.итWMSДокументСвободнойАгрегации") 
			или ТипЗнч(Объект.итОснование)=Тип("ДокументСсылка.итWMSКонтрольнаяОперацияАгрегации") 
			Тогда 
			ЗаполнитьДокументНаОснованиииАгрегации();
		КонецЕсли;
		КонецЕсли;
	Если Объект.СозданНаОснованиСерверногоВызова тогда
	Объект.СозданНаОснованиСерверногоВызова=Ложь;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РассчитатьНадписиКоличестваТовара();
	ВидимостьДоступностьЭлементов();
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
ВидимостьДоступностьЭлементов();
КонецПроцедуры

#Область СобытияВыборкаЭлементовТчТовары
&НаКлиенте
Процедура ТоварыИдентификаторУпаковкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
КонецПроцедуры
&НаКлиенте
Процедура ТоварыИдентификаторУпаковкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыХарактеристикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТоварыСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыСерияНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыКачествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыКачествоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыДатаРозливаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыДатаРозливаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
КонецПроцедуры
&НаКлиенте
Процедура ТоварыКоличествоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЯчейкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
КонецПроцедуры
&НаКлиенте
Процедура ТоварыЯчейкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры






&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		Если ИсточникВыбора.ИмяФормы="ОбщаяФорма.ФормаПодбораНоменклатуры" Тогда
			Если ТипЗнч(ВыбранноеЗначение)=Тип("Массив") Тогда
				ЗаполнениеВыбораПодбора(ВыбранноеЗначение)
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеВыбораПодбора(ВыбранноеЗначение)
	Для Каждого стр из ВыбранноеЗначение цикл
		НоваяСтрока=Объект.Товары.Добавить();
		НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
		НоваяСтрока.Ячейка=стр.Ячейка;
		НоваяСтрока.ДатаРозлива =итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементДанныхНаСервере(стр.СерияНоменклатуры,"ДатаПроизводства");
		ПриравнятьДанныеИзмененияКИзначальным(НоваяСтрока);
	КонецЦикла;
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТоварыКоличествоИзмененияПриИзменении(Элемент)
	Если ТекущийЭлемент.ТекущиеДанные.КоличествоИзменения>ТекущийЭлемент.ТекущиеДанные.Количество Тогда
		ТекущийЭлемент.ТекущиеДанные.КоличествоИзменения=ТекущийЭлемент.ТекущиеДанные.Количество 
	КонецЕсли;
	Если ТекущийЭлемент.ТекущиеДанные.КоличествоИзменения<ТекущийЭлемент.ТекущиеДанные.Количество и ТекущийЭлемент.ТекущиеДанные.КоличествоИзменения<0 Тогда
		ТекущийЭлемент.ТекущиеДанные.КоличествоИзменения=ТекущийЭлемент.ТекущиеДанные.Количество 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыИзмененияПриИзменении(Элемент)
	ТекущийЭлемент.ТекущиеДанные.ДатаРозлива=ДатаРозливаПоСерии(ТекущийЭлемент.ТекущиеДанные.СерияНоменклатурыИзменения)	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
РассчитатьНадписиКоличестваТовара();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда 
	Если не ПараметрыЗаписи.Свойство("ПоложительныйОтветНаВопрос") Тогда
		Ответ=ПроверитьНаСоответствиеОснованиеИДокумент();
		Если ТипЗнч(Ответ)=Тип("Структура") Тогда
			Если Ответ.ВСкладскомДокументеТовараБольшеЧемВУпр Тогда 
				Сообщить("Товара больше чем в основании, проведение не возможно");
				Отказ=Истина;
				Возврат
			КонецЕсли;
			Если Ответ.НеХватаетТовараНаСкладеНеВбитыхЯчейках Тогда 
			Оповещение=новый ОписаниеОповещения("ПередЗаписьюОповещение",ЭтаФорма);
			ПоказатьВопрос(Оповещение,"Количество товара в документе меньше чем в основании, будет провезедена корректировка перемещения товаров и 
			|создано новое перемещение товаров, на недостающий товар , с целью создания от него ОРТ. Продолжить ?",РежимДиалогаВопрос.ДаНет);
			Отказ=Истина;
			Возврат
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыЗаписи.Свойство("ПоложительныйОтветНаВопрос") Тогда 
		Ссылка=Неопределено;
		СкомпинсироватьПеремещениеТоваровИСоздатьНовое(Ссылка);
		Форма=ПолучитьФорму("Обработка.итОбработкаТансляторУпрОбычноеПриложение.Форма.Форма");
		Форма.ДокументТрансляции="Перемещение";
		Форма.ДокументОснование=Ссылка;
		Форма.Открыть();
	КонецЕсли;
КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ПередЗаписьюОповещение(Результат,Параметры)Экспорт 
	Если Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;	
	ЭтаФорма.Записать(новый Структура("РежимЗаписи,ПоложительныйОтветНаВопрос",РежимЗаписиДокумента.Проведение,Истина));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура ДобавитьТовары(Команда)
	Если  Элементы.ТоварыГруппа.ТолькоПросмотр тогда
		Возврат
	КонецЕсли;	
	НоваяСтрока=Объект.Товары.Добавить();
	НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
	НоваяСтрока.ИдентификаторСтрокиПредставление= Строка(НоваяСтрока.ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьТовары(Команда)
	Если  Элементы.ТоварыГруппа.ТолькоПросмотр тогда
		Возврат
	КонецЕсли;		
	Если ТекущийЭлемент.Имя="Товары" тогда
		НоваяСтрока=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущийЭлемент.ТекущиеДанные);
		НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
		НоваяСтрока.ИдентификаторСтрокиПредставление=Строка(НоваяСтрока.ИдентификаторСтроки);
		НоваяСтрока.Количество=0;
		НоваяСтрока.КоличествоИзменения=0;
     	НоваяСтрока.Ячейка=ПустаяЯчейка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыФормы=ПараметрыФормыМножественногоПодбораНоменклатуры();
	ОткрытьФормуПодбора(ЭтаФорма,ПараметрыФормы);
	
КонецПроцедуры






#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ВидимостьДоступностьЭлементов()
	//Если ТипЗнч(Объект.итОснование)=Тип("ДокументСсылка.ПеремещениеТоваров") тогда
	//	Элементы.СоздатьДокументПеремещение.Видимость=Ложь;
	//Иначе
	//	Элементы.СоздатьДокументПеремещение.Видимость=Объект.Проведен;
	//КонецЕсли;
	КонецПроцедуры
&НаКлиенте
Функция ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент)
	Если ТипЗнч(Элемент.Родитель)=Тип("ГруппаФормы") тогда
		ИсточникДанных=Элемент.Родитель.Родитель;
	иначе
		ИсточникДанных=Элемент.Родитель;
	КонецЕсли;
	
	ПараметрыФормы=новый Структура;
	ПараметрыФормы.Вставить("Склад",Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("Организация",Объект.ОрганизацияОтправитель);
	ПараметрыФормы.Вставить("ОдиночныйВыбор",Истина);
	ПараметрыФормы.Вставить("ОтборПоНоменклатуре",Истина);
	ПараметрыФормы.Вставить("ПараметрПоискаНоменклатура",ИсточникДанных.ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("ИдентификаторСтроки",ИсточникДанных.ТекущиеДанные.ИдентификаторСтроки);
	ПараметрыФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Документ",Объект.Ссылка);
	Возврат  ПараметрыФормы;
КонецФункции
&НаКлиенте
Процедура ОткрытьФормуПодбора(ЭлементОповещенияВыбора,ПараметрыФормы=Неопределено)
	Если ПараметрыФормы = Неопределено тогда
		ПараметрыФормы=новый Структура;
	КонецЕсли;
	СделатьСнимокТабличнойЧастиДляДинамическогоПодбора();	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораНоменклатуры",ПараметрыФормы,ЭлементОповещенияВыбора);
	
КонецПроцедуры
&НаСервере
Процедура СделатьСнимокТабличнойЧастиДляДинамическогоПодбора()
	НовыйНабораЗаписей= РегистрыСведений.итWMSКорзинаНоменклатуры.СоздатьНаборЗаписей();
	НовыйНабораЗаписей.Отбор.КлючДанных.Установить(ЭтаФорма.УникальныйИдентификатор);
	НовыйНабораЗаписей.Прочитать();
	НовыйНабораЗаписей.Очистить();
	для Каждого стр из Объект.Товары цикл
		НоваяЗапись=НовыйНабораЗаписей.Добавить();
		НоваяЗапись.ДатаЗаписи=ТекущаяДата();
		НоваяЗапись.Номенклатура=стр.Номенклатура;
		НоваяЗапись.СерияНоменклатуры=стр.СерияНоменклатуры;
		НоваяЗапись.КлючДанных=ЭтаФорма.УникальныйИдентификатор;
		НоваяЗапись.Ячейка = стр.Ячейка;
		НоваяЗапись.Качество=стр.Качество;
		НоваяЗапись.ИдентификаторСтроки=стр.ИдентификаторСтроки;
		НоваяЗапись.Количество=стр.Количество;
		НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
	КонецЦикла;
	НовыйНабораЗаписей.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,Структура)
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные,Структура);
	Элемент.Родитель.ТекущиеДанные.Ячейка=Структура.Ячейка;
	Элемент.Родитель.ТекущиеДанные.ДатаРозлива =  Структура.СерияНоменклатуры.ДатаПроизводства;
	ПриравнятьДанныеИзмененияКИзначальным(Элемент.Родитель.ТекущиеДанные);
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры
&НаКлиенте
Процедура ПриравнятьДанныеИзмененияКИзначальным(Данные)
	Данные.ИдентификаторУпаковкиИзменения=Данные.ИдентификаторУпаковки;
	Данные.ХарактеристикаИзменения=Данные.Характеристика;
	Данные.СерияНоменклатурыИзменения=Данные.СерияНоменклатуры;
	Данные.ДатаРозливаИзменения=Данные.ДатаРозлива;
	Данные.КачествоИзменения=Данные.Качество;	
	Данные.КоличествоИзменения=Данные.Количество;
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыМножественногоПодбораНоменклатуры()
	ПараметрыФормы=новый Структура;
	ПараметрыФормы.Вставить("Склад",Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("ОдиночныйВыбор",Ложь);
	ПараметрыФормы.Вставить("Организация",Объект.ОрганизацияОтправитель);
	ПараметрыФормы.Вставить("ОтборПоНоменклатуре",Истина);
	ПараметрыФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Документ",Объект.Ссылка);
	Возврат  ПараметрыФормы;
КонецФункции
&НаСервере
Функция ДатаРозливаПоСерии(СерияНоменклатуры)
	Возврат СерияНоменклатуры.ДатаПроизводства;
КонецФункции
&НаКлиенте
Процедура РассчитатьНадписиКоличестваТовара()
	Если Элементы.Товары.ТекущиеДанные<>Неопределено  Тогда 
		НМ=Элементы.Товары.ТекущиеДанные.Номенклатура;
		МассивСтрок=Объект.Товары.НайтиСтроки(новый Структура("Номенклатура",НМ));
		КоличествоНм=0;
		для Каждого Строка из МассивСтрок цикл
			КоличествоНМ=КоличествоНМ+Строка.КоличествоИзменения;	
		КонецЦикла;
		Элементы.ДекорацияВыбраннойНМДанные.Заголовок= Строка(КоличествоНМ);	
	КонецЕсли;
	
	КоличествоВсего=0;
	для Каждого стр из Объект.Товары Цикл 
		КоличествоВсего=КоличествоВсего+стр.КоличествоИзменения;	
	КонецЦикла;
	Элементы.ДекорацияКоличествоВсегоДанные.Заголовок=Строка(КоличествоВсего);
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьДокументНаОснованиииАгрегации()
	ЯчейкаАнализа=Неопределено;
	Параметры.Свойство("ЯчейкаАнализа",ЯчейкаАнализа);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкПереупаковкаАкцизныеМарки.Ссылка,
	|	алкПереупаковкаАкцизныеМарки.НомерСтроки,
	|	алкПереупаковкаАкцизныеМарки.АлкогольнаяПродукция,
	|	алкПереупаковкаАкцизныеМарки.СправкаБ,
	|	алкПереупаковкаАкцизныеМарки.Марка,
	|	алкПереупаковкаАкцизныеМарки.Упаковка,
	|	алкПереупаковкаАкцизныеМарки.ОтметкаВыбытия,
	|	ВЫБОР
	|		КОГДА &ЯчейкаАнализа = НЕОПРЕДЕЛЕНО
	|			ТОГДА алкПереупаковкаАкцизныеМарки.Ссылка.ДокументОснование.ЯчейкаАгрегации
	|		ИНАЧЕ &ЯчейкаАнализа
	|	КОНЕЦ КАК ДокументОснованиеЯчейкаАгрегации
	|ПОМЕСТИТЬ ДанныйМарок
	|ИЗ
	|	Документ.алкПереупаковка.АкцизныеМарки КАК алкПереупаковкаАкцизныеМарки
	|ГДЕ
	|	алкПереупаковкаАкцизныеМарки.Ссылка.ДокументОснование = &Ссылка
	|	И алкПереупаковкаАкцизныеМарки.Ссылка.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.СсылкаДата КАК ПоследнееИзменениеСостояния,
	|	ВложенныйЗапрос.Марка,
	|	МАКСИМУМ(ДанныйМарок.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ДанныеМарокПоследнегоСостояния
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ДанныйМарок.Ссылка.Дата) КАК СсылкаДата,
	|		ДанныйМарок.Марка КАК Марка
	|	ИЗ
	|		ДанныйМарок КАК ДанныйМарок
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныйМарок.Марка) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныйМарок КАК ДанныйМарок
	|		ПО ВложенныйЗапрос.Марка = ДанныйМарок.Марка
	|			И ВложенныйЗапрос.СсылкаДата = ДанныйМарок.Ссылка.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СсылкаДата,
	|	ВложенныйЗапрос.Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныйМарок.Ссылка,
	|	ДанныйМарок.НомерСтроки,
	|	ДанныйМарок.АлкогольнаяПродукция,
	|	ДанныйМарок.СправкаБ,
	|	ДанныйМарок.Марка,
	|	ДанныйМарок.Упаковка,
	|	ДанныйМарок.ОтметкаВыбытия,
	|	ДанныйМарок.ДокументОснованиеЯчейкаАгрегации КАК ЯчейкаАгрегации
	|ПОМЕСТИТЬ ДанныеМарокИтоговыеСостояния
	|ИЗ
	|	ДанныеМарокПоследнегоСостояния КАК ДанныеМарокПоследнегоСостояния
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныйМарок КАК ДанныйМарок
	|		ПО ДанныеМарокПоследнегоСостояния.Марка = ДанныйМарок.Марка
	|			И ДанныеМарокПоследнегоСостояния.Ссылка = ДанныйМарок.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	алкПереупаковкаУпаковки.Ссылка,
	|	алкПереупаковкаУпаковки.НомерСтроки,
	|	алкПереупаковкаУпаковки.Упаковка,
	|	алкПереупаковкаУпаковки.ИерархияУпаковки,
	|	алкПереупаковкаУпаковки.Наименование
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	Документ.алкПереупаковка.Упаковки КАК алкПереупаковкаУпаковки
	|ГДЕ
	|	алкПереупаковкаУпаковки.Ссылка.ДокументОснование = &Ссылка
	|	И алкПереупаковкаУпаковки.Ссылка.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеМарокИтоговыеСостояния.Ссылка,
	|	ДанныеМарокИтоговыеСостояния.НомерСтроки,
	|	ДанныеМарокИтоговыеСостояния.АлкогольнаяПродукция,
	|	ДанныеМарокИтоговыеСостояния.СправкаБ,
	|	ДанныеМарокИтоговыеСостояния.Марка,
	|	ДанныеМарокИтоговыеСостояния.Упаковка,
	|	ДанныеМарокИтоговыеСостояния.ОтметкаВыбытия,
	|	ДанныеУпаковок.ИерархияУпаковки,
	|	ДанныеМарокИтоговыеСостояния.ЯчейкаАгрегации
	|ПОМЕСТИТЬ ДанныеМарокИУпаковок
	|ИЗ
	|	ДанныеМарокИтоговыеСостояния КАК ДанныеМарокИтоговыеСостояния
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеУпаковок КАК ДанныеУпаковок
	|		ПО ДанныеМарокИтоговыеСостояния.Упаковка = ДанныеУпаковок.Упаковка
	|			И ДанныеМарокИтоговыеСостояния.Ссылка = ДанныеУпаковок.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Марка,
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.СрезПоследнихДоПереупаковки,
	|	алкХранилищеАкцизныхМарок.Упаковка КАК УпаковкаДоПереупаковки,
	|	ВложенныйЗапрос.АлкогольнаяПродукция,
	|	ВложенныйЗапрос.ОтметкаВыбытия,
	|	ВложенныйЗапрос.ИерархияУпаковки,
	|	ВложенныйЗапрос.СправкаБ,
	|	ВложенныйЗапрос.Упаковка КАК Упаковка,
	|	ВложенныйЗапрос.ЯчейкаАгрегации
	|ПОМЕСТИТЬ ДанныеОбУпаковкиМаркиДоПереупаковки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеМарокИУпаковок.Марка КАК Марка,
	|		ДанныеМарокИУпаковок.Ссылка КАК Ссылка,
	|		МАКСИМУМ(алкХранилищеАкцизныхМарок.Период) КАК СрезПоследнихДоПереупаковки,
	|		ДанныеМарокИУпаковок.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|		ДанныеМарокИУпаковок.ОтметкаВыбытия КАК ОтметкаВыбытия,
	|		ДанныеМарокИУпаковок.ИерархияУпаковки КАК ИерархияУпаковки,
	|		ДанныеМарокИУпаковок.СправкаБ КАК СправкаБ,
	|		ДанныеМарокИУпаковок.Упаковка КАК Упаковка,
	|		ДанныеМарокИУпаковок.ЯчейкаАгрегации КАК ЯчейкаАгрегации
	|	ИЗ
	|		ДанныеМарокИУпаковок КАК ДанныеМарокИУпаковок
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок КАК алкХранилищеАкцизныхМарок
	|			ПО ДанныеМарокИУпаковок.Ссылка.Дата >= алкХранилищеАкцизныхМарок.Период
	|				И ДанныеМарокИУпаковок.Ссылка <> алкХранилищеАкцизныхМарок.Регистратор
	|				И ДанныеМарокИУпаковок.Марка = алкХранилищеАкцизныхМарок.Марка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеМарокИУпаковок.Марка,
	|		ДанныеМарокИУпаковок.Ссылка,
	|		ДанныеМарокИУпаковок.АлкогольнаяПродукция,
	|		ДанныеМарокИУпаковок.ОтметкаВыбытия,
	|		ДанныеМарокИУпаковок.ИерархияУпаковки,
	|		ДанныеМарокИУпаковок.СправкаБ,
	|		ДанныеМарокИУпаковок.Упаковка,
	|		ДанныеМарокИУпаковок.ЯчейкаАгрегации) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок КАК алкХранилищеАкцизныхМарок
	|		ПО ВложенныйЗапрос.СрезПоследнихДоПереупаковки = алкХранилищеАкцизныхМарок.Период
	|			И ВложенныйЗапрос.Марка = алкХранилищеАкцизныхМарок.Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Марка,
	|	алкХранилищеУпаковок.ИерархияУпаковки КАК ИерархияУпаковкиДоПереупаковки,
	|	ВложенныйЗапрос.УпаковкаДоПереупаковки,
	|	ВложенныйЗапрос.АлкогольнаяПродукция,
	|	ВложенныйЗапрос.ОтметкаВыбытия,
	|	ВложенныйЗапрос.СправкаБ,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.ИерархияУпаковки,
	|	ВложенныйЗапрос.ЯчейкаАгрегации
	|ПОМЕСТИТЬ ДанныеОПаллетеМаркиДоПереупаковки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.Ссылка КАК Ссылка,
	|		МАКСИМУМ(алкХранилищеУпаковок.Период) КАК Период,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.Марка КАК Марка,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.УпаковкаДоПереупаковки КАК УпаковкаДоПереупаковки,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.ОтметкаВыбытия КАК ОтметкаВыбытия,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.ИерархияУпаковки КАК ИерархияУпаковки,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.СправкаБ КАК СправкаБ,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.Упаковка КАК Упаковка,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.ЯчейкаАгрегации КАК ЯчейкаАгрегации
	|	ИЗ
	|		ДанныеОбУпаковкиМаркиДоПереупаковки КАК ДанныеОбУпаковкиМаркиДоПереупаковки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеУпаковок КАК алкХранилищеУпаковок
	|			ПО ДанныеОбУпаковкиМаркиДоПереупаковки.Ссылка.Дата >= алкХранилищеУпаковок.Период
	|				И ДанныеОбУпаковкиМаркиДоПереупаковки.Ссылка <> алкХранилищеУпаковок.Регистратор
	|				И ДанныеОбУпаковкиМаркиДоПереупаковки.УпаковкаДоПереупаковки = алкХранилищеУпаковок.Упаковка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.Ссылка,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.Марка,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.УпаковкаДоПереупаковки,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.АлкогольнаяПродукция,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.ОтметкаВыбытия,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.ИерархияУпаковки,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.СправкаБ,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.Упаковка,
	|		ДанныеОбУпаковкиМаркиДоПереупаковки.ЯчейкаАгрегации) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеУпаковок КАК алкХранилищеУпаковок
	|		ПО ВложенныйЗапрос.Период = алкХранилищеУпаковок.Период
	|			И ВложенныйЗапрос.УпаковкаДоПереупаковки = алкХранилищеУпаковок.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	алкХранилищеУпаковок.ИерархияУпаковки,
	|	ВложенныйЗапрос.Марка,
	|	ВложенныйЗапрос.УпаковкаДоПереупаковки,
	|	ВложенныйЗапрос.АлкогольнаяПродукция,
	|	ВложенныйЗапрос.ОтметкаВыбытия,
	|	ВложенныйЗапрос.СправкаБ,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.ИерархияУпаковки,
	|	ВложенныйЗапрос.ЯчейкаАгрегации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОПаллетеМаркиДоПереупаковки.Ссылка,
	|	ДанныеОПаллетеМаркиДоПереупаковки.Марка,
	|	ДанныеОПаллетеМаркиДоПереупаковки.ИерархияУпаковкиДоПереупаковки,
	|	ДанныеОПаллетеМаркиДоПереупаковки.УпаковкаДоПереупаковки,
	|	ДанныеОПаллетеМаркиДоПереупаковки.АлкогольнаяПродукция,
	|	ДанныеОПаллетеМаркиДоПереупаковки.ОтметкаВыбытия,
	|	ДанныеОПаллетеМаркиДоПереупаковки.СправкаБ,
	|	ДанныеОПаллетеМаркиДоПереупаковки.Упаковка,
	|	ДанныеОПаллетеМаркиДоПереупаковки.ИерархияУпаковки,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры,
	|	алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры.Владелец КАК Номенклатура,
	|	ДанныеОПаллетеМаркиДоПереупаковки.ЯчейкаАгрегации
	|ПОМЕСТИТЬ ИтогвыеДанныеДляРассчета
	|ИЗ
	|	ДанныеОПаллетеМаркиДоПереупаковки КАК ДанныеОПаллетеМаркиДоПереупаковки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
	|		ПО ДанныеОПаллетеМаркиДоПереупаковки.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(итТоварыВЯчейкахОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итТоварыВЯчейкахОстатки.Склад) КАК КоличествоСкладов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итТоварыВЯчейкахОстатки.Качество) КАК КоличествоРазногоКачества,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итТоварыВЯчейкахОстатки.Характеристика) КАК КоличествоХарактеристик,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Склад) КАК Склад,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Качество) КАК Качество,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.СерияНоменклатуры) КАК СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.Ячейка
	|ПОМЕСТИТЬ ДанныеСкладскогоУчета
	|ИЗ
	|	ИтогвыеДанныеДляРассчета КАК ИтогвыеДанныеДляРассчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	|		ПО ИтогвыеДанныеДляРассчета.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|			И ИтогвыеДанныеДляРассчета.СерияНоменклатуры = итТоварыВЯчейкахОстатки.СерияНоменклатуры
	|			И ИтогвыеДанныеДляРассчета.ИерархияУпаковкиДоПереупаковки = итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
	|			И ИтогвыеДанныеДляРассчета.ЯчейкаАгрегации = итТоварыВЯчейкахОстатки.Ячейка
	|
	|СГРУППИРОВАТЬ ПО
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИтогвыеДанныеДляРассчета.Марка) КАК Количество,
	|	ИтогвыеДанныеДляРассчета.ИерархияУпаковкиДоПереупаковки,
	|	ИтогвыеДанныеДляРассчета.СправкаБ,
	|	ИтогвыеДанныеДляРассчета.ИерархияУпаковки,
	|	ИтогвыеДанныеДляРассчета.СерияНоменклатуры,
	|	ИтогвыеДанныеДляРассчета.Номенклатура,
	|	ИтогвыеДанныеДляРассчета.ЯчейкаАгрегации
	|ПОМЕСТИТЬ КоличественныеПоказателиПоМаркам
	|ИЗ
	|	ИтогвыеДанныеДляРассчета КАК ИтогвыеДанныеДляРассчета
	|ГДЕ
	|	ИтогвыеДанныеДляРассчета.ОтметкаВыбытия = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтогвыеДанныеДляРассчета.ИерархияУпаковкиДоПереупаковки,
	|	ИтогвыеДанныеДляРассчета.ИерархияУпаковки,
	|	ИтогвыеДанныеДляРассчета.СправкаБ,
	|	ИтогвыеДанныеДляРассчета.СерияНоменклатуры,
	|	ИтогвыеДанныеДляРассчета.Номенклатура,
	|	ИтогвыеДанныеДляРассчета.ЯчейкаАгрегации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличественныеПоказателиПоМаркам.ЯчейкаАгрегации,
	|	СУММА(КоличественныеПоказателиПоМаркам.Количество) КАК Количество
	|ПОМЕСТИТЬ ВсегоКоличествоКИзменению
	|ИЗ
	|	КоличественныеПоказателиПоМаркам КАК КоличественныеПоказателиПоМаркам
	|
	|СГРУППИРОВАТЬ ПО
	|	КоличественныеПоказателиПоМаркам.ЯчейкаАгрегации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСкладскогоУчета.Ячейка,
	|	МАКСИМУМ(ДанныеСкладскогоУчета.КоличествоСкладов) КАК КоличествоСкладов,
	|	МАКСИМУМ(ДанныеСкладскогоУчета.КоличествоРазногоКачества) КАК КоличествоРазногоКачества,
	|	МАКСИМУМ(ДанныеСкладскогоУчета.КоличествоХарактеристик) КАК КоличествоХарактеристик,
	|	СУММА(ДанныеСкладскогоУчета.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ГруппированныеДанныеПоЯчейке
	|ИЗ
	|	ДанныеСкладскогоУчета КАК ДанныеСкладскогоУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСкладскогоУчета.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличественныеПоказателиПоМаркам.ИерархияУпаковкиДоПереупаковки,
	|	КоличественныеПоказателиПоМаркам.СправкаБ,
	|	КоличественныеПоказателиПоМаркам.ИерархияУпаковки,
	|	КоличественныеПоказателиПоМаркам.СерияНоменклатуры,
	|	КоличественныеПоказателиПоМаркам.Номенклатура,
	|	КоличественныеПоказателиПоМаркам.Количество,
	|	ДанныеСкладскогоУчета.Склад КАК Склад,
	|	ДанныеСкладскогоУчета.Качество,
	|	ДанныеСкладскогоУчета.Характеристика,
	|	ДанныеСкладскогоУчета.КоличествоОстаток,
	|	КоличественныеПоказателиПоМаркам.ЯчейкаАгрегации
	|ИЗ
	|	КоличественныеПоказателиПоМаркам КАК КоличественныеПоказателиПоМаркам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСкладскогоУчета КАК ДанныеСкладскогоУчета
	|		ПО КоличественныеПоказателиПоМаркам.ИерархияУпаковкиДоПереупаковки = ДанныеСкладскогоУчета.ИдентификаторУпаковки
	|			И КоличественныеПоказателиПоМаркам.СерияНоменклатуры = ДанныеСкладскогоУчета.СерияНоменклатуры
	|ИТОГИ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппированныеДанныеПоЯчейке.Ячейка,
	|	ГруппированныеДанныеПоЯчейке.КоличествоСкладов,
	|	ГруппированныеДанныеПоЯчейке.КоличествоРазногоКачества,
	|	ГруппированныеДанныеПоЯчейке.КоличествоХарактеристик,
	|	ГруппированныеДанныеПоЯчейке.КоличествоОстаток,
	|	ВсегоКоличествоКИзменению.Количество КАК КоличествоКИзменению
	|ИЗ
	|	ГруппированныеДанныеПоЯчейке КАК ГруппированныеДанныеПоЯчейке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсегоКоличествоКИзменению КАК ВсегоКоличествоКИзменению
	|		ПО ГруппированныеДанныеПоЯчейке.Ячейка = ВсегоКоличествоКИзменению.ЯчейкаАгрегации";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.итОснование);
	Запрос.УстановитьПараметр("ЯчейкаАнализа", ЯчейкаАнализа);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();	
	
	ВыборкаПроверки=МассивРезультатов[13].Выбрать();
	Ошибка=Ложь;
	Если МассивРезультатов[13].Пустой() тогда
		Сообщить("Нет данных по остаткам, учавствующий паллет в переагрегации,проверьте правильность заполнения ячейки агрегации");
		Ошибка=Истина;
	КонецЕсли;
	Пока ВыборкаПроверки.Следующий() цикл
		
		Если ВыборкаПроверки.КоличествоСкладов>1 Тогда 
			Сообщить("переупаковаемый паллет в ячейке должен принадлежать только 1 складу");
			Ошибка=Истина;
		КонецЕсли;
		Если ВыборкаПроверки.КоличествоРазногоКачества>1 Тогда 
			Сообщить("переупаковаемый паллет в ячейке должен принадлежать только 1 качеству");
			Ошибка=Истина;
		КонецЕсли;
		
		Если ВыборкаПроверки.КоличествоХарактеристик>1 Тогда 
			Сообщить("переупаковаемый паллет в ячейке должен принадлежать только 1-ой хар-ке");
			Ошибка=Истина;
		КонецЕсли;
		Если ВыборкаПроверки.КоличествоОстаток<ВыборкаПроверки.КоличествоКИзменению Тогда 
			Сообщить("в переупаковаемом паллете не хватает Количества ");
			Ошибка=Истина;
		КонецЕсли;
	КонецЦикла;
	Если Ошибка тогда
		Возврат
	КонецЕсли;
	ВыборкаЗаполненияСклад=МассивРезультатов[12].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаполненияСклад.Следующий() цикл
		Объект.СкладОтправитель=ВыборкаЗаполненияСклад.Склад;
		Объект.СкладПолучатель=ВыборкаЗаполненияСклад.Склад;
		ВыборкаДетальнойЗаписи= ВыборкаЗаполненияСклад.Выбрать();
		Объект.Товары.Очистить();
		Пока ВыборкаДетальнойЗаписи.Следующий() цикл
		НоваяСтрока=Объект.Товары.Добавить();
		НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
		НоваяСтрока.ИдентификаторУпаковки=ВыборкаДетальнойЗаписи.ИерархияУпаковкиДоПереупаковки;
		НоваяСтрока.Номенклатура=ВыборкаДетальнойЗаписи.Номенклатура;
		НоваяСтрока.Характеристика=ВыборкаДетальнойЗаписи.Характеристика;
		НоваяСтрока.СерияНоменклатуры=ВыборкаДетальнойЗаписи.СерияНоменклатуры;
        НоваяСтрока.Качество=ВыборкаДетальнойЗаписи.Качество;
        НоваяСтрока.ДатаРозлива =ВыборкаДетальнойЗаписи.СерияНоменклатуры.ДатаПроизводства;
		НоваяСтрока.Количество=ВыборкаДетальнойЗаписи.Количество;
		НоваяСтрока.Ячейка=ВыборкаДетальнойЗаписи.ЯчейкаАгрегации;
		НоваяСтрока.КоличествоИзменения=ВыборкаДетальнойЗаписи.Количество;
        НоваяСтрока.ИдентификаторУпаковкиИзменения=ВыборкаДетальнойЗаписи.ИерархияУпаковки;
        НоваяСтрока.ХарактеристикаИзменения=ВыборкаДетальнойЗаписи.Характеристика;
        НоваяСтрока.СерияНоменклатурыИзменения= ВыборкаДетальнойЗаписи.СерияНоменклатуры;
		НоваяСтрока.КачествоИзменения=ВыборкаДетальнойЗаписи.Качество;
		НоваяСтрока.ДатаРозливаИзменения=ВыборкаДетальнойЗаписи.СерияНоменклатуры.ДатаПроизводства;
		КонецЦикла;
		
	КонецЦикла;
	

	КонецПроцедуры

&НаСервере
Процедура ПроверканаНаличиеСуществующегоПеремещения(Отказ)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.итОснование = &итОснование
	|	И ПеремещениеТоваров.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("итОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Сообщить("У документа есть перемещение "+ВыборкаДетальныеЗаписи.Ссылка);
		Отказ=Истина;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаСоответствиеОснованиеИДокумент()
	Если ТипЗнч(Объект.итОснование)<>Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Возврат Неопределено	
	КонецЕсли;
	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;	
	ЗапросДанныхПоРазличиюОснованияИДокумента(МенеджерВременныхТаблиц);
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ГруппированныеДанные.КоличествоСоСклада <> ГруппированныеДанные.КоличествоУпрПеремещения
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НеХватаетТовараНаСкладеНеВбитыхЯчейках,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ГруппированныеДанные.КоличествоСоСклада > ГруппированныеДанные.КоличествоУпрПеремещения
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВСкладскомДокументеТовараБольшеЧемВУпр
		|ИЗ
		|	ГруппированныеДанные КАК ГруппированныеДанные";
	
		
		РезультатЗапроса = Запрос.Выполнить();
	
		ВыборкаДетальныхЗаписей=РезультатЗапроса.Выбрать();
		НеХватаетТовараНаСкладеНеВбитыхЯчейках=0;
		ВСкладскомДокументеТовараБольшеЧемВУпр=0;
		Пока  ВыборкаДетальныхЗаписей.Следующий() цикл
		НеХватаетТовараНаСкладеНеВбитыхЯчейках=ВыборкаДетальныхЗаписей.НеХватаетТовараНаСкладеНеВбитыхЯчейках;
		ВСкладскомДокументеТовараБольшеЧемВУпр=ВыборкаДетальныхЗаписей.ВСкладскомДокументеТовараБольшеЧемВУпр;
	КонецЦикла;
	Возврат новый Структура("НеХватаетТовараНаСкладеНеВбитыхЯчейках,ВСкладскомДокументеТовараБольшеЧемВУпр",НеХватаетТовараНаСкладеНеВбитыхЯчейках,ВСкладскомДокументеТовараБольшеЧемВУпр);
	КонецФункции
&НаСервере
Процедура ЗапросДанныхПоРазличиюОснованияИДокумента(МенеджерВременныхТаблиц)
	Данные=РеквизитФормыВЗначение("Объект");
	Данные.ЗапросДанныхПоРазличиюОснованияИДокумента(МенеджерВременныхТаблиц);	

	//Запрос = Новый Запрос;
	//Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	итWMSИзменениеПараметровТовараВЯчейкахТовары.Номенклатура,
	//|	итWMSИзменениеПараметровТовараВЯчейкахТовары.СерияНоменклатурыИзменения КАК СерияНоменклатуры,
	//|	итWMSИзменениеПараметровТовараВЯчейкахТовары.ХарактеристикаИзменения КАК Характеристика,
	//|	итWMSИзменениеПараметровТовараВЯчейкахТовары.КоличествоИзменения КАК Количество,
	//|	итWMSИзменениеПараметровТовараВЯчейкахТовары.КачествоИзменения КАК Качество
	//|ПОМЕСТИТЬ ВтТовары
	//|ИЗ
	//|	&Товары КАК итWMSИзменениеПараметровТовараВЯчейкахТовары
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВтТовары.Номенклатура,
	//|	ВтТовары.СерияНоменклатуры,
	//|	ВтТовары.Характеристика,
	//|	СУММА(ВтТовары.Количество) КАК Количество,
	//|	ВтТовары.Качество
	//|ПОМЕСТИТЬ ГруппировкаТовары
	//|ИЗ
	//|	ВтТовары КАК ВтТовары
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВтТовары.Номенклатура,
	//|	ВтТовары.СерияНоменклатуры,
	//|	ВтТовары.Характеристика,
	//|	ВтТовары.Качество
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ПеремещениеТоваровТовары.Номенклатура,
	//|	СУММА(ЕСТЬNULL(ПеремещениеТоваровТовары.Количество, 0) * ЕСТЬNULL(ПеремещениеТоваровТовары.Коэффициент, 0)) КАК Количество,
	//|	ПеремещениеТоваровТовары.СерияНоменклатуры,
	//|	ПеремещениеТоваровТовары.Качество,
	//|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры
	//|ПОМЕСТИТЬ ДанныеУпрПеремещения
	//|ИЗ
	//|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	//|ГДЕ
	//|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ПеремещениеТоваровТовары.Номенклатура,
	//|	ПеремещениеТоваровТовары.СерияНоменклатуры,
	//|	ПеремещениеТоваровТовары.Качество,
	//|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ГруппировкаТовары.Номенклатура,
	//|	ГруппировкаТовары.СерияНоменклатуры,
	//|	ГруппировкаТовары.Характеристика,
	//|	ГруппировкаТовары.Количество КАК КоличествоСоСклада,
	//|	ГруппировкаТовары.Качество,
	//|	0 КАК КоличествоУпрПеремещения
	//|ПОМЕСТИТЬ СравнениеОбъединениеДанных
	//|ИЗ
	//|	ГруппировкаТовары КАК ГруппировкаТовары
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ДанныеУпрПеремещения.Номенклатура,
	//|	ДанныеУпрПеремещения.СерияНоменклатуры,
	//|	ДанныеУпрПеремещения.ХарактеристикаНоменклатуры,
	//|	0,
	//|	ДанныеУпрПеремещения.Качество,
	//|	ДанныеУпрПеремещения.Количество
	//|ИЗ
	//|	ДанныеУпрПеремещения КАК ДанныеУпрПеремещения
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СравнениеОбъединениеДанных.Номенклатура,
	//|	СравнениеОбъединениеДанных.СерияНоменклатуры,
	//|	СравнениеОбъединениеДанных.Характеристика,
	//|	СУММА(СравнениеОбъединениеДанных.КоличествоСоСклада) КАК КоличествоСоСклада,
	//|	СравнениеОбъединениеДанных.Качество,
	//|	СУММА(СравнениеОбъединениеДанных.КоличествоУпрПеремещения) КАК КоличествоУпрПеремещения
	//|ПОМЕСТИТЬ ГруппированныеДанные
	//|ИЗ
	//|	СравнениеОбъединениеДанных КАК СравнениеОбъединениеДанных
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	СравнениеОбъединениеДанных.Номенклатура,
	//|	СравнениеОбъединениеДанных.СерияНоменклатуры,
	//|	СравнениеОбъединениеДанных.Характеристика,
	//|	СравнениеОбъединениеДанных.Качество
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ВтТовары
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ГруппировкаТовары
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ДанныеУпрПеремещения
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ СравнениеОбъединениеДанных";
	//
	//Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	//Запрос.УстановитьПараметр("Ссылка",Объект.итОснование);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
КонецПроцедуры
&НаСервере
Процедура СкомпинсироватьПеремещениеТоваровИСоздатьНовое(Ссылка)
МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;	
	ЗапросДанныхПоРазличиюОснованияИДокумента(МенеджерВременныхТаблиц);
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппированныеДанные.Номенклатура,
		|	ГруппированныеДанные.СерияНоменклатуры,
		|	ГруппированныеДанные.Характеристика,
		|	ГруппированныеДанные.КоличествоСоСклада,
		|	ГруппированныеДанные.Качество,
		|	ГруппированныеДанные.КоличествоУпрПеремещения,
		|	ЕСТЬNULL(ГруппированныеДанные.КоличествоУпрПеремещения, 0) - ЕСТЬNULL(ГруппированныеДанные.КоличествоСоСклада, 0) / ВЫБОР
		|		КОГДА ЕСТЬNULL(ГруппированныеДанные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ГруппированныеДанные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)
		|	КОНЕЦ КАК КоличествоДляНовогоПеремещения,
		|	ГруппированныеДанные.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		|	ГруппированныеДанные.Номенклатура.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
		|	ГруппированныеДанные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
		|	ЕСТЬNULL(ГруппированныеДанные.КоличествоУпрПеремещения, 0) - ЕСТЬNULL(ГруппированныеДанные.КоличествоСоСклада, 0) / ВЫБОР
		|		КОГДА ЕСТЬNULL(ГруппированныеДанные.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 1) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ГруппированныеДанные.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 1)
		|	КОНЕЦ КАК КоличествоМест
		|ИЗ
		|	ГруппированныеДанные КАК ГруппированныеДанные
		|ГДЕ
		|	ЕСТЬNULL(ГруппированныеДанные.КоличествоУпрПеремещения, 0) - ЕСТЬNULL(ГруппированныеДанные.КоличествоСоСклада, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппированныеДанные.Номенклатура,
		|	ГруппированныеДанные.СерияНоменклатуры,
		|	ГруппированныеДанные.Характеристика,
		|	ГруппированныеДанные.КоличествоСоСклада / ВЫБОР
		|		КОГДА ЕСТЬNULL(ГруппированныеДанные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ГруппированныеДанные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)
		|	КОНЕЦ КАК КоличествоСоСклада,
		|	ГруппированныеДанные.Качество,
		|	ГруппированныеДанные.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		|	ГруппированныеДанные.Номенклатура.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
		|	ГруппированныеДанные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
		|	ГруппированныеДанные.КоличествоСоСклада / ВЫБОР
		|		КОГДА ЕСТЬNULL(ГруппированныеДанные.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 1) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ГруппированныеДанные.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 1)
		|	КОНЕЦ КАК КоличествоМест,
		|	ГруппированныеДанные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
		|ИЗ
		|	ГруппированныеДанные КАК ГруппированныеДанные";
	
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ОбъектПеремещенияИзменения=Объект.итОснование.ПолучитьОбъект();
		ОбъектПеремещенияИзменения.Товары.Очистить();
		ВыборкаТоварыПеремещенияОснование=МассивРезультатов[1].Выбрать();
		
		Пока ВыборкаТоварыПеремещенияОснование.Следующий() цикл
			НоваяСтрока=ОбъектПеремещенияИзменения.Товары.Добавить();
			НоваяСтрока.Номенклатура               = ВыборкаТоварыПеремещенияОснование.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаТоварыПеремещенияОснование.Характеристика;
			НоваяСтрока.СерияНоменклатуры          = ВыборкаТоварыПеремещенияОснование.СерияНоменклатуры;
			НоваяСтрока.Количество                 = ВыборкаТоварыПеремещенияОснование.КоличествоСоСклада;
			НоваяСтрока.Качество                   = ВыборкаТоварыПеремещенияОснование.Качество;
		КонецЦикла;
      ОбъектПеремещенияИзменения.Записать(РежимЗаписиДокумента.Проведение);
	  
	  НовыйДокументПеремещения=ОбъектПеремещенияИзменения.Скопировать();
	  НовыйДокументПеремещения.Дата=ТекущаяДата();
	  НовыйДокументПеремещения .Товары.Очистить();
	  ВыборкаТоварыПеремещенияНовый=МассивРезультатов[0].Выбрать();
      Пока ВыборкаТоварыПеремещенияНовый.Следующий() цикл
			НоваяСтрока=НовыйДокументПеремещения.Товары.Добавить();
			НоваяСтрока.Номенклатура               = ВыборкаТоварыПеремещенияНовый.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаТоварыПеремещенияНовый.Характеристика;
			НоваяСтрока.СерияНоменклатуры          = ВыборкаТоварыПеремещенияНовый.СерияНоменклатуры;
			НоваяСтрока.Количество                 = ВыборкаТоварыПеремещенияНовый.КоличествоДляНовогоПеремещения;
			НоваяСтрока.Качество                   = ВыборкаТоварыПеремещенияНовый.Качество;
		КонецЦикла;
		НовыйДокументПеремещения.Записать(РежимЗаписиДокумента.Проведение);
	
	    Ссылка=НовыйДокументПеремещения.Ссылка;
	  
        
	
	КонецПроцедуры
&НаСервере	
Процедура ПроверитьОснованиеНаНесколькоПодчиненныхДокументов(Отказ)
	Если Объект.итОснование=Неопределено Тогда 
		Возврат
	КонецЕсли;	
	Данные=РеквизитФормыВЗначение("Объект");
	Данные.ПроверитьОснованиеНаНесколькоПодчиненныхДокументов(Отказ);	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПустаяЯчейка()
	Возврат Справочники.итСкладскиеЯчейки.ПустаяСсылка();
КонецФункции
#КонецОбласти
