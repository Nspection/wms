

#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДатаНачала=ТекущаяДата();
	ДатаОкончания=ТекущаяДата();
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен Тогда
		ОбновитьДанныеСТСД();
	КонецЕсли;
	Если Параметры.Ключ.Пустая() тогда
		Объект.итОснование=Неопределено;
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		Объект.Ответственный=ПараметрыСеанса.ТекущийПользователь;  
		Объект.ВидОперации=Перечисления.ВидыОперацииПримкиWMS.Приемка;
		Объект.Дата=ТекущаяДата();
		Если Объект.Организация.Пустая() Тогда
		ОбщегоНазначения.УстановитьОрганизациюВДокументе(Объект);
		КонецЕсли;
		Если Объект.Товары.Количество()>0 тогда
			для Каждого стр из Объект.Товары цикл
				стр.ИдентификаторСтроки=новый УникальныйИдентификатор;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	ПроставитьПредставлениеИдентификатора();
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен или
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой тогда
		ПроставитьИнформацияВСтрокахОБОшибки();
КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ТоварыСостояниеЗадачиПриИзменении(Элемент)
 ГрупповоеИзменениеСпискаПоИдУпаковки("СостояниеЗадачи",Элемент.Родитель.ТекущиеДанные.СостояниеЗадачи,Элемент.Родитель.ТекущиеДанные.ИдентификаторУпаковки);
КонецПроцедуры
&НаКлиенте
Процедура ТоварыЯчейкаПолучательПриИзменении(Элемент)
ГрупповоеИзменениеСпискаПоИдУпаковки("ЯчейкаПолучатель",Элемент.Родитель.ТекущиеДанные.ЯчейкаПолучатель,Элемент.Родитель.ТекущиеДанные.ИдентификаторУпаковки);
КонецПроцедуры
&НаКлиенте
Процедура ТоварыКарантинПаллетыПриИзменении(Элемент)
ГрупповоеИзменениеСпискаПоИдУпаковки("КарантинПаллеты",Элемент.Родитель.ТекущиеДанные.КарантинПаллеты,Элемент.Родитель.ТекущиеДанные.ИдентификаторУпаковки);
КонецПроцедуры
&НаКлиенте
Процедура ТоварыКомментарийПриИзменении(Элемент)
ГрупповоеИзменениеСпискаПоИдУпаковки("Комментарий",Элемент.Родитель.ТекущиеДанные.Комментарий,Элемент.Родитель.ТекущиеДанные.ИдентификаторУпаковки);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Картинка = новый Картинка(ПолучитьКартинкуИзБибилиоетки());
	АдресКартинкиКуба=ПоместитьВоВременноеХранилище(Картинка,ЭтаФорма.УникальныйИдентификатор);
	ВидимостьДоступностьЭлементов();
	ВариантОтображенияПользователя();
КонецПроцедуры
&НаКлиенте
Процедура ПриемкаИзТранзитаПриИзменении(Элемент)
	ВидимостьДоступностьЭлементов();
КонецПроцедуры
&НаКлиенте
Процедура ТоварыИдентификаторУпаковкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	СписокИдентификаторУпаковки=ПолучитьСписокУпаковокДокумента();
	ОткрытьФорму("Документ.итWMSПриемка.Форма.ФормаЗапросаИдентификатораУпаковки",новый Структура("СписокИдентификаторУпаковки,Организация,Ответственный",СписокИдентификаторУпаковки,Объект.Организация,ПолучитьТекущегоПользователя()),Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыИдентификаторУпаковкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Элемент.Родитель.ТекущиеДанные.ИдентификаторУпаковки= ВыбранноеЗначение;
КонецПроцедуры
&НаКлиенте
Процедура ТоварыДеревоНоменклатураПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоХарактеристикаПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоКачествоПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоДатаРозливаПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоКоличествоПланПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
	РассчетКоличестваВУпаковкеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоКоличествоФактПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
	РассчетКоличестваВУпаковкеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоСостояниеЗадачиПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].СостояниеЗадачи=Элемент.Родитель.ТекущиеДанные.СостояниеЗадачи;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоЯчейкаПолучательПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].ЯчейкаПолучатель=Элемент.Родитель.ТекущиеДанные.ЯчейкаПолучатель;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоКомментарийПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].Комментарий=Элемент.Родитель.ТекущиеДанные.Комментарий;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоКарантинПаллетыПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].КарантинПаллеты=Элемент.Родитель.ТекущиеДанные.КарантинПаллеты;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоПередУдалением(Элемент, Отказ)
	Если Элемент.ВыделенныеСтроки.Количество()>1 тогда
		Сообщить("В режиме дерева можно удалять 1 любую строку за раз");
		Отказ=Истина;
		Возврат
	КонецЕсли;	
	Если Элемент.ТекущиеДанные.СтрокаУпаковки тогда
		Оповещение = новый ОписаниеОповещения("ОбработчикДиалогов",ЭтаФорма," ОбработчикУдалениеУпаковки();");
		ПоказатьВопрос(Оповещение,"Если удалить паллету, то все строки в ней так же будут удалены",РежимДиалогаВопрос.ДаНет);
		Отказ=Истина;
		Возврат
	иначе
		МассивСтроки=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",Элемент.ТекущиеДанные.ИдентификаторСтрокиПредставление));
		Строка=МассивСтроки[0];
		Объект.Товары.Удалить(Строка);
	КонецЕсли;
	ЭтаФорма.Модифицированность=Истина;
КонецПроцедуры
//&НаКлиенте
//Процедура ОбработчикУдалениеУпаковки()
//	СтрокаУпаковки=Элементы.ТоварыДерево.ТекущиеДанные.ПолучитьЭлементы();
//	для Каждого стр из СтрокаУпаковки цикл
//		МассивСтроки=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
//		Строка=МассивСтроки[0];
//		Объект.Товары.Удалить(Строка);
//	КонецЦикла;
//	ТоварыДерево.ПолучитьЭлементы().Удалить(Элементы.ТоварыДерево.ТекущиеДанные);
//	ЭтаФорма.Модифицированность=Истина;
//КонецПроцедуры
&НаКлиенте
Процедура ТоварыДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтрокаПеретаскиванияКуда=Элементы.ТоварыДерево.ДанныеСтроки(Строка);
	Если не СтрокаПеретаскиванияКуда.СтрокаУпаковки тогда
		пока не СтрокаПеретаскиванияКуда.СтрокаУпаковки цикл
			СтрокаПеретаскиванияКуда=СтрокаПеретаскиванияКуда.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	СтандартнаяОбработка=Ложь;
	для Каждого стр из ПараметрыПеретаскивания.Значение цикл
		ТекущаяСтрокаОбработки=Элементы.ТоварыДерево.ДанныеСтроки(стр);
		Если ТекущаяСтрокаОбработки.СтрокаУпаковки тогда
			Продолжить;
		КонецЕсли;	
		ТекущаяСтрокаОбработки.ИдентификаторУпаковки=СтрокаПеретаскиванияКуда.ИдентификаторУпаковки;
		НоваяСтрока=СтрокаПеретаскиванияКуда.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрокаОбработки);
		НоваяСтрока.ЯчейкаПолучатель=СтрокаПеретаскиванияКуда.ЯчейкаПолучатель;
		СтарыйРодитель=ТекущаяСтрокаОбработки.ПолучитьРодителя();
		СтарыйРодитель.ПолучитьЭлементы().Удалить(ТекущаяСтрокаОбработки);
		
		/////Обработчики Изменения
		СтрукрутраДляИзменения=новый Структура;
		СтрукрутраДляИзменения.Вставить("Имя","ИдентификаторУпаковки");
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		ОбработчикТрансляцииПриИзменении(СтрукрутраДляИзменения);
		СтрукрутраДляИзменения.Вставить("Имя","ЯчейкаПолучатель");
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		ОбработчикТрансляцииПриИзменении(СтрукрутраДляИзменения);
		//Обработчики пересчета 
		СтрукрутраДляИзменения.Имя="КоличествоПлан";
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		РассчетКоличестваВУпаковкеПриИзменении(СтрукрутраДляИзменения) ;
		СтрукрутраДляИзменения.Имя="КоличествоФакт";
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		РассчетКоличестваВУпаковкеПриИзменении(СтрукрутраДляИзменения) ;
		СтрукрутраДляИзменения.Имя="КоличествоПлан";
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",СтарыйРодитель));
		РассчетКоличестваВУпаковкеПриИзменении(СтрукрутраДляИзменения) ;
		СтрукрутраДляИзменения.Имя="КоличествоФакт";
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",СтарыйРодитель));
		РассчетКоличестваВУпаковкеПриИзменении(СтрукрутраДляИзменения) ;
		
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ВидимостьДоступностьЭлементов();
	ПроставитьПредставлениеИдентификатора();
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="WMSЗавршениеПриемки" и Параметр=Объект.Ссылка тогда
		ОбновитьДокументНаСервере();
		ВидимостьДоступностьЭлементов();
	КонецЕсли;
	КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
Если ИсточникВыбора.ИмяФормы="РегистрСведений.итWMS_ДанныеДокументов.Форма.ФормаВыбораДокумента" тогда
	ЗагрузитьВыбранныеДанные(ВыбранноеЗначение);
	ВариантОтображенияПользователя();
	ВидимостьДоступностьЭлементов();
КонецЕсли;
Если ИсточникВыбора.ИмяФормы="Документ.итWMSПриемка.Форма.ФормаСпискаДокументовЕгаис" тогда
	Если ВыбранноеЗначение<>Неопределено Тогда 
		Если ВыбранноеЗначение.ТипПолучение="Ссылка" Тогда 
		ДобавитьДокументМарокДляСоотв(ВыбранноеЗначение.Ссылка);
	иначе
		КлючФоновогоПолученияДокументаПМУ=ВыбранноеЗначение.Ключ;
		ПодключитьОбработчикОжидания("ПодставитьДокументПМУвФоне",5,Истина);
		КонецЕсли;
	КонецЕсли;
КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СоответсвиеДаннныхТТНиСкласдкогоУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
СоответсвиеДаннныхТТНиСкласдкогоУчетаОбработкаВыбораСервер(ВыбранноеЗначение);	
КонецПроцедуры
&НаСервере
Процедура СоответсвиеДаннныхТТНиСкласдкогоУчетаОбработкаВыбораСервер(ВыбранноеЗначение)
	Объект.СоответсвиеДаннныхТТНиСкласдкогоУчета.Очистить();
	Для Каждого Стр из ВыбранноеЗначение цикл
		НоваяСтрока=Объект.СоответсвиеДаннныхТТНиСкласдкогоУчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоПриАктивизацииСтроки(Элемент)
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура ВВидеДерева(Команда)
	ВВидеДереваНаСервере();
	Элементы.ТоварыДерево.Видимость=Истина;
	Элементы.Товары.Видимость=Ложь;
	ТригерОтображения=Истина;
КонецПроцедуры
&НаСервере
Процедура ВВидеДереваНаСервере()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	ТоварыДерево.ПолучитьЭлементы().Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтрокиПредставление,
	|	Товары.ИдентификаторУпаковки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Качество,
	|	Товары.ДатаРозлива,
	|	Товары.КоличествоПлан,
	|	Товары.КоличествоФакт,
	|	Товары.ЯчейкаПолучатель,
	|	Товары.СостояниеЗадачи,
	|	Товары.СтрокаВозможнойОшибки,
	|	Товары.КарантинПаллеты,
	|	Товары.КонтрольнаяМарка,
	|	Товары.ИнтервалМарки,
	|	Товары.Комментарий,
	|	Товары.СерияНоменклатуры
	|ПОМЕСТИТЬ ТчТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчТовары.ИдентификаторСтрокиПредставление,
	|	ТчТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТчТовары.Номенклатура,
	|	ТчТовары.Характеристика,
	|	ТчТовары.Качество,
	|	ТчТовары.ДатаРозлива,
	|	ТчТовары.КоличествоПлан КАК КоличествоПлан,
	|	ТчТовары.КоличествоФакт КАК КоличествоФакт,
	|	ТчТовары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	ТчТовары.СостояниеЗадачи КАК СостояниеЗадачи,
	|	ВЫБОР
	|		КОГДА ТчТовары.СтрокаВозможнойОшибки
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтрокаВозможнойОшибки,
	|	ВЫБОР
	|		КОГДА ТчТовары.КарантинПаллеты
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КарантинПаллеты,
	|	ТчТовары.КонтрольнаяМарка КАК КонтрольнаяМарка,
	|	ТчТовары.ИнтервалМарки КАК ИнтервалМарки,
	|	ТчТовары.Комментарий КАК Комментарий,
	|	ТчТовары.СерияНоменклатуры
	|ИЗ
	|	ТчТовары КАК ТчТовары
	|ИТОГИ
	|	СУММА(КоличествоПлан),
	|	СУММА(КоличествоФакт),
	|	МАКСИМУМ(ЯчейкаПолучатель),
	|	МАКСИМУМ(СостояниеЗадачи),
	|	МАКСИМУМ(СтрокаВозможнойОшибки),
	|	МАКСИМУМ(КарантинПаллеты),
	|	МАКСИМУМ(КонтрольнаяМарка),
	|	МАКСИМУМ(ИнтервалМарки),
	|	МАКСИМУМ(Комментарий)
	|ПО
	|	ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаУпаковка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	пока ВыборкаУпаковка.Следующий() цикл
		НоваяСтрокаУпаковкаДерево = ТоварыДерево.ПолучитьЭлементы().Добавить();
		НоваяСтрокаУпаковкаДерево.ИдентификаторУпаковки= ВыборкаУпаковка.ИдентификаторУпаковки;
		НоваяСтрокаУпаковкаДерево.ЯчейкаПолучатель = ВыборкаУпаковка.ЯчейкаПолучатель;
		НоваяСтрокаУпаковкаДерево.КоличествоПлан=ВыборкаУпаковка.КоличествоПлан;
		НоваяСтрокаУпаковкаДерево.КоличествоФакт=ВыборкаУпаковка.КоличествоФакт;
		НоваяСтрокаУпаковкаДерево.СостояниеЗадачи=ВыборкаУпаковка.СостояниеЗадачи;
		НоваяСтрокаУпаковкаДерево.КонтрольнаяМарка=ВыборкаУпаковка.КонтрольнаяМарка;
		НоваяСтрокаУпаковкаДерево.ИнтервалМарки=ВыборкаУпаковка.ИнтервалМарки;
		НоваяСтрокаУпаковкаДерево.Картинка=АдресКартинкиКуба;
		НоваяСтрокаУпаковкаДерево.СтрокаУпаковки=Истина;
		НоваяСтрокаУпаковкаДерево.Комментарий=ВыборкаУпаковка.Комментарий;
		Если ВыборкаУпаковка.СтрокаВозможнойОшибки>0 тогда
			НоваяСтрокаУпаковкаДерево.СтрокаВозможнойОшибки=Истина;
		КонецЕсли;
		Если ВыборкаУпаковка.КарантинПаллеты>0 тогда
			 НоваяСтрокаУпаковкаДерево.КарантинПаллеты=Истина;
		КонецЕсли;	 
		ВыборкаДетальныеЗаписи=ВыборкаУпаковка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрокаНоменклатуры = НоваяСтрокаУпаковкаДерево.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатуры,ВыборкаДетальныеЗаписи);
			НоваяСтрокаНоменклатуры.ЯчейкаПолучатель=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
			Если ВыборкаДетальныеЗаписи.СтрокаВозможнойОшибки>0 тогда
				НоваяСтрокаНоменклатуры.СтрокаВозможнойОшибки=Истина;
			КонецЕсли;
			НоваяСтрокаНоменклатуры.КонтрольнаяМарка="";
			НоваяСтрокаНоменклатуры.ИнтервалМарки="";
			НоваяСтрокаНоменклатуры.Комментарий="";
		КонецЦикла;
	КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
&НаКлиенте
Процедура ВВидеСписка(Команда)
	Элементы.ТоварыДерево.Видимость=Ложь;
	Элементы.Товары.Видимость=Истина;
	ТригерОтображения=Ложь;
КонецПроцедуры
&НаКлиенте
Процедура СкопироватьТовары(Команда)
	Если  Элементы.ГруппаТовары.ТолькоПросмотр тогда
		Возврат
	КонецЕсли;	
	Если ТекущийЭлемент.Имя="Товары" тогда
		НоваяСтрока=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущийЭлемент.ТекущиеДанные);
		НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
		НоваяСтрока.ИдентификаторСтрокиПредставление=Строка(НоваяСтрока.ИдентификаторСтроки);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ДобавитьТовары(Команда)
	Если  Элементы.ГруппаТовары.ТолькоПросмотр тогда
		Возврат
	КонецЕсли;	
	НоваяСтрока=Объект.Товары.Добавить();
	НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
	НоваяСтрока.ИдентификаторСтрокиПредставление= Строка(НоваяСтрока.ИдентификаторСтроки);
КонецПроцедуры
&НаКлиенте
Процедура Развернуть(Команда)
	//СтрокиПаллет=ПаллетМеста.ПолучитьЭлементы();
	//для Каждого Паллета из СтрокиПаллет цикл
	//	Элементы.ПаллетМеста.Развернуть(Паллета.ПолучитьИдентификатор());
	//КонецЦикла;
	Строки=ТоварыДерево.ПолучитьЭлементы();
	Если Строки.Количество()>0 тогда
		РазвернутьДанные(Строки);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура РазвернутьДанные(Строки)
	для Каждого Строка из Строки цикл
		Элементы.ТоварыДерево.Развернуть(Строка.ПолучитьИдентификатор());
		ПодчиненныеСтроки= Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество()>0 тогда
			РазвернутьДанные(ПодчиненныеСтроки);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура Свернуть(Команда)
	Строки=ТоварыДерево.ПолучитьЭлементы();
	Если Строки.Количество()>0 тогда
		СвернутьДанные(Строки);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте	
Процедура СвернутьДанные(Строки)
	для Каждого Строка из Строки цикл
		ПодчиненныеСтроки= Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество()>0 тогда
			СвернутьДанные(ПодчиненныеСтроки);
		КонецЕсли;	
		Элементы.ТоварыДерево.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;	
КонецПроцедуры
&НаКлиенте
Процедура ЗавершитьПриемку(Команда)
	Если не ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) и не ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) тогда
		Сообщить("Для завершения приемки необходимо указать дату и номер входящего документа");
		Возврат
	КонецЕсли;
	ТекстСообщения=ПроверкаПриемкиНаСервере();
	Оповещение=новый ОписаниеОповещения("ЗавершитьПриемкуОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,ТекстСообщения+" 
	|Для завершения приемки будет создан документ размещения, вы точно хотите завершить приемку?",РежимДиалогаВопрос.ДаНет);

КонецПроцедуры
&НаСервере
Функция ПроверитьНаДублированиеSSCC()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSОстальныеПриемки.ИдентификаторУпаковки
		|ИЗ
		|	Документ.итWMSПриемка.Товары КАК итWMSТекущаяПриемка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПриемка.Товары КАК итWMSОстальныеПриемки
		|		ПО итWMSТекущаяПриемка.ИдентификаторСтроки = итWMSОстальныеПриемки.ИдентификаторСтроки
		|ГДЕ
		|	итWMSТекущаяПриемка.Ссылка = &Ссылка
		|	И итWMSОстальныеПриемки.Ссылка <> &Ссылка
		|	И итWMSОстальныеПриемки.Ссылка.Проведен = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSОстальныеПриемки.ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Сообщение="";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Сообщение=Сообщение+"
	|"+"Дублирование идентификатор упаковок:"+ВыборкаДетальныеЗаписи.ИдентификаторУпаковки;
    КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
    Возврат Сообщение;
	КонецФункции
&НаКлиенте
Процедура ЗавершитьПриемкуОповещение(Результат,Параметры) Экспорт 
	Если  Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;
	Если ЕстьНоваяНоменклатура() Тогда 
		Возврат
	КонецЕсли;
	Если ПроверкаНаНеобходимостьКорректировкиСерий() Тогда 
		Сообщить("Необходимо создать корректировку серий");  
		Возврат;
	КонецЕсли;	
	СоздатьПереупаковкуПМУ();
	ЗавершениеПриемкиСервер();	
	ОткрытьФорму("Документ.итWMSРазмещение.Форма.ФормаДокумента",новый Структура("ПараметрыЗаполненияДанных",Объект.Ссылка));
	ВидимостьДоступностьЭлементов();
	КонецПроцедуры
&НаСервере
Функция ПроверкаПриемкиНаСервере()
	ТекстСообщения="";
	Данные=РеквизитФормыВЗначение("Объект");
	Если Объект.ПриемкаИзТранзита тогда
		РезультатЗапроса=Данные.ЗапросПроверкиПриемки();
	иначе
		РезультатЗапроса=Данные.ЗапросПроверкиПриемкиКакЕсть();
	КонецЕсли;
	Выборка=РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() цикл
		ТекстСообщения=ТекстСообщения+"
		|"+" для номеклатуры "+Выборка.Номенклатура+"с датой розлива "+Выборка.ДатаРозлива+" не совпадает количество плана(Данных физических документов ) "+Выборка.КоличествоПлан+" и количество факта "
		+Выборка.КоличествоФакт;
	КонецЦикла;
	ТекстСообщения=ТекстСообщения+"
	|"+ПроверитьНаДублированиеSSCC();
	Возврат ТекстСообщения;
	КонецФункции
&НаСервере
Процедура ОбновитьДанныеОтображенияНаСервере()
	ЭтаФорма.Записать();
    ПроставитьИнформацияВСтрокахОБОшибки();
	ПроставитьПредставлениеИдентификатора();
	ВВидеДереваНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОтображения(Команда)
	ОбновитьДанныеОтображенияНаСервере();
КонецПроцедуры
&НаСервере
Процедура ЗагрузитьВыбранныеДанные(ГУИД_Документа)
	
    СтруктураДанных=ЗапроситьДанныеДокументаПоГуиду(ГУИД_Документа);
	Если СтруктураДанных=Неопределено тогда
		Сообщить("Нет доступных данных по выбранному документу,попробуйте еще раз");
		Возврат
	КонецЕсли;	
	Объект.Товары.Очистить();
	Объект.ДанныеФизическогоНосителя.Очистить();
	ДанныеХранилища= СтруктураДанных.ДанныеДокумента;
	Если ДанныеХранилища.ПризнакЗагрузки=0 тогда
		Если Объект.ПриемкаИзТранзита тогда
			Сообщить(" снимите галочку статуса приемки из транита  и запросите данные заного. Данные по документу найдены, но данных по SSCC нет, приемка будет осуществляться в 
			| ручном режиме");
			Возврат
		КонецЕсли;
		для Каждого  стр из ДанныеХранилища.ТаблицаДанных цикл
			НоваяСтрокаФизическогоНосителя=Объект.ДанныеФизическогоНосителя.Добавить();
			Если стр.ИТПСтрокой="00000000-0000-0000-0000-000000000000" Тогда 
				НоваяСтрокаФизическогоНосителя.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			иначе
				НоваяСтрокаФизическогоНосителя.Номенклатура = ПоискНоменклатурыПоИдентификатору(стр.ИТПСтрокой);
			КонецЕсли;
			НоваяСтрокаФизическогоНосителя.ДатаРозлива=стр.ДатаРозлива;
			НоваяСтрокаФизическогоНосителя.Количество=стр.КоличествоВБазовыхЕденицахИзмерения;
		КонецЦикла;
		Сообщить("Данные успешно полученны в таблицу <<Данные Физического Носителя>> ");
	иначе
		Если не Объект.ПриемкаИзТранзита тогда 
	    Сообщить(" поставьте галочку статуса приемки из транита и запросите данные заного. Ифнормация по SSCC есть, приемка будет осуществляться в 
			| полуавтоматическом  режиме");
			Возврат;
		КонецЕсли;	
		для Каждого  стр из ДанныеХранилища.ТаблицаДанных цикл
			НоваяСтрокаТовары=Объект.Товары.Добавить();
			Если стр.ИТПСтрокой="00000000-0000-0000-0000-000000000000" Тогда 
			НоваяСтрокаТовары.Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
			иначе
			НоваяСтрокаТовары.Номенклатура = ПоискНоменклатурыПоИдентификатору(стр.ИТПСтрокой);
			КонецЕсли;
			НоваяСтрокаТовары.ДатаРозлива=стр.ДатаРозлива;
			НоваяСтрокаТовары.КоличествоПлан=стр.КоличествоВБазовыхЕденицахИзмерения;
			НоваяСтрокаТовары.ИдентификаторУпаковки = стр.ИдентификаторУпаковки;
			НоваяСтрокаТовары.ИдентификаторСтроки=новый УникальныйИдентификатор();
			НоваяСтрокаТовары.ИдентификаторСтрокиПредставление=Строка(НоваяСтрокаТовары.ИдентификаторСтроки);
		КонецЦикла; 
		Сообщить("Данные успешно полученны");
	КонецЕсли;
	Объект.ДатаВходящегоДокумента=СтруктураДанных.Дата;
	Объект.ГУИД_ДокументаТранизата=ГУИД_Документа;
	Объект.НомерВходящегоДокумента=СтруктураДанных.Номер;
	Объект.Филиал=СтруктураДанных.Филиал;

	///// описание обработчки данных
	
	
КонецПроцедуры
&НаКлиенте
Процедура ЗапроситьДанныеОповещение()Экспорт
	ОткрытьФорму("РегистрСведений.итWMS_ДанныеДокументов.Форма.ФормаВыбораДокумента",,ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ЗапроситьДанные(Команда)
	Оповещение = новый ОписаниеОповещения("ОбработчикДиалогов",ЭтаФорма," ЗапроситьДанныеОповещение();");
	ПоказатьВопрос(Оповещение,"При запросе данных все табличные части будут очищенны, вы хотите продолжить?",РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры
&НаКлиенте
Процедура ОчиститьДанные(Команда)
ОчиститьДанныеНаСервере();
ВидимостьДоступностьЭлементов();
КонецПроцедуры
&НаСервере
Процедура ОчиститьДанныеНаСервере()
	Объект.НомерВходящегоДокумента="";
	Объект.ДатаВходящегоДокумента='00010101';
	Объект.ГУИД_ДокументаТранизата = новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	Объект.Филиал = Справочники.итФилиалыWMS.ПустаяСсылка();
	Объект.Товары.Очистить();
	Объект.ДанныеФизическогоНосителя.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоответсвия(Команда)
	МассивДокументов= СписокДокументовВМассив();
	СтруктурированныйМассив=ДанныеНоменклатурыВМассив();
	ОткрытьФорму("Документ.итWMSПриемка.Форма.ФормаУстановкиСоответствия",новый Структура("ДанныеСкладскогоУчета,ДокументыПомарочногоУчета,ТаблицаСоотв",СтруктурированныйМассив,
	МассивДокументов,ТаблицаВСтруктурированныйМассив("СоответсвиеДаннныхТТНиСкласдкогоУчета")),ЭтаФорма.Элементы.СоответсвиеДаннныхТТНиСкласдкогоУчета);
	КонецПроцедуры
	

&НаКлиенте
Процедура ПолучитьСписокДокументовЕГАИС(Команда)
	Если Объект.Организация.Пустая() Тогда 
		Сообщить("Заполните организацию");
		Возврат;
	КонецЕсли;	
ОткрытьФорму("Документ.итWMSПриемка.Форма.ФормаСпискаДокументовЕгаис",новый Структура("Организация,ДатаНачала,ДатаОкончания",Объект.Организация,ДатаНачала,ДатаОкончания),ЭтаФорма);
КонецПроцедуры
	
&НаКлиенте
Процедура ПросмотрЗначения(Команда)
		Если ТекущийЭлемент.Имя="Товары" или ТекущийЭлемент.Имя="ДокументыПомарочногоУчета" Тогда
		Если ТипЗнч(ТекущийЭлемент.ТекущийЭлемент)=Тип("ПолеФормы") Тогда
			ИмяПоля=ТекущийЭлемент.ТекущийЭлемент.Имя;
			ДлинаСтроки=СтрДлина(ИмяПоля);
			
			Если ТекущийЭлемент.Имя="Товары" Тогда
				ДлинаТЧ=СтрДлина("Товары");
			ИначеЕсли ТекущийЭлемент.Имя="ДокументыПомарочногоУчета" тогда
				ДлинаТЧ=СтрДлина("ДокументыПомарочногоУчета");
			КонецЕсли;
			ПутьКДанным=Прав(ИмяПоля,ДлинаСтроки-ДлинаТЧ);
			//	#Если не ВебКлиент Тогда
			//	ОткрытьЗначение(ТекущийЭлемент.ТекущиеДанные[ПутьКДанным]);
			//#КонецЕсли	
			ПоказатьЗначение(,ТекущийЭлемент.ТекущиеДанные[ПутьКДанным]);
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры
&НаКлиенте
Процедура СоздатьПТУ(Команда)
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокумента",новый Структура("Основание",Объект.Ссылка),ЭтаФорма);
КонецПроцедуры



&НаКлиенте
Процедура СоздатьКорректировкуСерий(Команда)
	Если ПроверкаНаНаличаииКорректировкиСерий() Тогда 
		Сообщить("Уже имеется проведенная корректировка серий");
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Документ.КорректировкаСерийИХарактеристикТоваров.Форма.ФормаДокумента",новый Структура("Основание",Объект.Ссылка),ЭтаФорма);
	КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервереБезКонтекста
Функция ПолучитьКартинкуИзБибилиоетки()
	Возврат БиблиотекаКартинок.ВнешнийИсточникДанныхКуб.ПолучитьДвоичныеДанные();
	КонецФункции

&НаКлиенте
Процедура РассчитатьНадписиКоличестваТовара()
	Если Элементы.Товары.ТекущиеДанные<>Неопределено  Тогда 
		НМ=Элементы.Товары.ТекущиеДанные.Номенклатура;
		ДатаРозлива=Элементы.Товары.ТекущиеДанные.ДатаРозлива;
		МассивСтрок=Объект.Товары.НайтиСтроки(новый Структура("Номенклатура",НМ));
		КоличествоНм=0;
		КоличествоНМФакт=0;
		для Каждого Строка из МассивСтрок цикл
			Если  Объект.ПриемкаИзТранзита Тогда 
				КоличествоНМ=КоличествоНМ+Строка.КоличествоФакт;
			Иначе 
				КоличествоНМ=КоличествоНМ+Строка.КоличествоПлан;
			КонецЕсли;
			КоличествоНМФакт=КоличествоНМФакт+Строка.КоличествоФакт;
		КонецЦикла;
		Элементы.НдаписьТекущейНМЗначение.Заголовок= Строка(КоличествоНМ);
		Элементы.НадписьТекущейНМФактЗначение.Заголовок= Строка(КоличествоНМФакт);
		
		МассивСтрок=Объект.Товары.НайтиСтроки(новый Структура("Номенклатура,ДатаРозлива",НМ,ДатаРозлива));
        КоличествоДатаНм=0;
		КоличествоДатаНМФакт=0;
		для Каждого Строка из МассивСтрок цикл
			Если  Объект.ПриемкаИзТранзита Тогда 
				КоличествоДатаНм=КоличествоДатаНм+Строка.КоличествоФакт;
			Иначе 
				КоличествоДатаНм=КоличествоДатаНм+Строка.КоличествоПлан;
			КонецЕсли;
			КоличествоДатаНМФакт=КоличествоДатаНМФакт+Строка.КоличествоФакт;
		КонецЦикла;
		Элементы.НадписьТекущейДатыРозливаЗначение.Заголовок= Строка(КоличествоДатаНм);
		Элементы.НадписьТекущейДатыРозливаФактЗначение.Заголовок= Строка(КоличествоДатаНМФакт);
	
	КонецЕсли;
	
	КоличествоВсего=0;
	КоличествоВсегоФакт=0;
	для Каждого стр из Объект.Товары Цикл 
		Если  Объект.ПриемкаИзТранзита Тогда 
			КоличествоВсего=КоличествоВсего+стр.КоличествоФакт;
		Иначе 
		КоличествоВсего=КоличествоВсего+стр.КоличествоПлан;
		КонецЕсли;
		КоличествоВсегоФакт=КоличествоВсегоФакт+стр.КоличествоФакт;
	КонецЦикла;
	Элементы.НдаписьВсегоЗначение.Заголовок=Строка(КоличествоВсего);
	Элементы.НдаписьВсегоФактЗначение.Заголовок=Строка(КоличествоВсегоФакт);
КонецПроцедуры

&НаСервере
Функция ПоискНоменклатурыПоИдентификатору(ИТПСтрокой)
	итИндентификаторыТоварныхПозиций=Справочники.итИндентификаторыТоварныхПозиций.ПолучитьСсылку(новый УникальныйИдентификатор(ИТПСтрокой));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.итИдентификаторНоменклатурнойПозиции = &итИдентификаторНоменклатурнойПозиции
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Ссылка";
	
	Запрос.УстановитьПараметр("итИдентификаторНоменклатурнойПозиции", итИндентификаторыТоварныхПозиций);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	Возврат Справочники.Номенклатура.ПустаяСсылка();
	
КонецФункции
&НаСервере
Процедура ПроставитьПредставлениеИдентификатора()
	для Каждого  стр из Объект.Товары цикл
		стр.ИдентификаторСтрокиПредставление=Строка(стр.ИдентификаторСтроки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияПользователя()
	Если ТригерОтображения тогда
		ВВидеДерева("");
	иначе
		ВВидеСписка("");
	КонецЕсли;
КонецПроцедуры
&НаСервере
Функция ПолучитьТекущегоПользователя()
	Возврат	ПараметрыСеанса.ТекущийПользователь;
КонецФункции
&НаКлиенте
Процедура ОбработчикДиалогов(Результат,Параметры)Экспорт 
	Если Результат=КодВозвратаДиалога.Да тогда
		Выполнить(Параметры);
	иначе
		Возврат
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьЭлементов()
	//Элементы.Филиал.Видимость=Объект.ПриемкаИзТранзита;
	//Элементы.НомерВходящегоДокумента.Видимость=Объект.ПриемкаИзТранзита;
	//Элементы.ДатаВходящегоДокумента.Видимость=Объект.ПриемкаИзТранзита;
	Элементы.ГруппаДанныеФизическогоНосителя.Видимость=не Объект.ПриемкаИзТранзита;
		ВидимостьДоступностьЭлементовНаСервере();
КонецПроцедуры
&НаСервере
Функция ПриемкаВыполненна()
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой тогда
		Возврат Истина;
	иначе
		Возврат Ложь;
	КонецЕсли;
	КонецФункции
&НаСервере
Процедура ВидимостьДоступностьЭлементовНаСервере()
	Если  Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен или Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда
		Элементы.ГруппаТовары.ТолькоПросмотр=Истина;
		Элементы.ГруппаДанныеФизическогоНосителя.ТолькоПросмотр=Истина;
	иначе
		Элементы.ГруппаТовары.ТолькоПросмотр=Ложь;
		Элементы.ГруппаДанныеФизическогоНосителя.ТолькоПросмотр=Ложь;
	КонецЕсли;
	Элементы.ГруппаКомандыТранзита.Видимость=(Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан);
	Элементы.ФормаЗавершитьПриемку.Видимость=ПриемкаВыполненна();
	Элементы.ФормаСоздатьПТУ.Видимость= ПриемкаВыполненна();  
	Элементы.ФормаСоздатьКорректировкуСерий.Видимость=ПриемкаВыполненна();
	Элементы.ФормаОбновитьДанныеОтображения.Видимость=(ПриемкаВыполненна() или Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен);	
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен тогда
		ЭтаФорма.ТолькоПросмотр=Истина;
	КонецЕсли;	
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан или Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован тогда
		Элементы.НеРаспределятьНаТСД.Видимость=Истина;
	иначе
		Элементы.НеРаспределятьНаТСД.Видимость=Ложь;
	КонецЕсли;
	Если Объект.ГУИД_ДокументаТранизата=новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") тогда
		Элементы.НомерВходящегоДокумента.ТолькоПросмотр=Ложь;
		Элементы.ДатаВходящегоДокумента.ТолькоПросмотр=Ложь;
	иначе
		Элементы.НомерВходящегоДокумента.ТолькоПросмотр=Истина;
		Элементы.ДатаВходящегоДокумента.ТолькоПросмотр=Истина;
	КонецЕсли;	

КонецПроцедуры
&НаСервере
Функция ПолучитьСписокУпаковокДокумента()
	Запрос = новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	|	Товары.ИдентификаторУпаковки
	|ПОМЕСТИТЬ ТчТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки
	|ИЗ
	|	ТчТовары КАК ТчТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТчТовары.ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());	
	Результат= Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку("ИдентификаторУпаковки");
КонецФункции

&НаКлиенте
Процедура ОбработчикТрансляцииПриИзменении(Элемент)
	СтрокаДерева=Элемент.Родитель.ТекущиеДанные;
	ПолеИзменения=СтрЗаменить(Элемент.Имя,"ТоварыДерево","");
	Если ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтрокиПредставление) тогда
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",СтрокаДерева.ИдентификаторСтрокиПредставление));
		Строка[0][ПолеИзменения]=Элемент.Родитель.ТекущиеДанные[ПолеИзменения];
		ЭтаФорма.Модифицированность=Истина;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура РассчетКоличестваВУпаковкеПриИзменении(Элемент)
	СтрокаИзменения=Элемент.Родитель.ТекущиеДанные;
	ПолеИзменения=СтрЗаменить(Элемент.Имя,"ТоварыДерево","");
	Если не СтрокаИзменения.СтрокаУпаковки тогда
		РодительСтрокиИзменения=СтрокаИзменения.ПолучитьРодителя();
	иначе
		РодительСтрокиИзменения=СтрокаИзменения;
	КонецЕсли;
	РодительСтрокиИзменения[ПолеИзменения]=0;
	СтрокиДляПересчета=РодительСтрокиИзменения.ПолучитьЭлементы();
	для Каждого стр из СтрокиДляПересчета цикл
		РодительСтрокиИзменения[ПолеИзменения]=РодительСтрокиИзменения[ПолеИзменения]+ стр[ПолеИзменения];
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ГрупповоеИзменениеСпискаПоИдУпаковки(ПолеИзменения,Значение,ИдентификаторУпаковки)
МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторУпаковки",ИдентификаторУпаковки));
для Каждого стр из МассивСтрок цикл
	стр[ПолеИзменения]=Значение;
КонецЦикла;	
КонецПроцедуры
&НаСервере
Процедура ПроставитьИнформацияВСтрокахОБОшибки()
	Если не Объект.ПриемкаИзТранзита тогда
		Данные=РеквизитФормыВЗначение("Объект");
	РезультатЗапроса=Данные.ЗапросПроверкиПриемкиКакЕсть();
	Выборка=РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() цикл
	МассивСтрокТовары=Объект.Товары.НайтиСтроки(новый Структура("Номенклатура",Выборка.Номенклатура));
	для Каждого стр из МассивСтрокТовары цикл
		стр.СтрокаВозможнойОшибки=Истина;
	КонецЦикла;
	МассивСтрокФизическихНосителей=Объект.ДанныеФизическогоНосителя.НайтиСтроки(новый Структура("Номенклатура",Выборка.Номенклатура));
	для Каждого стр из МассивСтрокФизическихНосителей цикл
		стр.СтрокаВозможнойОшибки=Истина;
	КонецЦикла;
КонецЦикла;
КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура ЗавершениеПриемкиСервер()
ЭтаФорма.Записать();
ПроставитьПредставлениеИдентификатора();
	
КонецПроцедуры
&НаСервере
Процедура ОбновитьДокументНаСервере()
	ОбъектДанных=Объект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
	ПроставитьПредставлениеИдентификатора();
КонецПроцедуры
&НаСервере
Функция ЗапроситьДанныеДокументаПоГуиду(ГУИД_Документа)
	Данные=РеквизитФормыВЗначение("Объект");
	Возврат Данные.ЗапроситьДанныеДокументаПоГуидуМодуль(ГУИД_Документа)
	////{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//// Данный фрагмент построен конструктором.
	//// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	итWMS_ДанныеДокументов.ДанныеДокумента,
	//	|	итWMS_ДанныеДокументов.Дата,
	//	|	итWMS_ДанныеДокументов.Номер,
	//	|	итWMS_ДанныеДокументов.Филиал
	//	|ИЗ
	//	|	РегистрСведений.итWMS_ДанныеДокументов КАК итWMS_ДанныеДокументов
	//	|ГДЕ
	//	|	итWMS_ДанныеДокументов.Документ = &Документ
	//	|	И итWMS_ДанныеДокументов.ПринятНаИсполнение = ЛОЖЬ";
	//
	//Запрос.УстановитьПараметр("Документ", ГУИД_Документа);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Если  ВыборкаДетальныеЗаписи.Следующий() тогда
	//	СтруктураДанных=новый Структура;
	//	СтруктураДанных.Вставить("ДанныеДокумента",ВыборкаДетальныеЗаписи.ДанныеДокумента.Получить());
	//	СтруктураДанных.Вставить("Дата",ВыборкаДетальныеЗаписи.Дата);
	//	СтруктураДанных.Вставить("Номер",ВыборкаДетальныеЗаписи.Номер);
	//	СтруктураДанных.Вставить("Филиал",ВыборкаДетальныеЗаписи.Филиал);

	//	
	//	Возврат  СтруктураДанных;
	//КонецЕсли;
	//Возврат Неопределено;	
	////}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//
	КонецФункции
&НаСервере
Функция ЕстьНоваяНоменклатура()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSПриемкаТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.итWMSПриемка.Товары КАК итWMSПриемкаТовары
		|ГДЕ
		|	итWMSПриемкаТовары.Ссылка = &Ссылка
		|	И ЕСТЬNULL(итWMSПриемкаТовары.Номенклатура.ЕдиницаХраненияОстатков, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяССылка)) = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяССылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	НоваяНоменклатура=Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяНоменклатура=Истина;
		Сообщить("Новая номенклатура с незаполненной карточкой "+Строка(ВыборкаДетальныеЗаписи.Номенклатура));
	КонецЦикла;
	Возврат НоваяНоменклатура;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере
Функция СписокДокументовВМассив()
	МассивДокументов=новый Массив;
	Для Каждого стр из Объект.ДокументыПомарочногоУчета цикл
		МассивДокументов.Добавить(стр.Документ);
	КонецЦикла;
	Возврат  МассивДокументов;
КонецФункции
&НаСервере
Функция ДанныеНоменклатурыВМассив()
	Если Объект.ПриемкаИзТранзита Тогда 
		ТаблицаНмГруппировок=Объект.Товары.Выгрузить(,"Номенклатура,ДатаРозлива,КоличествоПлан");
		ТаблицаНмГруппировок.Свернуть("Номенклатура,ДатаРозлива","КоличествоПлан");
	иначе
		ТаблицаНмГруппировок=Объект.ДанныеФизическогоНосителя.Выгрузить(,"Номенклатура,ДатаРозлива,Количество");
		//ТаблицаНмГруппировок.Свернуть("Номенклатура,ДатаРозлива","Количество");
	КонецЕсли;
	СтруктурированныйМассив=новый Массив;
	Для Каждого стр из ТаблицаНмГруппировок цикл
		СтруктураДанных=новый Структура;
		Для Каждого Колонка из ТаблицаНмГруппировок.Колонки цикл
			Если Колонка.Имя="КоличествоПлан" Тогда
				СтруктураДанных.Вставить("Количество",стр.КоличествоПлан);
			иначе
				СтруктураДанных.Вставить(Колонка.Имя,стр[Колонка.Имя]);
			КонецЕсли;	
		КонецЦикла;
	СтруктурированныйМассив.Добавить(СтруктураДанных);
	КонецЦикла;
	Возврат СтруктурированныйМассив;
КонецФункции

&НаСервере
Функция УДокументаПриемкаУжеЕстьПроведенноеПТУ(ФормироватьСообщение=Ложь)	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.итОснование = &итОснование
	|	И ПоступлениеТоваровУслуг.Проведен";
	
	Запрос.УстановитьПараметр("итОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ФормироватьСообщение Тогда 
			Сообщить("У приемки есть созданный ПТУ "+Строка(ВыборкаДетальныеЗаписи.Ссылка));
		КонецЕсли;	
		Возврат Истина;
	КонецЦикла;
	Возврат Ложь;
	КонецФункции
&НаСервере	
Процедура  СоздатьПереупаковкуПМУ()
Если ЗаДокументомНетЗакрепленныхМарок() Тогда 
	Возврат
КонецЕсли;
Если не ВсеМаркиЧислятсяНаБалансе() Тогда 
	ВызватьИсключение "Еще не все марки были получены в текущую базу данных. Возможно вы не создали поступление товаров и услуг?";
КонецЕсли;
Если УжеЕстьПроведенныйДокументПереупаковки() Тогда 
	Возврат
КонецЕсли;	
Отказ=Ложь;
итWMSСлужебныеПроцедурыИФункции.СоздатьДокументПереупаковкиПМУ(Объект.Ссылка,Отказ);
Если Отказ Тогда 
	ВызватьИсключение "Переупаковка не создана";
КонецЕсли;	
КонецПроцедуры
&НаСервере
Функция ЗаДокументомНетЗакрепленныхМарок()	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	итWMS_АгрегацияМарокСрезПоследних.Марка
		|ИЗ
		|	РегистрСведений.итWMS_АгрегацияМарок.СрезПоследних(, ДокументОснование = &ДокументОснование) КАК итWMS_АгрегацияМарокСрезПоследних";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Ложь;
	КонецЦикла;
	    Возврат Истина;
КонецФункции
&НаСервере
Функция ВсеМаркиЧислятсяНаБалансе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMS_АгрегацияМарокСрезПоследних.Марка
		|ПОМЕСТИТЬ МаркиДокумента
		|ИЗ
		|	РегистрСведений.итWMS_АгрегацияМарок.СрезПоследних(, ДокументОснование = &ДокументОснование) КАК итWMS_АгрегацияМарокСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMS_АгрегацияМарокСрезПоследних.Марка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаркиДокумента.Марка,
		|	ЕСТЬNULL(алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия, ИСТИНА) КАК ОтметкаВыбытияМарки
		|ПОМЕСТИТЬ ВтДанныеПоМаркам
		|ИЗ
		|	МаркиДокумента КАК МаркиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК алкХранилищеАкцизныхМарокСрезПоследних
		|		ПО МаркиДокумента.Марка = алкХранилищеАкцизныхМарокСрезПоследних.Марка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВтДанныеПоМаркам.Марка
		|ИЗ
		|	ВтДанныеПоМаркам КАК ВтДанныеПоМаркам
		|ГДЕ
		|	ВтДанныеПоМаркам.ОтметкаВыбытияМарки";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Ложь;
	КонецЦикла;
	    Возврат Истина;
	
	КонецФункции
&НаСервере	
Функция УжеЕстьПроведенныйДокументПереупаковки()
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	алкПереупаковка.Ссылка
	|ИЗ
	|	Документ.алкПереупаковка КАК алкПереупаковка
	|ГДЕ
	|	алкПереупаковка.ДокументОснование = &ДокументОснование
	|	И алкПереупаковка.Проведен";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	Возврат Ложь;
	
	
КонецФункции
&НаСервере
Процедура ОбновитьДанныеСТСД()
Документы.итWMSПриемка.ВнестиИзменениеДанныхТСДВДокумент(Объект.Ссылка);
Данные=Объект.Ссылка.ПолучитьОбъект();
Если итWMSСлужебныеПроцедурыИФункции.ВсеЗадачиДокументаЗафиксированны(Объект.Ссылка) Тогда
	Данные.ДействияПриФиксацииЗадачДокумента();
	Данные.ОбменДанными.Загрузка=Истина;
	//Данные.ОтложенноеПроведение=Истина; 
	Данные.Записать();  
	итWMSСлужебныеПроцедурыИФункции.СделатьЗаписьДопОбработкиОтложенногоПроведения(Данные.Ссылка);
КонецЕсли;
ЗначениеВРеквизитФормы(Данные,"Объект");
КонецПроцедуры

&НаСервере
Процедура ДобавитьДокументМарокДляСоотв(Ссылка)
	НоваяСтрока=Объект.ДокументыПомарочногоУчета.Добавить();
	НоваяСтрока.Документ=Ссылка;
	КонецПроцедуры
&НаКлиенте
Процедура ПодставитьДокументПМУвФоне() Экспорт 
	Если не ПолучитьДанныеДокументаПМУИЗХранилища() Тогда 
		ПодключитьОбработчикОжидания("ПодставитьДокументПМУвФоне",5,Истина);
	КонецЕсли;         
	
КонецПроцедуры
&НаСервере
Функция ПолучитьДанныеДокументаПМУИЗХранилища()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ит_WMS_ХранилищеДанных.ХранилищеЗначений КАК ХранилищеЗначений
		|ИЗ
		|	РегистрСведений.ит_WMS_ХранилищеДанных КАК ит_WMS_ХранилищеДанных
		|ГДЕ
		|	ит_WMS_ХранилищеДанных.КлючХраненияДанных = &КлючХраненияДанных";
	
	Запрос.УстановитьПараметр("КлючХраненияДанных", КлючФоновогоПолученияДокументаПМУ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Данные=ВыборкаДетальныеЗаписи.ХранилищеЗначений.Получить();
		НоваяСтрока=Объект.ДокументыПомарочногоУчета.Добавить();
		НоваяСтрока.Документ=Данные;
		Возврат Истина;
	КонецЦикла;
	
	    Возврат Ложь;

КонецФункции

&НаСервере
Функция ТаблицаВСтруктурированныйМассив(ИмяТаблицы)
	ТаблицаДанных=Объект[ИмяТаблицы].Выгрузить();
	СтруктурированныйМассив=новый Массив;
	Для Каждого стр из ТаблицаДанных цикл
		СтруктураДанных=новый Структура;
		Для Каждого Колонка из ТаблицаДанных.Колонки цикл
			СтруктураДанных.Вставить(Колонка.Имя,стр[Колонка.Имя]);
		КонецЦикла;
		СтруктурированныйМассив.Добавить(СтруктураДанных);
	КонецЦикла;
	Возврат СтруктурированныйМассив;
	
КонецФункции

&НаСервере
Функция ПроверкаНаНеобходимостьКорректировкиСерий()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSПриемкаТовары.СтараяСерияНоменклатуры КАК СтараяСерияНоменклатуры
		|ИЗ
		|	Документ.итWMSПриемка.Товары КАК итWMSПриемкаТовары
		|ГДЕ
		|	итWMSПриемкаТовары.Ссылка = &Ссылка
		|	И итWMSПриемкаТовары.СтараяСерияНоменклатуры <> итWMSПриемкаТовары.СерияНоменклатуры
		|			И итWMSПриемкаТовары.СтараяСерияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Если не ПроверкаНаНаличаииКорректировкиСерий() Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции 
&НаСервере
Функция ПроверкаНаНаличаииКорректировкиСерий() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаСерийИХарактеристикТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаСерийИХарактеристикТоваров КАК КорректировкаСерийИХарактеристикТоваров
		|ГДЕ
		|	КорректировкаСерийИХарактеристикТоваров.Основание = &Основание
		|	И КорректировкаСерийИХарактеристикТоваров.Проведен";
	
	Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	    Возврат Ложь;
	
	КонецФункции


#КонецОбласти




