#Если Сервер Тогда
Перем МассивЗадач Экспорт;
Перем ПроведениеПеремещением Экспорт;
Перем ПроведениеБезИзмененияДатыЗавршения Экспорт;
Перем ПривилигированноеПроведение Экспорт;

#Область ПередЗаписью

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ПередЗаписьюУстановкаЗначенийПоУмолчанию();
	итWMSСлужебныеПроцедурыИФункции.УстановитьРежимПроведенияЗавершенногоДокумента(СтатусДокумента, РежимПроведения);
	Если ЭтотОбъект.Проведен И РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Если Не ОбменДанными.Загрузка Тогда
			РежимЗаписи=РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	КонецЕсли;
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения);
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		//ОтложенноеПроведение=Ложь;  
		Если Не Ссылка.Пустая() Тогда
			итWMSСлужебныеПроцедурыИФункции.УдалитьЗаписьДопОбработкиОтложенногоПроведения(Ссылка);
		КонецЕсли;
	КонецЕсли;
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписьюУстановкаЗначенийПоУмолчанию()
	Если ТипЗнч(ПривилигированноеПроведение) <> Тип("Булево") Тогда
		ПривилигированноеПроведение=Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписьюПроведение(Отказ, РежимЗаписи, РежимПроведения)
	Если СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Создан И НеРаспределятьНаТСД
		Или НеВсеЯчейкиПикингаЗаполнены() Тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован;
		ПроверкаНаФиксациюЗадачДокументаДоРаспределения();
	ИначеЕсли СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Создан И Не НеРаспределятьНаТСД
		И Не НеВсеЯчейкиПикингаЗаполнены() Тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
		ПроверкаНаФиксациюЗадачДокументаДоРаспределения();
		Для Каждого стр Из Товары Цикл
			Если Не стр.ФиксацияСтроки Тогда
				стр.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
			КонецЕсли;
		КонецЦикла;
		Хранилище=Новый ХранилищеЗначения(Товары.Выгрузить(), Новый СжатиеДанных(9));
		СнимокТабличнойЧастиДоРаспределения=Хранилище;
	ИначеЕсли СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован И Не НеРаспределятьНаТСД
		И Не НеВсеЯчейкиПикингаЗаполнены() Тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
		ПроверкаНаФиксациюЗадачДокументаДоРаспределения();
		Для Каждого стр Из Товары Цикл
			Если Не стр.ФиксацияСтроки Тогда
				стр.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
			КонецЕсли;
		КонецЦикла;
		Хранилище=Новый ХранилищеЗначения(Товары.Выгрузить(), Новый СжатиеДанных(9));
		СнимокТабличнойЧастиДоРаспределения=Хранилище;
	КонецЕсли;
	Если Не ПривилигированноеПроведение Тогда
		ПроверкаНаНаличиеНесколькихНаборакНаОснованииЗаказа(Отказ);
	КонецЕсли;
	////////Гифт гвоздовая проверка на КА
	ПроверкаУсловийКА(Отказ);
	////////////////
	ПроверкаНаСоответсвиеОснованию(Отказ, РежимЗаписи, РежимПроведения);
	ИзменениеДанныхОснованияПередЗаписьюПроведение();
	ПроверкаНаДвижениеНеКратноУпаковки(Отказ, РежимЗаписи, РежимПроведения);
	Если ТипЗнч(итОснование)=Тип("ДокументСсылка.ЗаказПокупателя") 
	или ТипЗнч(итОснование)=Тип("ДокументСсылка.ВнутреннийЗаказ")
	Тогда
	УстановитьПризнакНабора();
	УстановитьПризнакНабран();	
	КонецЕсли;
КонецПроцедуры



Процедура ПроверкаНаФиксациюЗадачДокументаДоРаспределения()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	итWMSПеремещениеТовары.ФиксацияСтроки КАК КоличествоФиксированныхСтрок,
	|	итWMSПеремещениеТовары.ФиксацияСтроки КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&Товары КАК итWMSПеремещениеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ВТ.КоличествоФиксированныхСтрок
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоФиксированныхСтрок,
	|	КОЛИЧЕСТВО(ВТ.КоличествоСтрок) КАК КоличествоСтрок
	|ИЗ
	|	ВТ КАК ВТ";

	Запрос.УстановитьПараметр("Товары", Товары);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.КоличествоФиксированныхСтрок = ВыборкаДетальныеЗаписи.КоличествоСтрок Тогда
			ПроведениеБезИзмененияДатыЗавршения=Истина;
			ДействияПриФиксацииЗадачДокумента();
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

Процедура ПроверкаНаНаличиеНесколькихНаборакНаОснованииЗаказа(Отказ) Экспорт
	Если итОснование = Неопределено Тогда
		Возврат;
	КонецЕсли
	;
	Если итОснование.Пустая() Тогда
		Возврат;
	КонецЕсли
	;	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	итWMSНаборка.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтДанныеПроверки
	|ИЗ
	|	Документ.итWMSНаборка КАК итWMSНаборка
	|ГДЕ
	|	итWMSНаборка.Проведен = ИСТИНА
	|	И итWMSНаборка.итОснование = &итОснование
	|	И итWMSНаборка.Ссылка <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеПроверки.Ссылка КАК Ссылка
	|ИЗ
	|	ВтДанныеПроверки КАК ВтДанныеПроверки
	|ГДЕ
	|	НЕ ВтДанныеПроверки.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеПроверки.Ссылка";

	Запрос.УстановитьПараметр("итОснование", итОснование);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Сообщить("по текущему основанию , уже имеется документ наборки " + ВыборкаДетальныеЗаписи.Ссылка);
		Отказ=Истина;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

Процедура ПроверкаНаСоответсвиеОснованию(Отказ, РежимЗаписи, РежимПроведения)
	Если ТипЗнч(итОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ПроверкаНаСоответсвиеОснованиюЗаказПокупателя(Отказ);
	КонецЕсли;
КонецПроцедуры

Процедура ИзменениеДанныхОснованияПередЗаписьюПроведение()
	Если ТипЗнч(итОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ИзменениеДанныхЗаказаПокупателя();
	КонецЕсли;
КонецПроцедуры

Процедура ПроверкаНаСоответсвиеОснованиюЗаказПокупателя(Отказ)
	Если ПривилигированноеПроведение Тогда
		Возврат;
	КонецЕсли
	;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ЕСТЬNULL(ЗаказПокупателяТовары.Количество, 0) * ЕСТЬNULL(ЗаказПокупателяТовары.ЕдиницаИзмерения.Коэффициент, 0)) КАК Количество
	|ПОМЕСТИТЬ ДанныеЗаказа
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоФакт КАК КоличествоФакт,
	|	Товары.ФиксацияСтроки КАК ФиксацияСтроки,
	|	Товары.СостояниеЗадачи КАК СостояниеЗадачи,
	|	Товары.ИзъятиеТовара КАК ИзъятиеТовара,
	|	Товары.КоличествоИзъятия КАК КоличествоИзъятия
	|ПОМЕСТИТЬ ВтТоварыДокумента
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.Номенклатура КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА ВтТоварыДокумента.ФиксацияСтроки
	|				ТОГДА ВЫБОР
	|						КОГДА ВтТоварыДокумента.ИзъятиеТовара
	|							ТОГДА ЕСТЬNULL(ВтТоварыДокумента.КоличествоФакт, 0) - ЕСТЬNULL(ВтТоварыДокумента.КоличествоИзъятия, 0)
	|						ИНАЧЕ ВтТоварыДокумента.КоличествоФакт
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВтТоварыДокумента.ИзъятиеТовара
	|						ТОГДА ЕСТЬNULL(ВтТоварыДокумента.Количество, 0) - ЕСТЬNULL(ВтТоварыДокумента.КоличествоИзъятия, 0)
	|					ИНАЧЕ ВтТоварыДокумента.Количество
	|				КОНЕЦ
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ВтТоварыДокумента.ИзъятиеТовара
	|				ТОГДА ЕСТЬNULL(ВтТоварыДокумента.КоличествоФакт, 0) - ЕСТЬNULL(ВтТоварыДокумента.КоличествоИзъятия, 0)
	|			ИНАЧЕ ВтТоварыДокумента.КоличествоФакт
	|		КОНЕЦ) КАК КоличествоФакт
	|ПОМЕСТИТЬ ВтТоварыДокументаГруппировка
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВтТоварыДокумента.ФиксацияСтроки
	|					И ВтТоварыДокумента.СостояниеЗадачи = ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.Отменена)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ВтТоварыДокумента.ИзъятиеТовара
	|				ТОГДА ЕСТЬNULL(ВтТоварыДокумента.Количество, 0) - ЕСТЬNULL(ВтТоварыДокумента.КоличествоИзъятия, 0)
	|			ИНАЧЕ ВтТоварыДокумента.Количество
	|		КОНЕЦ > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТоварыДокумента.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
	|	ДанныеЗаказа.Количество КАК КоличествоПланЗаказа,
	|	0 КАК КоличествоФакт,
	|	0 КАК КоличествоВНаборке
	|ПОМЕСТИТЬ ОбъединениеДанных
	|ИЗ
	|	ДанныеЗаказа КАК ДанныеЗаказа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТоварыДокументаГруппировка.Номенклатура,
	|	0,
	|	ВтТоварыДокументаГруппировка.КоличествоФакт,
	|	ВтТоварыДокументаГруппировка.Количество
	|ИЗ
	|	ВтТоварыДокументаГруппировка КАК ВтТоварыДокументаГруппировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъединениеДанных.Номенклатура КАК Номенклатура,
	|	СУММА(ОбъединениеДанных.КоличествоПланЗаказа) КАК КоличествоПланЗаказа,
	|	СУММА(ОбъединениеДанных.КоличествоФакт) КАК КоличествоФакт,
	|	СУММА(ОбъединениеДанных.КоличествоВНаборке) КАК КоличествоВНаборке
	|ИЗ
	|	ОбъединениеДанных КАК ОбъединениеДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъединениеДанных.Номенклатура";

	Запрос.УстановитьПараметр("Ссылка", итОснование);
	Запрос.УстановитьПараметр("Товары", Товары);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Создан Или СтатусДокумента
			= Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован Или СтатусДокумента
			= Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется Или СтатусДокумента
			= Перечисления.итWMSСтатусыСкладскихДокументов.Распределен Тогда
			Если ВыборкаДетальныеЗаписи.КоличествоПланЗаказа <> ВыборкаДетальныеЗаписи.КоличествоВНаборке Тогда
				итWMSОбщегоНазначенияКлиентСервер.СообщитьПользователю("Количетсво номенклатуры " + Строка(
					ВыборкаДетальныеЗаписи.Номенклатура) + " в заказе не равно количеству в наборке (в заказе "
					+ Строка(ВыборкаДетальныеЗаписи.КоличествоПланЗаказа) + " в наборке " + Строка(
					ВыборкаДетальныеЗаписи.КоличествоВНаборке) + ")");
				Отказ=Истина;
			КонецЕсли;
		Иначе
			Если ВыборкаДетальныеЗаписи.КоличествоПланЗаказа <> ВыборкаДетальныеЗаписи.КоличествоФакт Тогда
				итWMSОбщегоНазначенияКлиентСервер.СообщитьПользователю("Количетсво номенклатуры " + Строка(
					ВыборкаДетальныеЗаписи.Номенклатура)
					+ " в заказе не равно  набранному количеству в наборке (в заказе " + Строка(
					ВыборкаДетальныеЗаписи.КоличествоПланЗаказа) + " в наборке " + Строка(
					ВыборкаДетальныеЗаписи.КоличествоФакт) + ")");
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

Процедура ИзменениеДанныхЗаказаПокупателя()

	Перем итОснованиеОбъект;

	Если Не итОснование.Набран Тогда
		Если СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен Или СтатусДокумента
			= Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда
			итОснованиеОбъект=итОснование.ПолучитьОбъект();
			итОснованиеОбъект.Набран=Истина;
			итОснованиеОбъект.ДатаЗавершенияНаборки=ДатаЗавершенияДокумента;
			Если ПривилигированноеПроведение Тогда
				Попытка
					итОснованиеОбъект.Записать();
				Исключение
				КонецПопытки;
			Иначе
				итОснованиеОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкаНаДвижениеНеКратноУпаковки(Отказ, РежимЗаписи, РежимПроведения)
	Если ПривилигированноеПроведение Тогда
		Возврат;
	КонецЕсли
	;
	Если Не Константы.ВыдаватьПредупреждениеПриДвиженииНеКратноЕдМест.Получить() Тогда
		Возврат;
	КонецЕсли
	;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	итWMSПеремещениеТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итWMSПеремещениеТовары.Номенклатура КАК Номенклатура,
	|	итWMSПеремещениеТовары.Характеристика КАК Характеристика,
	|	итWMSПеремещениеТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итWMSПеремещениеТовары.Качество КАК Качество,
	|	итWMSПеремещениеТовары.ДатаРозлива КАК ДатаРозлива,
	|	ЕСТЬNULL(итWMSПеремещениеТовары.Количество, 0) КАК Количество,
	|	итWMSПеремещениеТовары.ЯчейкаОтправитель КАК Ячейка
	|ПОМЕСТИТЬ ВтДанныеДокумента
	|ИЗ
	|	&Товары КАК итWMSПеремещениеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеДокумента.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	НоменклатураДанные.Ссылка КАК Номенклатура,
	|	ВтДанныеДокумента.Характеристика КАК Характеристика,
	|	ВтДанныеДокумента.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВтДанныеДокумента.Качество КАК Качество,
	|	ВтДанныеДокумента.ДатаРозлива КАК ДатаРозлива,
	|	СУММА(ВтДанныеДокумента.Количество) КАК Количество,
	|	ВтДанныеДокумента.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ ВтДанныеДокументаГруппировка
	|ИЗ
	|	ВтДанныеДокумента КАК ВтДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураДанные
	|		ПО ВтДанныеДокумента.Номенклатура = НоменклатураДанные.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеДокумента.ИдентификаторУпаковки,
	|	ВтДанныеДокумента.Характеристика,
	|	ВтДанныеДокумента.СерияНоменклатуры,
	|	ВтДанныеДокумента.Качество,
	|	ВтДанныеДокумента.ДатаРозлива,
	|	НоменклатураДанные.Ссылка,
	|	ВтДанныеДокумента.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеДокументаГруппировка.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВтДанныеДокументаГруппировка.Номенклатура КАК Номенклатура,
	|	ВтДанныеДокументаГруппировка.Характеристика КАК Характеристика,
	|	ВтДанныеДокументаГруппировка.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВтДанныеДокументаГруппировка.Качество КАК Качество,
	|	ВтДанныеДокументаГруппировка.ДатаРозлива КАК ДатаРозлива,
	|	ВтДанныеДокументаГруппировка.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(ВтДанныеДокументаГруппировка.Количество, 0) / ВЫБОР
	|					КОГДА ЕСТЬNULL(ВтДанныеДокументаГруппировка.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 0) = 0
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(ВтДанныеДокументаГруппировка.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 0)
	|				КОНЕЦ КАК ЧИСЛО(15, 2))) <> ЕСТЬNULL(ВтДанныеДокументаГруппировка.Количество, 0) / ВЫБОР
	|				КОГДА ЕСТЬNULL(ВтДанныеДокументаГруппировка.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 0) = 0
	|					ТОГДА 1
	|				ИНАЧЕ ЕСТЬNULL(ВтДанныеДокументаГруппировка.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 0)
	|			КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеКратноУпаковке,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВтДанныеДокументаГруппировка.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 0) = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаданыДанныеЕдМест,
	|	ВтДанныеДокументаГруппировка.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ ИтоговыеДанные
	|ИЗ
	|	ВтДанныеДокументаГруппировка КАК ВтДанныеДокументаГруппировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговыеДанные.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ИтоговыеДанные.Номенклатура КАК Номенклатура,
	|	ИтоговыеДанные.Характеристика КАК Характеристика,
	|	ИтоговыеДанные.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ИтоговыеДанные.Качество КАК Качество,
	|	ИтоговыеДанные.ДатаРозлива КАК ДатаРозлива,
	|	ИтоговыеДанные.Количество КАК Количество,
	|	ИтоговыеДанные.НеКратноУпаковке КАК НеКратноУпаковке,
	|	ИтоговыеДанные.НеЗаданыДанныеЕдМест КАК НеЗаданыДанныеЕдМест,
	|	ИтоговыеДанные.Ячейка КАК Ячейка
	|ИЗ
	|	ИтоговыеДанные КАК ИтоговыеДанные
	|ГДЕ
	|	(ИтоговыеДанные.НеКратноУпаковке
	|			ИЛИ ИтоговыеДанные.НеЗаданыДанныеЕдМест)";

	Запрос.УстановитьПараметр("Товары", Товары);
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НеКратноУпаковке Тогда
			итWMSОбщегоНазначенияКлиентСервер.СообщитьПользователю("в индентификаторе "
				+ ВыборкаДетальныеЗаписи.ИдентификаторУпаковки + " из ячейки " + ВыборкаДетальныеЗаписи.Ячейка
				+ " забирается количество номенклатуры " + ВыборкаДетальныеЗаписи.Номенклатура
				+ " не кратное упаковке ");
		КонецЕсли;
		Если ВыборкаДетальныеЗаписи.НеЗаданыДанныеЕдМест Тогда
			итWMSОбщегоНазначенияКлиентСервер.СообщитьПользователю("в индентификаторе "
				+ ВыборкаДетальныеЗаписи.ИдентификаторУпаковки + " из ячейки " + ВыборкаДетальныеЗаписи.Ячейка
				+ " для номенклатуры " + ВыборкаДетальныеЗаписи.Номенклатура + " не заданы параметры ед. мест ");
		КонецЕсли;

		Если Константы.БлокироватьПриДвиженииНеКратноЕдМест.Получить() Тогда
			Отказ=Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ПередЗаписьюОтменаПроведения(Отказ, РежимЗаписи, РежимПроведения)
	Если СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется Или СтатусДокумента
		= Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован Тогда
		СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		ОчиститьСписокЗадач(Отказ, РежимЗаписи, РежимПроведения);
	ИначеЕсли СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Распределен Тогда
		Отказ = Истина;
		итWMSОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Документ распределен на тсд и не может быть распроведен ");

	КонецЕсли;
	Если ТипЗнч(итОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Или ТипЗнч(итОснование) = Тип(
		"ДокументСсылка.ВнутреннийЗаказ") Тогда
		УбратьСостояниеНабора();
		УбратьПризнакНабран();
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПризнакНабран()
		Если СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен Или СтатусДокумента
			= Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой Или СтатусДокумента
			= Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда
			Если Не итОснование.Набран Тогда
				ОбъектЗаказа=итОснование.ПолучитьОбъект();
				ОбъектЗаказа.Набран=Ложь;
				ОбъектЗаказа.итДатаЗавершенияНаборки=ДатаЗавершенияДокумента;
				ОбъектЗаказа.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

Процедура УбратьПризнакНабран()
	Если итОснование.Набран Тогда
		ОбъектЗаказа=итОснование.ПолучитьОбъект();
		ОбъектЗаказа.Набран=Ложь;
		ОбъектЗаказа.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПризнакНабора()
		Если Не итОснование.ВНаборе Тогда
			ОбъектЗаказа=итОснование.ПолучитьОбъект();
			ОбъектЗаказа.ВНаборе=Истина;
			ОбъектЗаказа.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
КонецПроцедуры

Процедура УбратьСостояниеНабора()
	Если итОснование.ВНаборе Тогда
		ОбъектЗаказа=итОснование.ПолучитьОбъект();
		ОбъектЗаказа.ВНаборе=Ложь;
		ОбъектЗаказа.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
КонецПроцедуры

Функция НеВсеЯчейкиПикингаЗаполнены()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.ИдентификаторУпаковки,
	|	Товары.ИдентификаторУпаковкиПолучатель,
	|	Товары.ЯчейкаПикинга
	|ПОМЕСТИТЬ Вт
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт.ИдентификаторУпаковки,
	|	Вт.ИдентификаторУпаковкиПолучатель,
	|	Вт.ЯчейкаПикинга
	|ИЗ
	|	Вт КАК Вт
	|ГДЕ
	|	ЕСТЬNULL(Вт.ЯчейкаПикинга, ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.ПустаяСсылка)";

	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь
	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции

#КонецОбласти
Процедура ПроверкаУсловийКА(Отказ)
	ОписаниеОшибки="";
	ОбработчикОсобенностейКонтрагентов.ЦентральныйОбработчикОсобенностей(ЭтотОбъект, Контрагент, , Дата, Организация,
		Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		итWMSОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры
#Область ОбработкаПроведения
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	УстановитьБлокировкиДанныхИОчиститьРегистры();
	Если СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется Тогда
		ОчиститьДанныеПомарочногоУчета();
		РаспределениеДокументаНаЗадачиТСД(Отказ, РежимПроведения);
	КонецЕсли;
	///////вызов распределения по задачас, с целью исправления 1 строки 
	Если СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Распределен И ТипЗнч(МассивЗадач) = Тип(
		"Массив") Тогда
		РаспределениеДокументаНаЗадачиТСД(Отказ, РежимПроведения);
		Если Отказ Тогда
			Возврат;
		КонецЕсли
		;
	КонецЕсли;

	ПроведениеПоРезервированиюЯчеек(Отказ, РежимПроведения, );

	ПроведениеПоРегистрамНакопления(Отказ, РежимПроведения);
	Если РежимТестирования Тогда
		ДвижениеНаборкиПоРезервированиюХранения(Отказ);
	КонецЕсли;
	Если Не ТипЗнч(ПроведениеПеремещением) = Тип("Булево") Тогда
		ИзменениеДатДокументаПеремещенияСогласноНаборке();
	КонецЕсли;
	ПроверкаНаСоответсвиеДанныхЯчеек(Отказ, РежимПроведения);
	//Если не ТипЗнч(ПроведениеПеремещением)=Тип("Булево") Тогда 
	//ИзменениеДатДокументаПеремещенияСогласноНаборке();
	//КонецЕсли;
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	Если СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой Тогда
		Массив=Новый Массив;
		Массив.Добавить(Ссылка);
		ФоновыеЗадания.Выполнить("итWMSПривилегированныйМодуль.СоздатьЗадачиКИнвентаризацииОтмененныхЗадач", Массив,
			Строка(Новый УникальныйИдентификатор), "СоздатьЗадачиКИнвентаризацииОтмененныхЗадач");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьБлокировкиДанныхИОчиститьРегистры()
	БлокировкаДанных = Новый БлокировкаДанных;
	СистемнаяЯчейка=Константы.СистемнаяЯчейка.Получить();
	ПустаяЯчейка=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
	ЯчейкаПолучательТовары=Новый ТаблицаЗначений;
	ЯчейкаПолучательТовары.Колонки.Добавить("ЯчейкаПолучатель",
		Новый ОписаниеТипов("СправочникСсылка.итСкладскиеЯчейки"));
	Для Каждого стр Из Товары Цикл
		Если стр.ЯчейкаПолучатель = СистемнаяЯчейка Или стр.ЯчейкаПолучатель = ПустаяЯчейка Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока=ЯчейкаПолучательТовары.Добавить();
		НоваяСтрока.ЯчейкаПолучатель=стр.ЯчейкаПолучатель;
	КонецЦикла;
	ТаблицаТоваровДляБлокировки=Новый ТаблицаЗначений;
	ТаблицаТоваровДляБлокировки.Колонки.Добавить("ЯчейкаПикинга",
		Новый ОписаниеТипов("СправочникСсылка.итСкладскиеЯчейки"));
	ТаблицаТоваровДляБлокировки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваровДляБлокировки.Колонки.Добавить("ИдентификаторУпаковки", Новый ОписаниеТипов("Строка", , , ,
		Новый КвалификаторыСтроки(172)));

	ТаблицаТоваровДляБлокировкиХранения=Новый ТаблицаЗначений;
	ТаблицаТоваровДляБлокировкиХранения.Колонки.Добавить("ЯчейкаОтправитель",
		Новый ОписаниеТипов("СправочникСсылка.итСкладскиеЯчейки"));
	ТаблицаТоваровДляБлокировкиХранения.Колонки.Добавить("ИдентификаторУпаковки", Новый ОписаниеТипов("Строка", , , ,
		Новый КвалификаторыСтроки(172)));

	Для Каждого стр Из Товары Цикл
		Если стр.ЯчейкаПикинга = ПустаяЯчейка Тогда
			НоваяСтрока=ТаблицаТоваровДляБлокировкиХранения.Добавить();
			НоваяСтрока.ЯчейкаОтправитель=стр.ЯчейкаОтправитель;
			НоваяСтрока.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
		Иначе
			НоваяСтрока=ТаблицаТоваровДляБлокировки.Добавить();
			НоваяСтрока.ЯчейкаПикинга=стр.ЯчейкаПикинга;
			НоваяСтрока.Номенклатура=стр.Номенклатура;
			НоваяСтрока.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
		КонецЕсли;

	КонецЦикла;

#Область БлокировкаитТоварыВЯчейках
	СтруктураПараметров=итWMSСлужебныеПроцедурыИФункции.СоздатьСтруктуруПараметровБлокировкиДанных(
		ЯчейкаПолучательТовары, БлокировкаДанных);
	СтруктураПараметров.ПолеПространствоБлокировок="Ячейка";
	СтруктураПараметров.ПолеИсточника="ЯчейкаПолучатель";
	СтруктураПараметров.ПространствоБлокировки="РегистрНакопления.итТоварыВЯчейках";
	итWMSСлужебныеПроцедурыИФункции.УстановкаЭлементаБлокировокДанныхWMS(СтруктураПараметров);

	СтруктураПараметров=итWMSСлужебныеПроцедурыИФункции.СоздатьСтруктуруПараметровБлокировкиДанных(
		ТаблицаТоваровДляБлокировки, БлокировкаДанных);
	СтруктураПараметров.ПолеПространствоБлокировок="Ячейка,Номенклатура,ИдентификаторУпаковки";
	СтруктураПараметров.ПолеИсточника="ЯчейкаПикинга,Номенклатура,ИдентификаторУпаковки";
	СтруктураПараметров.ПространствоБлокировки="РегистрНакопления.итТоварыВЯчейках";
	итWMSСлужебныеПроцедурыИФункции.УстановкаЭлементаБлокировокДанныхWMS(СтруктураПараметров);
	Если РежимТестирования Тогда
		СтруктураПараметров=итWMSСлужебныеПроцедурыИФункции.СоздатьСтруктуруПараметровБлокировкиДанных(
			ТаблицаТоваровДляБлокировкиХранения, БлокировкаДанных);
		СтруктураПараметров.ПолеПространствоБлокировок="Ячейка,ИдентификаторУпаковки";
		СтруктураПараметров.ПолеИсточника="ЯчейкаОтправитель,ИдентификаторУпаковки";
		СтруктураПараметров.ПространствоБлокировки="РегистрНакопления.итТоварыВЯчейках";
		итWMSСлужебныеПроцедурыИФункции.УстановкаЭлементаБлокировокДанныхWMS(СтруктураПараметров);
	КонецЕсли;
#КонецОбласти
	БлокировкаДанных.Заблокировать();
	НаборЗаписей=РегистрыНакопления.итТоварыВЯчейках.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
КонецПроцедуры
#Область РаботаСЗадачамиТСД
Процедура РаспределениеДокументаНаЗадачиТСД(Отказ, РежимПроведения)
	СистемнаяЯчейка=Константы.СистемнаяЯчейка.Получить();
	ЭтоИзменениеВПроцессеИсполненияДокумента=Ложь;
	Если ТипЗнч(МассивЗадач) = Тип("Массив") Тогда
		МассивСтрокКОбработке=ПолучитьСписокИзменяемыхСтрокПоМассивуЗадач(МассивЗадач);
		ЭтоИзменениеВПроцессеИсполненияДокумента=Истина;
	КонецЕсли;
	ОчиститьСписокЗадач(Отказ, , РежимПроведения);
	Если Отказ Тогда
		Возврат;
	КонецЕсли
	;
	НаборЗаписей= РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	итWMSНаборкаТовары.НомерСтроки КАК НомерСтроки,
	|	итWMSНаборкаТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итWMSНаборкаТовары.Номенклатура КАК Номенклатура,
	|	итWMSНаборкаТовары.Характеристика КАК Характеристика,
	|	итWMSНаборкаТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итWMSНаборкаТовары.Качество КАК Качество,
	|	итWMSНаборкаТовары.ДатаРозлива КАК ДатаРозлива,
	|	итWMSНаборкаТовары.Количество КАК Количество,
	|	итWMSНаборкаТовары.КоличествоФакт КАК КоличествоФакт,
	|	итWMSНаборкаТовары.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	итWMSНаборкаТовары.ЯчейкаПикинга КАК ЯчейкаПикинга,
	|	итWMSНаборкаТовары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	итWMSНаборкаТовары.СостояниеЗадачи КАК СостояниеЗадачи,
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
	|	итWMSНаборкаТовары.ПричинаОтменыЗадачи КАК ПричинаОтменыЗадачи,
	|	итWMSНаборкаТовары.ФиксацияСтроки КАК ФиксацияСтроки,
	|	итWMSНаборкаТовары.ИдентификаторСтрокиПредставление КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Товары КАК итWMSНаборкаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТовары.НомерСтроки КАК НомерСтроки,
	|	ВтТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВтТовары.Номенклатура КАК Номенклатура,
	|	ВтТовары.Характеристика КАК Характеристика,
	|	ВтТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВтТовары.Качество КАК Качество,
	|	ВтТовары.ДатаРозлива КАК ДатаРозлива,
	|	ВтТовары.Количество КАК Количество,
	|	ВтТовары.КоличествоФакт КАК КоличествоФакт,
	|	ВтТовары.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ВтТовары.ЯчейкаПикинга КАК ЯчейкаПикинга,
	|	ВтТовары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	ВтТовары.СостояниеЗадачи КАК СостояниеЗадачи,
	|	ВтТовары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
	|	ВтТовары.ПричинаОтменыЗадачи КАК ПричинаОтменыЗадачи,
	|	ВтТовары.ФиксацияСтроки КАК ФиксацияСтроки,
	|	ВтТовары.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВтТоварыОтобранные
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|ГДЕ
	|	НЕ ВтТовары.ФиксацияСтроки
	|	И ВЫБОР
	|			КОГДА &ЭтоИзменениеВПроцессеИсполненияДокумента
	|				ТОГДА ВтТовары.ИдентификаторСтроки В (&МассивСтрокКОбработке)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыОтобранные.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
	|	ВтТоварыОтобранные.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	ВЫБОР
	|		КОГДА ВтТоварыОтобранные.ИдентификаторУпаковки = ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель
	|			ТОГДА ВтТоварыОтобранные.ЯчейкаПикинга
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаПикингаДляСборныйхПаллет
	|ПОМЕСТИТЬ ВтЯчеекНачалаСбораПаллет
	|ИЗ
	|	ВтТоварыОтобранные КАК ВтТоварыОтобранные
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВтТоварыОтобранные.ИдентификаторУпаковки = ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель
	|				ТОГДА ВтТоварыОтобранные.ЯчейкаПикинга
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.ПустаяСсылка)
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТоварыОтобранные.ИдентификаторУпаковки,
	|	ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель,
	|	ВтТоварыОтобранные.ЯчейкаПолучатель,
	|	ВЫБОР
	|		КОГДА ВтТоварыОтобранные.ИдентификаторУпаковки = ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель
	|			ТОГДА ВтТоварыОтобранные.ЯчейкаПикинга
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЯчеекНачалаСбораПаллет.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВтЯчеекНачалаСбораПаллет.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
	|	ВтЯчеекНачалаСбораПаллет.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	МАКСИМУМ(ВтЯчеекНачалаСбораПаллет.ЯчейкаПикингаДляСборныйхПаллет) КАК ЯчейкаПикингаДляСборныйхПаллет
	|ПОМЕСТИТЬ ВтГруппированныхДанных
	|ИЗ
	|	ВтЯчеекНачалаСбораПаллет КАК ВтЯчеекНачалаСбораПаллет
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтЯчеекНачалаСбораПаллет.ИдентификаторУпаковки,
	|	ВтЯчеекНачалаСбораПаллет.ИдентификаторУпаковкиПолучатель,
	|	ВтЯчеекНачалаСбораПаллет.ЯчейкаПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыОтобранные.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	МИНИМУМ(0) КАК НоменклатураКоэффициентПрочности,
	|	ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель
	|ПОМЕСТИТЬ ПорядковаяНомерацияОбхода
	|ИЗ
	|	ВтТоварыОтобранные КАК ВтТоварыОтобранные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТоварыОтобранные.ИдентификаторУпаковки,
	|	ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыОтобранные.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	СУММА(ВтТоварыОтобранные.Количество) КАК Количество,
	|	ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
	|	ВтТоварыОтобранные.ЯчейкаПикинга КАК ЯчейкаПикинга
	|ПОМЕСТИТЬ КоличесвтоТовараВИдентификатореОтправителе
	|ИЗ
	|	ВтТоварыОтобранные КАК ВтТоварыОтобранные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТоварыОтобранные.ИдентификаторУпаковки,
	|	ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель,
	|	ВтТоварыОтобранные.ЯчейкаПикинга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличесвтоТовараВИдентификатореОтправителе.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	КоличесвтоТовараВИдентификатореОтправителе.Количество КАК Количество,
	|	КоличесвтоТовараВИдентификатореОтправителе.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ВложенныйЗапрос.КоэффициентЗаполненности КАК КоэффициентЗаполненности
	|ПОМЕСТИТЬ КоличествоИдентификатораОтправителяИОстатокВЯчейке
	|ИЗ
	|	КоличесвтоТовараВИдентификатореОтправителе КАК КоличесвтоТовараВИдентификатореОтправителе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(, Склад = &Склад) КАК итТоварыВЯчейкахОстатки
	|		ПО КоличесвтоТовараВИдентификатореОтправителе.ИдентификаторУпаковки = итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
	|			И КоличесвтоТовараВИдентификатореОтправителе.ЯчейкаПикинга = итТоварыВЯчейкахОстатки.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КоличесвтоТовараВИдентификатореОтправителе.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|			СУММА(ЕСТЬNULL(ЕСТЬNULL(итТоварыВЯчейкахОстатки.КоличествоОстаток, 0) / ВЫБОР
	|						КОГДА ЕСТЬNULL(итТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете, 0) = 0
	|							ТОГДА 1
	|						ИНАЧЕ итТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете
	|					КОНЕЦ, 0)) КАК КоэффициентЗаполненности,
	|			КоличесвтоТовараВИдентификатореОтправителе.ЯчейкаПикинга КАК ЯчейкаПикинга
	|		ИЗ
	|			КоличесвтоТовараВИдентификатореОтправителе КАК КоличесвтоТовараВИдентификатореОтправителе
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	|				ПО КоличесвтоТовараВИдентификатореОтправителе.ИдентификаторУпаковки = итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
	|					И КоличесвтоТовараВИдентификатореОтправителе.ЯчейкаПикинга = итТоварыВЯчейкахОстатки.Ячейка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КоличесвтоТовараВИдентификатореОтправителе.ИдентификаторУпаковки,
	|			КоличесвтоТовараВИдентификатореОтправителе.ЯчейкаПикинга) КАК ВложенныйЗапрос
	|		ПО КоличесвтоТовараВИдентификатореОтправителе.ИдентификаторУпаковки = ВложенныйЗапрос.ИдентификаторУпаковки
	|			И КоличесвтоТовараВИдентификатореОтправителе.ЯчейкаПикинга = ВложенныйЗапрос.ЯчейкаПикинга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтТоварыОтобранные.ИдентификаторУпаковки) КАК ИдентификаторУпаковки
	|ПОМЕСТИТЬ КоличественноеСоотношениеИдентификаторОтправительПолучатель
	|ИЗ
	|	ВтТоварыОтобранные КАК ВтТоварыОтобранные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличественноеСоотношениеИдентификаторОтправительПолучатель.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
	|	МАКСИМУМ(КоличественноеСоотношениеИдентификаторОтправительПолучатель.ИдентификаторУпаковки) КАК КоличествоИдентификаторовОтправителей,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КоличествоИдентификатораОтправителяИОстатокВЯчейке.Количество = КоличествоИдентификатораОтправителяИОстатокВЯчейке.КоличествоОстаток
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИдентификаторЗабираетсяПолностью,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КоличествоИдентификатораОтправителяИОстатокВЯчейке.ИдентификаторУпаковки = КоличественноеСоотношениеИдентификаторОтправительПолучатель.ИдентификаторУпаковкиПолучатель
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИдентификаторОтправительРавенПолучателю,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КоличествоИдентификатораОтправителяИОстатокВЯчейке.КоэффициентЗаполненности = 1
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОстатокПоИдентификаторуРавенПаллете
	|ПОМЕСТИТЬ ТаблицаИтговыхДанныхСравненияИдентификаторов
	|ИЗ
	|	КоличественноеСоотношениеИдентификаторОтправительПолучатель КАК КоличественноеСоотношениеИдентификаторОтправительПолучатель
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИдентификатораОтправителяИОстатокВЯчейке КАК КоличествоИдентификатораОтправителяИОстатокВЯчейке
	|		ПО КоличественноеСоотношениеИдентификаторОтправительПолучатель.ИдентификаторУпаковкиПолучатель = КоличествоИдентификатораОтправителяИОстатокВЯчейке.ИдентификаторУпаковкиПолучатель
	|
	|СГРУППИРОВАТЬ ПО
	|	КоличественноеСоотношениеИдентификаторОтправительПолучатель.ИдентификаторУпаковкиПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыОтобранные.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВтТоварыОтобранные.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВтТоварыОтобранные.Номенклатура КАК Номенклатура,
	|	ВтТоварыОтобранные.Характеристика КАК Характеристика,
	|	ВтТоварыОтобранные.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВтТоварыОтобранные.Качество КАК Качество,
	|	ВтТоварыОтобранные.ДатаРозлива КАК ДатаРозлива,
	|	ВтТоварыОтобранные.Количество КАК Количество,
	|	ВтТоварыОтобранные.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ВтТоварыОтобранные.ЯчейкаПикинга КАК ЯчейкаПикингаКоличество,
	|	ВтТоварыОтобранные.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
	|	ВтТоварыОтобранные.ЯчейкаПикинга КАК ЯчейкаПикинга,
	|	ЕСТЬNULL(ВтГруппированныхДанных.ЯчейкаПикингаДляСборныйхПаллет, ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.ПустаяСсылка)) КАК ЯчейкаПикингаДляСборныйхПаллет,
	|	ПорядковаНомерацияОбхода.НоменклатураКоэффициентПрочности КАК ПорядокОбходаПаллеты,
	|	0 КАК КоэффициентПрочности,
	|	ВЫБОР
	|		КОГДА ТаблицаИтговыхДанныхСравненияИдентификаторов.КоличествоИдентификаторовОтправителей = 1
	|				И ТаблицаИтговыхДанныхСравненияИдентификаторов.ИдентификаторЗабираетсяПолностью = 1
	|				И ТаблицаИтговыхДанныхСравненияИдентификаторов.ИдентификаторОтправительРавенПолучателю = 1
	|				И ТаблицаИтговыхДанныхСравненияИдентификаторов.ОстатокПоИдентификаторуРавенПаллете = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДвижениеЦелойПаллеты
	|ИЗ
	|	ВтТоварыОтобранные КАК ВтТоварыОтобранные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтГруппированныхДанных КАК ВтГруппированныхДанных
	|		ПО ВтТоварыОтобранные.ИдентификаторУпаковки = ВтГруппированныхДанных.ИдентификаторУпаковки
	|			И ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель = ВтГруппированныхДанных.ИдентификаторУпаковкиПолучатель
	|			И ВтТоварыОтобранные.ЯчейкаПолучатель = ВтГруппированныхДанных.ЯчейкаПолучатель
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядковаяНомерацияОбхода КАК ПорядковаНомерацияОбхода
	|		ПО ВтТоварыОтобранные.ИдентификаторУпаковки = ПорядковаНомерацияОбхода.ИдентификаторУпаковки
	|			И ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель = ПорядковаНомерацияОбхода.ИдентификаторУпаковкиПолучатель
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИтговыхДанныхСравненияИдентификаторов КАК ТаблицаИтговыхДанныхСравненияИдентификаторов
	|		ПО ВтТоварыОтобранные.ИдентификаторУпаковкиПолучатель = ТаблицаИтговыхДанныхСравненияИдентификаторов.ИдентификаторУпаковкиПолучатель
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЯчейкаПикингаКоличество),
	|	МАКСИМУМ(ЯчейкаПолучатель),
	|	МАКСИМУМ(ЯчейкаПикинга),
	|	МАКСИМУМ(ЯчейкаПикингаДляСборныйхПаллет),
	|	МИНИМУМ(ДвижениеЦелойПаллеты)
	|ПО
	|	ИдентификаторУпаковкиПолучатель";

	ТоварыКПреобразованию=Товары.Выгрузить();
	итWMSСлужебныеПроцедурыИФункции.ПреобразоватьТаблицуСИдентификаторамиДляЧтенияЗапроса(ТоварыКПреобразованию);
	Запрос.УстановитьПараметр("Товары", ТоварыКПреобразованию);
	Запрос.УстановитьПараметр("ЭтоИзменениеВПроцессеИсполненияДокумента", ЭтоИзменениеВПроцессеИсполненияДокумента);
	Запрос.УстановитьПараметр("МассивСтрокКОбработке", МассивСтрокКОбработке);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаИдентификаторУпаковкиПолучатель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаИдентификаторУпаковкиПолучатель.Следующий() Цикл
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.ДокументОснование=Ссылка;
		НоваяЗапись.ИдентификаторУпаковки=ВыборкаИдентификаторУпаковкиПолучатель.ИдентификаторУпаковкиПолучатель;
		НоваяЗапись.ТипЗадачи=Перечисления.итWMSТипыЗадачТСД.Наборка;
		НоваяЗапись.Состояние=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
		НоваяЗапись.ИдЗадачи=Новый УникальныйИдентификатор;
		Если ВыборкаИдентификаторУпаковкиПолучатель.ЯчейкаПикингаКоличество = 1 Тогда
			НоваяЗапись.ЯчейкаОтправитель=ВыборкаИдентификаторУпаковкиПолучатель.ЯчейкаПикинга;
		КонецЕсли;
		Если ВыборкаИдентификаторУпаковкиПолучатель.ЯчейкаПикингаДляСборныйхПаллет
			<> Справочники.итСкладскиеЯчейки.ПустаяСсылка() Тогда
			НоваяЗапись.ЯчейкаОтправитель=ВыборкаИдентификаторУпаковкиПолучатель.ЯчейкаПикингаДляСборныйхПаллет;
		КонецЕсли;
		НоваяЗапись.ЯчейкаПолучатель=ВыборкаИдентификаторУпаковкиПолучатель.ЯчейкаПолучатель;
		ТаблицаДляГруппировкиДанных=Новый ТаблицаЗначений;
		ТаблицаДляГруппировкиДанных.Колонки.Добавить("ИдентификаторУпаковкиОтправитель");
		ТаблицаДляГруппировкиДанных.Колонки.Добавить("ЯчейкаПикинга");
		ТаблицаДляГруппировкиДанных.Колонки.Добавить("ЯчейкаПикингаПредставление");
		ТаблицаДляГруппировкиДанных.Колонки.Добавить("идСтроки");
		ТаблицаДляГруппировкиДанных.Колонки.Добавить("ПорядокОбходаПаллеты");
		ЗаполнитьСтрокиЗадачиТСД(Отказ, РежимПроведения, НоваяЗапись.ИдЗадачи, ВыборкаИдентификаторУпаковкиПолучатель,
			ТаблицаДляГруппировкиДанных);
		НоваяЗапись.ДополнительныеДанные=Новый ХранилищеЗначения(Новый Структура("ТаблицаДляГруппировкиДанных,ДвижениеЦелойПаллеты,СистемнаяЯчейка",
			ТаблицаДляГруппировкиДанных, ВыборкаИдентификаторУпаковкиПолучатель.ДвижениеЦелойПаллеты, СистемнаяЯчейка));
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ЗаполнитьСтрокиЗадачиТСД(Отказ, РежимПроведения, ИдЗадачи, ВыборкаИдентификаторУпаковкиПолучатель,
	ТаблицаДляГруппировкиДанных)
	ВыборкаДетальныеЗаписи = ВыборкаИдентификаторУпаковкиПолучатель.Выбрать();
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSСтрокиЗадачТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ИдЗадачи", ИдЗадачи);
	БлокировкаДанных.Заблокировать();
	НаборЗаписей= РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдЗадачи.Установить(ИдЗадачи);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.ИдЗадачи=ИдЗадачи;
		НоваяЗапись.идСтроки=Новый УникальныйИдентификатор(ВыборкаДетальныеЗаписи.ИдентификаторСтроки);
		НоваяЗапись.ДатаРозлива= ВыборкаДетальныеЗаписи.ДатаРозлива;
		НоваяЗапись.Номенклатура=ВыборкаДетальныеЗаписи.Номенклатура;
		НоваяЗапись.СерияНоменклатуры=ВыборкаДетальныеЗаписи.СерияНоменклатуры;
		НоваяЗапись.Количество=ВыборкаДетальныеЗаписи.Количество;

		НоваяЗапись.ДополнительныеДанные=Новый ХранилищеЗначения(Новый Структура("КоэффициентПрочности,ИдентификаторУпаковкиОтправитель,ПомарочныйУчет",
			ВыборкаДетальныеЗаписи.КоэффициентПрочности, ВыборкаДетальныеЗаписи.ИдентификаторУпаковки,
			итWMSСлужебныеПроцедурыИФункции.ПринадлежностьКПомарочномуУчету(ВыборкаДетальныеЗаписи.СерияНоменклатуры)));

		НоваяСтрока=ТаблицаДляГруппировкиДанных.Добавить();
		НоваяСтрока.ИдентификаторУпаковкиОтправитель=ВыборкаДетальныеЗаписи.ИдентификаторУпаковки;
		НоваяСтрока.ЯчейкаПикинга= ВыборкаДетальныеЗаписи.ЯчейкаПикинга.УникальныйИдентификатор();
		НоваяСтрока.ЯчейкаПикингаПредставление = ВыборкаДетальныеЗаписи.ЯчейкаПикинга.Наименование;
		НоваяСтрока.идСтроки=Новый УникальныйИдентификатор(ВыборкаДетальныеЗаписи.ИдентификаторСтроки);
		//НоваяСтрока.ПорядокОбходаПаллеты=ВыборкаДетальныеЗаписи.ПорядокОбходаПаллеты;
		НоваяСтрока.ПорядокОбходаПаллеты=ВыборкаДетальныеЗаписи.ЯчейкаПикинга.ПорядокОбхода;

	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

#КонецОбласти

Процедура ПроведениеПоРезервированиюЯчеек(Отказ, РежимПроведения, СнятиеСРезерва = Ложь)
	ТоварывЯчейкахРезерв=Движения.итТоварыВЯчейках;
	Если Отказ Тогда
		Возврат;
	КонецЕсли
	;
	РезервированиеТоваровВЯчейкахЯчейкаОтправитель(Отказ, РежимПроведения, СнятиеСРезерва);
	РезервированиеТоваровВЯчейкахЯчейкаПолучатель(Отказ, РежимПроведения, СнятиеСРезерва);
	ТоварывЯчейкахРезерв.Записать();
КонецПроцедуры

Процедура РезервированиеТоваровВЯчейкахЯчейкаОтправитель(Отказ, РежимПроведения, СнятиеСРезерва)
	/////+++++Явное определение параметров в процедуре	
	ТоварывЯчейкахРезерв=Движения.итТоварыВЯчейках;
	КачествоПустаяСсылка=Справочники.Качество.ПустаяСсылка();
	КачествоНовый=Справочники.Качество.Новый;
	ЯчейкаПустаяСсылка=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
	/////----------------------
	Для Каждого стр Из Товары Цикл
		Если СнятиеСРезерва И Не стр.ФиксацияСтроки Тогда
			Продолжить;
		КонецЕсли;
		Если стр.ЯчейкаПолучатель = ЯчейкаПустаяСсылка Тогда
			Продолжить;
		КонецЕсли;
		Если стр.ЯчейкаПикинга.Пустая() И Не РежимРезервированияБезПеремещения Тогда
			Продолжить;
		КонецЕсли;
		НоваяЗапись=ТоварывЯчейкахРезерв.Добавить();
		НоваяЗапись.Период=?(стр.ДатаИсполнения = '00010101', Дата, стр.ДатаИсполнения);
		Если РежимРезервированияБезПеремещения Тогда
			НоваяЗапись.Ячейка=стр.ЯчейкаОтправитель;
		Иначе
			НоваяЗапись.Ячейка=стр.ЯчейкаПикинга;
		КонецЕсли;
		НоваяЗапись.Организация=Организация;
		Если СнятиеСРезерва Тогда
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Расход;
		Иначе
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
		КонецЕсли;
		НоваяЗапись.Характеристика=стр.Характеристика;
		НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
		НоваяЗапись.Номенклатура=стр.Номенклатура;
		НоваяЗапись.ДатаРозлива=стр.ДатаРозлива;
		НоваяЗапись.Качество=?(стр.Качество = КачествоПустаяСсылка, КачествоНовый, стр.Качество);
		НоваяЗапись.КОтбору=стр.Количество;
		НоваяЗапись.Склад=Склад;
		НоваяЗапись.СерияНоменклатуры=стр.СерияНоменклатуры;
	КонецЦикла;
КонецПроцедуры

Процедура РезервированиеТоваровВЯчейкахЯчейкаПолучатель(Отказ, РежимПроведения, СнятиеСРезерва)
	Если Не РезервироватьЯчейкиЭстокады Тогда
		Возврат;
	КонецЕсли
	;
	/////+++++Явное определение параметров в процедуре	
	ТоварывЯчейкахРезерв=Движения.итТоварыВЯчейках;
	КачествоПустаяСсылка=Справочники.Качество.ПустаяСсылка();
	КачествоНовый=Справочники.Качество.Новый;
	ЯчейкаПустаяСсылка=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
	СистемнаяЯчейка=Константы.СистемнаяЯчейка.Получить();
	/////----------------------

	Для Каждого стр Из Товары Цикл
		Если СнятиеСРезерва И Не стр.ФиксацияСтроки Тогда
			Продолжить;
		КонецЕсли;
		Если стр.ЯчейкаПолучатель = ЯчейкаПустаяСсылка Тогда
			Отказ=Истина;
			Сообщить("Ошибка ячейки эстокады");
			Возврат;
		КонецЕсли
		;
		Если стр.ЯчейкаПолучатель = СистемнаяЯчейка Тогда
			Продолжить;
		КонецЕсли
		;
		НоваяЗапись=ТоварывЯчейкахРезерв.Добавить();
		НоваяЗапись.Период=?(стр.ДатаИсполнения = '00010101', Дата, стр.ДатаИсполнения);
		НоваяЗапись.Ячейка=стр.ЯчейкаПолучатель;
		НоваяЗапись.Организация=Организация;
		НоваяЗапись.Характеристика=стр.Характеристика;
		Если СнятиеСРезерва Тогда
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Расход;
		Иначе
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
		КонецЕсли;
		НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
		НоваяЗапись.Номенклатура=стр.Номенклатура;
		НоваяЗапись.ДатаРозлива=стр.ДатаРозлива;
		НоваяЗапись.Качество=?(стр.Качество = КачествоПустаяСсылка, КачествоНовый, стр.Качество);
		НоваяЗапись.КРазмещению=стр.Количество;
		НоваяЗапись.СерияНоменклатуры=стр.СерияНоменклатуры;
	КонецЦикла;

КонецПроцедуры

Процедура ПроведениеПоРегистрамНакопления(Отказ, РежимПроведения)
	ПроведениеПоРезервированиюЯчеек(Отказ, РежимПроведения, Истина);
	ПроведениеПоТоварамВЯчейках(Отказ, РежимПроведения);
КонецПроцедуры

Процедура ПроведениеПоТоварамВЯчейках(Отказ, РежимПроведения)

	итТоварыВЯчейках=Движения.итТоварыВЯчейках;
	КачествоПустаяСсылка=Справочники.Качество.ПустаяСсылка();
	КачествоНовый=Справочники.Качество.Новый;
	Для Каждого стр Из Товары Цикл
		Если стр.СостояниеЗадачи <> Перечисления.итWMSСостоянияЗадачТСД.Выполнена Или Не стр.ФиксацияСтроки Тогда
			Продолжить;
		КонецЕсли;
		///движение Приход
		НоваяЗапись=итТоварыВЯчейках.Добавить();
		НоваяЗапись.Период=?(стр.ДатаИсполнения = '00010101', Дата, стр.ДатаИсполнения);
		НоваяЗапись.Организация=Организация;
		НоваяЗапись.Характеристика=стр.Характеристика;
		НоваяЗапись.Ячейка=стр.ЯчейкаПолучатель;
		НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
		НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковкиПолучатель;
		НоваяЗапись.Номенклатура=стр.Номенклатура;
		НоваяЗапись.ДатаРозлива=стр.ДатаРозлива;
		НоваяЗапись.Качество=?(стр.Качество = КачествоПустаяСсылка, КачествоНовый, стр.Качество);
		НоваяЗапись.Количество=стр.КоличествоФакт;
		НоваяЗапись.СерияНоменклатуры=стр.СерияНоменклатуры;
		//НоваяЗапись.Склад=Склад;
		/// движение Расход
		НоваяЗапись=итТоварыВЯчейках.Добавить();
		НоваяЗапись.Период=?(стр.ДатаИсполнения = '00010101', Дата, стр.ДатаИсполнения);
		НоваяЗапись.Организация=Организация;
		НоваяЗапись.Характеристика=стр.Характеристика;
		НоваяЗапись.Ячейка=стр.ЯчейкаПикинга;
		НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Расход;
		НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
		НоваяЗапись.Номенклатура=стр.Номенклатура;
		НоваяЗапись.ДатаРозлива=стр.ДатаРозлива;
		НоваяЗапись.СерияНоменклатуры=стр.СерияНоменклатуры;
		НоваяЗапись.Качество=?(стр.Качество = КачествоПустаяСсылка, КачествоНовый, стр.Качество);
		НоваяЗапись.Количество=стр.КоличествоФакт;
		НоваяЗапись.Склад=Склад;
	КонецЦикла;
	итТоварыВЯчейках.Записать();
КонецПроцедуры

Процедура ИзменениеДатДокументаПеремещенияСогласноНаборке()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	итWMSПеремещение.Ссылка,
	|	итWMSПеремещение.ПеремещениеВПикинг,
	|	итWMSПеремещение.Дата
	|ИЗ
	|	Документ.итWMSПеремещение КАК итWMSПеремещение
	|ГДЕ
	|	итWMSПеремещение.Проведен
	|	И итWMSПеремещение.итОснование = &итОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSПеремещение.Ссылка,
	|	итWMSПеремещение.ПеремещениеВПикинг,
	|	итWMSПеремещение.Дата";

	Запрос.УстановитьПараметр("итОснование", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ПеремещениеВПикинг И ВыборкаДетальныеЗаписи.Дата >= Дата Тогда
			ОбъектИзменения= ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектИзменения.ПривилигированноеПроведение=ПривилигированноеПроведение;
			ОбъектИзменения.Дата=Дата - 1;
			ОбъектИзменения.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		ИначеЕсли ВыборкаДетальныеЗаписи.Дата <= Дата И Не ВыборкаДетальныеЗаписи.ПеремещениеВПикинг Тогда
			ОбъектИзменения= ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектИзменения.Дата=Дата + 1;
			ОбъектИзменения.ПривилигированноеПроведение=ПривилигированноеПроведение;
			ОбъектИзменения.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры


Процедура ДвижениеНаборкиПоРезервированиюХранения(Отказ)
	Запрос = Новый Запрос;
	Запрос.Текст =ТекстЗапросаРезервированияЯчеекХранения();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Ссылка.Дата, Ссылка), ВидГраницы.Включая));
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаПоЯчейке = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		НаборЗаписей=РегистрыНакопления.итТоварыВЯчейках.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		ЗаполнитьДвиженияНаборкиПоРезервированиюХранения(ВыборкаПоЯчейке, НаборЗаписей, Отказ);
		Если Не Отказ Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДвиженияНаборкиПоРезервированиюХранения(Знач ВыборкаПоЯчейке, НаборЗаписей, Отказ)

	Перем ВыборкаДетальныйхЗаписей, ВыборкаУпаковка, НоваяЗапись;

	Пока ВыборкаПоЯчейке.Следующий() Цикл
		ВыборкаУпаковка=ВыборкаПоЯчейке.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУпаковка.Следующий() Цикл
			Если ВыборкаУпаковка.РезервированиеТовараВЯчейке Тогда
				Сообщить("По идентификатору " + ВыборкаУпаковка.ИдентификаторУпаковки
					+ " в ячейке хранения имеется резерв");
				Отказ=Истина;
				Продолжить;
			КонецЕсли;
			ВыборкаДетальныйхЗаписей=ВыборкаУпаковка.Выбрать();
			Пока ВыборкаДетальныйхЗаписей.Следующий() Цикл
				Если ВыборкаДетальныйхЗаписей.Количество > ВыборкаДетальныйхЗаписей.КоличествоОстаток Тогда
					Сообщить("по идентификатору " + ВыборкаДетальныйхЗаписей.ИдентификаторУпаковки
						+ " не хватает номенклатуры " + Строка(ВыборкаДетальныйхЗаписей.Номенклатура) + " в количестве "
						+ Строка(ВыборкаДетальныйхЗаписей.Количество - ВыборкаДетальныйхЗаписей.КоличествоОстаток));
					Отказ=Истина;
				КонецЕсли;
				НоваяЗапись=НаборЗаписей.Добавить();
				НоваяЗапись.Регистратор=Ссылка;
				НоваяЗапись.Период=Ссылка.Дата;
				НоваяЗапись.Ячейка=ВыборкаДетальныйхЗаписей.Ячейка;
				НоваяЗапись.Организация=ВыборкаДетальныйхЗаписей.Организация;
				НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
				НоваяЗапись.Характеристика=ВыборкаДетальныйхЗаписей.Характеристика;
				НоваяЗапись.ИдентификаторУпаковки=ВыборкаДетальныйхЗаписей.ИдентификаторУпаковки;
				НоваяЗапись.Номенклатура=ВыборкаДетальныйхЗаписей.Номенклатура;
				НоваяЗапись.ДатаРозлива=ВыборкаДетальныйхЗаписей.ДатаРозлива;
				НоваяЗапись.Качество=ВыборкаДетальныйхЗаписей.Качество;
				НоваяЗапись.КОтбору=ВыборкаДетальныйхЗаписей.КоличествоОстаток;
				НоваяЗапись.Склад=ВыборкаДетальныйхЗаписей.Склад;
				НоваяЗапись.СерияНоменклатуры=ВыборкаДетальныйхЗаписей.СерияНоменклатуры;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры
Функция ТекстЗапросаРезервированияЯчеекХранения()
	Текст= "ВЫБРАТЬ
		   |	итWMSПеремещение.Ссылка КАК Ссылка
		   |ПОМЕСТИТЬ ВтПеремещение
		   |ИЗ
		   |	Документ.итWMSПеремещение КАК итWMSПеремещение
		   |ГДЕ
		   |	итWMSПеремещение.Проведен
		   |	И итWMSПеремещение.итОснование = &Ссылка
		   |	И итWMSПеремещение.ПеремещениеВПикинг
		   |;
		   |
		   |////////////////////////////////////////////////////////////////////////////////
		   |ВЫБРАТЬ
		   |	итWMSПеремещениеТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		   |	итWMSПеремещениеТовары.ЯчейкаОтправитель КАК ЯчейкаОтправитель
		   |ПОМЕСТИТЬ ВтДанныеПеремещение
		   |ИЗ
		   |	ВтПеремещение КАК ВтПеремещение
		   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПеремещение.Товары КАК итWMSПеремещениеТовары
		   |		ПО ВтПеремещение.Ссылка = итWMSПеремещениеТовары.Ссылка
		   |ГДЕ
		   |	итWMSПеремещениеТовары.СостояниеЗадачи <> ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Отменена)
		   |
		   |СГРУППИРОВАТЬ ПО
		   |	итWMSПеремещениеТовары.ИдентификаторУпаковки,
		   |	итWMSПеремещениеТовары.ЯчейкаОтправитель
		   |;
		   |
		   |////////////////////////////////////////////////////////////////////////////////
		   |ВЫБРАТЬ
		   |	итWMSНаборкаТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		   |	итWMSНаборкаТовары.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
		   |	итWMSНаборкаТовары.Ссылка.Организация КАК Организация,
		   |	итWMSНаборкаТовары.Ссылка.Склад КАК Склад,
		   |	итWMSНаборкаТовары.Номенклатура КАК Номенклатура,
		   |	итWMSНаборкаТовары.Характеристика КАК Характеристика,
		   |	итWMSНаборкаТовары.СерияНоменклатуры КАК СерияНоменклатуры,
		   |	ВЫБОР
		   |		КОГДА итWMSНаборкаТовары.Качество = ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)
		   |			ТОГДА ЗНАЧЕНИЕ(Справочник.Качество.Новый)
		   |		ИНАЧЕ итWMSНаборкаТовары.Качество
		   |	КОНЕЦ КАК Качество,
		   |	СУММА(итWMSНаборкаТовары.Количество) КАК Количество,
		   |	итWMSНаборкаТовары.ДатаРозлива КАК ДатаРозлива
		   |ПОМЕСТИТЬ ДанныеНаборки
		   |ИЗ
		   |	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
		   |ГДЕ
		   |	итWMSНаборкаТовары.СостояниеЗадачи <> ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Отменена)
		   |	И итWMSНаборкаТовары.ЯчейкаПикинга = ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.ПустаяСсылка)
		   |	И итWMSНаборкаТовары.Ссылка = &Ссылка
		   |
		   |СГРУППИРОВАТЬ ПО
		   |	итWMSНаборкаТовары.ИдентификаторУпаковки,
		   |	итWMSНаборкаТовары.ЯчейкаОтправитель,
		   |	итWMSНаборкаТовары.Ссылка.Организация,
		   |	итWMSНаборкаТовары.Ссылка.Склад,
		   |	итWMSНаборкаТовары.Номенклатура,
		   |	итWMSНаборкаТовары.Характеристика,
		   |	итWMSНаборкаТовары.СерияНоменклатуры,
		   |	ВЫБОР
		   |		КОГДА итWMSНаборкаТовары.Качество = ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)
		   |			ТОГДА ЗНАЧЕНИЕ(Справочник.Качество.Новый)
		   |		ИНАЧЕ итWMSНаборкаТовары.Качество
		   |	КОНЕЦ,
		   |	итWMSНаборкаТовары.ДатаРозлива
		   |;
		   |
		   |////////////////////////////////////////////////////////////////////////////////
		   |ВЫБРАТЬ
		   |	ДанныеНаборки.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
		   |	ДанныеНаборки.ИдентификаторУпаковки КАК ИдентификаторУпаковки
		   |ПОМЕСТИТЬ ДанныеНаборкиБезПеремещения
		   |ИЗ
		   |	ДанныеНаборки КАК ДанныеНаборки
		   |		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеПеремещение КАК ВтДанныеПеремещение
		   |		ПО ДанныеНаборки.ИдентификаторУпаковки = ВтДанныеПеремещение.ИдентификаторУпаковки
		   |			И ДанныеНаборки.ЯчейкаОтправитель = ВтДанныеПеремещение.ЯчейкаОтправитель
		   |ГДЕ
		   |	ВтДанныеПеремещение.ИдентификаторУпаковки ЕСТЬ NULL
		   |
		   |СГРУППИРОВАТЬ ПО
		   |	ДанныеНаборки.ЯчейкаОтправитель,
		   |	ДанныеНаборки.ИдентификаторУпаковки
		   |;
		   |
		   |////////////////////////////////////////////////////////////////////////////////
		   |ВЫБРАТЬ
		   |	итТоварыВЯчейкахОстатки.Организация КАК Организация,
		   |	итТоварыВЯчейкахОстатки.Склад КАК Склад,
		   |	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		   |	итТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		   |	итТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		   |	итТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
		   |	итТоварыВЯчейкахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
		   |	итТоварыВЯчейкахОстатки.ДатаРозлива КАК ДатаРозлива,
		   |	итТоварыВЯчейкахОстатки.Качество КАК Качество,
		   |	итТоварыВЯчейкахОстатки.КоличествоОстаток КАК КоличествоОстаток,
		   |	ВЫБОР
		   |		КОГДА итТоварыВЯчейкахОстатки.КОтборуОстаток <> 0
		   |				ИЛИ итТоварыВЯчейкахОстатки.КРазмещениюОстаток <> 0
		   |			ТОГДА 1
		   |		ИНАЧЕ 0
		   |	КОНЕЦ КАК РезервированиеТовараВЯчейке,
		   |	0 КАК Количество
		   |ПОМЕСТИТЬ ДанныеНаборкиИОстатков
		   |ИЗ
		   |	ДанныеНаборкиБезПеремещения КАК ДанныеНаборкиБезПеремещения
		   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(&Период, ) КАК итТоварыВЯчейкахОстатки
		   |		ПО ДанныеНаборкиБезПеремещения.ИдентификаторУпаковки = итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
		   |			И ДанныеНаборкиБезПеремещения.ЯчейкаОтправитель = итТоварыВЯчейкахОстатки.Ячейка
		   |
		   |ОБЪЕДИНИТЬ ВСЕ
		   |
		   |ВЫБРАТЬ
		   |	ДанныеНаборки.Организация,
		   |	ДанныеНаборки.Склад,
		   |	ДанныеНаборки.ИдентификаторУпаковки,
		   |	ДанныеНаборки.ЯчейкаОтправитель,
		   |	ДанныеНаборки.Номенклатура,
		   |	ДанныеНаборки.Характеристика,
		   |	ДанныеНаборки.СерияНоменклатуры,
		   |	ДанныеНаборки.ДатаРозлива,
		   |	ДанныеНаборки.Качество,
		   |	0,
		   |	0,
		   |	ДанныеНаборки.Количество
		   |ИЗ
		   |	ДанныеНаборкиБезПеремещения КАК ДанныеНаборкиБезПеремещения
		   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеНаборки КАК ДанныеНаборки
		   |		ПО ДанныеНаборкиБезПеремещения.ИдентификаторУпаковки = ДанныеНаборки.ИдентификаторУпаковки
		   |			И ДанныеНаборкиБезПеремещения.ЯчейкаОтправитель = ДанныеНаборки.ЯчейкаОтправитель
		   |;
		   |
		   |////////////////////////////////////////////////////////////////////////////////
		   |ВЫБРАТЬ
		   |	ДанныеНаборкиИОстатков.Организация КАК Организация,
		   |	ДанныеНаборкиИОстатков.Склад КАК Склад,
		   |	ДанныеНаборкиИОстатков.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		   |	ДанныеНаборкиИОстатков.Ячейка КАК Ячейка,
		   |	ДанныеНаборкиИОстатков.Номенклатура КАК Номенклатура,
		   |	ДанныеНаборкиИОстатков.Характеристика КАК Характеристика,
		   |	ДанныеНаборкиИОстатков.СерияНоменклатуры КАК СерияНоменклатуры,
		   |	ДанныеНаборкиИОстатков.ДатаРозлива КАК ДатаРозлива,
		   |	ДанныеНаборкиИОстатков.Качество КАК Качество,
		   |	СУММА(ДанныеНаборкиИОстатков.КоличествоОстаток) КАК КоличествоОстаток,
		   |	МАКСИМУМ(ДанныеНаборкиИОстатков.РезервированиеТовараВЯчейке) КАК РезервированиеТовараВЯчейке,
		   |	СУММА(ДанныеНаборкиИОстатков.Количество) КАК Количество
		   |ИЗ
		   |	ДанныеНаборкиИОстатков КАК ДанныеНаборкиИОстатков
		   |
		   |СГРУППИРОВАТЬ ПО
		   |	ДанныеНаборкиИОстатков.Организация,
		   |	ДанныеНаборкиИОстатков.Склад,
		   |	ДанныеНаборкиИОстатков.ИдентификаторУпаковки,
		   |	ДанныеНаборкиИОстатков.Ячейка,
		   |	ДанныеНаборкиИОстатков.Номенклатура,
		   |	ДанныеНаборкиИОстатков.Характеристика,
		   |	ДанныеНаборкиИОстатков.СерияНоменклатуры,
		   |	ДанныеНаборкиИОстатков.ДатаРозлива,
		   |	ДанныеНаборкиИОстатков.Качество
		   |ИТОГИ
		   |	МАКСИМУМ(РезервированиеТовараВЯчейке)
		   |ПО
		   |	Ячейка,
		   |	ИдентификаторУпаковки";

	Возврат Текст;
КонецФункции

Процедура ПроверкаНаСоответсвиеДанныхЯчеек(Отказ, РежимПроведения)
	Если ПривилигированноеПроведение Тогда
		Возврат;
	КонецЕсли
	;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	итWMSНаборкаТовары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	итWMSНаборкаТовары.ЯчейкаПолучатель.КоличествоПалет КАК ЯчейкаПолучательКоличествоПалет
	|ПОМЕСТИТЬ ВтЯчейкиЭстокады
	|ИЗ
	|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
	|ГДЕ
	|	итWMSНаборкаТовары.Ссылка = &Ссылка
	|	И итWMSНаборкаТовары.СостояниеЗадачи <> ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Отменена)
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSНаборкаТовары.ЯчейкаПолучатель,
	|	итWMSНаборкаТовары.ЯчейкаПолучатель.КоличествоПалет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMSНаборкаТовары.Ссылка.Организация КАК Организация,
	|	итWMSНаборкаТовары.Ссылка.Склад КАК Склад,
	|	итWMSНаборкаТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итWMSНаборкаТовары.ИзъятиеТовара КАК ИзъятиеТовара,
	|	итWMSНаборкаТовары.Качество КАК Качество,
	|	СУММА(итWMSНаборкаТовары.Количество) КАК Количество,
	|	СУММА(итWMSНаборкаТовары.КоличествоИзъятия) КАК КоличествоИзъятия,
	|	СУММА(итWMSНаборкаТовары.КоличествоФакт) КАК КоличествоФакт,
	|	итWMSНаборкаТовары.Номенклатура КАК Номенклатура,
	|	итWMSНаборкаТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итWMSНаборкаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &РежимРезервированияБезПеремещения
	|			ТОГДА итWMSНаборкаТовары.ЯчейкаОтправитель
	|		ИНАЧЕ итWMSНаборкаТовары.ЯчейкаПикинга
	|	КОНЕЦ КАК ЯчейкаПикинга
	|ПОМЕСТИТЬ ДанныеНабора
	|ИЗ
	|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
	|ГДЕ
	|	итWMSНаборкаТовары.Ссылка = &Ссылка
	|	И итWMSНаборкаТовары.СостояниеЗадачи <> ЗНАЧЕНИЕ(Перечисление.итWMSСостоянияЗадачТСД.Отменена)
	|	И ВЫБОР
	|			КОГДА &РежимРезервированияБезПеремещения
	|				ТОГДА итWMSНаборкаТовары.ЯчейкаПикинга <> ЗНАЧЕНИЕ(Справочник.итСкладскиеЯчейки.ПустаяСсылка)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSНаборкаТовары.ИдентификаторУпаковки,
	|	итWMSНаборкаТовары.ИзъятиеТовара,
	|	итWMSНаборкаТовары.Качество,
	|	итWMSНаборкаТовары.Номенклатура,
	|	итWMSНаборкаТовары.СерияНоменклатуры,
	|	итWMSНаборкаТовары.Ссылка.Организация,
	|	итWMSНаборкаТовары.Ссылка.Склад,
	|	итWMSНаборкаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА &РежимРезервированияБезПеремещения
	|			ТОГДА итWMSНаборкаТовары.ЯчейкаОтправитель
	|		ИНАЧЕ итWMSНаборкаТовары.ЯчейкаПикинга
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Организация КАК Организация,
	|	итТоварыВЯчейкахОстатки.Склад КАК Склад,
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	итТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	итТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.ДатаРозлива КАК ДатаРозлива,
	|	итТоварыВЯчейкахОстатки.Качество КАК Качество,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток КАК ОстатокЗаМинусомРезерва,
	|	-(итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток) КАК НеХватает
	|ИЗ
	|	ДанныеНабора КАК ДанныеНабора
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(&Период, ) КАК итТоварыВЯчейкахОстатки
	|		ПО ДанныеНабора.Организация = итТоварыВЯчейкахОстатки.Организация
	|			И ДанныеНабора.Склад = итТоварыВЯчейкахОстатки.Склад
	|			И ДанныеНабора.ИдентификаторУпаковки = итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
	|			И (ВЫБОР
	|				КОГДА ДанныеНабора.Качество = ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.Качество.Новый)
	|				ИНАЧЕ ДанныеНабора.Качество
	|			КОНЕЦ = итТоварыВЯчейкахОстатки.Качество)
	|			И ДанныеНабора.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|			И ДанныеНабора.СерияНоменклатуры = итТоварыВЯчейкахОстатки.СерияНоменклатуры
	|			И ДанныеНабора.Характеристика = итТоварыВЯчейкахОстатки.Характеристика
	|			И ДанныеНабора.ЯчейкаПикинга = итТоварыВЯчейкахОстатки.Ячейка
	|ГДЕ
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЯчейкиЭстокады.ЯчейкаПолучатель КАК Ячейка,
	|	ЕСТЬNULL((итТоварыВЯчейкахОстатки.КоличествоОстаток + итТоварыВЯчейкахОстатки.КРазмещениюОстаток) / ВЫБОР
	|			КОГДА итТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмеренияМест.итКоличествоНаПаллете = 0
	|				ТОГДА 1
	|			ИНАЧЕ итТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмеренияМест.итКоличествоНаПаллете
	|		КОНЕЦ, 0) КАК КоличествоЗанятыхПаллетоМест,
	|	ВтЯчейкиЭстокады.ЯчейкаПолучательКоличествоПалет КАК ЯчейкаПолучательКоличествоПалет,
	|	ЕСТЬNULL((итТоварыВЯчейкахОстатки.КоличествоОстаток + итТоварыВЯчейкахОстатки.КРазмещениюОстаток) / ВЫБОР
	|			КОГДА итТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмеренияМест.итКоличествоНаПаллете = 0
	|				ТОГДА 1
	|			ИНАЧЕ итТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмеренияМест.итКоличествоНаПаллете
	|		КОНЕЦ, 0) - ВтЯчейкиЭстокады.ЯчейкаПолучательКоличествоПалет КАК Превышено
	|ИЗ
	|	ВтЯчейкиЭстокады КАК ВтЯчейкиЭстокады
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(&Период, ) КАК итТоварыВЯчейкахОстатки
	|		ПО ВтЯчейкиЭстокады.ЯчейкаПолучатель = итТоварыВЯчейкахОстатки.Ячейка
	|ГДЕ
	|	ЕСТЬNULL((итТоварыВЯчейкахОстатки.КоличествоОстаток + итТоварыВЯчейкахОстатки.КРазмещениюОстаток) / ВЫБОР
	|				КОГДА итТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмеренияМест.итКоличествоНаПаллете = 0
	|					ТОГДА 1
	|				ИНАЧЕ итТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмеренияМест.итКоличествоНаПаллете
	|			КОНЕЦ, 0) > ВтЯчейкиЭстокады.ЯчейкаПолучательКоличествоПалет";

	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Дата, Ссылка), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("РежимРезервированияБезПеремещения", РежимРезервированияБезПеремещения);
	МассивРезультатов=Запрос.ВыполнитьПакет();

	ВыборкаЯчекиОтправитель=МассивРезультатов[2].Выбрать();
	ВыборкаЯчейкиЭстокады=МассивРезультатов[3].Выбрать();

	Пока ВыборкаЯчекиОтправитель.Следующий() Цикл
		Отказ=Истина;
		Сообщить("для идентификатора " + ВыборкаЯчекиОтправитель.ИдентификаторУпаковки
			+ " превышено количество забираемого товара " + ВыборкаЯчекиОтправитель.Номенклатура + " в" + " количесте "
			+ ВыборкаЯчекиОтправитель.НеХватает);
	КонецЦикла;

	Пока ВыборкаЯчейкиЭстокады.Следующий() Цикл
		Отказ=Истина;
		Сообщить("для ячейки эстокады " + ВыборкаЯчейкиЭстокады.Ячейка + " превышено максимальное количество паллет "
			+ ВыборкаЯчейкиЭстокады.Превышено);
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

Процедура ОчиститьСписокЗадач(Отказ, РежимЗаписи = Неопределено, РежимПроведения)

	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
	ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументОснование", Ссылка);
	БлокировкаДанных.Заблокировать();
	СтатусДокументаРаспределен=Ложь;
	Если СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Распределен Тогда
		СтатусДокументаРаспределен=Истина;
		ДанныеОбхода=МассивЗадач;
	Иначе
		НаборЗаписей= РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		ДанныеОбхода=НаборЗаписей;
	КонецЕсли;
	МассивЗафиксированныхЗадач=ПолучитьЗафиксированныйМассивЗадач();
	Для Каждого стр Из ДанныеОбхода Цикл
		Если МассивЗафиксированныхЗадач.Найти(стр.ИдЗадачи) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		///////////////////////Очистка Задач построчно
		НаборЗаписей_1=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей_1.Отбор.ДокументОснование.Установить(Ссылка);
		НаборЗаписей_1.Отбор.ИдЗадачи.Установить(стр.ИдЗадачи);
		НаборЗаписей_1.Прочитать();
		Если СтатусДокументаРаспределен Тогда
			Для Каждого стр Из НаборЗаписей_1 Цикл
				Если Не стр.ТСД = Справочники.итWMSСправочникТСД.ПустаяСсылка() Тогда
					Сообщить("Задача распределена и исправлена быть не может");
					Отказ =Истина;
					Возврат;
				КонецЕсли
				;
			КонецЦикла;
		КонецЕсли;
		НаборЗаписей_1.Очистить();
		НаборЗаписей_1.Записать();
		
		////////////////////Очистка Строк Задач
		НаборЗаписей_2=РегистрыСведений.итWMSСтрокиЗадачТСД.СоздатьНаборЗаписей();
		НаборЗаписей_2.Отбор.ИдЗадачи.Установить(стр.ИдЗадачи);
		НаборЗаписей_2.Прочитать();
		НаборЗаписей_2.Очистить();
		НаборЗаписей_2.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьДанныеПомарочногоУчета()
	НаборЗаписей=РегистрыСведений.итWMS_АгрегацияМарок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();

	НаборЗаписей2=РегистрыСведений.итWMS_МаркиВОбработке.СоздатьНаборЗаписей();
	НаборЗаписей2.Отбор.ДокументОснование.Установить(Ссылка);
	НаборЗаписей2.Прочитать();
	НаборЗаписей2.Очистить();
	НаборЗаписей2.Записать();
КонецПроцедуры

Функция ПолучитьСписокИзменяемыхСтрокПоМассивуЗадач(МассивЗадачПоиска)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	итWMSСтрокиЗадачТСД.идСтроки
	|ИЗ
	|	РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
	|ГДЕ
	|	итWMSСтрокиЗадачТСД.ИдЗадачи В(&МассивЗадач)";

	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадачПоиска);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивСтрокКОбработке=Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСтрокКОбработке.Добавить(Строка(ВыборкаДетальныеЗаписи.идСтроки));
	КонецЦикла;
	Возврат МассивСтрокКОбработке;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции

Функция ПолучитьЗафиксированныйМассивЗадач()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	итWMSНаборкаТовары.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТстроки
	|ИЗ
	|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
	|ГДЕ
	|	итWMSНаборкаТовары.ФиксацияСтроки
	|	И итWMSНаборкаТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSНаборкаТовары.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMSЗадачиТСД.ИдЗадачи
	|ПОМЕСТИТЬ ВТзадачи
	|ИЗ
	|	РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
	|ГДЕ
	|	итWMSЗадачиТСД.ДокументОснование = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSЗадачиТСД.ИдЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMSСтрокиЗадачТСД.ИдЗадачи
	|ПОМЕСТИТЬ ИзЗдачаСтроки
	|ИЗ
	|	ВТстроки КАК ВТстроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
	|		ПО ВТстроки.ИдентификаторСтроки = итWMSСтрокиЗадачТСД.идСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSСтрокиЗадачТСД.ИдЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТзадачи.ИдЗадачи
	|ИЗ
	|	ВТзадачи КАК ВТзадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзЗдачаСтроки КАК ИзЗдачаСтроки
	|		ПО ВТзадачи.ИдЗадачи = ИзЗдачаСтроки.ИдЗадачи";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	;
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("ИдЗадачи");
КонецФункции
Процедура ОпределитьСтатусВыполненногоДокумента() Экспорт
	ЭтотОбъект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен;
КонецПроцедуры
#КонецОбласти
#Область ЗаполнениеНаОсновании
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Или ТипЗнч(ДанныеЗаполнения) = Тип(
		"ДокументСсылка.ВнутреннийЗаказ") Тогда
		Если ДанныеЗаполнения.ИмеютсяНеЗарезервированныеТовары Тогда
			ВызватьИсключение "Запрещено формировать наборку на заказ с отменой резервирования!";
		КонецЕсли;
		ЗаполнитьНаОснованииЗаказа(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНаОснованииЗаказа(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если Не ДанныеЗаполнения.Проведен Тогда
		СтандартнаяОбработка = Ложь;
		ВызватьИсключение "Заказ не проведен.";
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Контрагент = ДанныеЗаполнения.Контрагент;
		РозничныйВидДеятельности=Контрагент.ит_WMS_ВидСкладскойДеятельности
			= Перечисления.ит_WMS_ВидыСкладскойДеятельности.Розничная;
	Иначе
		РозничныйВидДеятельности=Ложь;
	КонецЕсли;
	Склад = ДанныеЗаполнения.Склад;
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	итОснование = ДанныеЗаполнения.Ссылка;
	Организация = ДанныеЗаполнения.Организация;
	СозданНаОснованиСерверногоВызова=Истина;
	МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	//////////// Получение данных настроек wms
	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам("СкладскиеПомещенияПриоритет");
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(НастройкиWMS) Тогда
		итWMSСлужебныеПроцедурыИФункции.WMSОповещениеОТиповыхОшибках(НастройкиWMS);
		ВызватьИсключение "Исключительная ошибка";
	КонецЕсли;
	//////////////////////////////////
	Если РозничныйВидДеятельности Тогда
		ЗапросДанныхПоТоварамВЯчейкахРозница(МенеджерВременныхТаблиц, ДанныеЗаполнения);

		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			Выполнить (ПолучитьСтратегиюНаОснованииРозница().ИмяМетода);
		КонецЦикла;
	Иначе
		ЗапросДанныхПоТоварамВЯчейках(МенеджерВременныхТаблиц, ДанныеЗаполнения);
		СтратегияОпт=ПолучитьСтратегиюНаОснованииОпт();
		НастройкиСтратегии=итWMSСлужебныеПроцедурыИФункции.ПолучитьНастройкиСтратегии(СтратегияОпт);
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			Выполнить (СтратегияОпт.ИмяМетода);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОбработчикЗаполненияПоПриоритету(ТекСтрокаТовары, МенеджерВременныхТаблиц, ДанныеЗаполнения)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст= "ВЫБРАТЬ
				  |	ДанныеПоискаНМ.Склад,
				  |	ДанныеПоискаНМ.Ячейка,
				  |	ДанныеПоискаНМ.Номенклатура,
				  |	ДанныеПоискаНМ.Характеристика,
				  |	ДанныеПоискаНМ.СерияНоменклатуры КАК СерияНоменклатуры,
				  |	ДанныеПоискаНМ.КоличествоОстаток КАК КоличествоОстаток,
				  |	ДанныеПоискаНМ.Коэффициент,
				  |	ДанныеПоискаНМ.Предрасчет,
				  |	ДанныеПоискаНМ.Количество КАК Количество,
				  |	ДанныеПоискаНМ.Качество,
				  |	ДанныеПоискаНМ.ДатаРозлива КАК ДатаРозлива,
				  |	ДанныеПоискаНМ.Ячейка.Ярус КАК Ярус,
				  |	ДанныеПоискаНМ.ИдентификаторУпаковки,
				  |	ДанныеПоискаНМ.Приоритет КАК Приоритет
				  |ИЗ
				  |	ДанныеПоискаНМ КАК ДанныеПоискаНМ
				  |ГДЕ
				  |	ДанныеПоискаНМ.Номенклатура = &Номенклатура
				  |
				  |УПОРЯДОЧИТЬ ПО
				  |	Приоритет,
				  |	ДатаРозлива,
				  |	КоличествоОстаток УБЫВ,
				  |	СерияНоменклатуры,
				  |	Ярус";

	Запрос.УстановитьПараметр("Номенклатура", ТекСтрокаТовары.Номенклатура);
	Результат = Запрос.Выполнить();
	
	// **************************************************************************************************
	Таб = Результат.Выгрузить();

	_ОсталосьОтобрать = ТекСтрокаТовары.Количество;
	_КоличествоНаПаллете = ТекСтрокаТовары.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	Если ДанныеЗаполнения.Контрагент.итОтгрузкаПолнымиПалетами Тогда
		Если _КоличествоНаПаллете <> 0 Тогда
			// первый проход - подбор полных паллет
			Таб.Сортировать( "ДатаРозлива Возр, Количество Убыв, СерияНоменклатуры Возр, Ярус Возр");
			Для Каждого стр Из Таб Цикл
				// Все списано или остаток меньше паллеты
				Если _ОсталосьОтобрать < _КоличествоНаПаллете Тогда
					Прервать;
				КонецЕсли;	
				// Остались остатки меньше паллеты (сортировка по убыванию)
				Если стр.Количество < _КоличествоНаПаллете Тогда
					Продолжить;
				КонецЕсли;

				_КоличествоКОтгрузке = МИН( Цел(_ОсталосьОтобрать / _КоличествоНаПаллете) * _КоличествоНаПаллете, Цел(
					(стр.Количество) / _КоличествоНаПаллете) * _КоличествоНаПаллете);
				
				// сформировать строку							
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.ИдентификаторСтроки=Новый УникальныйИдентификатор;
				НоваяСтрока.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
				НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
				НоваяСтрока.ДатаРозлива=стр.ДатаРозлива;
				//НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
				//НоваяСтрока.ЕдиницаИзмеренияМест = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
				//НоваяСтрока.Коэффициент = ТекСтрокаТовары.Коэффициент;
				//НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
				НоваяСтрока.СерияНоменклатуры = стр.СерияНоменклатуры;
				НоваяСтрока.Характеристика = стр.Характеристика;
				НоваяСтрока.ЯчейкаОтправитель = стр.Ячейка;
				НоваяСтрока.Качество = стр.Качество;
				НоваяСтрока.Количество = _КоличествоКОтгрузке;
				//ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект, Истина);
				////НоваяСтрока.ОбъемУпаковки = ТекСтрокаТовары.ЕдиницаИзмеренияМест.Объем * ТекСтрокаТовары.КоличествоМест;
				////НоваяСтрока.ВесУпаковки = ТекСтрокаТовары.ЕдиницаИзмеренияМест.Вес * ТекСтрокаТовары.КоличествоМест;

				_ОсталосьОтобрать = _ОсталосьОтобрать - _КоличествоКОтгрузке;
				стр.Количество = стр.Количество - _КоличествоКОтгрузке;

			КонецЦикла;
		Иначе
			Сообщить( "Для " + Строка(ТекСтрокаТовары.Номенклатура) + ", ед.изм.мест "
				+ ТекСтрокаТовары.ЕдиницаИзмеренияМест + " не указано количество в паллете.");	
		КонецЕсли
		; 		
		
		//// Второй проход - набрать остатки целым куском. Пересортировываем с учетом уже набранных паллет
		//Таб.Сортировать( "ДатаРозлива Возр, Количество Возр, Ярус Возр" );
		//Для каждого стр из Таб цикл
		//	// Все списано или остаток меньше паллеты
		//	Если _ОсталосьОтобрать = 0  Тогда
		//		Прервать;
		//	КонецЕсли;	
		//	Если стр.Количество >= _ОсталосьОтобрать Тогда 
		//		
		//		НоваяСтрока = Товары.Добавить();
		//		НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
		//		НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
		//		НоваяСтрока.ЕдиницаИзмеренияМест = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
		//		НоваяСтрока.Коэффициент = ТекСтрокаТовары.Коэффициент;
		//		НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
		//		НоваяСтрока.СерияНоменклатуры = стр.СерияНоменклатуры;
		//		НоваяСтрока.Характеристика = стр.Характеристика;
		//		НоваяСтрока.ЯчейкаОтправитель = стр.Ячейка;
		//		НоваяСтрока.Качество = стр.Качество;
		//		_КоличествоКОтгрузке = _ОсталосьОтобрать;
		//		НоваяСтрока.Количество = _КоличествоКОтгрузке;
		//		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект, Истина);
		//		НоваяСтрока.ОбъемУпаковки = ТекСтрокаТовары.ЕдиницаИзмеренияМест.Объем * ТекСтрокаТовары.КоличествоМест;
		//		НоваяСтрока.ВесУпаковки = ТекСтрокаТовары.ЕдиницаИзмеренияМест.Вес * ТекСтрокаТовары.КоличествоМест;
		//		_ОсталосьОтобрать = _ОсталосьОтобрать - _КоличествоКОтгрузке;
		//		стр.Количество = стр.Количество - _КоличествоКОтгрузке;
		//		Прервать;
		//		
		//	КонецЕсли;	
		//КонецЦикла;	
		
		// Третий подбор - подбор "где, сколько есть", но максимально большими кусками.
		Таб.Сортировать( "ДатаРозлива Возр, Количество Убыв, СерияНоменклатуры Возр, Ярус Возр");
	КонецЕсли;	
	
	// Третий подбор или первый для набора по датам розлива
	Для Каждого стр Из Таб Цикл
		// Все списано
		Если _ОсталосьОтобрать = 0 Тогда
			Прервать;
		КонецЕсли;
		Если стр.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.ИдентификаторСтроки=Новый УникальныйИдентификатор;
		НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
		НоваяСтрока.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
		//НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
		//НоваяСтрока.ЕдиницаИзмеренияМест = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
		//НоваяСтрока.Коэффициент = ТекСтрокаТовары.Коэффициент;
		//НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
		НоваяСтрока.ДатаРозлива=стр.ДатаРозлива;
		НоваяСтрока.СерияНоменклатуры = стр.СерияНоменклатуры;
		НоваяСтрока.Характеристика = стр.Характеристика;
		НоваяСтрока.ЯчейкаОтправитель = стр.Ячейка;
		НоваяСтрока.Качество = стр.Качество;

		_КоличествоКОтгрузке = МИН(стр.Количество, _ОсталосьОтобрать);
		НоваяСтрока.Количество = _КоличествоКОтгрузке;
		//ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект, Истина);
		
		//НоваяСтрока.ОбъемУпаковки = ТекСтрокаТовары.ЕдиницаИзмеренияМест.Объем * ТекСтрокаТовары.КоличествоМест;
		//НоваяСтрока.ВесУпаковки = ТекСтрокаТовары.ЕдиницаИзмеренияМест.Вес * ТекСтрокаТовары.КоличествоМест;
		_ОсталосьОтобрать = _ОсталосьОтобрать - _КоличествоКОтгрузке;
		стр.Количество = стр.Количество - _КоличествоКОтгрузке;

	КонецЦикла;
	
	// проверка на нехватку количества!!!
	Если _ОсталосьОтобрать > 0 Тогда
		Сообщить("Внимание! Не хватило количество в ячейках для " + СТРОКА(ТекСтрокаТовары.Номенклатура),
			СтатусСообщения.Важное);
	КонецЕсли;
КонецПроцедуры

#Область СтратегияЗаполненияПоЗонам
#Область СтратегияОбработчикЗаполненияПоЗонам
Процедура ОбработчикЗаполненияПоЗонам(МенеджерВременныхТаблиц, СтрокаОбхода, ДанныеЗаполнения)
	_ОсталосьОтобрать = СтрокаОбхода.Количество;
	_КоличествоНаПаллете = СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	СтруктураПараметров=СтруктураПараметровЗаполненияПоЗонам(МенеджерВременныхТаблиц, СтрокаОбхода, ДанныеЗаполнения);
	Если _КоличествоНаПаллете = 0 Тогда
		Сообщить( "Для " + Строка(СтрокаОбхода.Номенклатура) + ", ед.изм.мест " + СтрокаОбхода.ЕдиницаИзмеренияМест
			+ " не указано количество в паллете.");
		Товары.Очистить();
		Возврат;
	КонецЕсли
	;
	Если _ОсталосьОтобрать <= _КоличествоНаПаллете Тогда
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров, _ОсталосьОтобрать);
		Возврат;
	КонецЕсли
	;

	Если КоличествоТовараВПикингеБольшеСтока(СтруктураПараметров) Тогда
		СтруктураПараметров.Вставить("ОтключитьСообщениеПользователю", Истина);
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров, _ОсталосьОтобрать);
		СтруктураПараметров.Удалить("ОтключитьСообщениеПользователю");
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ОтборПолностьюИзПикинга") Тогда
		Возврат;
	КонецЕсли
	;
	СтруктураПараметров.НомерОбхода=1;
	ЗаполнитьТоварИзЗонаХранения(СтруктураПараметров);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикЗаполненияПоЗонамСУчетомПриорететаСП
Процедура ОбработчикЗаполненияПоЗонамСУчетомПриорететаСП(МенеджерВременныхТаблиц, СтрокаОбхода, ДанныеЗаполнения,
	НастройкиWMS)
	Если СтрокаОбхода.НомерСтроки = 1 Тогда
		Если Не НастройкиWMS.Свойство("СкладскиеПомещенияПриоритет") Тогда
			ВызватьИсключение "Отсутствуютданные по приоритету <<СкладскиеПомещенияПриоритет>> ";
		КонецЕсли;
		ИзменитьПриорететДанныеНМ(МенеджерВременныхТаблиц, НастройкиWMS);
	КонецЕсли;
	_ОсталосьОтобрать = СтрокаОбхода.Количество;
	_КоличествоНаПаллете = СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	СтруктураПараметров=СтруктураПараметровЗаполненияПоЗонам(МенеджерВременныхТаблиц, СтрокаОбхода, ДанныеЗаполнения);
	Если _КоличествоНаПаллете = 0 Тогда
		Сообщить( "Для " + Строка(СтрокаОбхода.Номенклатура) + ", ед.изм.мест " + СтрокаОбхода.ЕдиницаИзмеренияМест
			+ " не указано количество в паллете.");
		Товары.Очистить();
		Возврат;
	КонецЕсли
	;
	Если _ОсталосьОтобрать <= _КоличествоНаПаллете Тогда
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров, _ОсталосьОтобрать);
		Возврат;
	КонецЕсли
	;

	Если КоличествоТовараВПикингеБольшеСтока(СтруктураПараметров) Тогда
		СтруктураПараметров.Вставить("ОтключитьСообщениеПользователю", Истина);
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров, _ОсталосьОтобрать);
		СтруктураПараметров.Удалить("ОтключитьСообщениеПользователю");
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ОтборПолностьюИзПикинга") Тогда
		Возврат;
	КонецЕсли
	;
	СтруктураПараметров.НомерОбхода=1;
	ЗаполнитьТоварИзЗонаХранения(СтруктураПараметров);

КонецПроцедуры
Процедура ИзменитьПриорететДанныеНМ(МенеджерВременныхТаблиц, НастройкиWMS)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст= "ВЫБРАТЬ
				  |	ТаблицаПриоритетовСП.СкладскоеПомещение,
				  |	ТаблицаПриоритетовСП.Приоритет
				  |ПОМЕСТИТЬ ТаблицаПриоритетов
				  |ИЗ
				  |	&ТаблицаПриоритетовСП КАК ТаблицаПриоритетовСП
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ТаблицаПриоритетов.СкладскоеПомещение,
				  |	МАКСИМУМ(ТаблицаПриоритетов.Приоритет) КАК Приоритет
				  |ПОМЕСТИТЬ ТаблицаПриоритетовГруппировка
				  |ИЗ
				  |	ТаблицаПриоритетов КАК ТаблицаПриоритетов
				  |
				  |СГРУППИРОВАТЬ ПО
				  |	ТаблицаПриоритетов.СкладскоеПомещение
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ДанныеПоискаНМ.Склад,
				  |	ДанныеПоискаНМ.Ячейка КАК Ячейка,
				  |	ДанныеПоискаНМ.Номенклатура,
				  |	ДанныеПоискаНМ.Характеристика,
				  |	ДанныеПоискаНМ.СерияНоменклатуры КАК СерияНоменклатуры,
				  |	ДанныеПоискаНМ.КоличествоОстаток КАК КоличествоОстаток,
				  |	ДанныеПоискаНМ.Коэффициент,
				  |	ДанныеПоискаНМ.Предрасчет,
				  |	ДанныеПоискаНМ.Количество КАК Количество,
				  |	ДанныеПоискаНМ.Качество,
				  |	ДанныеПоискаНМ.ДатаРозлива КАК ДатаРозлива,
				  |	ДанныеПоискаНМ.Ячейка.Ярус КАК Ярус,
				  |	ДанныеПоискаНМ.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
				  |	ЕСТЬNULL(ТаблицаПриоритетовГруппировка.Приоритет, 99) КАК Приоритет,
				  |	ДанныеПоискаНМ.ЯчейкаЗона КАК ЯчейкаЗона
				  |ПОМЕСТИТЬ ВТ
				  |ИЗ
				  |	ДанныеПоискаНМ КАК ДанныеПоискаНМ
				  |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПриоритетовГруппировка КАК ТаблицаПриоритетовГруппировка
				  |		ПО ДанныеПоискаНМ.Ячейка.СкладскоеПомещение = ТаблицаПриоритетовГруппировка.СкладскоеПомещение
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |УНИЧТОЖИТЬ ДанныеПоискаНМ
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ВТ.Склад,
				  |	ВТ.Ячейка,
				  |	ВТ.Номенклатура,
				  |	ВТ.Характеристика,
				  |	ВТ.СерияНоменклатуры,
				  |	ВТ.КоличествоОстаток,
				  |	ВТ.Коэффициент,
				  |	ВТ.Предрасчет,
				  |	ВТ.Количество,
				  |	ВТ.Качество,
				  |	ВТ.ДатаРозлива,
				  |	ВТ.Ярус,
				  |	ВТ.ИдентификаторУпаковки,
				  |	ВТ.Приоритет,
				  |	ВТ.ЯчейкаЗона
				  |ПОМЕСТИТЬ ДанныеПоискаНМ
				  |ИЗ
				  |	ВТ КАК ВТ";

	Запрос.УстановитьПараметр("ТаблицаПриоритетовСП", НастройкиWMS.СкладскиеПомещенияПриоритет);
	Запрос.Выполнить();

КонецПроцедуры
#КонецОбласти

#Область ОбработчикЗаполненияПоПриорететамСПИЗонамБезИсИзлишкамиПаллет
Процедура ОбработчикЗаполненияПоПриорететамСПИЗонам(МенеджерВременныхТаблиц, СтрокаОбхода, ДанныеЗаполнения,
	НастройкиWMS)
	Если Не НастройкиWMS.Свойство("СкладскиеПомещенияПриоритет") Тогда
		ВызватьИсключение "Отсутствуютданные по приоритету <<СкладскиеПомещенияПриоритет>> ";
	КонецЕсли;
	НастройкиWMS.СкладскиеПомещенияПриоритет.Сортировать("Приоритет");
	_ОсталосьОтобрать = СтрокаОбхода.Количество;
	_КоличествоНаПаллете = СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	СтруктураПараметров=СтруктураПараметровЗаполненияПоЗонам(МенеджерВременныхТаблиц, СтрокаОбхода, ДанныеЗаполнения);
	Если _КоличествоНаПаллете = 0 Тогда
		итWMSОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Для " + Строка(СтрокаОбхода.Номенклатура)
			+ ", ед.изм.мест " + СтрокаОбхода.ЕдиницаИзмеренияМест + " не указано количество в паллете.");
		Товары.Очистить();
		Возврат;
	КонецЕсли
	;
	Для Каждого стр Из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
		Если _ОсталосьОтобрать = 0 Тогда
			Возврат;
		КонецЕсли;
		СтруктураПараметров.Вставить("СкладскоеПомещение", стр.СкладскоеПомещение);
		Если _ОсталосьОтобрать <= _КоличествоНаПаллете Тогда
			
			//@skip-check query-in-loop
			ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров, _ОсталосьОтобрать);
			СтруктураПараметров.НомерОбхода=1;
			Продолжить;
		КонецЕсли;
		Если _ОсталосьОтобрать = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		//@skip-check query-in-loop
		Если КоличествоТовараВПикингеБольшеСтока(СтруктураПараметров) Тогда
			_ОсталосьОтобратьБуфер=_ОсталосьОтобрать;
			СтруктураПараметров.Вставить("ИзлишекОтобрано", 0);
			//@skip-check query-in-loop
			ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров, _ОсталосьОтобрать);
			_ОсталосьОтобрать=_ОсталосьОтобратьБуфер - СтруктураПараметров.ИзлишекОтобрано;
			СтруктураПараметров.Удалить("ИзлишекОтобрано");
			Если _ОсталосьОтобрать = 0 Тогда
				Возврат;
			КонецЕсли
			;
		КонецЕсли;
		СтруктураПараметров.НомерОбхода=1;
		
		//@skip-check query-in-loop
		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениям(СтруктураПараметров, _ОсталосьОтобрать);
		СтруктураПараметров.НомерОбхода=1;
	КонецЦикла;
	Если _ОсталосьОтобрать = 0 Тогда
		Возврат;
	КонецЕсли;
	Если _ОсталосьОтобрать <= _КоличествоНаПаллете Тогда
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров, _ОсталосьОтобрать);
		Возврат;
	КонецЕсли
	;

	Если КоличествоТовараВПикингеБольшеСтока(СтруктураПараметров) Тогда
		СтруктураПараметров.Вставить("ОтключитьСообщениеПользователю", Истина);
		_ОсталосьОтобратьБуфер=_ОсталосьОтобрать;
		СтруктураПараметров.Вставить("ИзлишекОтобрано", 0);
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров, _ОсталосьОтобрать);
		_ОсталосьОтобрать=_ОсталосьОтобратьБуфер - СтруктураПараметров.ИзлишекОтобрано;
		СтруктураПараметров.Удалить("ИзлишекОтобрано");
		СтруктураПараметров.Удалить("ОтключитьСообщениеПользователю");
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ОтборПолностьюИзПикинга") Тогда
		Возврат;
	КонецЕсли
	;
	СтруктураПараметров.НомерОбхода=1;
	ЗаполнитьТоварИзЗонаХранения(СтруктураПараметров, _ОсталосьОтобрать);

КонецПроцедуры
Процедура ОбработчикЗаполненияПоПриорететамСПИЗонамБезИзлишковИПаллеты(МенеджерВременныхТаблиц, СтрокаОбхода,
	ДанныеЗаполнения, НастройкиWMS)
	Если Не НастройкиWMS.Свойство("СкладскиеПомещенияПриоритет") Тогда
		ВызватьИсключение "Отсутствуютданные по приоритету <<СкладскиеПомещенияПриоритет>> ";
	КонецЕсли;
	НастройкиWMS.СкладскиеПомещенияПриоритет.Сортировать("Приоритет");
	_ОсталосьОтобрать = СтрокаОбхода.Количество;
	_КоличествоНаПаллете = СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	СтруктураПараметров=СтруктураПараметровЗаполненияПоЗонам(МенеджерВременныхТаблиц, СтрокаОбхода, ДанныеЗаполнения);
	Если _КоличествоНаПаллете = 0 Тогда
		итWMSОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Для " + Строка(СтрокаОбхода.Номенклатура)
			+ ", ед.изм.мест " + СтрокаОбхода.ЕдиницаИзмеренияМест + " не указано количество в паллете.");
		Товары.Очистить();
		Возврат;
	КонецЕсли
	;
	Для Каждого стр Из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
		Если _ОсталосьОтобрать = 0 Тогда
			Возврат;
		КонецЕсли;
		СтруктураПараметров.Вставить("СкладскоеПомещение", стр.СкладскоеПомещение);
		Если _ОсталосьОтобрать < _КоличествоНаПаллете Тогда
			
			//@skip-check query-in-loop
			ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров, _ОсталосьОтобрать);
			СтруктураПараметров.НомерОбхода=1;
			Продолжить;
		КонецЕсли;
		Если _ОсталосьОтобрать = 0 Тогда
			Возврат;
		КонецЕсли;

		СтруктураПараметров.НомерОбхода=1;
		
		//@skip-check query-in-loop
		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениям(СтруктураПараметров, _ОсталосьОтобрать);
		СтруктураПараметров.НомерОбхода=1;
	КонецЦикла;
	Если _ОсталосьОтобрать = 0 Тогда
		Возврат;
	КонецЕсли;
	Если _ОсталосьОтобрать < _КоличествоНаПаллете Тогда
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров, _ОсталосьОтобрать);
		Возврат;
	КонецЕсли
	;

	СтруктураПараметров.НомерОбхода=1;
	ЗаполнитьТоварИзЗонаХранения(СтруктураПараметров, _ОсталосьОтобрать);

КонецПроцедуры

Процедура ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров, _ОсталосьОтобрать = 0)
	_КоличествоНаПаллете = СтруктураПараметров.СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	ОтгрузкаКлиентуЦелымиПаллетами= СтруктураПараметров.ДанныеЗаполнения.Контрагент.итОтгрузкаПолнымиПалетами;
	ЗаполнятьИзлишекОтобрано=Ложь;
	Если _ОсталосьОтобрать < _КоличествоНаПаллете Тогда
		ОтгрузкаКлиентуЦелымиПаллетами=Ложь;
	КонецЕсли;
	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонамИСкладскимПомещениям(СтруктураПараметров.МенеджерВременныхТаблиц,
		СтруктураПараметров.СтрокаОбхода.Номенклатура, Перечисления.итWMSЗоныСклада.Пикинга,
		СтруктураПараметров.СкладскоеПомещение);
	ТаблицаЗарезервированныхДанных=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоговПоЗоне.Следующий() Цикл
		Если СтруктураПараметров.Свойство("ОтборИзлишкаПаллетПикинга") Тогда
			Если СтруктураПараметров.ОтборИзлишкаПаллетПикинга Тогда
				Если СтруктураПараметров.РазрешенноеКоличествоОтбораПикинга < _ОсталосьОтобрать Тогда
					_ОсталосьОтобрать=СтруктураПараметров.РазрешенноеКоличествоОтбораПикинга;
				КонецЕсли;
				ЗаполнятьИзлишекОтобрано=Истина;
			КонецЕсли;
		КонецЕсли;
		ОстатокИтогоПоЗоне=ВыборкаИтоговПоЗоне.Количество;
		ВыборкаДетальныхЗаписей=ВыборкаИтоговПоЗоне.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			Если _ОсталосьОтобрать <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если ВыборкаДетальныхЗаписей.Количество < _КоличествоНаПаллете И ОтгрузкаКлиентуЦелымиПаллетами
				И СтруктураПараметров.НомерОбхода = 1 Тогда
				ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне - ВыборкаДетальныхЗаписей.Количество;
				Продолжить;
			КонецЕсли;
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки=Новый УникальныйИдентификатор;
			НоваяСтрока.Номенклатура=ВыборкаДетальныхЗаписей.Номенклатура;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДетальныхЗаписей.ИдентификаторУпаковки;
			НоваяСтрока.Качество=ВыборкаДетальныхЗаписей.Качество;
			НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныхЗаписей.СерияНоменклатуры;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.ДатаРозлива;
			НоваяСтрока.Характеристика=ВыборкаДетальныхЗаписей.Характеристика;
			НоваяСтрока.ЯчейкаОтправитель=ВыборкаДетальныхЗаписей.Ячейка;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.СерияНоменклатуры.ДатаПроизводства;
			Если _ОсталосьОтобрать <= ВыборкаДетальныхЗаписей.Количество Тогда
				НоваяСтрока.Количество=_ОсталосьОтобрать;
			Иначе
				НоваяСтрока.Количество=ВыборкаДетальныхЗаписей.Количество;
			КонецЕсли;
			Если ЗаполнятьИзлишекОтобрано Тогда
				СтруктураПараметров.ИзлишекОтобрано=СтруктураПараметров.ИзлишекОтобрано + НоваяСтрока.Количество;
			КонецЕсли;
			_ОсталосьОтобрать=_ОсталосьОтобрать - НоваяСтрока.Количество;
			НоваяСтрокаРезерва=ТаблицаЗарезервированныхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва, ВыборкаДетальныхЗаписей);
			НоваяСтрокаРезерва.Количество=НоваяСтрока.Количество;
			ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне - НоваяСтрока.Количество;
		КонецЦикла;
		
		//@skip-check query-in-loop
		ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц, ТаблицаЗарезервированныхДанных);
	КонецЦикла;
	Если _ОсталосьОтобрать > 0 Тогда
		Если СтруктураПараметров.НомерОбхода = 1 И ОтгрузкаКлиентуЦелымиПаллетами Тогда
			СтруктураПараметров.НомерОбхода=2;
			ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров, _ОсталосьОтобрать);
			Возврат;
		КонецЕсли
		;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ОтборИзлишкаПаллетПикинга") Тогда
		СтруктураПараметров.Удалить("ОтборИзлишкаПаллетПикинга");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениям(СтруктураПараметров, _ОсталосьОтобрать)

	_КоличествоНаПаллете = СтруктураПараметров.СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	ОтгрузкаКлиентуЦелымиПаллетами= СтруктураПараметров.ДанныеЗаполнения.Контрагент.итОтгрузкаПолнымиПалетами;
	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонамИСкладскимПомещениям(СтруктураПараметров.МенеджерВременныхТаблиц,
		СтруктураПараметров.СтрокаОбхода.Номенклатура, Перечисления.итWMSЗоныСклада.Хранения,
		СтруктураПараметров.СкладскоеПомещение);
	ТаблицаЗарезервированныхДанных=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоговПоЗоне.Следующий() Цикл

		Если ВыборкаИтоговПоЗоне.Количество < _КоличествоНаПаллете И ОтгрузкаКлиентуЦелымиПаллетами Тогда
			СтруктураПараметров.НомерОбхода=2;
		КонецЕсли;
		ОстатокИтогоПоЗоне=ВыборкаИтоговПоЗоне.Количество;

		ВыборкаДетальныхЗаписей=ВыборкаИтоговПоЗоне.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			Если _ОсталосьОтобрать <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если ВыборкаДетальныхЗаписей.Количество < _КоличествоНаПаллете И ОтгрузкаКлиентуЦелымиПаллетами
				И СтруктураПараметров.НомерОбхода = 1 Тогда
				ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне - ВыборкаДетальныхЗаписей.Количество;
				Продолжить;
			КонецЕсли;
			Если _ОсталосьОтобрать < _КоличествоНаПаллете Тогда
				
				//@skip-check query-in-loop
				ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц,
					ТаблицаЗарезервированныхДанных);
				СтруктураПараметров.НомерОбхода=1;
				
				//@skip-check query-in-loop
				ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров, _ОсталосьОтобрать);
				Возврат;
			КонецЕсли
			;
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки=Новый УникальныйИдентификатор;
			НоваяСтрока.Номенклатура=ВыборкаДетальныхЗаписей.Номенклатура;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДетальныхЗаписей.ИдентификаторУпаковки;
			НоваяСтрока.Качество=ВыборкаДетальныхЗаписей.Качество;
			НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныхЗаписей.СерияНоменклатуры;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.ДатаРозлива;
			НоваяСтрока.Характеристика=ВыборкаДетальныхЗаписей.Характеристика;
			НоваяСтрока.ЯчейкаОтправитель=ВыборкаДетальныхЗаписей.Ячейка;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.СерияНоменклатуры.ДатаПроизводства;
			Если _ОсталосьОтобрать <= ВыборкаДетальныхЗаписей.Количество Тогда
				НоваяСтрока.Количество=_ОсталосьОтобрать;
			Иначе
				НоваяСтрока.Количество=ВыборкаДетальныхЗаписей.Количество;
			КонецЕсли;
			_ОсталосьОтобрать=_ОсталосьОтобрать - НоваяСтрока.Количество;
			НоваяСтрокаРезерва=ТаблицаЗарезервированныхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва, ВыборкаДетальныхЗаписей);
			НоваяСтрокаРезерва.Количество=НоваяСтрока.Количество;
			ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне - НоваяСтрока.Количество;
		КонецЦикла;
		
		//@skip-check query-in-loop
		ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц, ТаблицаЗарезервированныхДанных);
	КонецЦикла;
	Если _ОсталосьОтобрать > 0 Тогда
		Если СтруктураПараметров.НомерОбхода = 1 И ОтгрузкаКлиентуЦелымиПаллетами Тогда
			СтруктураПараметров.НомерОбхода=2;
			ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениям(СтруктураПараметров, _ОсталосьОтобрать);
			Возврат;
		КонецЕсли
		;
		СтруктураПараметров.НомерОбхода=1;
		ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров, _ОсталосьОтобрать);
	КонецЕсли
	;
КонецПроцедуры

#КонецОбласти
Процедура ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров, _ОсталосьОтобрать = 0)
	_КоличествоНаПаллете = СтруктураПараметров.СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	ОтгрузкаКлиентуЦелымиПаллетами= СтруктураПараметров.ДанныеЗаполнения.Контрагент.итОтгрузкаПолнымиПалетами;
	ЗаполнятьИзлишекОтобрано=Ложь;
	Если _ОсталосьОтобрать < _КоличествоНаПаллете Тогда
		ОтгрузкаКлиентуЦелымиПаллетами=Ложь;
	КонецЕсли;
	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонам(СтруктураПараметров.МенеджерВременныхТаблиц,
		СтруктураПараметров.СтрокаОбхода.Номенклатура, Перечисления.итWMSЗоныСклада.Пикинга);
	ТаблицаЗарезервированныхДанных=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоговПоЗоне.Следующий() Цикл
		Если ВыборкаИтоговПоЗоне.Количество < _ОсталосьОтобрать И Не СтруктураПараметров.Свойство(
			"ОтборИзлишкаПаллетПикинга") Тогда
			Если Не СтруктураПараметров.Свойство("ОтключитьСообщениеПользователю") Тогда
				Сообщить("не хватает товара " + СтруктураПараметров.СтрокаОбхода.Номенклатура + " в количестве "
					+ Строка(_ОсталосьОтобрать - ВыборкаИтоговПоЗоне.Количество));
			КонецЕсли;
			Возврат;
		КонецЕсли
		;
		Если СтруктураПараметров.Свойство("ОтборИзлишкаПаллетПикинга") Тогда
			Если СтруктураПараметров.ОтборИзлишкаПаллетПикинга Тогда
				Если СтруктураПараметров.РазрешенноеКоличествоОтбораПикинга < _ОсталосьОтобрать Тогда
					_ОсталосьОтобрать=СтруктураПараметров.РазрешенноеКоличествоОтбораПикинга;
					СтруктураПараметров.Вставить("ОтборРазрешенногоКоличество", Истина);
				Иначе
					СтруктураПараметров.Вставить("ОтборПолностьюИзПикинга", Истина);
				КонецЕсли;
				Если СтруктураПараметров.Свойство("ИзлишекОтобрано") Тогда
					ЗаполнятьИзлишекОтобрано=Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ОстатокИтогоПоЗоне=ВыборкаИтоговПоЗоне.Количество;
		ВыборкаДетальныхЗаписей=ВыборкаИтоговПоЗоне.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			Если _ОсталосьОтобрать <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если ВыборкаДетальныхЗаписей.Количество < _КоличествоНаПаллете И ОтгрузкаКлиентуЦелымиПаллетами
				И СтруктураПараметров.НомерОбхода = 1 Тогда
				ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне - ВыборкаДетальныхЗаписей.Количество;
				Продолжить;
			КонецЕсли;
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки=Новый УникальныйИдентификатор;
			НоваяСтрока.Номенклатура=ВыборкаДетальныхЗаписей.Номенклатура;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДетальныхЗаписей.ИдентификаторУпаковки;
			НоваяСтрока.Качество=ВыборкаДетальныхЗаписей.Качество;
			НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныхЗаписей.СерияНоменклатуры;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.ДатаРозлива;
			НоваяСтрока.Характеристика=ВыборкаДетальныхЗаписей.Характеристика;
			НоваяСтрока.ЯчейкаОтправитель=ВыборкаДетальныхЗаписей.Ячейка;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.СерияНоменклатуры.ДатаПроизводства;
			Если _ОсталосьОтобрать <= ВыборкаДетальныхЗаписей.Количество Тогда
				НоваяСтрока.Количество=_ОсталосьОтобрать;
			Иначе
				НоваяСтрока.Количество=ВыборкаДетальныхЗаписей.Количество;
			КонецЕсли;
			Если ЗаполнятьИзлишекОтобрано Тогда
				СтруктураПараметров.ИзлишекОтобрано=СтруктураПараметров.ИзлишекОтобрано + НоваяСтрока.Количество;
			КонецЕсли;
			_ОсталосьОтобрать=_ОсталосьОтобрать - НоваяСтрока.Количество;
			НоваяСтрокаРезерва=ТаблицаЗарезервированныхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва, ВыборкаДетальныхЗаписей);
			НоваяСтрокаРезерва.Количество=НоваяСтрока.Количество;
			ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне - НоваяСтрока.Количество;
		КонецЦикла;
		
		//@skip-check query-in-loop
		ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц, ТаблицаЗарезервированныхДанных);
	КонецЦикла;
	Если _ОсталосьОтобрать > 0 Тогда
		Если СтруктураПараметров.НомерОбхода = 1 И ОтгрузкаКлиентуЦелымиПаллетами Тогда
			СтруктураПараметров.НомерОбхода=2;
			ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров, _ОсталосьОтобрать);
			Возврат;
		КонецЕсли
		;
		Если Не СтруктураПараметров.Свойство("ОтключитьСообщениеПользователю") Тогда
			Сообщить(" не хватает  товара  " + СтруктураПараметров.СтрокаОбхода.Номенклатура + " в количестве "
				+ Строка(_ОсталосьОтобрать));
		КонецЕсли;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ОтборИзлишкаПаллетПикинга") Тогда
		СтруктураПараметров.Удалить("ОтборИзлишкаПаллетПикинга");
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТоварИзЗонаХранения(СтруктураПараметров, _ОсталосьОтобрать = Неопределено)
	Если _ОсталосьОтобрать = Неопределено Тогда
		Если СтруктураПараметров.Свойство("ОтборРазрешенногоКоличество") Тогда
			_ОсталосьОтобрать = СтруктураПараметров.СтрокаОбхода.Количество
				- СтруктураПараметров.РазрешенноеКоличествоОтбораПикинга;
		Иначе
			_ОсталосьОтобрать = СтруктураПараметров.СтрокаОбхода.Количество;
		КонецЕсли;
	КонецЕсли;

	_КоличествоНаПаллете = СтруктураПараметров.СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	ОтгрузкаКлиентуЦелымиПаллетами= СтруктураПараметров.ДанныеЗаполнения.Контрагент.итОтгрузкаПолнымиПалетами;
	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонам(СтруктураПараметров.МенеджерВременныхТаблиц,
		СтруктураПараметров.СтрокаОбхода.Номенклатура, Перечисления.итWMSЗоныСклада.Хранения);
	ТаблицаЗарезервированныхДанных=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоговПоЗоне.Следующий() Цикл
		//Если ВыборкаИтоговПоЗоне.Количество<_ОсталосьОтобрать Тогда 
		//	ЗаполненитьТовараИзЗонаПикинга(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения,_ОсталосьОтобрать);
		//	Возврат
		//КонецЕсли;	
		Если ВыборкаИтоговПоЗоне.Количество < _КоличествоНаПаллете И ОтгрузкаКлиентуЦелымиПаллетами Тогда 
			//ЗаполнитьТоварИзЗонаПикинга(МенеджерВременныхТаблиц,СтрокаОбхода,ДанныеЗаполнения,_ОсталосьОтобрать);
			//Возврат
			СтруктураПараметров.НомерОбхода=2;
		КонецЕсли;
		ОстатокИтогоПоЗоне=ВыборкаИтоговПоЗоне.Количество;

		ВыборкаДетальныхЗаписей=ВыборкаИтоговПоЗоне.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			Если _ОсталосьОтобрать <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если ВыборкаДетальныхЗаписей.Количество < _КоличествоНаПаллете И ОтгрузкаКлиентуЦелымиПаллетами
				И СтруктураПараметров.НомерОбхода = 1 Тогда
				ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне - ВыборкаДетальныхЗаписей.Количество;
				Продолжить;
			КонецЕсли;
			Если _ОсталосьОтобрать < _КоличествоНаПаллете Тогда
				
				//@skip-check query-in-loop
				ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц,
					ТаблицаЗарезервированныхДанных);
				СтруктураПараметров.НомерОбхода=1;
				
				//@skip-check query-in-loop
				ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров, _ОсталосьОтобрать);
				Возврат;
			КонецЕсли
			;
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки=Новый УникальныйИдентификатор;
			НоваяСтрока.Номенклатура=ВыборкаДетальныхЗаписей.Номенклатура;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДетальныхЗаписей.ИдентификаторУпаковки;
			НоваяСтрока.Качество=ВыборкаДетальныхЗаписей.Качество;
			НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныхЗаписей.СерияНоменклатуры;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.ДатаРозлива;
			НоваяСтрока.Характеристика=ВыборкаДетальныхЗаписей.Характеристика;
			НоваяСтрока.ЯчейкаОтправитель=ВыборкаДетальныхЗаписей.Ячейка;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.СерияНоменклатуры.ДатаПроизводства;
			Если _ОсталосьОтобрать <= ВыборкаДетальныхЗаписей.Количество Тогда
				НоваяСтрока.Количество=_ОсталосьОтобрать;
			Иначе
				НоваяСтрока.Количество=ВыборкаДетальныхЗаписей.Количество;
			КонецЕсли;
			_ОсталосьОтобрать=_ОсталосьОтобрать - НоваяСтрока.Количество;
			НоваяСтрокаРезерва=ТаблицаЗарезервированныхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва, ВыборкаДетальныхЗаписей);
			НоваяСтрокаРезерва.Количество=НоваяСтрока.Количество;
			ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне - НоваяСтрока.Количество;
		КонецЦикла;
		
		//@skip-check query-in-loop
		ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц, ТаблицаЗарезервированныхДанных);
	КонецЦикла;
	Если _ОсталосьОтобрать > 0 Тогда
		Если СтруктураПараметров.НомерОбхода = 1 И ОтгрузкаКлиентуЦелымиПаллетами Тогда
			СтруктураПараметров.НомерОбхода=2;
			ЗаполнитьТоварИзЗонаХранения(СтруктураПараметров, _ОсталосьОтобрать);
			Возврат;
		КонецЕсли
		;
		СтруктураПараметров.НомерОбхода=1;
		ЗаполнитьТоварИзЗонаПикинга(СтруктураПараметров, _ОсталосьОтобрать);
	КонецЕсли
	;
КонецПроцедуры

#КонецОбласти

#Область СквозныеСтратегии

#Область ОбработчикЗаполненияСквознойПоСПиЗонам
Процедура ОбработчикЗаполненияСквознойПоСПиЗонам(МенеджерВременныхТаблиц, СтрокаОбхода, ДанныеЗаполнения,
	НастройкиСтратегии)
	Если Не НастройкиСтратегии.Свойство("ТаблицаПриоритетаСП") Тогда
		ВызватьИсключение "Отсутствуютданные по приоритету <<СкладскиеПомещенияПриоритет>> ";
	КонецЕсли;
	/////++needfix На время интеграции, потом заменить на оригинальное название
	НастройкиСтратегии.Вставить("СкладскиеПомещенияПриоритет", НастройкиСтратегии.ТаблицаПриоритетаСП);
	//////////--needfix
	НастройкиСтратегии.СкладскиеПомещенияПриоритет.Сортировать("Приоритет");
	_ОсталосьОтобрать = СтрокаОбхода.Количество;
	_КоличествоНаПаллете = СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете;
	Если _КоличествоНаПаллете = 0 Тогда
		Сообщить( "Для " + Строка(СтрокаОбхода.Номенклатура) + ", ед.изм.мест " + СтрокаОбхода.ЕдиницаИзмеренияМест
			+ " не указано количество в паллете.");
		Товары.Очистить();
		Возврат;
	КонецЕсли
	;
	СтруктураПараметров=СтруктураПараметровЗаполненияПоЗонам(МенеджерВременныхТаблиц, СтрокаОбхода, ДанныеЗаполнения);
	СтруктураПараметров.Вставить("ОтгрузкаКлиентуЦелымиПаллетами",
		СтруктураПараметров.ДанныеЗаполнения.Контрагент.итОтгрузкаПолнымиПалетами);
	СтруктураПараметров.Вставить("КоличествоНаПаллете", _КоличествоНаПаллете);
	Если _ОсталосьОтобрать < _КоличествоНаПаллете Тогда
		АлгоритмСтрокиСковознойСПМеньшеПаллеты(СтруктураПараметров, НастройкиСтратегии, _ОсталосьОтобрать);
	Иначе
		АлгоритсСквознойСПБольшеПаллеты(СтруктураПараметров, НастройкиСтратегии, _ОсталосьОтобрать);
	КонецЕсли;
	Если _ОсталосьОтобрать > 0 Тогда
		СтруктураПараметров.НомерОбхода=1;
		МассивСкладскихПомещений=ПолучитьМассивСкладсихПомещений();
		СтруктураПараметров.Вставить("МассивСкладскихПомещений", МассивСкладскихПомещений);
		Если _ОсталосьОтобрать < _КоличествоНаПаллете Тогда
			АлгоритмСтрокиСковознойМеньшеПаллетыМассивСП(СтруктураПараметров, НастройкиСтратегии, _ОсталосьОтобрать);
		Иначе
			АлгоритсСквознойБольшеПаллетыМассивСП(СтруктураПараметров, НастройкиСтратегии, _ОсталосьОтобрать);
		КонецЕсли;
	КонецЕсли;
	Если _ОсталосьОтобрать > 0 Тогда
		Сообщить("Для номенклатуры " + Строка(СтрокаОбхода.Номенклатура) + " не удалось найти " + Строка(
			_ОсталосьОтобрать));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
Процедура АлгоритмСтрокиСковознойМеньшеПаллетыМассивСП(СтруктураПараметров, НастройкиWMS, _ОсталосьОтобрать)
	СтруктураПараметров.НомерОбхода=3;
	СтруктураПараметров.Вставить("СкладскоеПомещение", СтруктураПараметров.МассивСкладскихПомещений);
	ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениям(СтруктураПараметров, _ОсталосьОтобрать);
	Если _ОсталосьОтобрать > 0 Тогда
		СтруктураПараметров.Вставить("СкладскоеПомещение", СтруктураПараметров.МассивСкладскихПомещений);
		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров, _ОсталосьОтобрать);
	КонецЕсли;
КонецПроцедуры

Процедура АлгоритсСквознойБольшеПаллетыМассивСП(СтруктураПараметров, НастройкиWMS, _ОсталосьОтобрать)

	СтруктураПараметров.Вставить("СкладскоеПомещение", СтруктураПараметров.МассивСкладскихПомещений);
	ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров, _ОсталосьОтобрать);
	Если _ОсталосьОтобрать > 0 Тогда
		СтруктураПараметров.Вставить("СкладскоеПомещение", СтруктураПараметров.МассивСкладскихПомещений);
		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров, _ОсталосьОтобрать);
		//СтруктураПараметров.Вставить("СкладскоеПомещение",СтруктураПараметров.МассивСкладскихПомещений);
		//ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров,_ОсталосьОтобрать);
	КонецЕсли;
	СтруктураПараметров.НомерОбхода=2;
	Если _ОсталосьОтобрать > 0 Тогда
		СтруктураПараметров.Вставить("СкладскоеПомещение", СтруктураПараметров.МассивСкладскихПомещений);
		ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров, _ОсталосьОтобрать);
	КонецЕсли;
	//Если СтруктураПараметров.ОтгрузкаКлиентуЦелымиПаллетами Тогда 
	//	Если _ОсталосьОтобрать >0 и _ОсталосьОтобрать>СтруктураПараметров.КоличествоНаПаллете Тогда
	//		СтруктураПараметров.Вставить("СкладскоеПомещение",СтруктураПараметров.МассивСкладскихПомещений);
	//		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров,_ОсталосьОтобрать);
	//	КонецЕсли;
	//КонецЕсли;
	Если _ОсталосьОтобрать > 0 Тогда
		СтруктураПараметров.НомерОбхода=3;
		СтруктураПараметров.Вставить("СкладскоеПомещение", СтруктураПараметров.МассивСкладскихПомещений);
		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров, _ОсталосьОтобрать);
	КонецЕсли;

КонецПроцедуры

Процедура АлгоритсСквознойСПБольшеПаллеты(СтруктураПараметров, НастройкиWMS, _ОсталосьОтобрать)
	Для Каждого стр Из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
		Если _ОсталосьОтобрать < СтруктураПараметров.КоличествоНаПаллете Тогда
			Прервать;
		КонецЕсли;
		СтруктураПараметров.Вставить("СкладскоеПомещение", стр.СкладскоеПомещение);
		
		//@skip-check query-in-loop
		ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров, _ОсталосьОтобрать);
	КонецЦикла;
	Если _ОсталосьОтобрать > 0 Тогда
		Для Каждого стр Из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
			Если _ОсталосьОтобрать <= 0 Тогда
				Прервать;
			КонецЕсли;
			СтруктураПараметров.Вставить("СкладскоеПомещение", стр.СкладскоеПомещение);
			
			//@skip-check query-in-loop
			ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров, _ОсталосьОтобрать);
		КонецЦикла;
	КонецЕсли;
	СтруктураПараметров.НомерОбхода=2;
	Если _ОсталосьОтобрать > 0 Тогда
		Для Каждого стр Из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
			Если _ОсталосьОтобрать <= 0 Тогда
				Прервать;
			КонецЕсли;
			СтруктураПараметров.Вставить("СкладскоеПомещение", стр.СкладскоеПомещение);
			
			//@skip-check query-in-loop
			ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров, _ОсталосьОтобрать);
		КонецЦикла;
	КонецЕсли;
	Если СтруктураПараметров.ОтгрузкаКлиентуЦелымиПаллетами Тогда
		Если _ОсталосьОтобрать > 0 И _ОсталосьОтобрать > СтруктураПараметров.КоличествоНаПаллете Тогда
			Для Каждого стр Из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
				Если _ОсталосьОтобрать < СтруктураПараметров.КоличествоНаПаллете Тогда
					Прервать;
				КонецЕсли;
				СтруктураПараметров.Вставить("СкладскоеПомещение", стр.СкладскоеПомещение);
				
				//@skip-check query-in-loop
				ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров, _ОсталосьОтобрать);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если _ОсталосьОтобрать > 0 Тогда
		СтруктураПараметров.НомерОбхода=3;
		Для Каждого стр Из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
			СтруктураПараметров.Вставить("СкладскоеПомещение", стр.СкладскоеПомещение);
			
			//@skip-check query-in-loop
			ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров, _ОсталосьОтобрать);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура АлгоритмСтрокиСковознойСПМеньшеПаллеты(СтруктураПараметров, НастройкиWMS, _ОсталосьОтобрать)
	СтруктураПараметров.НомерОбхода=3;
	Для Каждого стр Из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
		Если _ОсталосьОтобрать <= 0 Тогда
			Прервать;
		КонецЕсли;
		СтруктураПараметров.Вставить("СкладскоеПомещение", стр.СкладскоеПомещение);
		
		//@skip-check query-in-loop
		ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров, _ОсталосьОтобрать);
	КонецЦикла;
	Если _ОсталосьОтобрать > 0 Тогда
		Для Каждого стр Из НастройкиWMS.СкладскиеПомещенияПриоритет Цикл
			СтруктураПараметров.Вставить("СкладскоеПомещение", стр.СкладскоеПомещение);
			
			//@skip-check query-in-loop
			ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров, _ОсталосьОтобрать);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТоварИзЗонаПикингаПоСкладскимПомещениямСквозное(СтруктураПараметров, _ОсталосьОтобрать)
	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонамИСкладскимПомещениям(СтруктураПараметров.МенеджерВременныхТаблиц,
		СтруктураПараметров.СтрокаОбхода.Номенклатура, Перечисления.итWMSЗоныСклада.Пикинга,
		СтруктураПараметров.СкладскоеПомещение);
	ТаблицаЗарезервированныхДанных=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоговПоЗоне.Следующий() Цикл
		ОстатокИтогоПоЗоне=ВыборкаИтоговПоЗоне.Количество;
		ВыборкаДетальныхЗаписей=ВыборкаИтоговПоЗоне.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			Если _ОсталосьОтобрать <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если ВыборкаДетальныхЗаписей.Количество < СтруктураПараметров.КоличествоНаПаллете И СтруктураПараметров.ОтгрузкаКлиентуЦелымиПаллетами
				И СтруктураПараметров.НомерОбхода = 1 Тогда
				ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне - ВыборкаДетальныхЗаписей.Количество;
				Продолжить;
			КонецЕсли;
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки=Новый УникальныйИдентификатор;
			НоваяСтрока.Номенклатура=ВыборкаДетальныхЗаписей.Номенклатура;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДетальныхЗаписей.ИдентификаторУпаковки;
			НоваяСтрока.Качество=ВыборкаДетальныхЗаписей.Качество;
			НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныхЗаписей.СерияНоменклатуры;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.ДатаРозлива;
			НоваяСтрока.Характеристика=ВыборкаДетальныхЗаписей.Характеристика;
			НоваяСтрока.ЯчейкаОтправитель=ВыборкаДетальныхЗаписей.Ячейка;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.СерияНоменклатуры.ДатаПроизводства;
			Если _ОсталосьОтобрать <= ВыборкаДетальныхЗаписей.Количество Тогда
				НоваяСтрока.Количество=_ОсталосьОтобрать;
			Иначе
				НоваяСтрока.Количество=ВыборкаДетальныхЗаписей.Количество;
			КонецЕсли;
			_ОсталосьОтобрать=_ОсталосьОтобрать - НоваяСтрока.Количество;
			НоваяСтрокаРезерва=ТаблицаЗарезервированныхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва, ВыборкаДетальныхЗаписей);
			НоваяСтрокаРезерва.Количество=НоваяСтрока.Количество;
			ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне - НоваяСтрока.Количество;
		КонецЦикла;
		
		//@skip-check query-in-loop
		ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц, ТаблицаЗарезервированныхДанных);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТоварИзЗонаХраненияПоСкладскимПомещениямСквозной(СтруктураПараметров, _ОсталосьОтобрать)

	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонамИСкладскимПомещениям(СтруктураПараметров.МенеджерВременныхТаблиц,
		СтруктураПараметров.СтрокаОбхода.Номенклатура, Перечисления.итWMSЗоныСклада.Хранения,
		СтруктураПараметров.СкладскоеПомещение);
	ТаблицаЗарезервированныхДанных=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоговПоЗоне.Следующий() Цикл

		ОстатокИтогоПоЗоне=ВыборкаИтоговПоЗоне.Количество;

		ВыборкаДетальныхЗаписей=ВыборкаИтоговПоЗоне.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			Если _ОсталосьОтобрать <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если ВыборкаДетальныхЗаписей.Количество < СтруктураПараметров.КоличествоНаПаллете
				И СтруктураПараметров.ОтгрузкаКлиентуЦелымиПаллетами И СтруктураПараметров.НомерОбхода = 1 Тогда
				ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне - ВыборкаДетальныхЗаписей.Количество;
				Продолжить;
			КонецЕсли;
			Если _ОсталосьОтобрать < СтруктураПараметров.КоличествоНаПаллете И СтруктураПараметров.НомерОбхода <> 3 Тогда
				
				//@skip-check query-in-loop
				ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц,
					ТаблицаЗарезервированныхДанных);
				Возврат;
			КонецЕсли
			;
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки=Новый УникальныйИдентификатор;
			НоваяСтрока.Номенклатура=ВыборкаДетальныхЗаписей.Номенклатура;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДетальныхЗаписей.ИдентификаторУпаковки;
			НоваяСтрока.Качество=ВыборкаДетальныхЗаписей.Качество;
			НоваяСтрока.СерияНоменклатуры=ВыборкаДетальныхЗаписей.СерияНоменклатуры;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.ДатаРозлива;
			НоваяСтрока.Характеристика=ВыборкаДетальныхЗаписей.Характеристика;
			НоваяСтрока.ЯчейкаОтправитель=ВыборкаДетальныхЗаписей.Ячейка;
			НоваяСтрока.ДатаРозлива=ВыборкаДетальныхЗаписей.СерияНоменклатуры.ДатаПроизводства;
			Если _ОсталосьОтобрать <= ВыборкаДетальныхЗаписей.Количество Тогда
				НоваяСтрока.Количество=_ОсталосьОтобрать;
			Иначе
				НоваяСтрока.Количество=ВыборкаДетальныхЗаписей.Количество;
			КонецЕсли;
			_ОсталосьОтобрать=_ОсталосьОтобрать - НоваяСтрока.Количество;
			НоваяСтрокаРезерва=ТаблицаЗарезервированныхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва, ВыборкаДетальныхЗаписей);
			НоваяСтрокаРезерва.Количество=НоваяСтрока.Количество;
			ОстатокИтогоПоЗоне=ОстатокИтогоПоЗоне - НоваяСтрока.Количество;
		КонецЦикла;
		
		//@skip-check query-in-loop
		ИзъятьЗарезервированныеДанные(СтруктураПараметров.МенеджерВременныхТаблиц, ТаблицаЗарезервированныхДанных);
	КонецЦикла;

КонецПроцедуры

Функция ЗапросДанныхДляЗаполненияПоЗонамИСкладскимПомещениям(МенеджерВременныхТаблиц, Номенклатура, ЗонаЯчеек,
	СкладскоеПомещение)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст= "ВЫБРАТЬ
				  |	ДанныеПоискаНМ.Склад,
				  |	ДанныеПоискаНМ.Ячейка КАК Ячейка,
				  |	ДанныеПоискаНМ.Номенклатура,
				  |	ДанныеПоискаНМ.Характеристика,
				  |	ДанныеПоискаНМ.СерияНоменклатуры КАК СерияНоменклатуры,
				  |	ДанныеПоискаНМ.КоличествоОстаток КАК КоличествоОстаток,
				  |	ДанныеПоискаНМ.Коэффициент,
				  |	ДанныеПоискаНМ.Предрасчет,
				  |	ДанныеПоискаНМ.Количество КАК Количество,
				  |	ДанныеПоискаНМ.Качество,
				  |	ДанныеПоискаНМ.ДатаРозлива КАК ДатаРозлива,
				  |	ДанныеПоискаНМ.Ячейка.Ярус КАК Ярус,
				  |	ДанныеПоискаНМ.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
				  |	ДанныеПоискаНМ.Приоритет КАК Приоритет,
				  |	ДанныеПоискаНМ.ЯчейкаЗона КАК ЯчейкаЗона
				  |ИЗ
				  |	ДанныеПоискаНМ КАК ДанныеПоискаНМ
				  |ГДЕ
				  |	ДанныеПоискаНМ.Номенклатура = &Номенклатура
				  |	И ДанныеПоискаНМ.ЯчейкаЗона = &ЯчейкаЗона
				  |	И ДанныеПоискаНМ.Ячейка.СкладскоеПомещение В(&СкладскоеПомещение)
				  |
				  |УПОРЯДОЧИТЬ ПО
				  |	Приоритет,
				  |	ДатаРозлива,
				  |	СерияНоменклатуры,
				  |	КоличествоОстаток,
				  |	Ярус,
				  |	Ячейка,
				  |	ИдентификаторУпаковки
				  |ИТОГИ
				  |	СУММА(Количество)
				  |ПО
				  |	ЯчейкаЗона";

	Если ТипЗнч(СкладскоеПомещение) <> Тип("Массив") Тогда
		МассивСкладскихПомещений=Новый Массив;
		МассивСкладскихПомещений.Добавить(СкладскоеПомещение);
	Иначе
		МассивСкладскихПомещений=СкладскоеПомещение;
	КонецЕсли;

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ЯчейкаЗона", ЗонаЯчеек);
	Запрос.УстановитьПараметр("СкладскоеПомещение", МассивСкладскихПомещений);

	РезультатЗапроса=Запрос.Выполнить();

	Возврат РезультатЗапроса;

КонецФункции

#КонецОбласти

#Область РозничныеСтратегии

//Процедура ЗапросДанныхПоТоварамВЯчейкахРозница(МенеджерВременныхТаблиц,ДанныеЗаполнения,НастройкиWMS)
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЗаказПокупателяТовары.Номенклатура,
//	|	ЗаказПокупателяТовары.Ссылка.СкладГруппа
//	|ПОМЕСТИТЬ ВТЗаказ
//	|ИЗ
//	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
//	|ГДЕ
//	|	ЗаказПокупателяТовары.Ссылка = &Ссылка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	итТоварыВЯчейкахОстатки.Склад,
//	|	итТоварыВЯчейкахОстатки.Ячейка,
//	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки,
//	|	итТоварыВЯчейкахОстатки.Номенклатура,
//	|	итТоварыВЯчейкахОстатки.Характеристика,
//	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры,
//	|	итТоварыВЯчейкахОстатки.ДатаРозлива,
//	|	итТоварыВЯчейкахОстатки.Качество,
//	|	итТоварыВЯчейкахОстатки.КоличествоОстаток
//	|ПОМЕСТИТЬ ВТОстаткиПодготовка
//	|ИЗ
//	|	ВТЗаказ КАК ВТЗаказ
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
//	|		ПО ВТЗаказ.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
//	|			И ВТЗаказ.СкладГруппа = итТоварыВЯчейкахОстатки.Склад
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	итТоварыВЯчейкахРезервОстатки.Склад,
//	|	итТоварыВЯчейкахРезервОстатки.ЯчейкаОтправитель,
//	|	итТоварыВЯчейкахРезервОстатки.ИдентификаторУпаковки,
//	|	итТоварыВЯчейкахРезервОстатки.Номенклатура,
//	|	итТоварыВЯчейкахРезервОстатки.Характеристика,
//	|	итТоварыВЯчейкахРезервОстатки.СерияНоменклатуры,
//	|	итТоварыВЯчейкахРезервОстатки.ДатаРозлива,
//	|	итТоварыВЯчейкахРезервОстатки.Качество,
//	|	-итТоварыВЯчейкахРезервОстатки.КоличествоОстаток
//	|ИЗ
//	|	ВТЗаказ КАК ВТЗаказ
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейкахРезерв.Остатки(, ЯчейкаОтправитель <> &СистемнаяЯчейка) КАК итТоварыВЯчейкахРезервОстатки
//	|		ПО ВТЗаказ.Номенклатура = итТоварыВЯчейкахРезервОстатки.Номенклатура
//	|			И ВТЗаказ.СкладГруппа = итТоварыВЯчейкахРезервОстатки.Склад
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТОстаткиПодготовка.Склад,
//	|	ВТОстаткиПодготовка.Ячейка,
//	|	ВТОстаткиПодготовка.ИдентификаторУпаковки,
//	|	ВТОстаткиПодготовка.Номенклатура,
//	|	ВТОстаткиПодготовка.Характеристика,
//	|	ВТОстаткиПодготовка.СерияНоменклатуры,
//	|	ВТОстаткиПодготовка.ДатаРозлива,
//	|	ВТОстаткиПодготовка.Качество,
//	|	СУММА(ВТОстаткиПодготовка.КоличествоОстаток) КАК КоличествоОстаток,
//	|	ВТОстаткиПодготовка.Ячейка.КоличествоПалет КАК КоличествоПаллетоМест
//	|ПОМЕСТИТЬ ВТОстаткиПодготовкаГруппировка
//	|ИЗ
//	|	ВТОстаткиПодготовка КАК ВТОстаткиПодготовка
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТОстаткиПодготовка.Склад,
//	|	ВТОстаткиПодготовка.Ячейка,
//	|	ВТОстаткиПодготовка.ИдентификаторУпаковки,
//	|	ВТОстаткиПодготовка.Номенклатура,
//	|	ВТОстаткиПодготовка.Характеристика,
//	|	ВТОстаткиПодготовка.СерияНоменклатуры,
//	|	ВТОстаткиПодготовка.ДатаРозлива,
//	|	ВТОстаткиПодготовка.Качество,
//	|	ВТОстаткиПодготовка.Ячейка.КоличествоПалет
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	итТоварыВЯчейкахРезервОстатки.Ячейка
//	|ПОМЕСТИТЬ ЯчейкиИсключенияПодбора
//	|ИЗ
//	|	ВТЗаказ КАК ВТЗаказ
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейкахРезерв.Остатки КАК итТоварыВЯчейкахРезервОстатки
//	|		ПО ВТЗаказ.Номенклатура = итТоварыВЯчейкахРезервОстатки.Номенклатура
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТОстаткиПодготовкаГруппировка.Склад,
//	|	ВТОстаткиПодготовкаГруппировка.Ячейка,
//	|	ВТОстаткиПодготовкаГруппировка.ИдентификаторУпаковки,
//	|	ВТОстаткиПодготовкаГруппировка.Номенклатура,
//	|	ВТОстаткиПодготовкаГруппировка.Характеристика,
//	|	ВТОстаткиПодготовкаГруппировка.СерияНоменклатуры,
//	|	ВТОстаткиПодготовкаГруппировка.ДатаРозлива,
//	|	ВТОстаткиПодготовкаГруппировка.Качество,
//	|	СУММА(ВТОстаткиПодготовкаГруппировка.КоличествоОстаток) КАК КоличествоОстаток,
//	|	ВТОстаткиПодготовкаГруппировка.Ячейка.КоличествоПалет КАК КоличествоПаллетоМест,
//	|	ВТОстаткиПодготовкаГруппировка.Ячейка.ПорядокОбхода КАК ПорядокОбхода
//	|ПОМЕСТИТЬ ДанныеПоискаНМ
//	|ИЗ
//	|	ВТОстаткиПодготовкаГруппировка КАК ВТОстаткиПодготовкаГруппировка
//	|ГДЕ
//	|	ВТОстаткиПодготовкаГруппировка.КоличествоОстаток > 0
//	|	И НЕ ВТОстаткиПодготовкаГруппировка.Ячейка В
//	|				(ВЫБРАТЬ
//	|					ЯчейкиИсключенияПодбора.Ячейка
//	|				ИЗ
//	|					ЯчейкиИсключенияПодбора КАК ЯчейкиИсключенияПодбора)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТОстаткиПодготовкаГруппировка.Склад,
//	|	ВТОстаткиПодготовкаГруппировка.Ячейка,
//	|	ВТОстаткиПодготовкаГруппировка.ИдентификаторУпаковки,
//	|	ВТОстаткиПодготовкаГруппировка.Номенклатура,
//	|	ВТОстаткиПодготовкаГруппировка.Характеристика,
//	|	ВТОстаткиПодготовкаГруппировка.СерияНоменклатуры,
//	|	ВТОстаткиПодготовкаГруппировка.ДатаРозлива,
//	|	ВТОстаткиПодготовкаГруппировка.Качество,
//	|	ВТОстаткиПодготовкаГруппировка.Ячейка.КоличествоПалет,
//	|	ВТОстаткиПодготовкаГруппировка.Ячейка.ПорядокОбхода
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ВТОстаткиПодготовка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ВТЗаказ
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ВТОстаткиПодготовкаГруппировка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ЯчейкиИсключенияПодбора";
//	
//	Запрос.УстановитьПараметр("СистемнаяЯчейка",НастройкиWMS.СистемнаяЯчейка);
//	Запрос.УстановитьПараметр("Ссылка",ДанныеЗаполнения.Ссылка);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//КонецПроцедуры

Процедура ЗапросДанныхПоТоварамВЯчейкахРозница(МенеджерВременныхТаблиц, ДанныеЗаполнения)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Ссылка.Склад КАК Склад,
	|	ЗаказПокупателяТовары.Ссылка.Организация КАК Организация
	|ПОМЕСТИТЬ ВТЗаказ
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Ссылка.Склад,
	|	ЗаказПокупателяТовары.Ссылка.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Склад КАК Склад,
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	итТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	итТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.ДатаРозлива КАК ДатаРозлива,
	|	итТоварыВЯчейкахОстатки.Качество КАК Качество,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток КАК КоличествоОстаток,
	|	итТоварыВЯчейкахОстатки.Ячейка.КоличествоПалет КАК КоличествоПаллетоМест,
	|	итТоварыВЯчейкахОстатки.Ячейка.ПорядокОбхода КАК ПорядокОбхода
	|ПОМЕСТИТЬ ДанныеПоискаНМ
	|ИЗ
	|	ВТЗаказ КАК ВТЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	|		ПО ВТЗаказ.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|			И (итТоварыВЯчейкахОстатки.Склад = ВТЗаказ.Склад)
	|			И ВТЗаказ.Организация = итТоварыВЯчейкахОстатки.Организация
	|ГДЕ
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток > 0";

	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Ссылка);

	Запрос.Выполнить();

КонецПроцедуры
Процедура ЗаполнитьТоварСогласноРозничнымПравилам(МенеджерВременныхТаблиц, СтрокаОбхода, ДанныеЗаполнения, НастройкиWMS)
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ОсталосьОтобрать", СтрокаОбхода.Количество);
	СтруктураПараметров.Вставить("КоличествоНаПаллете", СтрокаОбхода.ЕдиницаИзмеренияМест.итКоличествоНаПаллете);
	СтруктураПараметров.Вставить("КоличествоВКоробе", СтрокаОбхода.ЕдиницаИзмеренияМест.Коэффициент);
	СтруктураПараметров.Вставить("Номенклатура", СтрокаОбхода.Номенклатура);
	СтруктураПараметров.Вставить("СтрокаОбхода", СтрокаОбхода);
	СтруктураПараметров.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	СтруктураПараметров.Вставить("МеньшеКороба", Ложь);
	СтруктураПараметров.Вставить("МеньшеПаллеты", Ложь);
	ЗаполнитьДокументДаннымНабораРозница(СтруктураПараметров);

	Если СтруктураПараметров.ОсталосьОтобрать > 0 Тогда
		Сообщить("не хватает номенклатуры: " + Строка(СтруктураПараметров.Номенклатура) + " в количестве " + Строка(
			СтруктураПараметров.ОсталосьОтобрать));
	КонецЕсли;

КонецПроцедуры
Процедура ЗаполнитьДокументДаннымНабораРозница(СтруктураПараметров)
	СтруктураПараметров.МеньшеКороба=Ложь;
	СтруктураПараметров.МеньшеПаллеты=Ложь;
	Если СтруктураПараметров.ОсталосьОтобрать < СтруктураПараметров.КоличествоВКоробе Тогда
		СтруктураПараметров.МеньшеКороба=Истина;
	ИначеЕсли СтруктураПараметров.ОсталосьОтобрать < СтруктураПараметров.КоличествоНаПаллете Тогда
		СтруктураПараметров.МеньшеПаллеты=Истина;
	КонецЕсли;
	РезультатЗапроса= ЗапросДанныхТовараНаСкладе(СтруктураПараметров);
	ТаблицаАнализа=ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса);
	Выборка=РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока=Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ЯчейкаОтправитель=Выборка.Ячейка;
		Если Выборка.КоличествоОстаток >= СтруктураПараметров.ОсталосьОтобрать Тогда
			НоваяСтрока.Количество=СтруктураПараметров.ОсталосьОтобрать;
		Иначе
			НоваяСтрока.Количество=Выборка.КоличествоОстаток;
		КонецЕсли;
		НоваяСтрокаРезерва=ТаблицаАнализа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРезерва, Выборка);
		НоваяСтрокаРезерва.КоличествоОстаток=НоваяСтрока.Количество;
		СтруктураПараметров.ОсталосьОтобрать=СтруктураПараметров.ОсталосьОтобрать - НоваяСтрока.Количество;
		Если СтруктураПараметров.ОсталосьОтобрать = 0 Тогда
			Прервать;
		КонецЕсли;
		Если СтруктураПараметров.ОсталосьОтобрать < СтруктураПараметров.КоличествоВКоробе
			И Не СтруктураПараметров.МеньшеКороба Тогда 
			
			//@skip-check query-in-loop
			ИзъятьЗарезервированноеКоличествоРозница(СтруктураПараметров, ТаблицаАнализа);
			
			//@skip-check query-in-loop
			ЗаполнитьДокументДаннымНабораРозница(СтруктураПараметров);
			Возврат;
		КонецЕсли;
		Если СтруктураПараметров.ОсталосьОтобрать < СтруктураПараметров.КоличествоНаПаллете
			И Не СтруктураПараметров.МеньшеПаллеты Тогда 
			
			//@skip-check query-in-loop
			ИзъятьЗарезервированноеКоличествоРозница(СтруктураПараметров, ТаблицаАнализа);
			
			//@skip-check query-in-loop
			ЗаполнитьДокументДаннымНабораРозница(СтруктураПараметров);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	ИзъятьЗарезервированноеКоличествоРозница(СтруктураПараметров, ТаблицаАнализа);
КонецПроцедуры
Процедура ИзъятьЗарезервированноеКоличествоРозница(СтруктураПараметров, ТаблицаАнализа)
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=СтруктураПараметров.МенеджерВременныхТаблиц;
	Запрос.Текст= "ВЫБРАТЬ
				  |	ТаблицаАнализа.Склад,
				  |	ТаблицаАнализа.Ячейка,
				  |	ТаблицаАнализа.ИдентификаторУпаковки,
				  |	ТаблицаАнализа.Номенклатура,
				  |	ТаблицаАнализа.Характеристика,
				  |	ТаблицаАнализа.СерияНоменклатуры,
				  |	ТаблицаАнализа.ДатаРозлива,
				  |	ТаблицаАнализа.Качество,
				  |	ТаблицаАнализа.КоличествоОстаток
				  |ПОМЕСТИТЬ Вт
				  |ИЗ
				  |	&ТаблицаАнализа КАК ТаблицаАнализа
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ДанныеПоискаНМ.Склад,
				  |	ДанныеПоискаНМ.Ячейка,
				  |	ДанныеПоискаНМ.ИдентификаторУпаковки,
				  |	ДанныеПоискаНМ.Номенклатура,
				  |	ДанныеПоискаНМ.Характеристика,
				  |	ДанныеПоискаНМ.СерияНоменклатуры,
				  |	ДанныеПоискаНМ.ДатаРозлива,
				  |	ДанныеПоискаНМ.Качество,
				  |	СУММА(ДанныеПоискаНМ.КоличествоОстаток - ЕСТЬNULL(Вт.КоличествоОстаток, 0)) КАК КоличествоОстаток,
				  |	ДанныеПоискаНМ.КоличествоПаллетоМест,
				  |	ДанныеПоискаНМ.ПорядокОбхода
				  |ПОМЕСТИТЬ ВтДанныеНМ
				  |ИЗ
				  |	ДанныеПоискаНМ КАК ДанныеПоискаНМ
				  |		ЛЕВОЕ СОЕДИНЕНИЕ Вт КАК Вт
				  |		ПО ДанныеПоискаНМ.Склад = Вт.Склад
				  |			И ДанныеПоискаНМ.Ячейка = Вт.Ячейка
				  |			И ДанныеПоискаНМ.ИдентификаторУпаковки = Вт.ИдентификаторУпаковки
				  |			И ДанныеПоискаНМ.Номенклатура = Вт.Номенклатура
				  |			И ДанныеПоискаНМ.Характеристика = Вт.Характеристика
				  |			И ДанныеПоискаНМ.ДатаРозлива = Вт.ДатаРозлива
				  |			И ДанныеПоискаНМ.Качество = Вт.Качество
				  |
				  |СГРУППИРОВАТЬ ПО
				  |	ДанныеПоискаНМ.Склад,
				  |	ДанныеПоискаНМ.Ячейка,
				  |	ДанныеПоискаНМ.ИдентификаторУпаковки,
				  |	ДанныеПоискаНМ.Номенклатура,
				  |	ДанныеПоискаНМ.Характеристика,
				  |	ДанныеПоискаНМ.СерияНоменклатуры,
				  |	ДанныеПоискаНМ.ДатаРозлива,
				  |	ДанныеПоискаНМ.Качество,
				  |	ДанныеПоискаНМ.КоличествоПаллетоМест,
				  |	ДанныеПоискаНМ.ПорядокОбхода
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |УНИЧТОЖИТЬ ДанныеПоискаНМ
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |УНИЧТОЖИТЬ Вт
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ВтДанныеНМ.Склад,
				  |	ВтДанныеНМ.Ячейка,
				  |	ВтДанныеНМ.ИдентификаторУпаковки,
				  |	ВтДанныеНМ.Номенклатура,
				  |	ВтДанныеНМ.Характеристика,
				  |	ВтДанныеНМ.СерияНоменклатуры,
				  |	ВтДанныеНМ.ДатаРозлива,
				  |	ВтДанныеНМ.Качество,
				  |	ВтДанныеНМ.КоличествоОстаток,
				  |	ВтДанныеНМ.КоличествоПаллетоМест,
				  |	ВтДанныеНМ.ПорядокОбхода
				  |ПОМЕСТИТЬ ДанныеПоискаНМ
				  |ИЗ
				  |	ВтДанныеНМ КАК ВтДанныеНМ
				  |ГДЕ
				  |	ВтДанныеНМ.КоличествоОстаток > 0
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |УНИЧТОЖИТЬ ВтДанныеНМ";
	Запрос.УстановитьПараметр("ТаблицаАнализа", ТаблицаАнализа);
	Запрос.Выполнить();

КонецПроцедуры

Функция ЗапросДанныхТовараНаСкладе(СтруктураПараметров)

	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=СтруктураПараметров.МенеджерВременныхТаблиц;
	Запрос.Текст= "ВЫБРАТЬ
				  |	ДанныеПоискаНМ.Склад,
				  |	ДанныеПоискаНМ.Ячейка,
				  |	ДанныеПоискаНМ.ИдентификаторУпаковки,
				  |	ДанныеПоискаНМ.Номенклатура,
				  |	ДанныеПоискаНМ.Характеристика,
				  |	ДанныеПоискаНМ.СерияНоменклатуры,
				  |	ДанныеПоискаНМ.ДатаРозлива,
				  |	ДанныеПоискаНМ.Качество,
				  |	ДанныеПоискаНМ.КоличествоОстаток,
				  |	ДанныеПоискаНМ.КоличествоПаллетоМест,
				  |	ДанныеПоискаНМ.ПорядокОбхода
				  |ПОМЕСТИТЬ ВтДанныеНМ
				  |ИЗ
				  |	ДанныеПоискаНМ КАК ДанныеПоискаНМ
				  |ГДЕ
				  |	ДанныеПоискаНМ.Номенклатура = &Номенклатура
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.АссортиментныйУчастокСклада КАК АссортиментныйУчастокСклада
				  |ПОМЕСТИТЬ АссортиметныйУчастокНМ
				  |ИЗ
				  |	РегистрСведений.ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчастка.СрезПоследних(, Номенклатура = &Номенклатура) КАК ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка
				  |ПОМЕСТИТЬ ЯчейкаКОтбору
				  |ИЗ
				  |	АссортиметныйУчастокНМ КАК АссортиметныйУчастокНМ
				  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ит_WMS_АссортиментныеУчасткиСклада.СоставЯчеек КАК ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек
				  |		ПО АссортиметныйУчастокНМ.АссортиментныйУчастокСклада = ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ссылка
				  |			И (ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Розничная))
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ВложенныйЗапрос.Склад,
				  |	ВложенныйЗапрос.Ячейка,
				  |	ВложенныйЗапрос.ИдентификаторУпаковки,
				  |	ВложенныйЗапрос.Номенклатура,
				  |	ВложенныйЗапрос.Характеристика,
				  |	ВложенныйЗапрос.СерияНоменклатуры,
				  |	ВложенныйЗапрос.ДатаРозлива КАК ДатаРозлива,
				  |	ВложенныйЗапрос.Качество,
				  |	ВложенныйЗапрос.КоличествоОстаток,
				  |	ВложенныйЗапрос.КоличествоПаллетоМест,
				  |	ВЫБОР
				  |		КОГДА &МеньшеКороба
				  |				И ВложенныйЗапрос.КоличествоОстаток <= &КоличествоКороба
				  |			ТОГДА 0
				  |		КОГДА &МеньшеКороба
				  |				И ВложенныйЗапрос.КоличествоОстаток > &КоличествоКороба
				  |			ТОГДА &КоличествоКороба - ВложенныйЗапрос.КоличествоОстаток
				  |		КОГДА &МеньшеПаллеты
				  |				И ВложенныйЗапрос.КоличествоОстаток >= &КоличествоКороба
				  |				И ВложенныйЗапрос.КоличествоОстаток < &КоличествоВПаллете
				  |			ТОГДА 0
				  |		КОГДА &МеньшеПаллеты
				  |				И ВложенныйЗапрос.КоличествоОстаток < &КоличествоКороба
				  |			ТОГДА 9999999
				  |		КОГДА &МеньшеПаллеты
				  |				И ВложенныйЗапрос.КоличествоОстаток >= &КоличествоВПаллете
				  |			ТОГДА ВложенныйЗапрос.КоличествоОстаток
				  |		ИНАЧЕ 1
				  |	КОНЕЦ КАК ПорядокПоКоличественномуУсловию,
				  |	ВложенныйЗапрос.ПорядокОбхода КАК ПорядокОбхода,
				  |	ВЫБОР
				  |		КОГДА &МеньшеКороба
				  |				И ВложенныйЗапрос.КоличествоПаллетоМест < 0.2
				  |			ТОГДА 0
				  |		КОГДА &МеньшеКороба
				  |				И ВложенныйЗапрос.КоличествоПаллетоМест < 1
				  |			ТОГДА 1
				  |		КОГДА &МеньшеПаллеты
				  |				И ВложенныйЗапрос.КоличествоПаллетоМест < 1
				  |				И ВложенныйЗапрос.КоличествоПаллетоМест > 0.2
				  |			ТОГДА 0
				  |		КОГДА &МеньшеПаллеты
				  |				И ВложенныйЗапрос.КоличествоПаллетоМест < 1
				  |			ТОГДА 1
				  |		ИНАЧЕ 3
				  |	КОНЕЦ КАК ПорядокПоКоэффициентуЯчейки
				  |ИЗ
				  |	(ВЫБРАТЬ
				  |		ВтДанныеНМ.Склад КАК Склад,
				  |		ВтДанныеНМ.Ячейка КАК Ячейка,
				  |		ВтДанныеНМ.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
				  |		ВтДанныеНМ.Номенклатура КАК Номенклатура,
				  |		ВтДанныеНМ.Характеристика КАК Характеристика,
				  |		ВтДанныеНМ.СерияНоменклатуры КАК СерияНоменклатуры,
				  |		ВтДанныеНМ.ДатаРозлива КАК ДатаРозлива,
				  |		ВтДанныеНМ.Качество КАК Качество,
				  |		ВтДанныеНМ.КоличествоОстаток КАК КоличествоОстаток,
				  |		ВтДанныеНМ.КоличествоПаллетоМест КАК КоличествоПаллетоМест,
				  |		ВтДанныеНМ.ПорядокОбхода КАК ПорядокОбхода
				  |	ИЗ
				  |		ВтДанныеНМ КАК ВтДанныеНМ
				  |	ГДЕ
				  |		ВтДанныеНМ.Ячейка В
				  |				(ВЫБРАТЬ
				  |					ЯчейкаКОтбору.Ячейка
				  |				ИЗ
				  |					ЯчейкаКОтбору КАК ЯчейкаКОтбору)) КАК ВложенныйЗапрос
				  |
				  |УПОРЯДОЧИТЬ ПО
				  |	ДатаРозлива,
				  |	ПорядокПоКоэффициентуЯчейки,
				  |	ПорядокОбхода,
				  |	ПорядокПоКоличественномуУсловию
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |УНИЧТОЖИТЬ АссортиметныйУчастокНМ
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |УНИЧТОЖИТЬ ЯчейкаКОтбору
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |УНИЧТОЖИТЬ ВтДанныеНМ";
	Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("МеньшеКороба", СтруктураПараметров.МеньшеКороба);
	Запрос.УстановитьПараметр("КоличествоВПаллете", СтруктураПараметров.КоличествоНаПаллете);
	Запрос.УстановитьПараметр("КоличествоКороба", СтруктураПараметров.КоличествоВКоробе);
	Запрос.УстановитьПараметр("МеньшеПаллеты", СтруктураПараметров.МеньшеПаллеты);
	Возврат Запрос.Выполнить();

КонецФункции
#КонецОбласти

#Область СтрагеииОбщиеФункцииИПроцедуры

Функция ЗапросДанныхДляЗаполненияПоЗонам(МенеджерВременныхТаблиц, Номенклатура, ЗонаЯчеек)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст= "ВЫБРАТЬ
				  |	ДанныеПоискаНМ.Склад,
				  |	ДанныеПоискаНМ.Ячейка КАК Ячейка,
				  |	ДанныеПоискаНМ.Номенклатура,
				  |	ДанныеПоискаНМ.Характеристика,
				  |	ДанныеПоискаНМ.СерияНоменклатуры КАК СерияНоменклатуры,
				  |	ДанныеПоискаНМ.КоличествоОстаток КАК КоличествоОстаток,
				  |	ДанныеПоискаНМ.Коэффициент,
				  |	ДанныеПоискаНМ.Предрасчет,
				  |	ДанныеПоискаНМ.Количество КАК Количество,
				  |	ДанныеПоискаНМ.Качество,
				  |	ДанныеПоискаНМ.ДатаРозлива КАК ДатаРозлива,
				  |	ДанныеПоискаНМ.Ячейка.Ярус КАК Ярус,
				  |	ДанныеПоискаНМ.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
				  |	ДанныеПоискаНМ.Приоритет КАК Приоритет,
				  |	ДанныеПоискаНМ.ЯчейкаЗона КАК ЯчейкаЗона
				  |ИЗ
				  |	ДанныеПоискаНМ КАК ДанныеПоискаНМ
				  |ГДЕ
				  |	ДанныеПоискаНМ.Номенклатура = &Номенклатура
				  |	И ДанныеПоискаНМ.ЯчейкаЗона = &ЯчейкаЗона
				  |
				  |УПОРЯДОЧИТЬ ПО
				  |	Приоритет,
				  |	ДатаРозлива,
				  |	СерияНоменклатуры,
				  |	КоличествоОстаток,
				  |	Ярус,
				  |	Ячейка,
				  |	ИдентификаторУпаковки
				  |ИТОГИ
				  |	СУММА(Количество)
				  |ПО
				  |	ЯчейкаЗона";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ЯчейкаЗона", ЗонаЯчеек);

	РезультатЗапроса=Запрос.Выполнить();

	Возврат РезультатЗапроса;

КонецФункции

Функция СтруктураПараметровЗаполненияПоЗонам(МенеджерВременныхТаблиц, СтрокаОбхода, ДанныеЗаполнения)
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	СтруктураПараметров.Вставить("СтрокаОбхода", СтрокаОбхода);
	СтруктураПараметров.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	СтруктураПараметров.Вставить("НомерОбхода", 1);
	Возврат СтруктураПараметров;
КонецФункции

Функция КоличествоТовараВПикингеБольшеСтока(СтруктураПараметров)
	РезультатЗапроса= ЗапросДанныхДляЗаполненияПоЗонам(СтруктураПараметров.МенеджерВременныхТаблиц,
		СтруктураПараметров.СтрокаОбхода.Номенклатура, Перечисления.итWMSЗоныСклада.Пикинга);
	ВыборкаИтоговПоЗоне=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураПараметров.Вставить("ОтборИзлишкаПаллетПикинга", Ложь);
	Пока ВыборкаИтоговПоЗоне.Следующий() Цикл
		ИтНормыХраненияСтока=СтруктураПараметров.СтрокаОбхода.Номенклатура.ИтНормыХраненияСтока;
		КоэффициентПаллеты=СтруктураПараметров.СтрокаОбхода.Номенклатура.ЕдиницаХраненияОстатков.итКоличествоНаПаллете;
		КоличествоПаллетВОстатке=ВыборкаИтоговПоЗоне.Количество / ?(КоэффициентПаллеты = 0, 1, КоэффициентПаллеты);
		СтруктураПараметров.Вставить("РазрешенноеКоличествоОтбораПикинга", (Цел(КоличествоПаллетВОстатке
			- ИтНормыХраненияСтока) * КоэффициентПаллеты));
		СтруктураПараметров.Вставить("ОтборИзлишкаПаллетПикинга", КоличествоПаллетВОстатке > ИтНормыХраненияСтока);
	КонецЦикла;
	Возврат СтруктураПараметров.ОтборИзлишкаПаллетПикинга;
КонецФункции
Функция ПолучитьСтратегиюНаОснованииРозница()
	ТекущийПользователь=ПараметрыСеанса.ТекущийПользователь;
	СтратегияНаОснованииРозница=Неопределено;
	СтрокаНастроек=ТекущийПользователь.НастройкиПоУмолчанию.Найти(
		"Стратегия наборки при создании на основании (Розница)");
	Если СтрокаНастроек <> Неопределено Тогда

		СтратегияНаОснованииРозница=СтрокаНастроек.Значение;
	КонецЕсли;
	Если СтратегияНаОснованииРозница = Неопределено И Организация <> Неопределено Тогда
		СтрокаНастроек=Организация.НастройкиПоУмолчанию.Найти("Стратегия наборки при создании на основании (Розница)");
		Если СтрокаНастроек <> Неопределено Тогда
			СтратегияНаОснованииРозница=СтрокаНастроек.Значение;
		КонецЕсли;
	КонецЕсли;
	Если СтратегияНаОснованииРозница = Неопределено Тогда
		СтратегияНаОснованииРозница=Константы.СтратегияСозданияНаборкиРозница.Получить();
	КонецЕсли;
	Возврат СтратегияНаОснованииРозница;
КонецФункции

Функция ПолучитьСтратегиюНаОснованииОпт()
	ТекущийПользователь=ПараметрыСеанса.ТекущийПользователь;
	СтратегияНаОснованииОпт=Неопределено;
	СтрокаНастроек=ТекущийПользователь.НастройкиПоУмолчанию.Найти("Стратегия наборки при создании на основании");
	Если СтрокаНастроек <> Неопределено Тогда

		СтратегияНаОснованииОпт=СтрокаНастроек.Значение;
	КонецЕсли;
	Если СтратегияНаОснованииОпт = Неопределено И Организация <> Неопределено Тогда
		СтрокаНастроек=Организация.НастройкиПоУмолчанию.Найти("Стратегия наборки при создании на основании");
		Если СтрокаНастроек <> Неопределено Тогда
			СтратегияНаОснованииОпт=СтрокаНастроек.Значение;
		КонецЕсли;
	КонецЕсли;
	Если СтратегияНаОснованииОпт = Неопределено Тогда
		СтратегияНаОснованииОпт=Константы.СтратегияСозданияНаборкиОпт.Получить();
	КонецЕсли;
	Возврат СтратегияНаОснованииОпт;
КонецФункции
//Процедура  ЗапросДанныхПоТоварамВЯчейках(МенеджерВременныхТаблиц,ДанныеЗаполнения,НастройкиWMS)
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;			
//	// Получить данные о размещении
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	итТоварыВЯчейкахРезервОстатки.Склад,
//	|	итТоварыВЯчейкахРезервОстатки.ЯчейкаОтправитель,
//	|	итТоварыВЯчейкахРезервОстатки.Номенклатура,
//	|	итТоварыВЯчейкахРезервОстатки.Характеристика,
//	|	итТоварыВЯчейкахРезервОстатки.СерияНоменклатуры,
//	|	итТоварыВЯчейкахРезервОстатки.ДатаРозлива,
//	|	итТоварыВЯчейкахРезервОстатки.Качество,
//	|	итТоварыВЯчейкахРезервОстатки.ИдентификаторУпаковки,
//	|	итТоварыВЯчейкахРезервОстатки.КоличествоОстаток
//	|ПОМЕСТИТЬ ВтДанныеРезервирования
//	|ИЗ
//	|	РегистрНакопления.итТоварыВЯчейкахРезерв.Остатки(, ЯчейкаОтправитель <> &СистемнаяЯчейка) КАК итТоварыВЯчейкахРезервОстатки
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЗаказПокупателяТовары.Ссылка,
//	|	ЗаказПокупателяТовары.Номенклатура,
//	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.Коэффициент, 0)) КАК Коэффициент,
//	|	ЗаказПокупателяТовары.Ссылка.СкладГруппа
//	|ПОМЕСТИТЬ ДанныеЗаказаДляПоиска
//	|ИЗ
//	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
//	|ГДЕ
//	|	ЗаказПокупателяТовары.Ссылка = &Ссылка
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ЗаказПокупателяТовары.Номенклатура,
//	|	ЗаказПокупателяТовары.Ссылка,
//	|	ЗаказПокупателяТовары.Ссылка.СкладГруппа
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.АссортиментныйУчастокСклада,
//	|	ДанныеЗаказаДляПоиска.Номенклатура
//	|ПОМЕСТИТЬ ВтАссортиментныеУчасткиНМ
//	|ИЗ
//	|	ДанныеЗаказаДляПоиска КАК ДанныеЗаказаДляПоиска
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчастка.СрезПоследних КАК ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних
//	|		ПО ДанныеЗаказаДляПоиска.Номенклатура = ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.Номенклатура
//	|			И (ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.Организация = &Организация)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка,
//	|	ВтАссортиментныеУчасткиНМ.Номенклатура
//	|ПОМЕСТИТЬ ЯчейкиНоменклатуры
//	|ИЗ
//	|	ВтАссортиментныеУчасткиНМ КАК ВтАссортиментныеУчасткиНМ
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ит_WMS_АссортиментныеУчасткиСклада.СоставЯчеек КАК ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек
//	|		ПО ВтАссортиментныеУчасткиНМ.АссортиментныйУчастокСклада = ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ссылка
//	|			И (ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Оптовая))
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВтАссортиментныеУчасткиНМ.Номенклатура,
//	|	ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ДанныеЗаказаДляПоиска.Ссылка,
//	|	ДанныеЗаказаДляПоиска.Номенклатура,
//	|	ДанныеЗаказаДляПоиска.Коэффициент,
//	|	ДанныеЗаказаДляПоиска.СкладГруппа,
//	|	ЯчейкиНоменклатуры.Ячейка
//	|ПОМЕСТИТЬ ДанныеЯчеекИНоменклатурыЗаказа
//	|ИЗ
//	|	ДанныеЗаказаДляПоиска КАК ДанныеЗаказаДляПоиска
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЯчейкиНоменклатуры КАК ЯчейкиНоменклатуры
//	|		ПО ДанныеЗаказаДляПоиска.Номенклатура = ЯчейкиНоменклатуры.Номенклатура
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ДанныеЗаказаДляПоиска.Ссылка,
//	|	ДанныеЗаказаДляПоиска.Номенклатура,
//	|	ДанныеЗаказаДляПоиска.Коэффициент,
//	|	ДанныеЗаказаДляПоиска.СкладГруппа,
//	|	ЯчейкиНоменклатуры.Ячейка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	итТоварыВЯчейкахОстатки.Склад,
//	|	итТоварыВЯчейкахОстатки.Ячейка,
//	|	итТоварыВЯчейкахОстатки.Номенклатура,
//	|	итТоварыВЯчейкахОстатки.Характеристика,
//	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры,
//	|	итТоварыВЯчейкахОстатки.КоличествоОстаток,
//	|	ВЫБОР
//	|		КОГДА ДанныеЯчеекИНоменклатурыЗаказа.Коэффициент = 0
//	|			ТОГДА 1
//	|		ИНАЧЕ ДанныеЯчеекИНоменклатурыЗаказа.Коэффициент
//	|	КОНЕЦ КАК Коэффициент,
//	|	итТоварыВЯчейкахОстатки.Качество,
//	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
//	|ПОМЕСТИТЬ ВТ_РеальныеОстатки
//	|ИЗ
//	|	ДанныеЯчеекИНоменклатурыЗаказа КАК ДанныеЯчеекИНоменклатурыЗаказа
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(
//	|				,
//	|				Ячейка <> &СистемнаяЯчейка
//	|					И НЕ Ячейка.Заблокирована
//	|					И Качество = ЗНАЧЕНИЕ(Справочник.Качество.новый)) КАК итТоварыВЯчейкахОстатки
//	|		ПО ДанныеЯчеекИНоменклатурыЗаказа.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
//	|			И ДанныеЯчеекИНоменклатурыЗаказа.СкладГруппа = итТоварыВЯчейкахОстатки.Склад
//	|			И ДанныеЯчеекИНоменклатурыЗаказа.Ячейка = итТоварыВЯчейкахОстатки.Ячейка
//	|ГДЕ
//	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки <> """"
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ_РеальныеОстатки.Склад,
//	|	ВТ_РеальныеОстатки.Ячейка,
//	|	ВТ_РеальныеОстатки.Номенклатура,
//	|	ВТ_РеальныеОстатки.Характеристика,
//	|	ВТ_РеальныеОстатки.СерияНоменклатуры,
//	|	СУММА(ЕСТЬNULL(ВТ_РеальныеОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ВтДанныеРезервирования.КоличествоОстаток, 0)) КАК КоличествоОстаток,
//	|	ВТ_РеальныеОстатки.Коэффициент,
//	|	ВТ_РеальныеОстатки.Качество,
//	|	ВТ_РеальныеОстатки.ИдентификаторУпаковки
//	|ПОМЕСТИТЬ РеальныеОстаткиЗаМинусомРезерваГруппировка
//	|ИЗ
//	|	ВТ_РеальныеОстатки КАК ВТ_РеальныеОстатки
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеРезервирования КАК ВтДанныеРезервирования
//	|		ПО ВТ_РеальныеОстатки.Склад = ВтДанныеРезервирования.Склад
//	|			И ВТ_РеальныеОстатки.Ячейка = ВтДанныеРезервирования.ЯчейкаОтправитель
//	|			И ВТ_РеальныеОстатки.Номенклатура = ВтДанныеРезервирования.Номенклатура
//	|			И ВТ_РеальныеОстатки.Характеристика = ВтДанныеРезервирования.Характеристика
//	|			И ВТ_РеальныеОстатки.СерияНоменклатуры = ВтДанныеРезервирования.СерияНоменклатуры
//	|			И ВТ_РеальныеОстатки.Качество = ВтДанныеРезервирования.Качество
//	|			И ВТ_РеальныеОстатки.ИдентификаторУпаковки = ВтДанныеРезервирования.ИдентификаторУпаковки
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТ_РеальныеОстатки.Склад,
//	|	ВТ_РеальныеОстатки.Ячейка,
//	|	ВТ_РеальныеОстатки.Номенклатура,
//	|	ВТ_РеальныеОстатки.Характеристика,
//	|	ВТ_РеальныеОстатки.СерияНоменклатуры,
//	|	ВТ_РеальныеОстатки.Коэффициент,
//	|	ВТ_РеальныеОстатки.Качество,
//	|	ВТ_РеальныеОстатки.ИдентификаторУпаковки
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.Склад,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.Ячейка,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.Номенклатура,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.Характеристика,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.СерияНоменклатуры,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.КоличествоОстаток,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.Коэффициент,
//	|	(ВЫРАЗИТЬ(РеальныеОстаткиЗаМинусомРезерваГруппировка.КоличествоОстаток / РеальныеОстаткиЗаМинусомРезерваГруппировка.Коэффициент КАК ЧИСЛО(15, 0))) * РеальныеОстаткиЗаМинусомРезерваГруппировка.Коэффициент КАК Предрасчет,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.Качество,
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка.ИдентификаторУпаковки
//	|ПОМЕСТИТЬ ВТ2
//	|ИЗ
//	|	РеальныеОстаткиЗаМинусомРезерваГруппировка КАК РеальныеОстаткиЗаМинусомРезерваГруппировка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ2.Склад,
//	|	ВТ2.Ячейка,
//	|	ВТ2.Номенклатура,
//	|	ВТ2.Характеристика,
//	|	ВТ2.СерияНоменклатуры,
//	|	ВТ2.КоличествоОстаток,
//	|	ВТ2.Коэффициент,
//	|	ВТ2.Предрасчет,
//	|	ВЫБОР
//	|		КОГДА ВТ2.Предрасчет <= ВТ2.КоличествоОстаток
//	|			ТОГДА ВТ2.Предрасчет
//	|		ИНАЧЕ ВЫБОР
//	|				КОГДА ВТ2.Предрасчет > ВТ2.КоличествоОстаток
//	|						И ВТ2.Предрасчет > ВТ2.Коэффициент
//	|					ТОГДА ВТ2.Предрасчет - ВТ2.Коэффициент
//	|				ИНАЧЕ 0
//	|			КОНЕЦ
//	|	КОНЕЦ КАК Количество,
//	|	ВТ2.Качество,
//	|	ВТ2.ИдентификаторУпаковки
//	|ПОМЕСТИТЬ ВТ3
//	|ИЗ
//	|	ВТ2 КАК ВТ2
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	итТоварыВЯчейкахОстатки.Ячейка,
//	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ итТоварыВЯчейкахОстатки.ИдентификаторУпаковки) КАК ИдентификаторУпаковки,
//	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Склад) КАК Склад,
//	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Номенклатура) КАК Номенклатура,
//	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Характеристика) КАК Характеристика,
//	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.ДатаРозлива) КАК ДатаРозлива,
//	|	МАКСИМУМ(итТоварыВЯчейкахОстатки.Качество) КАК Качество
//	|ПОМЕСТИТЬ КоличествоИдентификаторовВЯчейке
//	|ИЗ
//	|	РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	итТоварыВЯчейкахОстатки.Ячейка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	КоличествоИдентификаторовВЯчейке.Ячейка,
//	|	КоличествоИдентификаторовВЯчейке.ИдентификаторУпаковки
//	|ПОМЕСТИТЬ ОтборБитыхЯчеек
//	|ИЗ
//	|	КоличествоИдентификаторовВЯчейке КАК КоличествоИдентификаторовВЯчейке
//	|ГДЕ
//	|	КоличествоИдентификаторовВЯчейке.ИдентификаторУпаковки > 1
//	|	И КоличествоИдентификаторовВЯчейке.Ячейка.КоличествоПалет = 1
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ОтборБитыхЯчеек.Ячейка,
//	|	1 КАК Приоритет
//	|ПОМЕСТИТЬ ЯчейкиНеУдовлWMS
//	|ИЗ
//	|	ОтборБитыхЯчеек КАК ОтборБитыхЯчеек
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	итТоварыВЯчейкахОстатки.Ячейка,
//	|	2
//	|ИЗ
//	|	РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
//	|ГДЕ
//	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки = """"
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ3.Склад,
//	|	ВТ3.Ячейка,
//	|	ВТ3.Номенклатура,
//	|	ВТ3.Характеристика,
//	|	ВТ3.СерияНоменклатуры КАК СерияНоменклатуры,
//	|	ВТ3.КоличествоОстаток,
//	|	ВТ3.Коэффициент,
//	|	ВТ3.Предрасчет,
//	|	ВТ3.Количество КАК Количество,
//	|	ВТ3.Качество,
//	|	ВТ3.СерияНоменклатуры.алкДатаНачалаРозлива КАК ДатаРозлива,
//	|	ВТ3.Ячейка.Ярус КАК Ярус,
//	|	ВТ3.ИдентификаторУпаковки,
//	|	ВЫБОР
//	|		КОГДА ВТ3.Ячейка.Зона = ЗНАЧЕНИЕ(Перечисление.итWmsЗоныСклада.Пикинга)
//	|			ТОГДА 1
//	|		ИНАЧЕ 2
//	|	КОНЕЦ КАК Приоритет,
//	|	ВТ3.Ячейка.Зона
//	|ПОМЕСТИТЬ ДанныеПоискаНМ
//	|ИЗ
//	|	ВТ3 КАК ВТ3
//	|ГДЕ
//	|	ВТ3.Количество > 0
//	|	И (НЕ ВТ3.Ячейка.Заблокирована
//	|			ИЛИ &ПолныеПрава)
//	|	И НЕ ВТ3.Ячейка В
//	|				(ВЫБРАТЬ
//	|					ЯчейкиНеУдовлWMS.Ячейка
//	|				ИЗ
//	|					ЯчейкиНеУдовлWMS КАК ЯчейкиНеУдовлWMS)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ВтАссортиментныеУчасткиНМ
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ЯчейкиНоменклатуры
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ДанныеЯчеекИНоменклатурыЗаказа";
//	
//	Запрос.УстановитьПараметр("ПолныеПрава", РольДоступна("ПолныеПрава"));
//	Запрос.УстановитьПараметр("Организация", Организация);
//	Запрос.УстановитьПараметр("СистемнаяЯчейка",НастройкиWMS.СистемнаяЯчейка);
//	Запрос.УстановитьПараметр("Ссылка",ДанныеЗаполнения.Ссылка);
//	Запрос.Выполнить();
//КонецПроцедуры
Процедура ЗапросДанныхПоТоварамВЯчейках(МенеджерВременныхТаблиц, ДанныеЗаполнения)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;			
	// Получить данные о размещении
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Ссылка.Организация КАК Организация,
	|	ЗаказПокупателяТовары.Ссылка.Склад КАК Склад,
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.Коэффициент = 0
	|				ТОГДА 1
	|			ИНАЧЕ ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.Коэффициент
	|		КОНЕЦ) КАК Коэффициент
	|ПОМЕСТИТЬ ВтДанныеЗаказа
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Ссылка.Организация,
	|	ЗаказПокупателяТовары.Ссылка.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.АссортиментныйУчастокСклада КАК АссортиментныйУчастокСклада,
	|	ВтДанныеЗаказа.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВтАссортиментныеУчасткиНМ
	|ИЗ
	|	ВтДанныеЗаказа КАК ВтДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчастка.СрезПоследних КАК ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних
	|		ПО ВтДанныеЗаказа.Номенклатура = ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.Номенклатура
	|			И (ит_WMS_СоответсвияНоменклатурыИАссортиментногоУчасткаСрезПоследних.Организация = ВтДанныеЗаказа.Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка КАК Ячейка,
	|	ВтАссортиментныеУчасткиНМ.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ЯчейкиНоменклатуры
	|ИЗ
	|	ВтАссортиментныеУчасткиНМ КАК ВтАссортиментныеУчасткиНМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ит_WMS_АссортиментныеУчасткиСклада.СоставЯчеек КАК ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек
	|		ПО ВтАссортиментныеУчасткиНМ.АссортиментныйУчастокСклада = ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ссылка
	|			И (ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка.ВидСкладскойДеятельности = ЗНАЧЕНИЕ(Перечисление.ит_WMS_ВидыСкладскойДеятельности.Оптовая))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтАссортиментныеУчасткиНМ.Номенклатура,
	|	ит_WMS_АссортиментныеУчасткиСкладаСоставЯчеек.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеЗаказа.Организация КАК Организация,
	|	ВтДанныеЗаказа.Склад КАК Склад,
	|	ВтДанныеЗаказа.Номенклатура КАК Номенклатура,
	|	ВтДанныеЗаказа.Коэффициент КАК Коэффициент,
	|	ЯчейкиНоменклатуры.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ ВтДанныеНмиУчастка
	|ИЗ
	|	ВтДанныеЗаказа КАК ВтДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЯчейкиНоменклатуры КАК ЯчейкиНоменклатуры
	|		ПО ВтДанныеЗаказа.Номенклатура = ЯчейкиНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейкахОстатки.Организация КАК Организация,
	|	итТоварыВЯчейкахОстатки.Склад КАК Склад,
	|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	итТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	итТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	итТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	итТоварыВЯчейкахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	итТоварыВЯчейкахОстатки.ДатаРозлива КАК ДатаРозлива,
	|	итТоварыВЯчейкахОстатки.Качество КАК Качество,
	|	итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток КАК КоличествоОстаток,
	|	(ВЫРАЗИТЬ((итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток) / ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0))) * ВтДанныеНмиУчастка.Коэффициент КАК Предрасчет,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ((итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток) / ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0))) * ВтДанныеНмиУчастка.Коэффициент <= итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток
	|			ТОГДА (ВЫРАЗИТЬ((итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток) / ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0))) * ВтДанныеНмиУчастка.Коэффициент
	|		ИНАЧЕ ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ((итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток) / ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0))) * ВтДанныеНмиУчастка.Коэффициент > итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток
	|						И (ВЫРАЗИТЬ((итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток) / ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0))) * ВтДанныеНмиУчастка.Коэффициент > ВтДанныеНмиУчастка.Коэффициент
	|					ТОГДА (ВЫРАЗИТЬ((итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток) / ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0))) * ВтДанныеНмиУчастка.Коэффициент - ВтДанныеНмиУчастка.Коэффициент
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА итТоварыВЯчейкахОстатки.Ячейка.Зона = ЗНАЧЕНИЕ(Перечисление.итWmsЗоныСклада.Пикинга)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет,
	|	итТоварыВЯчейкахОстатки.Ячейка.Ярус КАК Ярус,
	|	итТоварыВЯчейкахОстатки.Ячейка.Зона КАК ЯчейкаЗона,
	|	ВтДанныеНмиУчастка.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ ДанныеПоискаНМ
	|ИЗ
	|	ВтДанныеНмиУчастка КАК ВтДанныеНмиУчастка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(, ) КАК итТоварыВЯчейкахОстатки
	|		ПО (итТоварыВЯчейкахОстатки.Организация = ВтДанныеНмиУчастка.Организация)
	|			И ВтДанныеНмиУчастка.Склад = итТоварыВЯчейкахОстатки.Склад
	|			И ВтДанныеНмиУчастка.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|			И ВтДанныеНмиУчастка.Ячейка = итТоварыВЯчейкахОстатки.Ячейка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ((итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток) / ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0))) * ВтДанныеНмиУчастка.Коэффициент <= итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток
	|				ТОГДА (ВЫРАЗИТЬ((итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток) / ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0))) * ВтДанныеНмиУчастка.Коэффициент
	|			ИНАЧЕ ВЫБОР
	|					КОГДА (ВЫРАЗИТЬ((итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток) / ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0))) * ВтДанныеНмиУчастка.Коэффициент > итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток
	|							И (ВЫРАЗИТЬ((итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток) / ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0))) * ВтДанныеНмиУчастка.Коэффициент > ВтДанныеНмиУчастка.Коэффициент
	|						ТОГДА (ВЫРАЗИТЬ((итТоварыВЯчейкахОстатки.КоличествоОстаток - итТоварыВЯчейкахОстатки.КОтборуОстаток) / ВтДанныеНмиУчастка.Коэффициент КАК ЧИСЛО(15, 0))) * ВтДанныеНмиУчастка.Коэффициент - ВтДанныеНмиУчастка.Коэффициент
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ > 0
	|	И НЕ итТоварыВЯчейкахОстатки.Ячейка.Заблокирована
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтАссортиментныеУчасткиНМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЯчейкиНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеНмиУчастка";

	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Ссылка);
	Запрос.Выполнить();
КонецПроцедуры
Процедура ИзъятьЗарезервированныеДанные(МенеджерВременныхТаблиц, ТаблицаЗарезервированныхДанных)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст= "ВЫБРАТЬ
				  |	ДанныеПоискаНМРерезв.Склад,
				  |	ДанныеПоискаНМРерезв.Ячейка КАК Ячейка,
				  |	ДанныеПоискаНМРерезв.Номенклатура,
				  |	ДанныеПоискаНМРерезв.Характеристика,
				  |	ДанныеПоискаНМРерезв.СерияНоменклатуры КАК СерияНоменклатуры,
				  |	ДанныеПоискаНМРерезв.КоличествоОстаток КАК КоличествоОстаток,
				  |	ДанныеПоискаНМРерезв.Коэффициент,
				  |	ДанныеПоискаНМРерезв.Предрасчет,
				  |	ДанныеПоискаНМРерезв.Количество КАК Количество,
				  |	ДанныеПоискаНМРерезв.Качество,
				  |	ДанныеПоискаНМРерезв.ДатаРозлива КАК ДатаРозлива,
				  |	ДанныеПоискаНМРерезв.Ярус КАК Ярус,
				  |	ДанныеПоискаНМРерезв.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
				  |	ДанныеПоискаНМРерезв.Приоритет КАК Приоритет,
				  |	ДанныеПоискаНМРерезв.ЯчейкаЗона КАК ЯчейкаЗона
				  |ПОМЕСТИТЬ РезервированныеДанные
				  |ИЗ
				  |	&ТаблицаЗарезервированныхДанных КАК ДанныеПоискаНМРерезв
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ДанныеПоискаНМ.Склад,
				  |	ДанныеПоискаНМ.Ячейка КАК Ячейка,
				  |	ДанныеПоискаНМ.Номенклатура,
				  |	ДанныеПоискаНМ.Характеристика,
				  |	ДанныеПоискаНМ.СерияНоменклатуры КАК СерияНоменклатуры,
				  |	ДанныеПоискаНМ.КоличествоОстаток КАК КоличествоОстаток,
				  |	ДанныеПоискаНМ.Коэффициент,
				  |	ДанныеПоискаНМ.Предрасчет,
				  |	ДанныеПоискаНМ.Количество КАК Количество,
				  |	ДанныеПоискаНМ.Качество,
				  |	ДанныеПоискаНМ.ДатаРозлива КАК ДатаРозлива,
				  |	ДанныеПоискаНМ.Ячейка.Ярус КАК Ярус,
				  |	ДанныеПоискаНМ.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
				  |	ДанныеПоискаНМ.Приоритет КАК Приоритет,
				  |	ДанныеПоискаНМ.ЯчейкаЗона КАК ЯчейкаЗона
				  |ПОМЕСТИТЬ ДанныеПоискаНМ1
				  |ИЗ
				  |	ДанныеПоискаНМ КАК ДанныеПоискаНМ
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |УНИЧТОЖИТЬ ДанныеПоискаНМ
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ВложенныйЗапрос.Склад,
				  |	ВложенныйЗапрос.Ячейка,
				  |	ВложенныйЗапрос.Номенклатура,
				  |	ВложенныйЗапрос.Характеристика,
				  |	ВложенныйЗапрос.СерияНоменклатуры,
				  |	МАКСИМУМ(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток,
				  |	МАКСИМУМ(ВложенныйЗапрос.Коэффициент) КАК Коэффициент,
				  |	МАКСИМУМ(ВложенныйЗапрос.Предрасчет) КАК Предрасчет,
				  |	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
				  |	ВложенныйЗапрос.Качество,
				  |	ВложенныйЗапрос.ДатаРозлива,
				  |	ВложенныйЗапрос.Ярус,
				  |	ВложенныйЗапрос.ИдентификаторУпаковки,
				  |	ВложенныйЗапрос.Приоритет,
				  |	ВложенныйЗапрос.ЯчейкаЗона
				  |ПОМЕСТИТЬ ДанныеПоискаНМРассчет
				  |ИЗ
				  |	(ВЫБРАТЬ
				  |		ДанныеПоискаНМ1.Склад КАК Склад,
				  |		ДанныеПоискаНМ1.Ячейка КАК Ячейка,
				  |		ДанныеПоискаНМ1.Номенклатура КАК Номенклатура,
				  |		ДанныеПоискаНМ1.Характеристика КАК Характеристика,
				  |		ДанныеПоискаНМ1.СерияНоменклатуры КАК СерияНоменклатуры,
				  |		ДанныеПоискаНМ1.КоличествоОстаток КАК КоличествоОстаток,
				  |		ДанныеПоискаНМ1.Коэффициент КАК Коэффициент,
				  |		ДанныеПоискаНМ1.Предрасчет КАК Предрасчет,
				  |		ДанныеПоискаНМ1.Количество КАК Количество,
				  |		ДанныеПоискаНМ1.Качество КАК Качество,
				  |		ДанныеПоискаНМ1.ДатаРозлива КАК ДатаРозлива,
				  |		ДанныеПоискаНМ1.Ярус КАК Ярус,
				  |		ДанныеПоискаНМ1.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
				  |		ДанныеПоискаНМ1.Приоритет КАК Приоритет,
				  |		ДанныеПоискаНМ1.ЯчейкаЗона КАК ЯчейкаЗона
				  |	ИЗ
				  |		ДанныеПоискаНМ1 КАК ДанныеПоискаНМ1
				  |	
				  |	ОБЪЕДИНИТЬ ВСЕ
				  |	
				  |	ВЫБРАТЬ
				  |		РезервированныеДанные.Склад,
				  |		РезервированныеДанные.Ячейка,
				  |		РезервированныеДанные.Номенклатура,
				  |		РезервированныеДанные.Характеристика,
				  |		РезервированныеДанные.СерияНоменклатуры,
				  |		-ЕСТЬNULL(РезервированныеДанные.КоличествоОстаток, 0),
				  |		РезервированныеДанные.Коэффициент,
				  |		РезервированныеДанные.Предрасчет,
				  |		-ЕСТЬNULL(РезервированныеДанные.Количество, 0),
				  |		РезервированныеДанные.Качество,
				  |		РезервированныеДанные.ДатаРозлива,
				  |		РезервированныеДанные.Ярус,
				  |		РезервированныеДанные.ИдентификаторУпаковки,
				  |		РезервированныеДанные.Приоритет,
				  |		РезервированныеДанные.ЯчейкаЗона
				  |	ИЗ
				  |		РезервированныеДанные КАК РезервированныеДанные) КАК ВложенныйЗапрос
				  |
				  |СГРУППИРОВАТЬ ПО
				  |	ВложенныйЗапрос.Склад,
				  |	ВложенныйЗапрос.Ячейка,
				  |	ВложенныйЗапрос.Номенклатура,
				  |	ВложенныйЗапрос.Характеристика,
				  |	ВложенныйЗапрос.СерияНоменклатуры,
				  |	ВложенныйЗапрос.Качество,
				  |	ВложенныйЗапрос.ДатаРозлива,
				  |	ВложенныйЗапрос.Ярус,
				  |	ВложенныйЗапрос.ИдентификаторУпаковки,
				  |	ВложенныйЗапрос.ЯчейкаЗона,
				  |	ВложенныйЗапрос.Приоритет
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ДанныеПоискаНМРассчет.Склад,
				  |	ДанныеПоискаНМРассчет.Ячейка,
				  |	ДанныеПоискаНМРассчет.Номенклатура,
				  |	ДанныеПоискаНМРассчет.Характеристика,
				  |	ДанныеПоискаНМРассчет.СерияНоменклатуры,
				  |	ДанныеПоискаНМРассчет.КоличествоОстаток,
				  |	ДанныеПоискаНМРассчет.Коэффициент,
				  |	ДанныеПоискаНМРассчет.Предрасчет,
				  |	ДанныеПоискаНМРассчет.Количество,
				  |	ДанныеПоискаНМРассчет.Качество,
				  |	ДанныеПоискаНМРассчет.ДатаРозлива,
				  |	ДанныеПоискаНМРассчет.Ярус,
				  |	ДанныеПоискаНМРассчет.ИдентификаторУпаковки,
				  |	ДанныеПоискаНМРассчет.Приоритет,
				  |	ДанныеПоискаНМРассчет.ЯчейкаЗона
				  |ПОМЕСТИТЬ ДанныеПоискаНМ
				  |ИЗ
				  |	ДанныеПоискаНМРассчет КАК ДанныеПоискаНМРассчет
				  |ГДЕ
				  |	ДанныеПоискаНМРассчет.Количество > 0
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |УНИЧТОЖИТЬ ДанныеПоискаНМ1
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |УНИЧТОЖИТЬ ДанныеПоискаНМРассчет
				  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |УНИЧТОЖИТЬ РезервированныеДанные";

	Запрос.УстановитьПараметр("ТаблицаЗарезервированныхДанных", ТаблицаЗарезервированныхДанных);
	Запрос.Выполнить();
	ТаблицаЗарезервированныхДанных.Очистить();
КонецПроцедуры


// Функция - Полчить таблицу по результата запроса
//
// Параметры:
//  РезультатЗапроса - РезультатЗапроса	- результат запроса с выходными данными
// 
// Возвращаемое значение:
// ТаблицаЗначений - пустая таблица значений структурой соотв. структуре результата запроса.
//
Функция ПолчитьТаблицуПоРезультатаЗапроса(РезультатЗапроса)
	ТаблицаЗначений=Новый ТаблицаЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТаблицаЗначений.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	Возврат ТаблицаЗначений;
КонецФункции


// Функция - Получить массив складсих помещений
// 
// Возвращаемое значение:
// Массив  -  массив всех складских помещений из справочника
//
Функция ПолучитьМассивСкладсихПомещений()
	МассивСкладскихПомещений=Новый Массив;
	Выборка=Справочники.итСкладскиеПомещения.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСкладскихПомещений.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат МассивСкладскихПомещений;
КонецФункции

#КонецОбласти
#КонецОбласти

#Область РасходнаяНакладная
Процедура ПечатьРасходнойНакладной(ТабличныйДокумент) Экспорт
	ТабличныйДокумент=Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("Накладная");
	ОбластьЗаголовок=Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ТекстЗаголовка= "Расходная накладная №" + Номер + " от " + Дата;
	ОбластьЗаголовок.Параметры.Заказ=Строка(итОснование);
	ОбластьЗаголовок.Параметры.ДатаОтгрузкиВремяПогрузки="Дата отгрузки " + Формат(итОснование.ДатаОтгрузки, "ДЛФ=D")
		+ ", Время погрузки " + Формат(итОснование.итВремяНачалаПогрузкиКакВремя, "ДЛФ=T");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	ОбластьПоставщик= Макет.ПолучитьОбласть("Поставщик");
	ОбластьПокупатель= Макет.ПолучитьОбласть("Покупатель");
	ОбластьПоставщик.Параметры.ПредставлениеПоставщика=Строка(Организация);
	ОбластьПокупатель.Параметры.ПредставлениеПолучателя=Строка(Контрагент);
	ТабличныйДокумент.Вывести(ОбластьПоставщик);
	ТабличныйДокумент.Вывести(ОбластьПокупатель);
	ОбластьшапкаТаблицы=Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьшапкаТаблицы);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНаборки.Номенклатура КАК Номенклатура,
	|	ТаблицаНаборки.КоличествоФакт КАК КоличествоФакт,
	|	ТаблицаНаборки.ФиксацияСтроки КАК ФиксацияСтроки,
	|	ТаблицаНаборки.ИзъятиеТовара КАК ИзъятиеТовара,
	|	ТаблицаНаборки.КоличествоИзъятия КАК КоличествоИзъятия,
	|	ТаблицаНаборки.СостояниеЗадачи КАК СостояниеЗадачи,
	|	ТаблицаНаборки.ИдентификаторУпаковкиПолучатель
	|ПОМЕСТИТЬ ВтТаблица
	|ИЗ
	|	&ТаблицаНаборки КАК ТаблицаНаборки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВтТаблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	СУММА(ВЫБОР
	|		КОГДА ВтТаблица.ИзъятиеТовара
	|			ТОГДА ВтТаблица.КоличествоФакт - ВтТаблица.КоличествоИзъятия
	|		ИНАЧЕ ВтТаблица.КоличествоФакт
	|	КОНЕЦ) КАК КоличествоФакт,
	|	ВтТаблица.ФиксацияСтроки КАК ФиксацияСтроки,
	|	ВтТаблица.ИзъятиеТовара КАК ИзъятиеТовара,
	|	ВтТаблица.КоличествоИзъятия КАК КоличествоИзъятия,
	|	ВтТаблица.СостояниеЗадачи КАК СостояниеЗадачи
	|ПОМЕСТИТЬ ВтДанныеНаборки
	|ИЗ
	|	ВтТаблица КАК ВтТаблица
	|ГДЕ
	|	ВтТаблица.СостояниеЗадачи <> ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТсд.Отменена)
	|	И ВтТаблица.ФиксацияСтроки
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ВтТаблица.Номенклатура КАК Справочник.Номенклатура),
	|	ВтТаблица.ФиксацияСтроки,
	|	ВтТаблица.ИзъятиеТовара,
	|	ВтТаблица.КоличествоИзъятия,
	|	ВтТаблица.СостояниеЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеНаборки.Номенклатура КАК Номенклатура,
	|	ВтДанныеНаборки.КоличествоФакт КАК КоличествоФакт,
	|	ВЫРАЗИТЬ(ВтДанныеНаборки.КоличествоФакт / ВтДанныеНаборки.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент + 0.499 КАК
	|		ЧИСЛО(15, 0)) КАК Мест,
	|	ВтДанныеНаборки.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент КАК Фасовка,
	|	ВтДанныеНаборки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	|	ВтДанныеНаборки.Номенклатура.ЕдиницаХраненияОстатков.Вес * ВтДанныеНаборки.КоличествоФакт КАК Вес,
	|	ВтДанныеНаборки.Номенклатура.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест
	|ИЗ
	|	ВтДанныеНаборки КАК ВтДанныеНаборки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтТаблица.ИдентификаторУпаковкиПолучатель) КАК ИдентификаторУпаковкиПолучатель
	|ИЗ
	|	ВтТаблица КАК ВтТаблица";

	Запрос.УстановитьПараметр("ТаблицаНаборки", Товары);

	МассивРезультатов = Запрос.ВыполнитьПакет();

	ВыборкаКоличестваПаллет=МассивРезультатов[3].Выбрать();
	ВыборкаДетальныеЗаписи = МассивРезультатов[2].Выбрать();
	Вес=0;
	НомерСтроки=0;
	КоличествоМест=0;
	Количествоштук=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
		НомерСтроки=НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки=НомерСтроки;
		ОбластьСтрока.Параметры.Товар=ВыборкаДетальныеЗаписи.Номенклатура;
		ОбластьСтрока.Параметры.КоличествоМест=ВыборкаДетальныеЗаписи.Мест;
		ОбластьСтрока.Параметры.ЕдиницаМест=ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияМест;
		ОбластьСтрока.Параметры.Фасовка=ВыборкаДетальныеЗаписи.Фасовка;
		ОбластьСтрока.Параметры.Количество=ВыборкаДетальныеЗаписи.КоличествоФакт;
		ОбластьСтрока.Параметры.ЕдиницаИзмерения=ВыборкаДетальныеЗаписи.ЕдиницаХраненияОстатков;
		КоличествоМест=КоличествоМест + ВыборкаДетальныеЗаписи.Мест;
		Количествоштук=Количествоштук + ВыборкаДетальныеЗаписи.КоличествоФакт;
		Вес=Вес + ВыборкаДетальныеЗаписи.Вес;
		Массив=Новый Массив;
		Массив.Добавить(ОбластьСтрока);
		Если Не ТабличныйДокумент.ПроверитьВывод(Массив) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.ВставитьОбласть(ОбластьшапкаТаблицы);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;

	ОбластьИтог=Макет.ПолучитьОбласть("Итого");
	ОбластьИтог.Параметры.ВесБрутто=Вес;
	ОбластьИтог.Параметры.КоличествоМестШт=КоличествоМест;
	ОбластьИтог.Параметры.КоличествоШт=Количествоштук;
	ТабличныйДокумент.Вывести(ОбластьИтог);
	ОбластьПодписи=Макет.ПолучитьОбласть("Подписи");
	ОбластьПодписи.Параметры.КомментарийОРТ=Комментарий;
	ОбластьПодписи.Параметры.УсловияДоговора=итОснование.ДоговорКонтрагента.ОсобыеУсловияДоговора;
	Если ВыборкаКоличестваПаллет.Следующий() Тогда
		ОбластьПодписи.Параметры.КоличествоПаллет=ВыборкаКоличестваПаллет.ИдентификаторУпаковкиПолучатель;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьПодписи);
КонецПроцедуры

#КонецОбласти

#Область ПаллетизацияНаСервере
Процедура РазбитьПоПалетМестамНаСервере()
	Если Товары.Количество() = 0 Тогда
		Сообщить("заполните таблчиную часть <Товары>");
		Возврат;
	КонецЕсли
	;
	МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.ИдентификаторУпаковки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Качество,
	|	Товары.ДатаРозлива,
	|	Товары.ЯчейкаПолучатель,
	|	Товары.СостояниеЗадачи,
	|	Товары.ЯчейкаОтправитель,
	|	Товары.Количество,
	|	Товары.СерияНоменклатуры,
	|	Товары.ИдентификаторУпаковкиПолучатель,
	|	Товары.ПричинаОтменыЗадачи,
	|	Товары.ФиксацияСтроки
	|ПОМЕСТИТЬ ТчТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчТовары.ИдентификаторУпаковки,
	|	ТчТовары.Номенклатура,
	|	ТчТовары.Характеристика,
	|	ТчТовары.Качество,
	|	ТчТовары.ДатаРозлива,
	|	ТчТовары.ЯчейкаПолучатель,
	|	ТчТовары.СостояниеЗадачи,
	|	ТчТовары.ЯчейкаОтправитель,
	|	ТчТовары.Количество,
	|	ТчТовары.СерияНоменклатуры,
	|	ТчТовары.ИдентификаторУпаковкиПолучатель,
	|	ТчТовары.ПричинаОтменыЗадачи,
	|	ТчТовары.ФиксацияСтроки
	|ПОМЕСТИТЬ ТчТоварыОтбор
	|ИЗ
	|	ТчТовары КАК ТчТовары
	|ГДЕ
	|	НЕ ТчТовары.ФиксацияСтроки
	|;
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итСкладскиеЯчейки.Ссылка КАК Ячейка,
	|	ЕСТЬNULL(итТерриторииСкладов.Ссылка, ЗНАЧЕНИЕ(Справочник.итТерриторииСкладов.ПустаяСсылка)) КАК ТерриторияСклада,
	|	итСкладскиеЯчейки.СкладскоеПомещение
	|ПОМЕСТИТЬ ДанныеЯчейки
	|ИЗ
	|	Справочник.итСкладскиеЯчейки КАК итСкладскиеЯчейки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.итСкладскиеПомещения КАК итСкладскиеПомещения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.итТерриторииСкладов КАК итТерриторииСкладов
	|			ПО итСкладскиеПомещения.ТерриторияСклада = итТерриторииСкладов.Ссылка
	|		ПО итСкладскиеЯчейки.СкладскоеПомещение = итСкладскиеПомещения.Ссылка
	|ГДЕ
	|	итСкладскиеЯчейки.Ссылка В
	|		(ВЫБРАТЬ
	|			ТчТовары.ЯчейкаОтправитель
	|		ИЗ
	|			ТчТовары КАК ТчТовары
	|		СГРУППИРОВАТЬ ПО
	|			ТчТовары.ЯчейкаОтправитель)
	|;
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчТоварыОтбор.ИдентификаторУпаковки,
	|	ТчТоварыОтбор.Номенклатура,
	|	ТчТоварыОтбор.Характеристика,
	|	ТчТоварыОтбор.Качество,
	|	ТчТоварыОтбор.ДатаРозлива,
	|	ТчТоварыОтбор.ЯчейкаОтправитель,
	|	ТчТоварыОтбор.Количество,
	|	ТчТоварыОтбор.СерияНоменклатуры,
	|	ЕдиницыИзмерения.итКоличествоНаПаллете,
	|	1 КАК КоэффициентПрочности,
	|	ДанныеЯчейки.ТерриторияСклада
	|ПОМЕСТИТЬ ДанныеДляОбработки
	|ИЗ
	|	ТчТоварыОтбор КАК ТчТоварыОтбор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НМ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|			ПО НМ.ЕдиницаИзмеренияМест = ЕдиницыИзмерения.Ссылка
	|		ПО ТчТоварыОтбор.Номенклатура = НМ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЯчейки КАК ДанныеЯчейки
	|		ПО ТчТоварыОтбор.ЯчейкаОтправитель = ДанныеЯчейки.Ячейка
	|;
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.ИдентификаторУпаковки,
	|	ДанныеДляОбработки.Номенклатура,
	|	ДанныеДляОбработки.ЯчейкаОтправитель,
	|	ДанныеДляОбработки.СерияНоменклатуры,
	|	СУММА(ДанныеДляОбработки.Количество) КАК Количество,
	|	МАКСИМУМ(ДанныеДляОбработки.итКоличествоНаПаллете) КАК итКоличествоНаПаллете,
	|	МАКСИМУМ(ДанныеДляОбработки.КоэффициентПрочности) КАК КоэффициентПрочности,
	|	МАКСИМУМ(ДанныеДляОбработки.ТерриторияСклада) КАК ТерриторияСклада,
	|	ДанныеДляОбработки.Качество,
	|	ДанныеДляОбработки.ДатаРозлива
	|ПОМЕСТИТЬ ДДОГруппировка
	|ИЗ
	|	ДанныеДляОбработки КАК ДанныеДляОбработки
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляОбработки.ИдентификаторУпаковки,
	|	ДанныеДляОбработки.Номенклатура,
	|	ДанныеДляОбработки.ЯчейкаОтправитель,
	|	ДанныеДляОбработки.СерияНоменклатуры,
	|	ДанныеДляОбработки.Качество,
	|	ДанныеДляОбработки.ДатаРозлива
	|;
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДДОГруппировка.ИдентификаторУпаковки,
	|	ДДОГруппировка.Номенклатура КАК Номенклатура,
	|	ДДОГруппировка.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ДДОГруппировка.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ДДОГруппировка.Количество >= ДДОГруппировка.итКоличествоНаПаллете
	|			ТОГДА ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(ДДОГруппировка.Количество, 0) / ВЫБОР
	|					КОГДА ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1) = 0
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1)
	|				КОНЕЦ КАК ЧИСЛО(15, 0))) - ЕСТЬNULL(ДДОГруппировка.Количество, 0) / ВЫБОР
	|					КОГДА ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1) = 0
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1)
	|				КОНЕЦ <= 0
	|					ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ДДОГруппировка.Количество, 0) / ВЫБОР
	|						КОГДА ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1) = 0
	|							ТОГДА 1
	|						ИНАЧЕ ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1)
	|					КОНЕЦ КАК ЧИСЛО(15, 0))
	|				ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ДДОГруппировка.Количество, 0) / ВЫБОР
	|					КОГДА ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1) = 0
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1)
	|				КОНЕЦ - 0.5 КАК ЧИСЛО(15, 0))
	|			КОНЕЦ * ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество,
	|	ДДОГруппировка.итКоличествоНаПаллете КАК итКоличествоНаПаллете,
	|	ДДОГруппировка.КоэффициентПрочности КАК КоэффициентПрочности,
	|	ДДОГруппировка.ТерриторияСклада КАК ТерриторияСклада,
	|	ДДОГруппировка.Качество,
	|	ВЫБОР
	|		КОГДА ДДОГруппировка.Количество >= ДДОГруппировка.итКоличествоНаПаллете
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МожноВзятьЦелуюПаллету,
	|	ДДОГруппировка.ДатаРозлива
	|ПОМЕСТИТЬ ДДОМожноВзятьЦелыеПаллеты
	|ИЗ
	|	ДДОГруппировка КАК ДДОГруппировка
	|ГДЕ
	|	ДДОГруппировка.Количество >= ДДОГруппировка.итКоличествоНаПаллете
	|;
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДДОГруппировка.ИдентификаторУпаковки,
	|	ДДОГруппировка.Номенклатура,
	|	ДДОГруппировка.ЯчейкаОтправитель,
	|	ДДОГруппировка.СерияНоменклатуры,
	|	ЕСТЬNULL(ДДОГруппировка.Количество, 0) - ЕСТЬNULL(ДДОМожноВзятьЦелыеПаллеты.Количество, 0) КАК Количество,
	|	ДДОГруппировка.итКоличествоНаПаллете,
	|	ДДОГруппировка.КоэффициентПрочности,
	|	ДДОГруппировка.ТерриторияСклада,
	|	ДДОГруппировка.Качество,
	|	ДДОГруппировка.ДатаРозлива
	|ПОМЕСТИТЬ ДДООстатокДанныхКРаспределению
	|ИЗ
	|	ДДОГруппировка КАК ДДОГруппировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДДОМожноВзятьЦелыеПаллеты КАК ДДОМожноВзятьЦелыеПаллеты
	|		ПО ДДОГруппировка.ИдентификаторУпаковки = ДДОМожноВзятьЦелыеПаллеты.ИдентификаторУпаковки
	|		И ДДОГруппировка.Номенклатура = ДДОМожноВзятьЦелыеПаллеты.Номенклатура
	|		И ДДОГруппировка.ЯчейкаОтправитель = ДДОМожноВзятьЦелыеПаллеты.ЯчейкаОтправитель
	|		И ДДОГруппировка.СерияНоменклатуры = ДДОМожноВзятьЦелыеПаллеты.СерияНоменклатуры
	|		И (ЕСТЬNULL(ДДОГруппировка.ТерриторияСклада, 1) = ЕСТЬNULL(ДДОМожноВзятьЦелыеПаллеты.ТерриторияСклада, 1))
	|		И ДДОГруппировка.Качество = ДДОМожноВзятьЦелыеПаллеты.Качество
	|ГДЕ
	|	ЕСТЬNULL(ДДОГруппировка.Количество, 0) - ЕСТЬNULL(ДДОМожноВзятьЦелыеПаллеты.Количество, 0) > 0
	|;
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДДОМожноВзятьЦелыеПаллеты.ИдентификаторУпаковки,
	|	ДДОМожноВзятьЦелыеПаллеты.Номенклатура,
	|	ДДОМожноВзятьЦелыеПаллеты.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ДДОМожноВзятьЦелыеПаллеты.СерияНоменклатуры,
	|	ДДОМожноВзятьЦелыеПаллеты.Количество,
	|	ДДОМожноВзятьЦелыеПаллеты.итКоличествоНаПаллете,
	|	ДДОМожноВзятьЦелыеПаллеты.КоэффициентПрочности,
	|	ДДОМожноВзятьЦелыеПаллеты.ТерриторияСклада,
	|	ДДОМожноВзятьЦелыеПаллеты.Качество,
	|	ДДОМожноВзятьЦелыеПаллеты.ДатаРозлива
	|ИЗ
	|	ДДОМожноВзятьЦелыеПаллеты КАК ДДОМожноВзятьЦелыеПаллеты
	|УПОРЯДОЧИТЬ ПО
	|	ЯчейкаОтправитель
	|;
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДДООстатокДанныхКРаспределению.ТерриторияСклада КАК ТерриторияСклада,
	|	ДДООстатокДанныхКРаспределению.Номенклатура КАК Номенклатура,
	|	СУММА(ДДООстатокДанныхКРаспределению.Количество) КАК Количество,
	|	ДДООстатокДанныхКРаспределению.итКоличествоНаПаллете КАК итКоличествоНаПаллете,
	|	ДДООстатокДанныхКРаспределению.КоэффициентПрочности КАК КоэффициентПрочности,
	|	ДДООстатокДанныхКРаспределению.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДДООстатокДанныхКРаспределению.ДатаРозлива
	|ИЗ
	|	ДДООстатокДанныхКРаспределению КАК ДДООстатокДанныхКРаспределению
	|СГРУППИРОВАТЬ ПО
	|	ДДООстатокДанныхКРаспределению.ТерриторияСклада,
	|	ДДООстатокДанныхКРаспределению.Номенклатура,
	|	ДДООстатокДанныхКРаспределению.итКоличествоНаПаллете,
	|	ДДООстатокДанныхКРаспределению.КоэффициентПрочности,
	|	ДДООстатокДанныхКРаспределению.СерияНоменклатуры,
	|	ДДООстатокДанныхКРаспределению.ДатаРозлива
	|УПОРЯДОЧИТЬ ПО
	|	КоэффициентПрочности УБЫВ
	|ИТОГИ
	|	СУММА(Количество),
	|	МАКСИМУМ(итКоличествоНаПаллете),
	|	МАКСИМУМ(КоэффициентПрочности)
	|ПО
	|	ТерриторияСклада,
	|	Номенклатура,
	|	СерияНоменклатуры
	|;
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДДОГруппировка.ИдентификаторУпаковки,
	|	ДДОГруппировка.Номенклатура,
	|	ДДОГруппировка.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ДДОГруппировка.СерияНоменклатуры,
	|	ЕСТЬNULL(итТоварыВЯчейкахОстатки.КоличествоОстаток, 0) КАК Количество,
	|	ДДОГруппировка.итКоличествоНаПаллете,
	|	ДДОГруппировка.КоэффициентПрочности КАК КоэффициентПрочности,
	|	ДДОГруппировка.ТерриторияСклада,
	|	ДДОГруппировка.Качество,
	|	ДДОГруппировка.ДатаРозлива
	|ИЗ
	|	ДДОГруппировка КАК ДДОГруппировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(&Период,) КАК итТоварыВЯчейкахОстатки
	|		ПО ДДОГруппировка.ИдентификаторУпаковки = итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
	|		И ДДОГруппировка.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|		И ДДОГруппировка.СерияНоменклатуры = итТоварыВЯчейкахОстатки.СерияНоменклатуры
	|		И (ВЫБОР
	|			КОГДА ЕСТЬNULL(ДДОГруппировка.Качество,
	|				ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Качество.Новый)
	|			ИНАЧЕ ДДОГруппировка.Качество
	|		КОНЕЦ = итТоварыВЯчейкахОстатки.Качество)
	|		И ДДОГруппировка.ЯчейкаОтправитель = итТоварыВЯчейкахОстатки.Ячейка
	|УПОРЯДОЧИТЬ ПО
	|	КоэффициентПрочности УБЫВ,
	|	ЯчейкаОтправитель
	|;
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДДОГруппировка.Номенклатура,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, ""Нет данных"") = 0
	|			ТОГДА ""Нет данных""
	|		ИНАЧЕ ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, ""Нет данных"")
	|	КОНЕЦ) КАК НетДанныхПоКоличествуПаллет
	|ИЗ
	|	ДДОГруппировка КАК ДДОГруппировка
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, ""Нет данных"") = 0
	|			ТОГДА ""Нет данных""
	|		ИНАЧЕ ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, ""Нет данных"")
	|	КОНЕЦ = ""Нет данных""
	|СГРУППИРОВАТЬ ПО
	|	ДДОГруппировка.Номенклатура";

	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("Период", Дата);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДанныеДляОтбораЦелыхПаллет=МассивРезультатов[7];
	ДанныеДляГуппировкиНовыхПаллет=МассивРезультатов[8];
	ТаблицаДляАнализаИдентификатора=МассивРезультатов[9].Выгрузить();
	ВыборкаНеЗаполненныхДанныхЕдИзмерения=МассивРезультатов[10].Выбрать();
	Отказ=Ложь;
	ПроверкаНаДоступтКПаллетизации(ВыборкаНеЗаполненныхДанныхЕдИзмерения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли
	;
	ЗаполнитьДанныеПаллет(ДанныеДляОтбораЦелыхПаллет, ДанныеДляГуппировкиНовыхПаллет, ТаблицаДляАнализаИдентификатора,
		МенеджерВременныхТаблиц);
КонецПроцедуры

Процедура ПроверкаНаДоступтКПаллетизации(ВыборкаНеЗаполненныхДанныхЕдИзмерения, Отказ)
	Пока ВыборкаНеЗаполненныхДанныхЕдИзмерения.Следующий() Цикл
		Отказ=Истина;
		Сообщить("Для номенклатуры " + ВыборкаНеЗаполненныхДанныхЕдИзмерения.Номенклатура
			+ " не заполнены параметры базовой еденицы измерения-отказ паллетизации");
	КонецЦикла;
КонецПроцедуры

Функция ЗапроситьДанныеНоменклатуры(ТерриторияСклада, Номенклатура, СерияНоменклатуры, МенеджерВременныхТаблиц)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДДООстатокДанныхКРаспределению.ИдентификаторУпаковки,
	|	ДДООстатокДанныхКРаспределению.Номенклатура,
	|	ДДООстатокДанныхКРаспределению.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ДДООстатокДанныхКРаспределению.СерияНоменклатуры,
	|	ДДООстатокДанныхКРаспределению.Количество,
	|	ДДООстатокДанныхКРаспределению.итКоличествоНаПаллете,
	|	ДДООстатокДанныхКРаспределению.КоэффициентПрочности,
	|	ДДООстатокДанныхКРаспределению.ТерриторияСклада,
	|	ДДООстатокДанныхКРаспределению.Качество,
	|	ДДООстатокДанныхКРаспределению.ДатаРозлива
	|ИЗ
	|	ДДООстатокДанныхКРаспределению КАК ДДООстатокДанныхКРаспределению
	|ГДЕ
	|	ДДООстатокДанныхКРаспределению.ТерриторияСклада = &ТерриторияСклада
	|	И ДДООстатокДанныхКРаспределению.Номенклатура = &Номенклатура
	|	И ДДООстатокДанныхКРаспределению.СерияНоменклатуры = &СерияНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЯчейкаОтправитель";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТерриторияСклада", ТерриторияСклада);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Возврат РезультатЗапроса;
КонецФункции

Процедура ЗаполнитьДанныеПаллет(ДанныеДляОтбораЦелыхПаллет, ДанныеДляГуппировкиНовыхПаллет,
	ТаблицаДляАнализаИдентификатора, МенеджерВременныхТаблиц)
	НетДанных=Ложь;
	СистемнаяЯчейка=Константы.СистемнаяЯчейка.Получить();
	ПроверкаДанныхХранилищаНаСистемнуюЯчейку(СистемнаяЯчейка, НетДанных);
	Если НетДанных Тогда
		Возврат;
	КонецЕсли
	;

	Если КоличествоПозицийНоменклатурыНаПаллете = 0 Тогда
		КоличествоПозицийНоменклатурыНаПаллете=1;
	КонецЕсли;
	Если КоличествоПозицийСерииНаПаллете = 0 Тогда
		КоличествоПозицийСерииНаПаллете=1;
	КонецЕсли;
	МассивСформированныхSSCC=Новый Массив;
	СобратьЦелыеОднородныеПаллеты(ДанныеДляОтбораЦелыхПаллет, ТаблицаДляАнализаИдентификатора, МассивСформированныхSSCC);
	СобратьОстаткиТовараВПаллетыСогласноНастройкам(ДанныеДляГуппировкиНовыхПаллет, ТаблицаДляАнализаИдентификатора,
		МенеджерВременныхТаблиц, МассивСформированныхSSCC);
	//Объект.Товары.Очистить();
	ОчиститьНеЗафиксированныеСтрокиТоваров(Товары);
	Для Каждого Паллет Из МассивСформированныхSSCC Цикл
		Для Каждого стр Из Паллет.Данные Цикл
			НоваяСтрока=Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, стр);
			Если стр.ЯчейкаОтправитель.Зона = Перечисления.итWMSЗоныСклада.Пикинга Тогда
				НоваяСтрока.ЯчейкаПикинга=стр.ЯчейкаОтправитель;
			КонецЕсли;
			НоваяСтрока.ЯчейкаПолучатель=СистемнаяЯчейка;
			НоваяСтрока.ИдентификаторУпаковкиПолучатель=Паллет.SSCC;
			НоваяСтрока.ИдентификаторСтроки=Новый УникальныйИдентификатор;
		КонецЦикла;
	КонецЦикла;
	УбратьВозможныеКоллизии();
	ПроставитьЯчейкиПикингаПоЗавершенномуПеремещению();
КонецПроцедуры

Процедура ОчиститьНеЗафиксированныеСтрокиТоваров(ТаблицаКОчистки)
	МассивСтрокКУдалению=Новый Массив;
	Для Каждого стр Из ТаблицаКОчистки Цикл
		Если Не стр.ФиксацияСтроки Тогда
			МассивСтрокКУдалению.Добавить(стр);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из МассивСтрокКУдалению Цикл
		ТаблицаКОчистки.Удалить(Элемент);
	КонецЦикла;
КонецПроцедуры

Процедура ПроверкаДанныхХранилищаНаСистемнуюЯчейку(СистемнаяЯчейка, Отказ)
	Если СистемнаяЯчейка = Справочники.итСкладскиеЯчейки.ПустаяСсылка() Или СистемнаяЯчейка = Неопределено Тогда
		Сообщить("Настройте системную ячейку WMS");
		Отказ=Истина;
		Возврат;
	КонецЕсли
	;
КонецПроцедуры

Процедура ПроставитьЯчейкиПикингаПоЗавершенномуПеремещению()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	итWMSПеремещение.Ссылка
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.итWMSПеремещение КАК итWMSПеремещение
	|ГДЕ
	|	итWMSПеремещение.итОснование = &итОснование
	|	И итWMSПеремещение.ПеремещениеВПикинг
	|	И итWMSПеремещение.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ссылка
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	(ВТ.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Выполнен)
	|			ИЛИ ВТ.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой)
	|			ИЛИ ВТ.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Завершен))";

	Запрос.УстановитьПараметр("итОснование", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Для Каждого Строка Из ВыборкаДетальныеЗаписи.Ссылка.Товары Цикл

			Если Строка.СостояниеЗадачи = Перечисления.итWMSСостоянияЗадачТСД.Выполнена Тогда
				МассивСтрокНаборки=Товары.НайтиСтроки(Новый Структура("ИдентификаторУпаковки,ЯчейкаОтправитель",
					Строка.ИдентификаторУпаковки, Строка.ЯчейкаОтправитель));
				Для Каждого стр Из МассивСтрокНаборки Цикл
					стр.ЯчейкаПикинга=Строка.ЯчейкаПолучатель;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

Процедура УбратьВозможныеКоллизии()
	
//////////// Получение данных настроек wms по филиалу
	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам(
		"СоответствиеФилиаловИорганизация");
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(НастройкиWMS) Тогда
		итWMSСлужебныеПроцедурыИФункции.WMSОповещениеОТиповыхОшибках(НастройкиWMS);
		Возврат;
	КонецЕсли;
	//////////////////////////////////
	Строка=НастройкиWMS.СоответствиеФилиаловИорганизация.Найти(Организация);
	Если Строка = Неопределено Тогда
		ВызватьИсключение "не могу найти филиал";
	КонецЕсли;
	Филиал=Строка.Филиал;

	МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст= "ВЫБРАТЬ
				  |	Товары.ИдентификаторУпаковки,
				  |	Товары.ЯчейкаПолучатель,
				  |	Товары.ЯчейкаОтправитель,
				  |	Товары.ИдентификаторУпаковкиПолучатель,
				  |	Товары.СерияНоменклатуры,
				  |	Товары.Количество
				  |ПОМЕСТИТЬ ТчТовары
				  |ИЗ
				  |	&Товары КАК Товары";

	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.Выполнить();
	АнализОшибокПМУ(МенеджерВременныхТаблиц, Филиал);
КонецПроцедуры

Процедура АнализОшибокПМУ(МенеджерВременныхТаблиц, Филиал)

	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст= "ВЫБРАТЬ
				  |	ТчТовары.ИдентификаторУпаковки,
				  |	ТчТовары.ЯчейкаПолучатель,
				  |	ТчТовары.ЯчейкаОтправитель,
				  |	ТчТовары.ИдентификаторУпаковкиПолучатель,
				  |	ЕСТЬNULL(СерииНоменклатуры.итПризнакПомарочногоУчета, ЛОЖЬ) КАК итПризнакПомарочногоУчета,
				  |	ТчТовары.Количество
				  |ПОМЕСТИТЬ Группировка
				  |ИЗ
				  |	ТчТовары КАК ТчТовары
				  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
				  |		ПО ТчТовары.СерияНоменклатуры = СерииНоменклатуры.Ссылка
				  |СГРУППИРОВАТЬ ПО
				  |	ТчТовары.ИдентификаторУпаковки,
				  |	ТчТовары.ЯчейкаПолучатель,
				  |	ТчТовары.ЯчейкаОтправитель,
				  |	ТчТовары.ИдентификаторУпаковкиПолучатель,
				  |	ТчТовары.Количество,
				  |	ЕСТЬNULL(СерииНоменклатуры.итПризнакПомарочногоУчета, ЛОЖЬ)
				  |;
				  |
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	Группировка.ИдентификаторУпаковки,
				  |	СУММА(Группировка.Количество) КАК Количество
				  |ПОМЕСТИТЬ ИдентификаторыПодПодозрением
				  |ИЗ
				  |	Группировка КАК Группировка
				  |ГДЕ
				  |	Группировка.ИдентификаторУпаковки = Группировка.ИдентификаторУпаковкиПолучатель
				  |	И Группировка.итПризнакПомарочногоУчета
				  |СГРУППИРОВАТЬ ПО
				  |	Группировка.ИдентификаторУпаковки
				  |;
				  |
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	алкХранилищеУпаковокСрезПоследних.Упаковка,
				  |	ИдентификаторыПодПодозрением.ИдентификаторУпаковки,
				  |	ИдентификаторыПодПодозрением.Количество
				  |ПОМЕСТИТЬ ДанныеПаллетыИкоробок
				  |ИЗ
				  |	ИдентификаторыПодПодозрением КАК ИдентификаторыПодПодозрением
				  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеУпаковок.СрезПоследних КАК алкХранилищеУпаковокСрезПоследних
				  |		ПО ИдентификаторыПодПодозрением.ИдентификаторУпаковки = алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки
				  |СГРУППИРОВАТЬ ПО
				  |	алкХранилищеУпаковокСрезПоследних.Упаковка,
				  |	ИдентификаторыПодПодозрением.ИдентификаторУпаковки,
				  |	ИдентификаторыПодПодозрением.Количество
				  |;
				  |
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ДанныеПаллетыИкоробок.ИдентификаторУпаковки,
				  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ алкХранилищеАкцизныхМарокСрезПоследних.Марка) КАК КоличествоМарок,
				  |	МАКСИМУМ(ДанныеПаллетыИкоробок.Количество) КАК КоличествоПоДокументу
				  |ПОМЕСТИТЬ ВтИтоговыеДанныеОшибок
				  |ИЗ
				  |	ДанныеПаллетыИкоробок КАК ДанныеПаллетыИкоробок
				  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних КАК
				  |			алкХранилищеАкцизныхМарокСрезПоследних
				  |		ПО ДанныеПаллетыИкоробок.Упаковка = алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
				  |ГДЕ
				  |	НЕ алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия
				  |СГРУППИРОВАТЬ ПО
				  |	ДанныеПаллетыИкоробок.ИдентификаторУпаковки
				  |;
				  |
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	ВтИтоговыеДанныеОшибок.ИдентификаторУпаковки
				  |ИЗ
				  |	ВтИтоговыеДанныеОшибок КАК ВтИтоговыеДанныеОшибок
				  |ГДЕ
				  |	ВтИтоговыеДанныеОшибок.КоличествоМарок <> ВтИтоговыеДанныеОшибок.КоличествоПоДокументу";
	РезультатЗапроса=Запрос.Выполнить();
	ВыборкаДетальныхЗаписей=РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
		МассивСтрок=Товары.НайтиСтроки(Новый Структура("ИдентификаторУпаковкиПолучатель",
			ВыборкаДетальныхЗаписей.ИдентификаторУпаковки));
		НовоеSSCC=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(Филиал, , ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);
		Для Каждого стр Из МассивСтрок Цикл
			Если Стр.ФиксацияСтроки Тогда
				Продолжить;
			КонецЕсли;
			стр.ИдентификаторУпаковкиПолучатель=НовоеSSCC;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура СобратьОстаткиТовараВПаллетыСогласноНастройкам(ДанныеДляГуппировкиНовыхПаллет,
	ТаблицаДляАнализаИдентификатора, МенеджерВременныхТаблиц, МассивСформированныхSSCC)
	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам(
		"СоответствиеФилиаловИорганизация");
	СтрокаФилиал=НастройкиWMS.СоответствиеФилиаловИорганизация.Найти(Организация);
	Если СтрокаФилиал = Неопределено Тогда
		ВызватьИсключение "нет соответсвия организации и филиала";
	КонецЕсли;
	Филиал=СтрокаФилиал.Филиал;
	ВыборкаСкладов=ДанныеДляГуппировкиНовыхПаллет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСкладов.Следующий() Цикл
		//получаем описание таблицы значений, путем получения пустого результата запроса.
		
		//@skip-check query-in-loop
		ТаблицаОсколковНоменклатуры=ЗапроситьДанныеНоменклатуры(Null, Null, Null, МенеджерВременныхТаблиц);
		ВыборкаНоменклатуры = ВыборкаСкладов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			ВыборкаПоСерии=ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСерии.Следующий() Цикл
				
				//@skip-check query-in-loop
				ДанныеОбхода=ЗапроситьДанныеНоменклатуры(ВыборкаПоСерии.ТерриторияСклада, ВыборкаПоСерии.Номенклатура,
					ВыборкаПоСерии.СерияНоменклатуры, МенеджерВременныхТаблиц);
				КоличествоНоменклатуры=ВыборкаПоСерии.Количество;
				Если КоличествоНоменклатуры < ВыборкаПоСерии.итКоличествоНаПаллете Тогда
					Для Каждого СтрокаТаблицы Из ДанныеОбхода Цикл
						НоваяЗаписьОсколков=ТаблицаОсколковНоменклатуры.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗаписьОсколков, СтрокаТаблицы);
					КонецЦикла;
					Продолжить;
				КонецЕсли;

				ДополнительныеПараметры=Новый Структура;
				ДополнительныеПараметры.Вставить("Филиал", Филиал);
				ДополнительныеПараметры.Вставить("КоличествоНоменклатуры", КоличествоНоменклатуры);
				ДополнительныеПараметры.Вставить("МасствСтрокКудалению", Новый Массив);
				//СобратьПоСерии(ДанныеОбхода,КонтейнерSSCC,МассивСформированныхSSCC,ТаблицаДляАнализаИдентификатора,ДополнительныеПараметры);
				Пока ДополнительныеПараметры.КоличествоНоменклатуры >= ВыборкаПоСерии.итКоличествоНаПаллете Цикл
					СобратьПоСерии(ДанныеОбхода, МассивСформированныхSSCC, ТаблицаДляАнализаИдентификатора,
						ДополнительныеПараметры);
					Для Каждого стр Из ДополнительныеПараметры.МасствСтрокКудалению Цикл
						ДанныеОбхода.Удалить(стр);
					КонецЦикла;
					ДополнительныеПараметры.МасствСтрокКудалению.Очистить();
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ДанныеОбхода Цикл
					НоваяЗаписьОсколков=ТаблицаОсколковНоменклатуры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗаписьОсколков, СтрокаТаблицы);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		ПаллетизацияОсколковНоменклатуры(ТаблицаОсколковНоменклатуры, ТаблицаДляАнализаИдентификатора,
			МассивСформированныхSSCC, Филиал);
	КонецЦикла;
КонецПроцедуры

Процедура ПаллетизацияОсколковНоменклатуры(ТаблицаОсколковНоменклатуры, ТаблицаДляАнализаИдентификатора,
	МассивСформированныхSSCC, Филиал)

	ДополнительныеПараметры=Новый Структура;
	ДополнительныеПараметры.Вставить("Филиал", Филиал);
	ДополнительныеПараметры.Вставить("МасствСтрокКудалению", Новый Массив);

	Пока ТаблицаОсколковНоменклатуры.Количество() > 0 Цикл
		СобратьПоОсколкам(ТаблицаОсколковНоменклатуры, ТаблицаДляАнализаИдентификатора, МассивСформированныхSSCC,
			ДополнительныеПараметры);
		Для Каждого стр Из ДополнительныеПараметры.МасствСтрокКудалению Цикл
			ТаблицаОсколковНоменклатуры.Удалить(стр);
		КонецЦикла;
		ДополнительныеПараметры.МасствСтрокКудалению.Очистить();
	КонецЦикла;
КонецПроцедуры

Процедура СобратьПоОсколкам(ТаблицаОсколковНоменклатуры, ТаблицаДляАнализаИдентификатора, МассивСформированныхSSCC,
	ДополнительныеПараметры)
	МассивВариантовSSCC=Новый Массив;
	МассивПозицийНоменклатурыНаПаллете=Новый Массив;
	МассивСерийНаПаллете=Новый Массив;
	КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
	Шаг=0;
	Для Каждого стр Из ТаблицаОсколковНоменклатуры Цикл
		Если Окр(КонтейнерSSCC.КоэфициентЗаполнения, 3) = 1 Тогда
			Если МассивВариантовSSCC.Количество() = 0 Тогда
				КонтейнерSSCC.SSCC=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(ДополнительныеПараметры.Филиал, ,
					ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);
				КонтейнерSSCC.НовыйSSCC=Истина;
			Иначе
				КонтейнерSSCC.SSCC=МассивВариантовSSCC[0];
			КонецЕсли;
			МассивВариантовSSCC.Очистить();
			МассивСформированныхSSCC.Добавить(КонтейнерSSCC);
			//КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
			Возврат;
		КонецЕсли;
		Если (стр.Количество / стр.итКоличествоНаПаллете) + КонтейнерSSCC.КоэфициентЗаполнения > 1 Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторУпаковки", стр.ИдентификаторУпаковки);
		СтруктураПоиска.Вставить("Номенклатура", стр.Номенклатура);
		СтруктураПоиска.Вставить("СерияНоменклатуры", стр.СерияНоменклатуры);
		СтруктураПоиска.Вставить("ТерриторияСклада", стр.ТерриторияСклада);
		Если МассивПозицийНоменклатурыНаПаллете.Найти(стр.Номенклатура) = Неопределено
			И (МассивПозицийНоменклатурыНаПаллете.Количество() + 1) > КоличествоПозицийНоменклатурыНаПаллете Тогда
			Продолжить;
		КонецЕсли;
		Если МассивСерийНаПаллете.Найти(стр.СерияНоменклатуры) = Неопределено И (МассивСерийНаПаллете.Количество() + 1)
			> КоличествоПозицийСерииНаПаллете Тогда
			Продолжить;
		КонецЕсли;
		Если ПроверитьНаВозможностьЗабратьSSCC(ТаблицаДляАнализаИдентификатора, СтруктураПоиска,
			стр.ИдентификаторУпаковки, стр.Количество) И КонтейнерSSCC.SSCC = "" И Шаг = 0 Тогда
			МассивВариантовSSCC.Добавить(стр.ИдентификаторУпаковки);
		КонецЕсли;

		СтрокаSSCC=ПолучитьСтруктуруРезультатаЗапроса(ТаблицаОсколковНоменклатуры);
		ЗаполнитьЗначенияСвойств(СтрокаSSCC, стр);
		КонтейнерSSCC.Данные.Добавить(СтрокаSSCC);
		КонтейнерSSCC.КоэфициентЗаполнения=КонтейнерSSCC.КоэфициентЗаполнения + (СтрокаSSCC.Количество
			/ СтрокаSSCC.итКоличествоНаПаллете);
		//ДополнительныеПараметры.КоличествоНоменклатуры=ДополнительныеПараметры.КоличествоНоменклатуры-стр.Количество;
		МассивПозицийНоменклатурыНаПаллете.Добавить(стр.Номенклатура);
		МассивСерийНаПаллете.Добавить(стр.СерияНоменклатуры);
		ДополнительныеПараметры.МасствСтрокКудалению.Добавить(стр);
		Шаг=Шаг + 1;
	КонецЦикла;
	Если Окр(КонтейнерSSCC.КоэфициентЗаполнения, 3) <= 1 Тогда
		Если МассивВариантовSSCC.Количество() = 0 Тогда
			КонтейнерSSCC.SSCC=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(ДополнительныеПараметры.Филиал, ,
				ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);
			КонтейнерSSCC.НовыйSSCC=Истина;
		Иначе
			КонтейнерSSCC.SSCC=МассивВариантовSSCC[0];
		КонецЕсли;
		МассивВариантовSSCC.Очистить();
		МассивСформированныхSSCC.Добавить(КонтейнерSSCC);
		//КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
	КонецЕсли;

КонецПроцедуры

Процедура СобратьПоСерии(ДанныеОбхода, МассивСформированныхSSCC, ТаблицаДляАнализаИдентификатора,
	ДополнительныеПараметры)
	МассивВариантовSSCC=Новый Массив;
	КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
	Шаг=0; // переменная для отсчитывая шагов, если шаг первый, и можно забрать sscc из ячейки то берем, в противном случае новое   sscc
	Для Каждого стр Из ДанныеОбхода Цикл
		Если Окр(КонтейнерSSCC.КоэфициентЗаполнения, 3) = 1 Тогда
			Если МассивВариантовSSCC.Количество() = 0 Тогда
				КонтейнерSSCC.SSCC=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(ДополнительныеПараметры.Филиал, ,
					ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);
				КонтейнерSSCC.НовыйSSCC=Истина;
			Иначе
				КонтейнерSSCC.SSCC=МассивВариантовSSCC[0];
			КонецЕсли;
			МассивВариантовSSCC.Очистить();
			МассивСформированныхSSCC.Добавить(КонтейнерSSCC);
			//КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
			Возврат;
		КонецЕсли;
		Если (стр.Количество / стр.итКоличествоНаПаллете) + КонтейнерSSCC.КоэфициентЗаполнения > 1 Тогда
			КоэфициентДляДозаполнения=1 - КонтейнерSSCC.КоэфициентЗаполнения;
			КоличествоКСписаниюИзПаллеты=Окр(КоэфициентДляДозаполнения * стр.итКоличествоНаПаллете);
		Иначе
			КоличествоКСписаниюИзПаллеты=стр.Количество;
		КонецЕсли
		;
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторУпаковки", стр.ИдентификаторУпаковки);
		СтруктураПоиска.Вставить("Номенклатура", стр.Номенклатура);
		СтруктураПоиска.Вставить("СерияНоменклатуры", стр.СерияНоменклатуры);
		СтруктураПоиска.Вставить("ТерриторияСклада", стр.ТерриторияСклада);

		Если ПроверитьНаВозможностьЗабратьSSCC(ТаблицаДляАнализаИдентификатора, СтруктураПоиска,
			стр.ИдентификаторУпаковки, КоличествоКСписаниюИзПаллеты) И КонтейнерSSCC.SSCC = "" И Шаг = 0 Тогда
			МассивВариантовSSCC.Добавить(стр.ИдентификаторУпаковки);
		КонецЕсли;

		СтрокаSSCC=ПолучитьСтруктуруРезультатаЗапроса(ДанныеОбхода);
		ЗаполнитьЗначенияСвойств(СтрокаSSCC, стр);
		СтрокаSSCC.Количество=КоличествоКСписаниюИзПаллеты;
		КонтейнерSSCC.Данные.Добавить(СтрокаSSCC);
		КонтейнерSSCC.КоэфициентЗаполнения=КонтейнерSSCC.КоэфициентЗаполнения + (СтрокаSSCC.Количество
			/ СтрокаSSCC.итКоличествоНаПаллете);
		ДополнительныеПараметры.КоличествоНоменклатуры=ДополнительныеПараметры.КоличествоНоменклатуры
			- КоличествоКСписаниюИзПаллеты;
		стр.Количество=стр.Количество - КоличествоКСписаниюИзПаллеты;
		Если стр.Количество = 0 Тогда
			ДополнительныеПараметры.МасствСтрокКудалению.Добавить(стр);
		КонецЕсли;
		Шаг=Шаг + 1;
	КонецЦикла;
	Если Окр(КонтейнерSSCC.КоэфициентЗаполнения, 3) <= 1 Тогда
		Если МассивВариантовSSCC.Количество() = 0 Тогда
			КонтейнерSSCC.SSCC=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(ДополнительныеПараметры.Филиал, ,
				ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);
			КонтейнерSSCC.НовыйSSCC=Истина;
		Иначе
			КонтейнерSSCC.SSCC=МассивВариантовSSCC[0];
		КонецЕсли;
		МассивВариантовSSCC.Очистить();
		МассивСформированныхSSCC.Добавить(КонтейнерSSCC);
		//КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
	КонецЕсли;

КонецПроцедуры

Процедура СобратьЦелыеОднородныеПаллеты(ДанныеДляОтбораЦелыхПаллет, ТаблицаДляАнализаИдентификатора,
	МассивСформированныхSSCC)
	;

	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам(
		"СоответствиеФилиаловИорганизация");
	СтрокаФилиал=НастройкиWMS.СоответствиеФилиаловИорганизация.Найти(Организация);
	Если СтрокаФилиал = Неопределено Тогда
		ВызватьИсключение "нет соответсвия организации и филиала";
	КонецЕсли;
	Филиал=СтрокаФилиал.Филиал;
	ВыборкаДетльныхЗаписей=ДанныеДляОтбораЦелыхПаллет.Выбрать();
	Пока ВыборкаДетльныхЗаписей.Следующий() Цикл
		КоличествоНоменклатуры=ВыборкаДетльныхЗаписей.Количество;
		Пока КоличествоНоменклатуры > 0 Цикл
			КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("ИдентификаторУпаковки", ВыборкаДетльныхЗаписей.ИдентификаторУпаковки);
			СтруктураПоиска.Вставить("Номенклатура", ВыборкаДетльныхЗаписей.Номенклатура);
			СтруктураПоиска.Вставить("СерияНоменклатуры", ВыборкаДетльныхЗаписей.СерияНоменклатуры);
			СтруктураПоиска.Вставить("ТерриторияСклада", ВыборкаДетльныхЗаписей.ТерриторияСклада);
			Если ПроверитьНаВозможностьЗабратьSSCC(ТаблицаДляАнализаИдентификатора, СтруктураПоиска,
				ВыборкаДетльныхЗаписей.ИдентификаторУпаковки, ВыборкаДетльныхЗаписей.итКоличествоНаПаллете) Тогда
				КонтейнерSSCC.SSCC=ВыборкаДетльныхЗаписей.ИдентификаторУпаковки;
			Иначе
				КонтейнерSSCC.SSCC=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(Филиал, ,
					ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);
				КонтейнерSSCC.НовыйSSCC=Истина;
			КонецЕсли;
			СтрокаSSCC=ПолучитьСтруктуруРезультатаЗапроса(ДанныеДляОтбораЦелыхПаллет);
			ЗаполнитьЗначенияСвойств(СтрокаSSCC, ВыборкаДетльныхЗаписей);
			СтрокаSSCC.Количество=ВыборкаДетльныхЗаписей.итКоличествоНаПаллете;
			КонтейнерSSCC.Данные.Добавить(СтрокаSSCC);
			КонтейнерSSCC.КоэфициентЗаполнения=1;
			КоличествоНоменклатуры=КоличествоНоменклатуры - ВыборкаДетльныхЗаписей.итКоличествоНаПаллете;
			МассивСформированныхSSCC.Добавить(КонтейнерSSCC);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция СоздатьВиртуальныйКонтейнерSSCC()
	СтруктураКонтейнера=Новый Структура;
	СтруктураКонтейнера.Вставить("SSCC", "");
	СтруктураКонтейнера.Вставить("Данные", Новый Массив);
	СтруктураКонтейнера.Вставить("КоэфициентЗаполнения", 0);
	СтруктураКонтейнера.Вставить("НовыйSSCC", Ложь);
	Возврат СтруктураКонтейнера;
КонецФункции

Функция ПроверитьНаВозможностьЗабратьSSCC(ТаблицаДляАнализаИдентификатора, СтруктураПоиска, ИдентификаторУпаковки,
	Количество)
	МассивСтрок=ТаблицаДляАнализаИдентификатора.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() = 0 Тогда
		ВызватьИсключение "ошибка в расчетах паллета " + СтруктураПоиска.ИдентификаторУпаковки;
	КонецЕсли;
	Для Каждого стр Из МассивСтрок Цикл
		стр.Количество=стр.Количество - Количество;
		Если стр.Количество <= 0 Тогда
			ТаблицаДляАнализаИдентификатора.Удалить(стр);
		КонецЕсли;
	КонецЦикла;
	МассивСтрок=ТаблицаДляАнализаИдентификатора.НайтиСтроки(Новый Структура("ИдентификаторУпаковки",
		ИдентификаторУпаковки));
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьСтруктуруРезультатаЗапроса(РезультатВыборки)
	;
	СтруктураДанных=Новый Структура;
	Для Каждого Колонка Из РезультатВыборки.Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя);
	КонецЦикла;
	Возврат СтруктураДанных;
КонецФункции
Процедура ПаллетизацияСервер() Экспорт
	РазбитьПоПалетМестамНаСервере();
КонецПроцедуры
#КонецОбласти

#Область ОпределениеЯчеекЭстокадыСервер
Процедура ОпределитьЯчейкиЭстокадыСерверныйВызов() Экспорт 
	//ЭтаФорма.Записать();
	Если ТипЗнч(итОснование) = тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ОпределитьЯчейкиЭстокадыДляВсехДокументовМаршрута(итОснование);
	Иначе
		ОпределитьЯчейкиЭстокадыДляВсехДокументовМаршрута(Документы.ЗаказПокупателя.ПустаяСсылка());
	КонецЕсли;
КонецПроцедуры
Процедура ОпределитьЯчейкиЭстокадыДляВсехДокументовМаршрута(Заказ)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.ИдентификаторУпаковкиПолучатель,
	|	Товары.ЯчейкаОтправитель,
	|	&Ссылка,
	|	Товары.ФиксацияСтроки
	|ПОМЕСТИТЬ ВтТоварыДокумента
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.ИдентификаторУпаковкиПолучатель,
	|	ВтТоварыДокумента.Ссылка,
	|	итСкладскиеЯчейки.СкладскоеПомещение.ТерриторияСклада КАК ТерриторияСклада
	|ПОМЕСТИТЬ ВтГруппированныеДанныеТоварыДокумента
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.итСкладскиеЯчейки КАК итСкладскиеЯчейки
	|		ПО ВтТоварыДокумента.ЯчейкаОтправитель = итСкладскиеЯчейки.Ссылка
	|ГДЕ
	|	НЕ ВтТоварыДокумента.ФиксацияСтроки
	|СГРУППИРОВАТЬ ПО
	|	ВтТоварыДокумента.ИдентификаторУпаковкиПолучатель,
	|	ВтТоварыДокумента.Ссылка,
	|	итСкладскиеЯчейки.СкладскоеПомещение.ТерриторияСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутизацияДокументыМаршрута.Заказ КАК Заказ
	|ПОМЕСТИТЬ ЗаказыМаршрута
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(МаршрутизацияДокументыМаршрута.Ссылка) КАК Ссылка
	|	ИЗ
	|		Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
	|	ГДЕ
	|		МаршрутизацияДокументыМаршрута.Заказ = &Документ
	|		И МаршрутизацияДокументыМаршрута.Ссылка.Проведен = ИСТИНА) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
	|		ПО МаршрутизацияДокументыМаршрута.Ссылка = ВложенныйЗапрос.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMSНаборка.Ссылка
	|ПОМЕСТИТЬ НаборкиМаршрута
	|ИЗ
	|	ЗаказыМаршрута КАК ЗаказыМаршрута
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка КАК итWMSНаборка
	|		ПО ЗаказыМаршрута.Заказ = итWMSНаборка.итОснование
	|		И итWMSНаборка.ПометкаУдаления = ЛОЖЬ
	|ГДЕ
	|	итWMSНаборка.Ссылка <> &СсылкаИсключения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейках.Ячейка КАК Ячейка,
	|	СУММА(итТоварыВЯчейках.КРазмещению) КАК Количество
	|ПОМЕСТИТЬ ДвжиениеНаборкМаршрутаПоРезерву
	|ИЗ
	|	НаборкиМаршрута КАК НаборкиМаршрута
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках КАК итТоварыВЯчейках
	|		ПО НаборкиМаршрута.Ссылка = итТоварыВЯчейках.Регистратор
	|ГДЕ
	|	итТоварыВЯчейках.ВидДвижения = ЗНАЧЕНИЕ(ВиддвиженияНакопления.Приход)
	|СГРУППИРОВАТЬ ПО
	|	итТоварыВЯчейках.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтГруппированныеДанныеТоварыДокумента.ИдентификаторУпаковкиПолучатель,
	|	ВтГруппированныеДанныеТоварыДокумента.Ссылка,
	|	ВтГруппированныеДанныеТоварыДокумента.ТерриторияСклада КАК ТерриторияСклада
	|ПОМЕСТИТЬ ДанныеSSCCКРазмещению
	|ИЗ
	|	ВтГруппированныеДанныеТоварыДокумента КАК ВтГруппированныеДанныеТоварыДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель,
	|	итWMSНаборкаТовары.Ссылка,
	|	итWMSНаборкаТовары.ЯчейкаОтправитель.СкладскоеПомещение.ТерриторияСклада
	|ИЗ
	|	ЗаказыМаршрута КАК ЗаказыМаршрута
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
	|		ПО ЗаказыМаршрута.Заказ = итWMSНаборкаТовары.Ссылка.итОснование
	|		И итWMSНаборкаТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|ГДЕ
	|	(итWMSНаборкаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Создан)
	|	ИЛИ итWMSНаборкаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Распределяется)
	|	ИЛИ
	|		итWMSНаборкаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Зарезервирован))
	|	И итWMSНаборкаТовары.Ссылка <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеSSCCКРазмещению.ИдентификаторУпаковкиПолучатель,
	|	ДанныеSSCCКРазмещению.Ссылка,
	|	ДанныеSSCCКРазмещению.ТерриторияСклада
	|ПОМЕСТИТЬ ГруппированныеДанныеSSCCКРазмещению
	|ИЗ
	|	ДанныеSSCCКРазмещению КАК ДанныеSSCCКРазмещению
	|СГРУППИРОВАТЬ ПО
	|	ДанныеSSCCКРазмещению.Ссылка,
	|	ДанныеSSCCКРазмещению.ИдентификаторУпаковкиПолучатель,
	|	ДанныеSSCCКРазмещению.ТерриторияСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итСкладскиеЯчейки.Ссылка,
	|	итСкладскиеЯчейки.Линия,
	|	ЕСТЬNULL(итТоварыВЯчейкахОстатки.КоличествоОстаток, 0) + (ЕСТЬNULL(итТоварыВЯчейкахОстатки.КРазмещениюОстаток, 0) -
	|		ЕСТЬNULL(ДвжиениеНаборкМаршрутаПоРезерву.Количество, 0)) КАК ЗанятоеПространство,
	|	итСкладскиеЯчейки.КоличествоПалет
	|ПОМЕСТИТЬ ВТЯчейкиЭстокады
	|ИЗ
	|	Справочник.итСкладскиеЯчейки КАК итСкладскиеЯчейки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	|		ПО итТоварыВЯчейкахОстатки.Ячейка = итСкладскиеЯчейки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвжиениеНаборкМаршрутаПоРезерву КАК ДвжиениеНаборкМаршрутаПоРезерву
	|		ПО ДвжиениеНаборкМаршрутаПоРезерву.Ячейка = итСкладскиеЯчейки.Ссылка
	|ГДЕ
	|	итСкладскиеЯчейки.Зона = ЗНАЧЕНИЕ(Перечисление.итWMSЗоныСклада.Эстакада)
	|	И НЕ итСкладскиеЯчейки.Заблокирована
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппированныеДанныеSSCCКРазмещению.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
	|	ГруппированныеДанныеSSCCКРазмещению.Ссылка КАК Ссылка,
	|	ГруппированныеДанныеSSCCКРазмещению.ТерриторияСклада КАК ТерриторияСклада
	|ИЗ
	|	ГруппированныеДанныеSSCCКРазмещению КАК ГруппированныеДанныеSSCCКРазмещению
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИдентификаторУпаковкиПолучатель)
	|ПО
	|	ТерриторияСклада,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЯчейкиЭстокады.Ссылка,
	|	ВТЯчейкиЭстокады.Линия КАК Линия,
	|	ВТЯчейкиЭстокады.ЗанятоеПространство,
	|	ВТЯчейкиЭстокады.КоличествоПалет,
	|	ВТЯчейкиЭстокады.Ссылка.СкладскоеПомещение.ТерриторияСклада КАК ТерриторияСклада
	|ИЗ
	|	ВТЯчейкиЭстокады КАК ВТЯчейкиЭстокады
	|УПОРЯДОЧИТЬ ПО
	|	ТерриторияСклада,
	|	Линия";

	Запрос.УстановитьПараметр("Документ", Заказ);
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("СсылкаИсключения", Ссылка);
	Если СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен Или СтатусДокумента
		= Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Или СтатусДокумента
		= Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы.итWMSНаборка.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
	КонецЕсли;

	МассивРезультатов = Запрос.ВыполнитьПакет();

	ВыборкаТерриторияСклада = МассивРезультатов[8].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаЯчеек= МассивРезультатов[9].Выгрузить();
	Пока ВыборкаТерриторияСклада.Следующий() Цикл

		МассивЯчеекТерриторииСклада = ТаблицаЯчеек.НайтиСтроки(Новый Структура("ТерриторияСклада",
			ВыборкаТерриторияСклада.ТерриторияСклада));
		Если МассивЯчеекТерриторииСклада.Количество() = 0 Тогда
			Сообщить("Не хватает мест для размещения на территории " + ВыборкаТерриторияСклада.ТерриторияСклада);
			Продолжить;
		КонецЕсли;
		КоличествоПаллетКРазмещению=ВыборкаТерриторияСклада.ИдентификаторУпаковкиПолучатель;
		///попытамеся найти ячейки эстокады находящиеся рядом
		МассивЯчеекКРаспределению=НайтиРядомРасположенныеЯчейкиУдовлетворяющиеУсловиям(КоличествоПаллетКРазмещению,
			МассивЯчеекТерриторииСклада);
		Если МассивЯчеекКРаспределению.Количество() = 0 Тогда
			///если не получилось, то просто свободные ячейки
			МассивЯчеекКРаспределению= НайтиЭстокадыЯчейкиУдовлетворяющиеУсловиям(КоличествоПаллетКРазмещению,
				МассивЯчеекТерриторииСклада);
		КонецЕсли;
		Если МассивЯчеекКРаспределению.Количество() = 0 Тогда
			Сообщить("Не хватает мест для размещения на территории " + ВыборкаТерриторияСклада.ТерриторияСклада);
			Продолжить;
		КонецЕсли;	
		
		// Вставить обработку выборки ВыборкаТерриторияСклада
		ВыборкаПоДокументам = ВыборкаТерриторияСклада.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоДокументам.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаПоДокументам.Выбрать();
			Если ВыборкаПоДокументам.Ссылка <> Ссылка И Не ВыборкаПоДокументам.Ссылка.Пустая() Тогда
				ОбъектИзменения = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
			ИначеЕсли ВыборкаПоДокументам.Ссылка.Пустая() Или ВыборкаПоДокументам.Ссылка = Ссылка Тогда
				ОбъектИзменения=ЭтотОбъект;
			Иначе
				Сообщить("Ошибка определения ячейки эстокады");
				Возврат;
			КонецЕсли
			;
			ИндексМассива=0;
			ЯчейкаПомещенияПаллет= МассивЯчеекКРаспределению[ИндексМассива];
			КоличествоПалетЯчейки=ЯчейкаПомещенияПаллет.КоличествоПалет;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если КоличествоПалетЯчейки <= 0 Тогда
					ИндексМассива=ИндексМассива + 1;
					ЯчейкаПомещенияПаллет= МассивЯчеекКРаспределению[ИндексМассива];
					КоличествоПалетЯчейки=ЯчейкаПомещенияПаллет.КоличествоПалет;
				КонецЕсли;
				МассивСтрокТовары=ОбъектИзменения.Товары.НайтиСтроки(Новый Структура("ИдентификаторУпаковкиПолучатель",
					ВыборкаДетальныеЗаписи.ИдентификаторУпаковкиПолучатель));
				ЯчейкаФиксированнойСтроки=Неопределено;
				////////////// проверяю нет ли для данной паллеты в выполненных заданиях ячейки
				Для Каждого стр Из МассивСтрокТовары Цикл
					Если стр.ФиксацияСтроки Тогда
						ЯчейкаФиксированнойСтроки=стр.ЯчейкаПолучатель;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				////////////// проставляю ячейку, если новая строка относиться к выполненной паллете, то помещаю ее в ту же ячейку
				Для Каждого стр Из МассивСтрокТовары Цикл
					Если ЯчейкаФиксированнойСтроки = Неопределено Тогда
						стр.ЯчейкаПолучатель=ЯчейкаПомещенияПаллет;
					Иначе
						стр.ЯчейкаПолучатель=ЯчейкаФиксированнойСтроки;
					КонецЕсли;
				КонецЦикла;

				Если ЯчейкаФиксированнойСтроки = Неопределено Тогда
					КоличествоПалетЯчейки=КоличествоПалетЯчейки - 1;
				КонецЕсли;
			КонецЦикла;
			Если ОбъектИзменения.Ссылка <> Ссылка Тогда
				ОбъектИзменения.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция НайтиРядомРасположенныеЯчейкиУдовлетворяющиеУсловиям(КоличествоПаллетКРазмещению, МассивЯчеекТерриторииСклада)
	;
	НакопительнаяЧастьПаллетЯчеек=0;
	МассивЯчеек= Новый Массив;
	ПредыдущаяЯчейка=Неопределено;
	Для Каждого стр Из МассивЯчеекТерриторииСклада Цикл
		Если ПредыдущаяЯчейка = Неопределено Тогда
			НакопительнаяЧастьПаллетЯчеек=стр.КоличествоПалет;
			ПредыдущаяЯчейка=стр.Ссылка;
			МассивЯчеек.Добавить(стр.Ссылка);
		Иначе
			Если Число(ПредыдущаяЯчейка.Линия) + 1 <> стр.Линия Тогда
				ПредыдущаяЯчейка=стр.Ссылка;
				НакопительнаяЧастьПаллетЯчеек=стр.КоличествоПалет;
				МассивЯчеек.Очистить();
				МассивЯчеек.Добавить(стр.Ссылка);
			Иначе
				ПредыдущаяЯчейка=стр.Ссылка;
				НакопительнаяЧастьПаллетЯчеек=НакопительнаяЧастьПаллетЯчеек + стр.КоличествоПалет;
				МассивЯчеек.Добавить(стр.Ссылка);

			КонецЕсли;
		КонецЕсли;
		Если НакопительнаяЧастьПаллетЯчеек >= КоличествоПаллетКРазмещению Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НакопительнаяЧастьПаллетЯчеек >= КоличествоПаллетКРазмещению Тогда
		Возврат МассивЯчеек;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
КонецФункции

Функция НайтиЭстокадыЯчейкиУдовлетворяющиеУсловиям(КоличествоПаллетКРазмещению, МассивЯчеекТерриторииСклада)
	НакопительнаяЧастьПаллетЯчеек=0;
	МассивЯчеек= Новый Массив;
	Для Каждого стр Из МассивЯчеекТерриторииСклада Цикл
		НакопительнаяЧастьПаллетЯчеек=НакопительнаяЧастьПаллетЯчеек + стр.КоличествоПалет;
		МассивЯчеек.Добавить(стр.Ссылка);
		Если НакопительнаяЧастьПаллетЯчеек >= КоличествоПаллетКРазмещению Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НакопительнаяЧастьПаллетЯчеек >= КоличествоПаллетКРазмещению Тогда
		Возврат МассивЯчеек;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;

КонецФункции
#КонецОбласти

#Область ОбязательныеПроцедурыИФункции
Процедура ДействияПриОтказеОтИсполненияДокумента() Экспорт
	ЭтотОбъект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется;
	Товары.Загрузить(СнимокТабличнойЧастиДоРаспределения.Получить());
КонецПроцедуры

Процедура ДействияПриФиксацииЗадачДокумента() Экспорт
	ЭтотОбъект.СтатусДокумента=СтатусДокументаПриФиксации();
	Если Не ТипЗнч(ПроведениеБезИзмененияДатыЗавршения) = Тип("Булево") Тогда
		ДатаЗавершенияДокумента=ТекущаяДата();
	КонецЕсли;
	ФиксацияСтрокДокумента();
	Отказ=Ложь;
	итWMSСлужебныеПроцедурыИФункции.СоздатьДокументПереупаковкиПМУ(Ссылка, Отказ);
	Если Отказ Тогда
		СтатусДокумента= Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой;
		Комментарий=Комментарий + " #Ошибка переупаковки марок";
	Иначе
		ОчиститьДанныеПомарочногоУчета();
	КонецЕсли;
#Область ГвоздиГифта
	Если ТипЗнч(итОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ОбъектЗаказа=итОснование.ПолучитьОбъект();
		ОбъектЗаказа.Набран=Истина;
		ОбъектЗаказа.ДатаЗавершенияНаборки=ДатаЗавершенияДокумента;
		ОбъектЗаказа.Записать();
	КонецЕсли;
#КонецОбласти
КонецПроцедуры
Функция СтатусДокументаПриФиксации()
	МассивСтрокОтмененныхЗадач=Товары.НайтиСтроки(Новый Структура("СостояниеЗадачи,ФиксацияСтроки",
		Перечисления.итWMSСостоянияЗадачТСД.Отменена, Ложь));
	Если МассивСтрокОтмененныхЗадач.Количество() > 0 Или КоличествоПланНеРавноФакту() Тогда
		Возврат Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой;
	Иначе
		Возврат Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен;
	КонецЕсли;
КонецФункции
Функция КоличествоПланНеРавноФакту()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	итWMSПеремещениеТовары.Количество КАК Количество,
	|	итWMSПеремещениеТовары.КоличествоФакт КАК КоличествоФакт,
	|	&Ссылка,
	|	итWMSПеремещениеТовары.ФиксацияСтроки
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Товары КАК итWMSПеремещениеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВтТовары.Количество) КАК Количество,
	|	СУММА(ВтТовары.КоличествоФакт) КАК КоличествоФакт,
	|	ВтТовары.Ссылка
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|ГДЕ
	|	НЕ ВтТовары.ФиксацияСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТовары.Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Товары", Товары);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ВыборкаДетальныеЗаписи.Количество <> ВыборкаДетальныеЗаписи.КоличествоФакт Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь
		КонецЕсли
		;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции

Процедура ФиксацияСтрокДокумента()
	Для Каждого стр Из Товары Цикл
		стр.ФиксацияСтроки=Истина;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
#КонецЕсли