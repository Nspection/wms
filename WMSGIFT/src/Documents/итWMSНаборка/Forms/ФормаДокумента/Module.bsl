

#Область ОбработчикиСобытий
#Область ОткрытиеЗакрытиеЗаписиФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен Тогда
		ОбновитьДанныеСТСД();
	КонецЕсли;
	Если Параметры.Ключ.Пустая() тогда
		Если не Объект.СозданНаОснованиСерверногоВызова тогда
			Объект.итОснование=Неопределено;
		иначе
			Объект.СозданНаОснованиСерверногоВызова=Ложь;
		КонецЕсли;
		Объект.НеРаспределятьНаТСД=Истина;
		//Объект.РежимРезервированияБезПеремещения=Истина;
		//Объект.РезервироватьЯчейкиЭстокады=Истина;
		Если Объект.Товары.Количество()>0 тогда
			для Каждого стр из Объект.Товары цикл
				стр.ИдентификаторСтроки=новый УникальныйИдентификатор;
				стр.ИдентификаторУпаковкиПолучатель="";
				стр.ЯчейкаПикинга=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
				стр.КоличествоФакт=0;
				стр.ФиксацияСтроки=Ложь;
				стр.ИзъятиеТовара=Ложь;
			КонецЦикла;
		КонецЕсли;
		Если Объект.Организация.Пустая() Тогда
		ОбщегоНазначения.УстановитьОрганизациюВДокументе(Объект);
		КонецЕсли;
		Объект.Дата=ТекущаяДатаСеанса();
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		Объект.Ответственный=ПараметрыСеанса.ТекущийПользователь;
		Объект.КоличествоПозицийНоменклатурыНаПаллете=1;
		Объект.КоличествоПозицийСерииНаПаллете=1;
		ДанныеОбъекта=РеквизитФормыВЗначение("Объект");
		ДанныеОбъекта.ПроверкаНаНаличиеНесколькихНаборакНаОснованииЗаказа(Отказ);
	КонецЕсли;
	ПроставитьПредставлениеИдентификатора();
	ПроверитьНаПредупреждение();
	//////////// Получение данных настроек wms
	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(НастройкиWMS) Тогда
		итWMSСлужебныеПроцедурыИФункции.WMSОповещениеОТиповыхОшибках(НастройкиWMS);
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	АдресХраненияWMSНастроекФормы=ПоместитьВоВременноеХранилище(НастройкиWMS,ЭтаФорма.УникальныйИдентификатор);
	//////////////////////////////////

КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	НаборЗаписей=РегистрыСведений.итWMSКорзинаНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КлючДанных.Установить(ЭтаФорма.УникальныйИдентификатор);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если не ЗавершениеРаботы Тогда 
	ПередЗакрытиемНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи) 
	Отказ=Ложь;
	Если Объект.РежимТестирования Тогда  
		СоздатьПерезаписатьДокументПеремещения(ПараметрыЗаписи,Объект.Ссылка,Отказ);
	КонецЕсли;
	Если не Отказ Тогда 
		ЗакрытьПослеЗаписи=Ложь;
		Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи",ЗакрытьПослеЗаписи) Тогда
			Если ЗакрытьПослеЗаписи Тогда 
				ЭтаФорма.Закрыть();
			КонецЕсли;		
		КонецЕсли; 
	КонецЕсли;
	ПодключитьОбработчикОжидания("ПослеЗаписиОповещение",0.1,Истина);
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписиОповещение()Экспорт 
	ПереполучитьОбъектФормы();
	ВидимостьДоступностьЭлементов();
	ПроставитьПредставлениеИдентификатора();
	РассчитатьСрокГодностиИФлагОкраскиДляВсехСтрок();
	ПроверитьНаПредупреждение();
КонецПроцедуры
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ДокументВСтатусеПерезапуска() и не ПараметрыЗаписи.Свойство("ПерезапускДокумента") и ПараметрыЗаписи.РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		//Если Объект.Дата>'20190211'Тогда 	
		ПроверкаНаПерезапускДокумента(Отказ, ПараметрыЗаписи);
		//КонецЕсли;
		Если Отказ Тогда 
			Возврат
		КонецЕсли;	
	ИначеЕсли ПараметрыЗаписи.Свойство("ПерезапускДокумента") Тогда 
		УстановитьСтатусДокументаПерезпуска();
	КонецЕсли;
	
	Если НеВсеЯчейкиПикинаЗаполненны() и ПараметрыЗаписи.РежимЗаписи=РежимЗаписиДокумента.Проведение и СтатусДокументаСозданЗарезервирован()   тогда
		Если не ПараметрыЗаписи.Свойство("ПоложительныйОтветНаВопрос") и не Объект.РежимРезервированияБезПеремещения тогда
			Оповещение=новый ОписаниеОповещения("ОповещениеПередЗаписью",ЭтаФорма,ПараметрыЗаписи);
			ПоказатьВопрос(Оповещение,"Не все ячейки пикинга заполненны,будет создано/перезаписано  перемещение. Продолжить?",РежимДиалогаВопрос.ДаНет);
			Отказ=Истина;
			Возврат;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПередЗаписью(Результат,ПараметрыОповещения) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;
	ПараметрыОповещения.Вставить("ПоложительныйОтветНаВопрос",Истина);
	ЭтаФорма.Записать(ПараметрыОповещения);	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) 
	Если не Объект.РежимТестирования Тогда 
	СоздатьПерезаписатьДокументПеремещения(ПараметрыЗаписи,ТекущийОбъект,Отказ); 
	КонецЕсли;
	Если ТекущийОбъект.ПометкаУдаления или ПараметрыЗаписи.РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения тогда
		ПопытатьсяПометитьНаУдалениеПеремещение(ПараметрыЗаписи,ТекущийОбъект,Отказ);	
	КонецЕсли;
	Если ТекущийОбъект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан или
		ТекущийОбъект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован 
		тогда
		ПроверитьРаспределениеНаТСДПеремещения(ПараметрыЗаписи,ТекущийОбъект,Отказ);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПриИзменении

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Картинка = новый Картинка(ПолучитьКартинкуИзБиблиотеки());
	АдресКартинкиКуба=ПоместитьВоВременноеХранилище(Картинка,ЭтаФорма.УникальныйИдентификатор);
	ВидимостьДоступностьЭлементов();
	ВариантОтображенияПользователя();
	РассчитатьКоличествоПаллет();
	РассчитатьСрокГодностиИФлагОкраскиДляВсехСтрок();
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоНоменклатураПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоХарактеристикаПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоКачествоПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоДатаРозливаПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры


&НаКлиенте
Процедура ТоварыДеревоКоличествоПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
	РассчетКоличестваВУпаковкеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоСостояниеЗадачиПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].СостояниеЗадачи=Элемент.Родитель.ТекущиеДанные.СостояниеЗадачи;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоЯчейкаПолучательПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].ЯчейкаПолучатель=Элемент.Родитель.ТекущиеДанные.ЯчейкаПолучатель;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
КонецПроцедуры
&НаКлиенте
Процедура ТоварыДеревоЯчейкаОтправительПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].ЯчейкаОтправитель=Элемент.Родитель.ТекущиеДанные.ЯчейкаОтправитель;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоСерияНоменклатурыПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры
#КонецОбласти
&НаКлиенте
Процедура ТоварыДеревоПередУдалением(Элемент, Отказ)
	Если Элемент.ВыделенныеСтроки.Количество()>1 тогда
		Сообщить("В режиме дерева можно удалять 1 любую строку за раз");
		Отказ=Истина;
		Возврат
	КонецЕсли;	
	Если Элемент.ТекущиеДанные.СтрокаУпаковки тогда
		Оповещение = новый ОписаниеОповещения("ОбработчикДиалогов",ЭтаФорма," ОбработчикУдалениеУпаковки();");
		ПоказатьВопрос(Оповещение,"Если удалить паллету, то все строки в ней так же будут удалены",РежимДиалогаВопрос.ДаНет);
		Отказ=Истина;
		Возврат
	иначе
		МассивСтроки=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",Элемент.ТекущиеДанные.ИдентификаторСтрокиПредставление));
		Строка=МассивСтроки[0];
		Объект.Товары.Удалить(Строка);
	КонецЕсли;
	ЭтаФорма.Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтрокаПеретаскиванияКуда=Элементы.ТоварыДерево.ДанныеСтроки(Строка);
	Если не СтрокаПеретаскиванияКуда.СтрокаУпаковки тогда
		пока не СтрокаПеретаскиванияКуда.СтрокаУпаковки цикл
			СтрокаПеретаскиванияКуда=СтрокаПеретаскиванияКуда.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	СтандартнаяОбработка=Ложь;
	для Каждого стр из ПараметрыПеретаскивания.Значение цикл
		ТекущаяСтрокаОбработки=Элементы.ТоварыДерево.ДанныеСтроки(стр);
		Если ТекущаяСтрокаОбработки.СтрокаУпаковки тогда
			Продолжить;
		КонецЕсли;	
		ТекущаяСтрокаОбработки.ИдентификаторУпаковки=СтрокаПеретаскиванияКуда.ИдентификаторУпаковки;
		НоваяСтрока=СтрокаПеретаскиванияКуда.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрокаОбработки);
		НоваяСтрока.ЯчейкаПолучатель=СтрокаПеретаскиванияКуда.ЯчейкаПолучатель;
		НоваяСтрока.ЯчейкаОтправитель=СтрокаПеретаскиванияКуда.ЯчейкаОтправитель;
		СтарыйРодитель=ТекущаяСтрокаОбработки.ПолучитьРодителя();
		СтарыйРодитель.ПолучитьЭлементы().Удалить(ТекущаяСтрокаОбработки);
		
		/////Обработчики Изменения
		СтрукрутраДляИзменения=новый Структура;
		СтрукрутраДляИзменения.Вставить("Имя","ИдентификаторУпаковки");
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		ОбработчикТрансляцииПриИзменении(СтрукрутраДляИзменения);
		СтрукрутраДляИзменения.Вставить("Имя","ЯчейкаПолучатель");
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		ОбработчикТрансляцииПриИзменении(СтрукрутраДляИзменения);
		
		СтрукрутраДляИзменения.Вставить("Имя","ЯчейкаОтправитель");
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		ОбработчикТрансляцииПриИзменении(СтрукрутраДляИзменения);
		
		
		СтрукрутраДляИзменения.Имя="Количество";
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		РассчетКоличестваВУпаковкеПриИзменении(СтрукрутраДляИзменения) ;
		
		СтрукрутраДляИзменения.Имя="Количество";
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",СтарыйРодитель));
		РассчетКоличестваВУпаковкеПриИзменении(СтрукрутраДляИзменения) ;
		
	КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура РезервироватьЯчейкиЭстокадыПриИзмененииНаСервере()
	Отказ=Ложь;
	НастройкиWMS=ПолучитьИзВременногоХранилища(АдресХраненияWMSНастроекФормы);
	ПроверкаДанныхХранилищаНаСистемнуюЯчейку(НастройкиWMS,Отказ);
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	СистемнаяЯчейка=Константы.СистемнаяЯчейка.Получить();
	для Каждого стр из Объект.Товары цикл
		стр.ЯчейкаПолучатель =СистемнаяЯчейка; 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РезервироватьЯчейкиЭстокадыПриИзменении(Элемент)
	Если  Объект.РежимРезервированияБезПеремещения Тогда 
		Объект.РезервироватьЯчейкиЭстокады=Ложь;
	КонецЕсли;
	РезервироватьЯчейкиЭстокадыПриИзмененииНаСервере();
КонецПроцедуры

#Область ОбработкаВыбора_НачалоВыбора
&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		Если ИсточникВыбора.ИмяФормы="ОбщаяФорма.ФормаПодбораНоменклатуры" Тогда 
			Если ТипЗнч(ВыбранноеЗначение)=Тип("Массив") Тогда
				ЗаполнениеВыбораПодбора(ВыбранноеЗначение)
			КонецЕсли;
		КонецЕсли;
		Если ИсточникВыбора.ИмяФормы="Документ.итWMSНаборка.Форма.ФормаВыбораЗаказа" Тогда 
			Если ТипЗнч(ВыбранноеЗначение)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ЗаполнитьЗначениеОснования(ВыбранноеЗначение)
			КонецЕсли;
		КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнениеВыбораПодбора(ВыбранноеЗначение)
	Для Каждого стр из ВыбранноеЗначение цикл
		НоваяСтрока=Объект.Товары.Добавить();
		НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
		НоваяСтрока.ЯчейкаОтправитель=стр.Ячейка;
		НоваяСтрока.ДатаРозлива =  итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементДанныхНаСервере(стр.СерияНоменклатуры,"ДатаПроизводства");
	КонецЦикла;
	РассчитатьКоличествоПаллет();
	СрокиГодностиИфлагОкраски(НоваяСтрока);
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
КонецПроцедуры
&НаКлиенте
Процедура ТоварыХарактеристикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКачествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыКачествоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыЯчейкаОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыЯчейкаОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыКоличествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыКоличествоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти 
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="WMSПроведениеОтменаПроведенияСвязанныхДокументовНаборки" и Параметр=Объект.Ссылка тогда
		ОбновитьДокументНаСервере();
		ВидимостьДоступностьЭлементов();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура РежимРезервированияБезПеремещенияПриИзменении(Элемент)
	Если Объект.РежимРезервированияБезПеремещения Тогда 
		Объект.РезервироватьЯчейкиЭстокады=Ложь;
		Объект.НеРаспределятьНаТСД=Истина;
	КонецЕсли;
	Объект.Дата=ТекущаяДата();
	РезервироватьЯчейкиЭстокадыПриИзмененииНаСервере();
	ВидимостьДоступностьЭлементов();
КонецПроцедуры
&НаКлиенте
Процедура НеРаспределятьНаТСДПриИзменении(Элемент)
	Если Объект.РежимРезервированияБезПеремещения Тогда 
		Объект.НеРаспределятьНаТСД=Истина;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	РассчитатьКоличествоПаллет();
	СрокиГодностиИфлагОкраски(ТекущийЭлемент.ТекущиеДанные);
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры
&НаКлиенте
Процедура ТоварыИзъятиеТовараПриИзменении(Элемент)
	Элемент.Родитель.ТекущиеДанные.КоличествоИзъятия=Элемент.Родитель.ТекущиеДанные.КоличествоФакт;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура ВВидеДерева(Команда)
	ВВидеДереваНаСервере();
	Элементы.ТоварыДерево.Видимость=Истина;
	Элементы.Товары.Видимость=Ложь;
	ТригерОтображения=Истина;
КонецПроцедуры
&НаСервере
Процедура ВВидеДереваНаСервере()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	ТоварыДерево.ПолучитьЭлементы().Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтрокиПредставление,
	|	Товары.ИдентификаторУпаковки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Качество,
	|	Товары.ДатаРозлива,
	|	Товары.ЯчейкаПолучатель,
	|	Товары.СостояниеЗадачи,
	|	Товары.ЯчейкаОтправитель,
	|	Товары.Количество,
	|	Товары.СерияНоменклатуры
	|ПОМЕСТИТЬ ТчТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчТовары.ИдентификаторСтрокиПредставление,
	|	ТчТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТчТовары.Номенклатура,
	|	ТчТовары.Характеристика,
	|	ТчТовары.Качество,
	|	ТчТовары.ДатаРозлива,
	|	ТчТовары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	ТчТовары.СостояниеЗадачи КАК СостояниеЗадачи,
	|	ТчТовары.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ТчТовары.Количество КАК Количество,
	|	ТчТовары.СерияНоменклатуры
	|ИЗ
	|	ТчТовары КАК ТчТовары
	|ИТОГИ
	|	МАКСИМУМ(ЯчейкаПолучатель),
	|	МАКСИМУМ(СостояниеЗадачи),
	|	МАКСИМУМ(ЯчейкаОтправитель),
	|	СУММА(Количество)
	|ПО
	|	ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаУпаковка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	пока ВыборкаУпаковка.Следующий() цикл
		НоваяСтрокаУпаковкаДерево = ТоварыДерево.ПолучитьЭлементы().Добавить();
		НоваяСтрокаУпаковкаДерево.ИдентификаторУпаковки= ВыборкаУпаковка.ИдентификаторУпаковки;
		НоваяСтрокаУпаковкаДерево.ЯчейкаПолучатель = ВыборкаУпаковка.ЯчейкаПолучатель;
		НоваяСтрокаУпаковкаДерево.ЯчейкаОтправитель = ВыборкаУпаковка.ЯчейкаОтправитель;
		НоваяСтрокаУпаковкаДерево.Количество=ВыборкаУпаковка.Количество;
		НоваяСтрокаУпаковкаДерево.СостояниеЗадачи=ВыборкаУпаковка.СостояниеЗадачи;
		НоваяСтрокаУпаковкаДерево.Картинка=АдресКартинкиКуба;
		НоваяСтрокаУпаковкаДерево.СтрокаУпаковки=Истина;
		
		ВыборкаДетальныеЗаписи=ВыборкаУпаковка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрокаНоменклатуры = НоваяСтрокаУпаковкаДерево.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатуры,ВыборкаДетальныеЗаписи);
			НоваяСтрокаНоменклатуры.ЯчейкаПолучатель=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
			НоваяСтрокаНоменклатуры.ЯчейкаОтправитель=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
		КонецЦикла;
	КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
&НаКлиенте
Процедура ВВидеСписка(Команда)
	Элементы.ТоварыДерево.Видимость=Ложь;
	Элементы.Товары.Видимость=Истина;
	ТригерОтображения=Ложь;
КонецПроцедуры
&НаКлиенте
Процедура СкопироватьТовары(Команда)
	Если  Элементы.ГруппаТовары.ТолькоПросмотр тогда
		Возврат
	КонецЕсли;	
	Если ТекущийЭлемент.Имя="Товары" тогда
		НоваяСтрока=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущийЭлемент.ТекущиеДанные);
		НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
		НоваяСтрока.ИдентификаторСтрокиПредставление=Строка(НоваяСтрока.ИдентификаторСтроки);
		НоваяСтрока.Количество=0;
		НоваяСтрока.КоличествоФакт=0;
		НоваяСтрока.ЯчейкаПикинга=СсылкаНаПустуюЯчейку();
		НоваяСтрока.ЯчейкаОтправитель=СсылкаНаПустуюЯчейку();
		НоваяСтрока.ЯчейкаПолучатель=СсылкаНаПустуюЯчейку();
		НоваяСтрока.ФиксацияСтроки=Ложь;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ДобавитьТовары(Команда)
	Если  Элементы.ГруппаТовары.ТолькоПросмотр тогда
		Возврат
	КонецЕсли;	
	НоваяСтрока=Объект.Товары.Добавить();
	НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
	НоваяСтрока.ИдентификаторСтрокиПредставление= Строка(НоваяСтрока.ИдентификаторСтроки);
КонецПроцедуры
&НаКлиенте
Процедура Развернуть(Команда)
	//СтрокиПаллет=ПаллетМеста.ПолучитьЭлементы();
	//для Каждого Паллета из СтрокиПаллет цикл
	//	Элементы.ПаллетМеста.Развернуть(Паллета.ПолучитьИдентификатор());
	//КонецЦикла;
	Строки=ТоварыДерево.ПолучитьЭлементы();
	Если Строки.Количество()>0 тогда
		РазвернутьДанные(Строки);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура РазвернутьДанные(Строки)
	для Каждого Строка из Строки цикл
		Элементы.ТоварыДерево.Развернуть(Строка.ПолучитьИдентификатор());
		ПодчиненныеСтроки= Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество()>0 тогда
			РазвернутьДанные(ПодчиненныеСтроки);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура Свернуть(Команда)
	Строки=ТоварыДерево.ПолучитьЭлементы();
	Если Строки.Количество()>0 тогда
		СвернутьДанные(Строки);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте	
Процедура СвернутьДанные(Строки)
	для Каждого Строка из Строки цикл
		ПодчиненныеСтроки= Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество()>0 тогда
			СвернутьДанные(ПодчиненныеСтроки);
		КонецЕсли;	
		Элементы.ТоварыДерево.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьОтЗаказа(Команда)
	Оповещение=новый ОписаниеОповещения("ОтвязатьОтЗаказаОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы уверены в том , что хотите отвзяать Наборку? Данное имеет невозвратимый характер." ,РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьОтЗаказаОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;
	ОтвязатьОтЗаказаНаСервере();
	ВидимостьДоступностьЭлементов();
КонецПроцедуры
&НаСервере
Процедура ОтвязатьОтЗаказаНаСервере()
	Если  НаборкаУчавствуетВОтгрузке() Тогда 
		Если не РольДоступна("ПолныеПрава") Тогда
		Сообщить("Наборка учавствует в отгрузке, не отвязать от заказа. Если отгрузка распределяется или зарезервирована - пометьте ее на удаление");
		Возврат
		КонецЕсли;
	КонецЕсли;
	Объект.итОснование=Неопределено;
	ЭтаФорма.Записать();
КонецПроцедуры
&НаКлиенте
Процедура СоздатьПеремещениеНаСклад(Команда)
	ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаДокумента",новый Структура("ИтОснованиеДокумента",Объект.Ссылка),ЭтаФорма);
КонецПроцедуры

#Область ГИФТ
&НаКлиенте
Процедура ОпределитьЯчейкиЭстокады(Команда)
	Оповещение = новый ОписаниеОповещения("ОпределитьЯчейкиЭстокадыОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Если наборка включена в маршрут, то ячейки эстокады будут переопределенны для всех  
	|созданных, но не распределенных наборок маршрута.Для анализа данных документ будет записан. Продолжить ?",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры
&НаКлиенте
Процедура ОпределитьЯчейкиЭстокадыОповещение(Результат,Параметры) Экспорт
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;
	Отказ = Ложь;
	ОпределитьЯчейкиЭстокадыСервер(Отказ);	
	РассчитатьСрокГодностиИФлагОкраскиДляВсехСтрок();
КонецПроцедуры
&НаСервере
Процедура ОпределитьЯчейкиЭстокадыСервер(Отказ)
	//ЭтаФорма.Записать();
	Если ТипЗнч(Объект.итОснование)=тип("ДокументСсылка.ЗаказПокупателя") тогда
		ОпределитьЯчейкиЭстокадыДляВсехДокументовМаршрута(Объект.итОснование);
	иначе
		ОпределитьЯчейкиЭстокадыДляВсехДокументовМаршрута(Документы.ЗаказПокупателя.ПустаяСсылка());
	КонецЕсли;	
	
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьЯчейкиЭстокадыДляВсехДокументовМаршрута(Заказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторУпаковкиПолучатель,
	|	Товары.ЯчейкаОтправитель,
	|	&Ссылка,
	|	Товары.ФиксацияСтроки
	|ПОМЕСТИТЬ ВтТоварыДокумента
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.ИдентификаторУпаковкиПолучатель,
	|	ВтТоварыДокумента.Ссылка,
	|	итСкладскиеЯчейки.СкладскоеПомещение.ТерриторияСклада КАК ТерриторияСклада
	|ПОМЕСТИТЬ ВтГруппированныеДанныеТоварыДокумента
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.итСкладскиеЯчейки КАК итСкладскиеЯчейки
	|		ПО ВтТоварыДокумента.ЯчейкаОтправитель = итСкладскиеЯчейки.Ссылка
	|ГДЕ
	|	НЕ ВтТоварыДокумента.ФиксацияСтроки
	|СГРУППИРОВАТЬ ПО
	|	ВтТоварыДокумента.ИдентификаторУпаковкиПолучатель,
	|	ВтТоварыДокумента.Ссылка,
	|	итСкладскиеЯчейки.СкладскоеПомещение.ТерриторияСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутизацияДокументыМаршрута.Заказ КАК Заказ
	|ПОМЕСТИТЬ ЗаказыМаршрута
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(МаршрутизацияДокументыМаршрута.Ссылка) КАК Ссылка
	|	ИЗ
	|		Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
	|	ГДЕ
	|		МаршрутизацияДокументыМаршрута.Заказ = &Документ
	|		И МаршрутизацияДокументыМаршрута.Ссылка.Проведен = ИСТИНА) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Маршрутизация.ДокументыМаршрута КАК МаршрутизацияДокументыМаршрута
	|		ПО МаршрутизацияДокументыМаршрута.Ссылка = ВложенныйЗапрос.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итWMSНаборка.Ссылка
	|ПОМЕСТИТЬ НаборкиМаршрута
	|ИЗ
	|	ЗаказыМаршрута КАК ЗаказыМаршрута
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка КАК итWMSНаборка
	|		ПО ЗаказыМаршрута.Заказ = итWMSНаборка.итОснование
	|		И итWMSНаборка.ПометкаУдаления = ЛОЖЬ
	|ГДЕ
	|	итWMSНаборка.Ссылка <> &СсылкаИсключения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итТоварыВЯчейках.Ячейка КАК Ячейка,
	|	СУММА(итТоварыВЯчейках.КРазмещению) КАК Количество
	|ПОМЕСТИТЬ ДвжиениеНаборкМаршрутаПоРезерву
	|ИЗ
	|	НаборкиМаршрута КАК НаборкиМаршрута
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках КАК итТоварыВЯчейках
	|		ПО НаборкиМаршрута.Ссылка = итТоварыВЯчейках.Регистратор
	|ГДЕ
	|	итТоварыВЯчейках.ВидДвижения = ЗНАЧЕНИЕ(ВиддвиженияНакопления.Приход)
	|СГРУППИРОВАТЬ ПО
	|	итТоварыВЯчейках.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтГруппированныеДанныеТоварыДокумента.ИдентификаторУпаковкиПолучатель,
	|	ВтГруппированныеДанныеТоварыДокумента.Ссылка,
	|	ВтГруппированныеДанныеТоварыДокумента.ТерриторияСклада КАК ТерриторияСклада
	|ПОМЕСТИТЬ ДанныеSSCCКРазмещению
	|ИЗ
	|	ВтГруппированныеДанныеТоварыДокумента КАК ВтГруппированныеДанныеТоварыДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель,
	|	итWMSНаборкаТовары.Ссылка,
	|	итWMSНаборкаТовары.ЯчейкаОтправитель.СкладскоеПомещение.ТерриторияСклада
	|ИЗ
	|	ЗаказыМаршрута КАК ЗаказыМаршрута
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
	|		ПО ЗаказыМаршрута.Заказ = итWMSНаборкаТовары.Ссылка.итОснование
	|		И итWMSНаборкаТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|ГДЕ
	|	(итWMSНаборкаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Создан)
	|	ИЛИ итWMSНаборкаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Распределяется)
	|	ИЛИ
	|		итWMSНаборкаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Зарезервирован))
	|	И итWMSНаборкаТовары.Ссылка <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеSSCCКРазмещению.ИдентификаторУпаковкиПолучатель,
	|	ДанныеSSCCКРазмещению.Ссылка,
	|	ДанныеSSCCКРазмещению.ТерриторияСклада
	|ПОМЕСТИТЬ ГруппированныеДанныеSSCCКРазмещению
	|ИЗ
	|	ДанныеSSCCКРазмещению КАК ДанныеSSCCКРазмещению
	|СГРУППИРОВАТЬ ПО
	|	ДанныеSSCCКРазмещению.Ссылка,
	|	ДанныеSSCCКРазмещению.ИдентификаторУпаковкиПолучатель,
	|	ДанныеSSCCКРазмещению.ТерриторияСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итСкладскиеЯчейки.Ссылка,
	|	итСкладскиеЯчейки.Линия,
	|	ЕСТЬNULL(итТоварыВЯчейкахОстатки.КоличествоОстаток, 0) + (ЕСТЬNULL(итТоварыВЯчейкахОстатки.КРазмещениюОстаток, 0) -
	|		ЕСТЬNULL(ДвжиениеНаборкМаршрутаПоРезерву.Количество, 0)) КАК ЗанятоеПространство,
	|	итСкладскиеЯчейки.КоличествоПалет
	|ПОМЕСТИТЬ ВТЯчейкиЭстокады
	|ИЗ
	|	Справочник.итСкладскиеЯчейки КАК итСкладскиеЯчейки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки КАК итТоварыВЯчейкахОстатки
	|		ПО итТоварыВЯчейкахОстатки.Ячейка = итСкладскиеЯчейки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвжиениеНаборкМаршрутаПоРезерву КАК ДвжиениеНаборкМаршрутаПоРезерву
	|		ПО ДвжиениеНаборкМаршрутаПоРезерву.Ячейка = итСкладскиеЯчейки.Ссылка
	|ГДЕ
	|	итСкладскиеЯчейки.Зона = ЗНАЧЕНИЕ(Перечисление.итWMSЗоныСклада.Эстакада)
	|	И НЕ итСкладскиеЯчейки.Заблокирована
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппированныеДанныеSSCCКРазмещению.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
	|	ГруппированныеДанныеSSCCКРазмещению.Ссылка КАК Ссылка,
	|	ГруппированныеДанныеSSCCКРазмещению.ТерриторияСклада КАК ТерриторияСклада
	|ИЗ
	|	ГруппированныеДанныеSSCCКРазмещению КАК ГруппированныеДанныеSSCCКРазмещению
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИдентификаторУпаковкиПолучатель)
	|ПО
	|	ТерриторияСклада,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЯчейкиЭстокады.Ссылка,
	|	ВТЯчейкиЭстокады.Линия КАК Линия,
	|	ВТЯчейкиЭстокады.ЗанятоеПространство,
	|	ВТЯчейкиЭстокады.КоличествоПалет,
	|	ВТЯчейкиЭстокады.Ссылка.СкладскоеПомещение.ТерриторияСклада КАК ТерриторияСклада
	|ИЗ
	|	ВТЯчейкиЭстокады КАК ВТЯчейкиЭстокады
	|УПОРЯДОЧИТЬ ПО
	|	ТерриторияСклада,
	|	Линия";
	
	Запрос.УстановитьПараметр("Документ", Заказ);
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("СсылкаИсключения", Объект.Ссылка);
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен или
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой Тогда 
		Запрос.УстановитьПараметр("Ссылка", Документы.итWMSНаборка.ПустаяСсылка());
	Иначе 
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаТерриторияСклада = МассивРезультатов[8].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаЯчеек= МассивРезультатов[9].Выгрузить();
	Пока ВыборкаТерриторияСклада.Следующий() Цикл
		
		МассивЯчеекТерриторииСклада = ТаблицаЯчеек.НайтиСтроки(новый Структура("ТерриторияСклада",ВыборкаТерриторияСклада.ТерриторияСклада));
		Если  МассивЯчеекТерриторииСклада.Количество()=0 тогда
			Сообщить("Не хватает мест для размещения на территории "+ВыборкаТерриторияСклада.ТерриторияСклада);
			Продолжить;
		КонецЕсли;	
		КоличествоПаллетКРазмещению=ВыборкаТерриторияСклада.ИдентификаторУпаковкиПолучатель;
		///попытамеся найти ячейки эстокады находящиеся рядом
		МассивЯчеекКРаспределению=НайтиРядомРасположенныеЯчейкиУдовлетворяющиеУсловиям(КоличествоПаллетКРазмещению,МассивЯчеекТерриторииСклада);
		Если МассивЯчеекКРаспределению.Количество()=0 тогда
			///если не получилось, то просто свободные ячейки
			МассивЯчеекКРаспределению= НайтиЭстокадыЯчейкиУдовлетворяющиеУсловиям(КоличествоПаллетКРазмещению,МассивЯчеекТерриторииСклада);
		КонецЕсли;
		Если МассивЯчеекКРаспределению.Количество()=0 тогда
			Сообщить("Не хватает мест для размещения на территории "+ВыборкаТерриторияСклада.ТерриторияСклада);
			Продолжить;
		КонецЕсли;	
		
		// Вставить обработку выборки ВыборкаТерриторияСклада
		ВыборкаПоДокументам = ВыборкаТерриторияСклада.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  ВыборкаПоДокументам.Следующий() цикл
			ВыборкаДетальныеЗаписи = ВыборкаПоДокументам.Выбрать();
			Если ВыборкаПоДокументам.Ссылка<> Объект.Ссылка и не ВыборкаПоДокументам.Ссылка.Пустая() тогда
				ОбъектИзменения = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект(); 
			ИначеЕсли ВыборкаПоДокументам.Ссылка.Пустая() или ВыборкаПоДокументам.Ссылка=Объект.Ссылка Тогда 
				ОбъектИзменения=Объект;
			Иначе 
				Сообщить("Ошибка определения ячейки эстокады");
				Возврат
			КонецЕсли;
			ИндексМассива=0;
			ЯчейкаПомещенияПаллет= МассивЯчеекКРаспределению[ИндексМассива];
			КоличествоПалетЯчейки=ЯчейкаПомещенияПаллет.КоличествоПалет;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если КоличествоПалетЯчейки<=0 тогда
					ИндексМассива=ИндексМассива+1;
					ЯчейкаПомещенияПаллет= МассивЯчеекКРаспределению[ИндексМассива];
					КоличествоПалетЯчейки=ЯчейкаПомещенияПаллет.КоличествоПалет;
				КонецЕсли;
				МассивСтрокТовары=ОбъектИзменения.Товары.НайтиСтроки(новый Структура("ИдентификаторУпаковкиПолучатель",ВыборкаДетальныеЗаписи.ИдентификаторУпаковкиПолучатель));
				ЯчейкаФиксированнойСтроки=Неопределено;
				////////////// проверяю нет ли для данной паллеты в выполненных заданиях ячейки
				для Каждого стр из МассивСтрокТовары цикл
					Если стр.ФиксацияСтроки Тогда
						ЯчейкаФиксированнойСтроки=стр.ЯчейкаПолучатель;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
				////////////// проставляю ячейку, если новая строка относиться к выполненной паллете, то помещаю ее в ту же ячейку
				для Каждого стр из МассивСтрокТовары цикл
					Если ЯчейкаФиксированнойСтроки=Неопределено Тогда  
						стр.ЯчейкаПолучатель=ЯчейкаПомещенияПаллет;
					иначе
						стр.ЯчейкаПолучатель=ЯчейкаФиксированнойСтроки;
					КонецЕсли;
				КонецЦикла;
				
				Если ЯчейкаФиксированнойСтроки=Неопределено Тогда 
					КоличествоПалетЯчейки=КоличествоПалетЯчейки-1;
				КонецЕсли;
			КонецЦикла;
			Если ОбъектИзменения.Ссылка<> Объект.Ссылка  тогда
				ОбъектИзменения.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	
КонецПроцедуры
&НаСервере
Функция НайтиРядомРасположенныеЯчейкиУдовлетворяющиеУсловиям(КоличествоПаллетКРазмещению,МассивЯчеекТерриторииСклада);
	НакопительнаяЧастьПаллетЯчеек=0;
	МассивЯчеек= новый Массив;
	ПредыдущаяЯчейка=Неопределено;
	для Каждого стр из МассивЯчеекТерриторииСклада цикл
		Если ПредыдущаяЯчейка = Неопределено тогда
			НакопительнаяЧастьПаллетЯчеек=стр.КоличествоПалет;
			ПредыдущаяЯчейка=стр.Ссылка;
			МассивЯчеек.Добавить(стр.Ссылка);
		иначе
			Если Число(ПредыдущаяЯчейка.Линия)+1<> стр.Линия тогда
				ПредыдущаяЯчейка=стр.Ссылка;
				НакопительнаяЧастьПаллетЯчеек=стр.КоличествоПалет;
				МассивЯчеек.Очистить();
				МассивЯчеек.Добавить(стр.Ссылка);
			иначе
				ПредыдущаяЯчейка=стр.Ссылка;
				НакопительнаяЧастьПаллетЯчеек=НакопительнаяЧастьПаллетЯчеек+стр.КоличествоПалет;
				МассивЯчеек.Добавить(стр.Ссылка);
				
			КонецЕсли;
		КонецЕсли;
		Если НакопительнаяЧастьПаллетЯчеек >=КоличествоПаллетКРазмещению тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Если НакопительнаяЧастьПаллетЯчеек >=КоличествоПаллетКРазмещению тогда
		Возврат МассивЯчеек;
	иначе
		Возврат новый Массив;
	КонецЕсли;	
КонецФункции
&НаСервере
Функция НайтиЭстокадыЯчейкиУдовлетворяющиеУсловиям(КоличествоПаллетКРазмещению,МассивЯчеекТерриторииСклада)
	НакопительнаяЧастьПаллетЯчеек=0;
	МассивЯчеек= новый Массив;
	для Каждого стр из МассивЯчеекТерриторииСклада цикл
		НакопительнаяЧастьПаллетЯчеек=НакопительнаяЧастьПаллетЯчеек+стр.КоличествоПалет;
		МассивЯчеек.Добавить(стр.Ссылка);
		Если НакопительнаяЧастьПаллетЯчеек >=КоличествоПаллетКРазмещению тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Если НакопительнаяЧастьПаллетЯчеек >=КоличествоПаллетКРазмещению тогда
		Возврат МассивЯчеек;
	иначе
		Возврат новый Массив;
	КонецЕсли;	
	
КонецФункции


#КонецОбласти

&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыФормы=ПараметрыФормыМножественногоПодбораНоменклатуры();
	ОткрытьФормуПодбора(ЭтаФорма,ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещениеНаИзъятиеТовара(Команда)
	Оповещение=новый ОписаниеОповещения("СоздатьПеремещениеНаИзъятиеТовараОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Документ будет записан и проведен,Продолжить?",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещениеНаИзъятиеТовараОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;
	Перемещение=ПолучитьПеремещениеИзъятия(Объект.Ссылка);
	ЭтаФорма.Записать();
	Если Перемещение=Неопределено Тогда 
		ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаДокумента",новый Структура("ДополнительныеПараметры,ИтОснованиеДокумента",новый Структура("ИзъятиеТовара",Истина),Объект.Ссылка),ЭтаФорма);
	иначе
		ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаДокумента",новый Структура("ДополнительныеПараметры,ИтОснованиеДокумента,Ключ",новый Структура("ИзъятиеТовара",Истина),Объект.Ссылка,Перемещение),ЭтаФорма);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПривязатьКЗаказу(Команда)
	Если Объект.итОснование<>Неопределено Тогда 
		Сообщить("у документа уже есть основание");
		Возврат
	КонецЕсли;
	Оповещение=новый ОписаниеОповещения("ПривязатьКЗаказуОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы уверены в том, что хотите привязать данную наборку в заказу?",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры
&НаКлиенте
Процедура ПривязатьКЗаказуОповещение(Результат,Параметры)Экспорт
	Если Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;
	ОткрытьФорму("Документ.итWMSНаборка.Форма.ФормаВыбораЗаказа",,ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура УстановитьИзъятиеОставшегосяТовара(Команда)
	Оповещение=новый ОписаниеОповещения("УстановитьИзъятиеОставшегосяТовараОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы уверены в том, что хотите изъять оставшийся товар?",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры
&НаКлиенте
Процедура УстановитьИзъятиеОставшегосяТовараОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;
	УстановитьИзъятиеОставшегосяТовараНаСервере();
КонецПроцедуры
&НаСервере
Процедура УстановитьИзъятиеОставшегосяТовараНаСервере()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель,
		|	итWMSНаборкаТовары.ЯчейкаПолучатель,
		|	итWMSНаборкаТовары.Номенклатура,
		|	итWMSНаборкаТовары.Характеристика,
		|	итWMSНаборкаТовары.СерияНоменклатуры,
		|	ВЫБОР
		|		КОГДА итWMSНаборкаТовары.Качество = ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Качество.новый)
		|		ИНАЧЕ итWMSНаборкаТовары.Качество
		|	КОНЕЦ КАК Качество,
		|	итWMSНаборкаТовары.ДатаРозлива
		|ПОМЕСТИТЬ ДанныеНаборки
		|ИЗ
		|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
		|ГДЕ
		|	итWMSНаборкаТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSНаборкаТовары.ИдентификаторУпаковкиПолучатель,
		|	итWMSНаборкаТовары.ЯчейкаПолучатель,
		|	итWMSНаборкаТовары.Номенклатура,
		|	итWMSНаборкаТовары.Характеристика,
		|	итWMSНаборкаТовары.СерияНоменклатуры,
		|	итWMSНаборкаТовары.ДатаРозлива,
		|	ВЫБОР
		|		КОГДА итWMSНаборкаТовары.Качество = ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Качество.новый)
		|		ИНАЧЕ итWMSНаборкаТовары.Качество
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итТоварыВЯчейкахОстатки.Склад,
		|	итТоварыВЯчейкахОстатки.Ячейка,
		|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки,
		|	итТоварыВЯчейкахОстатки.Номенклатура,
		|	итТоварыВЯчейкахОстатки.Характеристика,
		|	итТоварыВЯчейкахОстатки.СерияНоменклатуры,
		|	итТоварыВЯчейкахОстатки.ДатаРозлива,
		|	итТоварыВЯчейкахОстатки.Качество,
		|	итТоварыВЯчейкахОстатки.КоличествоОстаток
		|ПОМЕСТИТЬ ВтДанныеОстатковОтНаборки
		|ИЗ
		|	ДанныеНаборки КАК ДанныеНаборки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(, Склад = ЗНАЧЕНИЕ(справочник.Склады.ПустаяСсылка)) КАК итТоварыВЯчейкахОстатки
		|		ПО ДанныеНаборки.ИдентификаторУпаковкиПолучатель = итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
		|			И ДанныеНаборки.ЯчейкаПолучатель = итТоварыВЯчейкахОстатки.Ячейка
		|			И ДанныеНаборки.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
		|			И ДанныеНаборки.Качество = итТоварыВЯчейкахОстатки.Качество
		|			И ДанныеНаборки.Характеристика = итТоварыВЯчейкахОстатки.Характеристика
		|			И ДанныеНаборки.ДатаРозлива = итТоварыВЯчейкахОстатки.ДатаРозлива
		|			И ДанныеНаборки.СерияНоменклатуры = итТоварыВЯчейкахОстатки.СерияНоменклатуры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	итТоварыВЯчейкахРезервОстатки.Склад,
		|	итТоварыВЯчейкахРезервОстатки.ЯчейкаОтправитель,
		|	итТоварыВЯчейкахРезервОстатки.ИдентификаторУпаковки,
		|	итТоварыВЯчейкахРезервОстатки.Номенклатура,
		|	итТоварыВЯчейкахРезервОстатки.Характеристика,
		|	итТоварыВЯчейкахРезервОстатки.СерияНоменклатуры,
		|	итТоварыВЯчейкахРезервОстатки.ДатаРозлива,
		|	итТоварыВЯчейкахРезервОстатки.Качество,
		|	-ЕСТЬNULL(итТоварыВЯчейкахРезервОстатки.КоличествоОстаток, 0)
		|ИЗ
		|	ДанныеНаборки КАК ДанныеНаборки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейкахРезерв.Остатки(, Склад = ЗНАЧЕНИЕ(справочник.Склады.ПустаяСсылка)) КАК итТоварыВЯчейкахРезервОстатки
		|		ПО ДанныеНаборки.ИдентификаторУпаковкиПолучатель = итТоварыВЯчейкахРезервОстатки.ИдентификаторУпаковки
		|			И ДанныеНаборки.ЯчейкаПолучатель = итТоварыВЯчейкахРезервОстатки.ЯчейкаОтправитель
		|			И ДанныеНаборки.Номенклатура = итТоварыВЯчейкахРезервОстатки.Номенклатура
		|			И ДанныеНаборки.Характеристика = итТоварыВЯчейкахРезервОстатки.Характеристика
		|			И ДанныеНаборки.СерияНоменклатуры = итТоварыВЯчейкахРезервОстатки.СерияНоменклатуры
		|			И ДанныеНаборки.Качество = итТоварыВЯчейкахРезервОстатки.Качество
		|			И ДанныеНаборки.ДатаРозлива = итТоварыВЯчейкахРезервОстатки.ДатаРозлива
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеОстатковОтНаборки.Склад,
		|	ВтДанныеОстатковОтНаборки.Ячейка,
		|	ВтДанныеОстатковОтНаборки.ИдентификаторУпаковки,
		|	ВтДанныеОстатковОтНаборки.Номенклатура,
		|	ВтДанныеОстатковОтНаборки.Характеристика,
		|	ВтДанныеОстатковОтНаборки.СерияНоменклатуры,
		|	ВтДанныеОстатковОтНаборки.ДатаРозлива,
		|	ВтДанныеОстатковОтНаборки.Качество,
		|	СУММА(ВтДанныеОстатковОтНаборки.КоличествоОстаток) КАК КоличествоОстаток
		|ПОМЕСТИТЬ ВтГруппировка
		|ИЗ
		|	ВтДанныеОстатковОтНаборки КАК ВтДанныеОстатковОтНаборки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеОстатковОтНаборки.Склад,
		|	ВтДанныеОстатковОтНаборки.Ячейка,
		|	ВтДанныеОстатковОтНаборки.ИдентификаторУпаковки,
		|	ВтДанныеОстатковОтНаборки.Номенклатура,
		|	ВтДанныеОстатковОтНаборки.Характеристика,
		|	ВтДанныеОстатковОтНаборки.СерияНоменклатуры,
		|	ВтДанныеОстатковОтНаборки.ДатаРозлива,
		|	ВтДанныеОстатковОтНаборки.Качество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтГруппировка.Склад,
		|	ВтГруппировка.Ячейка КАК Ячейка,
		|	ВтГруппировка.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	ВтГруппировка.Номенклатура,
		|	ВтГруппировка.Характеристика,
		|	ВтГруппировка.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВтГруппировка.ДатаРозлива,
		|	ВтГруппировка.Качество КАК Качество,
		|	ВтГруппировка.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	ВтГруппировка КАК ВтГруппировка
		|ГДЕ
		|	ВтГруппировка.КоличествоОстаток > 0
		|ИТОГИ
		|	СУММА(КоличествоОстаток)
		|ПО
		|	ИдентификаторУпаковки,
		|	Ячейка,
		|	СерияНоменклатуры,
		|	Качество";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИдентификаторУпаковки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИдентификаторУпаковки.Следующий() Цикл
		// Вставить обработку выборки ВыборкаИдентификаторУпаковки
	
		ВыборкаЯчейка = ВыборкаИдентификаторУпаковки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаЯчейка.Следующий() Цикл
			// Вставить обработку выборки ВыборкаЯчейка
	
			ВыборкаСерияНоменклатуры = ВыборкаЯчейка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
			Пока ВыборкаСерияНоменклатуры.Следующий() Цикл
				// Вставить обработку выборки ВыборкаСерияНоменклатуры
	
				ВыборкаКачество = ВыборкаСерияНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
				Пока ВыборкаКачество.Следующий() Цикл
					// Вставить обработку выборки ВыборкаКачество
	
					ВыборкаДетальныеЗаписи = ВыборкаКачество.Выбрать();
	                ОсталосьИзъять=ВыборкаКачество.КоличествоОстаток;
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если ОсталосьИзъять<=0 Тогда 
							Прервать;
						КонецЕсли;	
						МассивСтрокНаборки=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторУпаковкиПолучатель,СерияНоменклатуры,ЯчейкаПолучатель,Качество",ВыборкаДетальныеЗаписи.ИдентификаторУпаковки,
						ВыборкаДетальныеЗаписи.СерияНоменклатуры,ВыборкаДетальныеЗаписи.Ячейка,ВыборкаДетальныеЗаписи.Качество));
						Для Каждого стр из МассивСтрокНаборки цикл
						Если ОсталосьИзъять<=0 Тогда 
							Прервать;
						КонецЕсли;
							ТекущееИзъятие=0;
							Если (стр.КоличествоФакт-стр.КоличествоИзъятия)>=ОсталосьИзъять Тогда 
								ТекущееИзъятие=ОсталосьИзъять;
								стр.ИзъятиеТовара=Истина;
								стр.КоличествоИзъятия=стр.КоличествоИзъятия+ТекущееИзъятие;
							иначе
								ТекущееИзъятие=стр.КоличествоФакт-стр.КоличествоИзъятия;
								стр.ИзъятиеТовара=Истина;
								стр.КоличествоИзъятия=стр.КоличествоИзъятия+ТекущееИзъятие;
							КонецЕсли;
                            ОсталосьИзъять=ОсталосьИзъять-ТекущееИзъятие;
						КонецЦикла;
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецПроцедуры
	
&НаКлиенте
Процедура ПросмотрЗначения(Команда)
	Если ТекущийЭлемент.Имя="Товары" Тогда
		Если ТипЗнч(ТекущийЭлемент.ТекущийЭлемент)=Тип("ПолеФормы") Тогда
			ИмяПоля=ТекущийЭлемент.ТекущийЭлемент.Имя;
			ДлинаСтроки=СтрДлина(ИмяПоля);
			ДлинаТовары=СтрДлина("Товары");
			ПутьКДанным=Прав(ИмяПоля,ДлинаСтроки-ДлинаТовары);
			ПоказатьЗначение(,ТекущийЭлемент.ТекущиеДанные[ПутьКДанным]);
			//#Если не ВебКлиент Тогда
			//ОткрытьЗначение(ТекущийЭлемент.ТекущиеДанные[ПутьКДанным]);
			//#КонецЕсли
		КонецЕсли;
	КонецЕсли;  
	Если ТекущийЭлемент.Имя="ТоварыДерево" Тогда
		Если ТипЗнч(ТекущийЭлемент.ТекущийЭлемент)=Тип("ПолеФормы") Тогда
			ИмяПоля=ТекущийЭлемент.ТекущийЭлемент.Имя;
			ДлинаСтроки=СтрДлина(ИмяПоля);
			ДлинаТовары=СтрДлина("ТоварыДерево");
			ПутьКДанным=Прав(ИмяПоля,ДлинаСтроки-ДлинаТовары);
			ПоказатьЗначение(,ТекущийЭлемент.ТекущиеДанные[ПутьКДанным]);
			//#Если не ВебКлиент Тогда
			//ОткрытьЗначение(ТекущийЭлемент.ТекущиеДанные[ПутьКДанным]);
			//#КонецЕсли
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура ПечатьРасходнойНакладнойНаСервере(ТабличныйДокумент)
	
	Данные=РеквизитФормыВЗначение("Объект");
	Данные.ПечатьРасходнойНакладной(ТабличныйДокумент);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРасходнойНакладной(Команда)
	ТабличныйДокумент=новый ТабличныйДокумент;
	ПечатьРасходнойНакладнойНаСервере(ТабличныйДокумент);
	ТабличныйДокумент.Показать();
КонецПроцедуры
&НаКлиенте
Процедура УстановитьВсеЯчейкиКакПикинг(Команда)
Оповещение=новый ОписаниеОповещения("УстановитьВсеЯчейкиКакПикингОповещение",ЭтаФорма);
ПоказатьВопрос(Оповещение,"Данная процедура является нарушением алгоритма-продолжить?",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры
&НаКлиенте
Процедура УстановитьВсеЯчейкиКакПикингОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;
	Для Каждого стр из Объект.Товары цикл
		Если не стр.ФиксацияСтроки Тогда 
		стр.ЯчейкаПикинга=стр.ЯчейкаОтправитель;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура ФиксацияНаборкиНаСервере()
	Если НеСоответсвуетОснованию() Тогда 
		Возврат
	КонецЕсли;
	Данные=РеквизитФормыВЗначение("Объект");
	Данные.ПроведениеБезИзмененияДатыЗавршения=истина;
	Данные.ДействияПриФиксацииЗадачДокумента();
	Данные.Записать();
	ЗначениеВРеквизитФормы(Данные,"Объект");
	ВидимостьДоступностьЭлементовНаСервере();
	ПроставитьПредставлениеИдентификатора();
КонецПроцедуры

&НаКлиенте
Процедура ФиксацияНаборки(Команда)
	ФиксацияНаборкиНаСервере();
КонецПроцедуры
&НаСервере
Процедура РучнойЗапускПереупаковкиНаСервере()
	Отказ=Ложь;
	итWMSСлужебныеПроцедурыИФункции.СоздатьДокументПереупаковкиПМУ(Объект.Ссылка,Отказ);
	Если не Отказ Тогда 
	ОчиститьДанныеПомарочногоУчета();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РучнойЗапускПереупаковки(Команда)
	РучнойЗапускПереупаковкиНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СоздатьРеализацию(Команда)
	Если ПроверкаНаРазрешениеСозданияРеализации(Объект.Ссылка) Тогда 
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента",новый Структура("Основание",Объект.Ссылка));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПечатьПаллетныйЛистКоммандорНаСервере(ТабличныйДокумент)
	Документы.итWMSНаборка.Печать(ТабличныйДокумент,"ПаллетныйЛистКоммандор",Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПаллетныйЛистКоммандор(Команда)
	ТабличныйДокумент=новый ТабличныйДокумент;
	ПечатьПаллетныйЛистКоммандорНаСервере(ТабличныйДокумент);
	ТабличныйДокумент.Показать();
КонецПроцедуры

&НаСервере
Процедура ПечатьПаспортаПаллетыНаСервере(ТабличныйДокумент)
	Документы.итWMSНаборка.Печать(ТабличныйДокумент,"ПечатьПаспортаПаллеты",Объект.Ссылка);
КонецПроцедуры
&НаКлиенте
Процедура ПечатьПаспортаПаллеты(Команда)
	ТабличныйДокумент=новый ТабличныйДокумент;
	ПечатьПаспортаПаллетыНаСервере(ТабличныйДокумент);
	ТабличныйДокумент.Показать();
КонецПроцедуры

 &НаКлиенте
 Процедура ПровестиИЗакрытьПользовательская(Команда)
	 Отказ=Ложь;
	 ПроверкиПередПроведением(Отказ); 
	 Если Отказ Тогда 
		 Возврат
	 КонецЕсли;	
	 ПараметрыЗаписи=новый Структура;
	 ПараметрыЗаписи.Вставить("РежимЗаписи",РежимЗаписиДокумента.Проведение);
	 ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи",Истина);
	 ЭтаФорма.Записать(ПараметрыЗаписи);
 КонецПроцедуры
 &НаКлиенте
 Процедура ЗаписатьПользовательская(Команда) 
	 ПараметрыЗаписи=новый Структура;
	 ПараметрыЗаписи.Вставить("РежимЗаписи",РежимЗаписиДокумента.Запись);
	 ЭтаФорма.Записать(ПараметрыЗаписи);
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПровестиПользовательская(Команда)
	 Отказ=Ложь;
	 ПроверкиПередПроведением(Отказ);
	 Если Отказ Тогда 
		 Возврат
	 КонецЕсли;	 
	 ПараметрыЗаписи=новый Структура;
	 ПараметрыЗаписи.Вставить("РежимЗаписи",РежимЗаписиДокумента.Проведение);
	 ЭтаФорма.Записать(ПараметрыЗаписи);
КонецПроцедуры

  &НаКлиенте
Процедура СоздатьОтгрузкуWMS(Команда)
ОткрытьФорму("Документ.итWMSОтгрузка.Форма.ФормаДокумента",новый Структура("Основание",Объект.Ссылка),ЭтаФорма);	
КонецПроцедуры

 
&НаКлиенте
Процедура СоздатьРучнуюОтгрузку(Команда)
ОткрытьФорму("Документ.итWMSРучнаяОтгрузка.Форма.ФормаДокумента",новый Структура("Основание",Объект.Ссылка),ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура СоздатьСписаниеWMS(Команда)
ОткрытьФорму("Документ.итWMSСписаниеТовара.Форма.ФормаДокумента",новый Структура("Основание",Объект.Ссылка),ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура СоздатьПроверку(Команда)
ОткрытьФорму("Документ.итWMSПроверка.Форма.ФормаДокумента",новый Структура("Основание",Объект.Ссылка),ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеТоваровУпр(Команда)
	ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта",новый Структура("Основание",Объект.Ссылка),ЭтаФорма)
КонецПроцедуры



#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ПроверкиПередПроведением(Отказ)
	ПроверкаНаЗаполненностьЯчейкиПолучателя(Отказ);
	ПроверкаНаПересчениеЯчейкиОтправителяПолучателя(Отказ);
	ПроверкаНаПаллетизацию(Отказ);
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПроверкаНаРазрешениеСозданияРеализации(Ссылка)
	Если ТипЗнч(Ссылка.итОснование)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если Ссылка.итОснование.ОтменитьВсеПроверки Тогда  
		Сообщить("У заказа отменены проверки, нет разрешения на создание реализации");
		КонецЕсли;
		Возврат не Ссылка.итОснование.ОтменитьВсеПроверки;
	КонецЕсли;	
	Возврат Истина;
	КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКартинкуИзБиблиотеки()
Возврат	БиблиотекаКартинок.ВнешнийИсточникДанныхКуб.ПолучитьДвоичныеДанные();
	КонецФункции

&НаКлиенте
Функция ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент)
	ПараметрыФормы=новый Структура;
	ПараметрыФормы.Вставить("Склад",Объект.Склад);
	ПараметрыФормы.Вставить("ОдиночныйВыбор",Истина);
	ПараметрыФормы.Вставить("ОтборПоНоменклатуре",Истина);
	ПараметрыФормы.Вставить("Организация",Объект.Организация);
	ПараметрыФормы.Вставить("ПараметрПоискаНоменклатура",Элемент.Родитель.ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("ИдентификаторСтроки",Элемент.Родитель.ТекущиеДанные.ИдентификаторСтроки);
	ПараметрыФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Документ",Объект.Ссылка);
	Возврат  ПараметрыФормы;
КонецФункции
&НаКлиенте
Процедура ОткрытьФормуПодбора(ЭлементОповещенияВыбора,ПараметрыФормы=Неопределено)
	Если ПараметрыФормы = Неопределено тогда
		ПараметрыФормы=новый Структура;
	КонецЕсли;
	СделатьСнимокТабличнойЧастиДляДинамическогоПодбора();	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораНоменклатуры",ПараметрыФормы,ЭлементОповещенияВыбора);
	
КонецПроцедуры
&НаСервере
Процедура ПроставитьПредставлениеИдентификатора()
	для Каждого  стр из Объект.Товары цикл
		стр.ИдентификаторСтрокиПредставление=Строка(стр.ИдентификаторСтроки);
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура ВариантОтображенияПользователя()
	Если ТригерОтображения тогда
		ВВидеДерева("");
	иначе
		ВВидеСписка("");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикДиалогов(Результат,Параметры)Экспорт 
	Если Результат=КодВозвратаДиалога.Нет тогда
		Возврат;
	КонецЕсли;
	// тект обработки разных видов диалогов
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьЭлементов()
	ВидимостьДоступностьЭлементовНаСервере();
КонецПроцедуры
&НаСервере
Процедура ВидимостьДоступностьЭлементовНаСервере()
	Если Объект.итОснование=Неопределено Тогда 
		Элементы.ФормаОтвязатьОтЗаказа.Видимость=Ложь;
	иначе
		Элементы.ФормаОтвязатьОтЗаказа.Видимость=Истина;
	КонецЕсли;
	Если Объект.итОснование=Неопределено Тогда 
		Элементы.ФормаПривязатьКЗаказу.Видимость=Истина;
	иначе
		Элементы.ФормаПривязатьКЗаказу.Видимость=Ложь;
	КонецЕсли;
	
	Если  Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен или Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется  тогда
		Элементы.ГруппаТовары.ТолькоПросмотр=Истина;
		Элементы.ДатаНомерСтатус.ТолькоПросмотр=Истина;
		Элементы.ТоварыПодбор.Видимость=Ложь;
		//Элементы.ГруппаДанныеФизическогоНосителя.ТолькоПросмотр=Истина;
	иначе
		Элементы.ГруппаТовары.ТолькоПросмотр=Ложь;
		Элементы.ДатаНомерСтатус.ТолькоПросмотр=Ложь;
		Элементы.ТоварыПодбор.Видимость=Истина;
		
		//Элементы.ГруппаДанныеФизическогоНосителя.ТолькоПросмотр=Ложь;
	КонецЕсли;
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой или Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен  тогда
		Элементы.ФормаСоздатьРеализацию.Видимость=Истина;
		Элементы.ФормаПеремещениеТоваровУпр.Видимость=Истина;
		Элементы.ФормаДокументСписаниеТоваровСоздатьНаОсновании.Видимость=Истина;
		Элементы.ФормаПечатьРасходнойНакладной.Видимость=Истина;
		Элементы.ФормаПечатьПаллетныйЛистКоммандор.Видимость=Истина;
		Элементы.ФормаПечатьПаспортаПаллеты.Видимость=Истина;
		Элементы.ФормаСоздатьПеремещениеНаИзъятиеТовара.Видимость=Истина;
	иначе
		Элементы.ФормаПеремещениеТоваровУпр.Видимость=Ложь;
		Элементы.ФормаСоздатьРеализацию.Видимость=Ложь;
		Элементы.ФормаДокументСписаниеТоваровСоздатьНаОсновании.Видимость=Ложь;
		Элементы.ФормаОтвязатьОтЗаказа.Видимость=Ложь;
		Элементы.ФормаСоздатьПеремещениеНаИзъятиеТовара.Видимость=Ложь;
		Элементы.ФормаПечатьРасходнойНакладной.Видимость=Ложь;
		Элементы.ФормаПечатьПаспортаПаллеты.Видимость=Ложь;
		Элементы.ФормаПечатьПаллетныйЛистКоммандор.Видимость=Ложь;
	КонецЕсли;
	
	Если (Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой) и Объект.итОснование=Неопределено  тогда
		Элементы.ФормаСоздатьПеремещениеНаСклад.Видимость=Истина;		
	иначе
		Элементы.ФормаСоздатьПеремещениеНаСклад.Видимость=Ложь;			
	КонецЕсли;
	
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан или Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован тогда
		Элементы.НеРаспределятьНаТСД.Видимость=Истина;
		Элементы.РежимРезервированияБезПеремещения.Видимость=Истина;
		Элементы.РезервироватьЯчейкиЭстокады.Видимость=Истина;
		Элементы.ФормаУстановитьВсеЯчейкиКакПикинг.Видимость=Истина;
		//Элементы.ТоварыПаллетизация.Видимость=Истина;
		//Если Объект.РежимРезервированияБезПеремещения тогда
		//	Элементы.ТоварыОпределитьЯчейкиЭстокады.Видимость=Ложь;
		//иначе
		//	Элементы.ТоварыОпределитьЯчейкиЭстокады.Видимость=Истина;
		//КонецЕсли;
	иначе
		Элементы.НеРаспределятьНаТСД.Видимость=Ложь;
		Элементы.РежимРезервированияБезПеремещения.Видимость=Ложь;
		Элементы.РезервироватьЯчейкиЭстокады.Видимость=Ложь;
		Элементы.ФормаУстановитьВсеЯчейкиКакПикинг.Видимость=Ложь;
		//Элементы.ТоварыПаллетизация.Видимость=Ложь;
		//Элементы.ТоварыОпределитьЯчейкиЭстокады.Видимость=Ложь;
	КонецЕсли;
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен или Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда
		Элементы.ТоварыПаллетизация.Видимость=Ложь;
		Элементы.ТоварыОпределитьЯчейкиЭстокады.Видимость=Ложь;
		Элементы.ФормаПривязатьКЗаказу.Видимость=Ложь;
		Элементы.ФормаОтвязатьОтЗаказа.Видимость=Ложь;
	ИначеЕсли  Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован Тогда
		Элементы.ТоварыПаллетизация.Видимость=Истина;
		Если Объект.РежимРезервированияБезПеремещения тогда
			Элементы.ТоварыОпределитьЯчейкиЭстокады.Видимость=Ложь;
		иначе
			Элементы.ТоварыОпределитьЯчейкиЭстокады.Видимость=Истина;
		КонецЕсли;
	иначе
		Элементы.ТоварыПаллетизация.Видимость=Истина;
		Элементы.ТоварыОпределитьЯчейкиЭстокады.Видимость=Истина;
	КонецЕсли;
	
	
	
Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой  тогда
		Если Этаформа.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаСоздатьНаОсновании")<> Неопределено тогда
			Элементы.ФормаСоздатьОтгрузкуWMS.Видимость=Истина;  
			Элементы.ФормаСоздатьРучнуюОтгрузку.Видимость=Истина;
			Элементы.ФормаСоздатьСписаниеWMS.Видимость=Истина;
		КонецЕсли;
	иначе
		Если Этаформа.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаСоздатьНаОсновании")<> Неопределено тогда
			Элементы.ФормаСоздатьОтгрузкуWMS.Видимость=Ложь;
			Элементы.ФормаСоздатьРучнуюОтгрузку.Видимость=Ложь;			 
			Элементы.ФормаСоздатьСписаниеWMS.Видимость=Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда
		ЭтаФорма.ТолькоПросмотр=Истина;
		Элементы.ФормаУстановитьИзъятиеОставшегосяТовара.Видимость=Истина;
	иначе
		ЭтаФорма.ТолькоПросмотр=Ложь;
		Элементы.ФормаУстановитьИзъятиеОставшегосяТовара.Видимость=Ложь;
	КонецЕсли;
	
	
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой  тогда
		Элементы.ФормаФиксацияНаборки.Видимость=Истина;
		Элементы.ФормаРучнойЗапускПереупаковки.Видимость=Истина;
	иначе
		Элементы.ФормаФиксацияНаборки.Видимость=Ложь;
		Элементы.ФормаРучнойЗапускПереупаковки.Видимость=Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикТрансляцииПриИзменении(Элемент)
	СтрокаДерева=Элемент.Родитель.ТекущиеДанные;
	ПолеИзменения=СтрЗаменить(Элемент.Имя,"ТоварыДерево","");
	Если ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтрокиПредставление) тогда
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",СтрокаДерева.ИдентификаторСтрокиПредставление));
		Строка[0][ПолеИзменения]=Элемент.Родитель.ТекущиеДанные[ПолеИзменения];
		ЭтаФорма.Модифицированность=Истина;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура РассчетКоличестваВУпаковкеПриИзменении(Элемент)
	СтрокаИзменения=Элемент.Родитель.ТекущиеДанные;
	ПолеИзменения=СтрЗаменить(Элемент.Имя,"ТоварыДерево","");
	Если не СтрокаИзменения.СтрокаУпаковки тогда
		РодительСтрокиИзменения=СтрокаИзменения.ПолучитьРодителя();
	иначе
		РодительСтрокиИзменения=СтрокаИзменения;
	КонецЕсли;
	РодительСтрокиИзменения[ПолеИзменения]=0;
	СтрокиДляПересчета=РодительСтрокиИзменения.ПолучитьЭлементы();
	для Каждого стр из СтрокиДляПересчета цикл
		РодительСтрокиИзменения[ПолеИзменения]=РодительСтрокиИзменения[ПолеИзменения]+ стр[ПолеИзменения];
	КонецЦикла;
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура ГрупповоеИзменениеСпискаПоИдУпаковки(ПолеИзменения,Значение,ИдентификаторУпаковки)
	МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторУпаковкиПолучатель",ИдентификаторУпаковки));
	для Каждого стр из МассивСтрок цикл
		стр[ПолеИзменения]=Значение;
	КонецЦикла;	
КонецПроцедуры
&НаСервере
Процедура ПроверкаНаЗаполненностьЯчейкиПолучателя(Отказ)
	Если Объект.СтатусДокумента	<> Перечисления.итWMSСтатусыСкладскихДокументов.Создан  или (Объект.СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Создан )тогда
		для Каждого стр из Объект.Товары цикл
			Если стр.ЯчейкаПолучатель=Справочники.итСкладскиеЯчейки.ПустаяСсылка() тогда
				Сообщить(" для паллеты "+стр.ИдентификаторУпаковки+" не назначенна ячейка");
				Отказ=Истина;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,Структура)
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные,Структура);
	Элемент.Родитель.ТекущиеДанные.ЯчейкаОтправитель=Структура.Ячейка;
	Элемент.Родитель.ТекущиеДанные.ИдентификаторУпаковкиПолучатель="";
	Элемент.Родитель.ТекущиеДанные.ДатаРозлива =  итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементДанныхНаСервере(Структура.СерияНоменклатуры,"ДатаПроизводства");
	Если итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементДанныхНаСервере(Структура.Ячейка,"Зона")=ЗонаПикинга() тогда
		Элемент.Родитель.ТекущиеДанные.ЯчейкаПикинга=Структура.Ячейка;
	иначе
		Элемент.Родитель.ТекущиеДанные.ЯчейкаПикинга=СсылкаНаПустуюЯчейку();
	КонецЕсли;	
	СрокиГодностиИфлагОкраски(Элемент.Родитель.ТекущиеДанные);
КонецПроцедуры
&НаСервереБезКонтекста
Функция ЗонаПикинга()
	Возврат Перечисления.итWMSЗоныСклада.Пикинга;
КонецФункции
&НаСервереБезКонтекста
Функция СсылкаНаПустуюЯчейку()
	Возврат Справочники.итСкладскиеЯчейки.ПустаяСсылка();
	КонецФункции
&НаСервере
Процедура СделатьСнимокТабличнойЧастиДляДинамическогоПодбора()
	НовыйНабораЗаписей= РегистрыСведений.итWMSКорзинаНоменклатуры.СоздатьНаборЗаписей();
	НовыйНабораЗаписей.Отбор.КлючДанных.Установить(ЭтаФорма.УникальныйИдентификатор);
	НовыйНабораЗаписей.Прочитать();
	НовыйНабораЗаписей.Очистить();
	Отменена=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
	для Каждого стр из Объект.Товары цикл
		Если стр.ФиксацияСтроки и стр.ДатаИсполнения<=Объект.Дата  Тогда 
			Продолжить;
		КонецЕсли;	
		Если стр.СостояниеЗадачи=Отменена  Тогда 
			Продолжить;
		КонецЕсли;
		НоваяЗапись=НовыйНабораЗаписей.Добавить();
		НоваяЗапись.ДатаЗаписи=ТекущаяДата();
		НоваяЗапись.Номенклатура=стр.Номенклатура;
		НоваяЗапись.СерияНоменклатуры=стр.СерияНоменклатуры;
		НоваяЗапись.КлючДанных=ЭтаФорма.УникальныйИдентификатор;
		Если стр.ФиксацияСтроки Тогда 
			НоваяЗапись.Ячейка = стр.ЯчейкаПикинга;
		иначе
			НоваяЗапись.Ячейка = стр.ЯчейкаОтправитель;
		КонецЕсли;
		НоваяЗапись.Качество=стр.Качество;
		НоваяЗапись.ИдентификаторСтроки=стр.ИдентификаторСтроки;
		НоваяЗапись.Количество=стр.Количество;
		НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
	КонецЦикла;
	НовыйНабораЗаписей.Записать();
КонецПроцедуры
&НаСервере
Процедура ПроверкаНаПересчениеЯчейкиОтправителяПолучателя(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтрокиПредставление,
	|	Товары.ИдентификаторУпаковки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Качество,
	|	Товары.ДатаРозлива,
	|	Товары.ЯчейкаПолучатель,
	|	Товары.СостояниеЗадачи,
	|	Товары.ЯчейкаОтправитель,
	|	Товары.Количество,
	|	Товары.СерияНоменклатуры,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ ТчТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчТоварыЯчейкаОтправитель.ИдентификаторСтрокиПредставление КАК ИдентификаторСтрокиПредставлениеОтправителя,
	|	ТчТоварыЯчейкаОтправитель.ЯчейкаОтправитель КАК Ячейка,
	|	ТчТоварыЯчейкаПолучатель.ИдентификаторСтрокиПредставление КАК ИдентификаторСтрокиПредставлениеПолучателя,
	|	ТчТоварыЯчейкаОтправитель.НомерСтроки КАК НомерСтрокиОтправитель,
	|	ТчТоварыЯчейкаПолучатель.НомерСтроки КАК НомерСтрокиПолучатель
	|ИЗ
	|	ТчТовары КАК ТчТоварыЯчейкаОтправитель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТчТовары КАК ТчТоварыЯчейкаПолучатель
	|		ПО ТчТоварыЯчейкаОтправитель.ЯчейкаОтправитель = ТчТоварыЯчейкаПолучатель.ЯчейкаПолучатель
	|
	|СГРУППИРОВАТЬ ПО
	|	ТчТоварыЯчейкаОтправитель.ИдентификаторСтрокиПредставление,
	|	ТчТоварыЯчейкаОтправитель.ЯчейкаОтправитель,
	|	ТчТоварыЯчейкаПолучатель.ИдентификаторСтрокиПредставление,
	|	ТчТоварыЯчейкаОтправитель.НомерСтроки,
	|	ТчТоварыЯчейкаПолучатель.НомерСтроки";
	
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		Возврат
	КонецЕсли;	
	ВыборкаДетальнойЗаписи = РезультатЗапроса.Выбрать();
	пока ВыборкаДетальнойЗаписи.Следующий() цикл
		Отказ=Истина;
		Сообщить( "в строке "+ВыборкаДетальнойЗаписи.НомерСтрокиОтправитель +" ячейка отправитель "+ВыборкаДетальнойЗаписи.Ячейка+ " пересекается с ячейкой получателем в строке "+ВыборкаДетальнойЗаписи.НомерСтрокиПолучатель);
	КонецЦикла;	
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура ПроверканаНаличиеСуществующегоПеремещения(Отказ)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.итОснование = &итОснование
	|	И ПеремещениеТоваров.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("итОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Сообщить("У документа есть перемещение "+ВыборкаДетальныеЗаписи.Ссылка);
		Отказ=Истина;
	КонецЕсли;
	
	
КонецПроцедуры
&НаСервере
Процедура ПроверкаНаПаллетизацию(Отказ)	
	для Каждого стр из Объект.Товары цикл
		Если стр.ИдентификаторУпаковкиПолучатель="" тогда
			Сообщить("строка "+стр.НомерСтроки+"не паллетизированна");
			Отказ=Истина;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры
&НаСервере
Функция СтатусДокументаСозданЗарезервирован()
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан или Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован Тогда 
		Возврат Истина
	иначе
		Возврат Ложь
	КонецЕсли;	 
КонецФункции
&НаСервере
Функция НеВсеЯчейкиПикинаЗаполненны()
	Отказ=ложь;
	для Каждого стр из Объект.Товары Цикл
		Если стр.ЯчейкаПикинга=Справочники.итСкладскиеЯчейки.ПустаяСсылка() тогда
			Отказ=Истина;
		КонецЕсли;	
	КонецЦикла;
	Возврат Отказ;
КонецФункции
&НаСервере
Процедура СоздатьПерезаписатьДокументПеремещения(ПараметрыЗаписи,ТекущийОбъект,Отказ)

	Если ПараметрыЗаписи.Свойство("ПоложительныйОтветНаВопрос") тогда
		МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(итWMSПеремещение.Ссылка) КАК Ссылка
		|ПОМЕСТИТЬ ВтПеремещениеВПикинг
		|ИЗ
		|	Документ.итWMSПеремещение КАК итWMSПеремещение
		|ГДЕ
		|	итWMSПеремещение.итОснование = &итОснование
		|	И итWMSПеремещение.ПометкаУдаления = ЛОЖЬ
		|	И итWMSПеремещение.ПеремещениеВПикинг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSПеремещениеТовары.ИдентификаторУпаковки,
		|	итWMSПеремещениеТовары.ЯчейкаОтправитель,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВтПеремещениеВПикинг.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихдокументов.распределен)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК Распределен
		|ПОМЕСТИТЬ ДанныеПеремещения
		|ИЗ
		|	ВтПеремещениеВПикинг КАК ВтПеремещениеВПикинг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПеремещение.Товары КАК итWMSПеремещениеТовары
		|		ПО ВтПеремещениеВПикинг.Ссылка = итWMSПеремещениеТовары.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSПеремещениеТовары.ИдентификаторУпаковки,
		|	итWMSПеремещениеТовары.ЯчейкаОтправитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSНаборкаТовары.ИдентификаторУпаковки,
		|	итWMSНаборкаТовары.ЯчейкаОтправитель,
		|	0 КАК НеобходимоПеремещение
		|ПОМЕСТИТЬ ДанныеКПеремещению
		|ИЗ
		|	Документ.итWMSНаборка.Товары КАК итWMSНаборкаТовары
		|ГДЕ
		|	итWMSНаборкаТовары.Ссылка = &итОснование
		|	И итWMSНаборкаТовары.ЯчейкаПикинга = ЗНАЧЕНИЕ(Справочник.ИтСкладскиеЯчейки.ПустаяСсылка)
		|	И НЕ итWMSНаборкаТовары.ФиксацияСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSНаборкаТовары.ИдентификаторУпаковки,
		|	итWMSНаборкаТовары.ЯчейкаОтправитель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПеремещения.ИдентификаторУпаковки,
		|	ДанныеПеремещения.ЯчейкаОтправитель,
		|	1
		|ИЗ
		|	ДанныеПеремещения КАК ДанныеПеремещения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеКПеремещению.ИдентификаторУпаковки,
		|	ДанныеКПеремещению.ЯчейкаОтправитель,
		|	МАКСИМУМ(ДанныеКПеремещению.НеобходимоПеремещение) КАК НеобходимоПеремещение
		|ПОМЕСТИТЬ ДанныеКПеремещениюИтог
		|ИЗ
		|	ДанныеКПеремещению КАК ДанныеКПеремещению
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеКПеремещению.ИдентификаторУпаковки,
		|	ДанныеКПеремещению.ЯчейкаОтправитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеКПеремещениюИтог.ИдентификаторУпаковки,
		|	ДанныеКПеремещениюИтог.ЯчейкаОтправитель,
		|	ДанныеКПеремещениюИтог.НеобходимоПеремещение
		|ПОМЕСТИТЬ ДанныеКперемещениюИтогСОтбором
		|ИЗ
		|	ДанныеКПеремещениюИтог КАК ДанныеКПеремещениюИтог
		|ГДЕ
		|	ДанныеКПеремещениюИтог.НеобходимоПеремещение = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итТоварыВЯчейкахОстатки.Склад,
		|	итТоварыВЯчейкахОстатки.Ячейка,
		|	итТоварыВЯчейкахОстатки.ИдентификаторУпаковки,
		|	итТоварыВЯчейкахОстатки.Номенклатура,
		|	итТоварыВЯчейкахОстатки.Характеристика,
		|	итТоварыВЯчейкахОстатки.СерияНоменклатуры,
		|	итТоварыВЯчейкахОстатки.ДатаРозлива,
		|	итТоварыВЯчейкахОстатки.Качество,
		|	итТоварыВЯчейкахОстатки.КоличествоОстаток
		|ИЗ
		|	ДанныеКперемещениюИтогСОтбором КАК ДанныеКперемещениюИтогСОтбором
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(, ) КАК итТоварыВЯчейкахОстатки
		|		ПО ДанныеКперемещениюИтогСОтбором.ИдентификаторУпаковки = итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
		|			И ДанныеКперемещениюИтогСОтбором.ЯчейкаОтправитель = итТоварыВЯчейкахОстатки.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтПеремещениеВПикинг.Ссылка
		|ИЗ
		|	ВтПеремещениеВПикинг КАК ВтПеремещениеВПикинг
		|ГДЕ
		|	НЕ ВтПеремещениеВПикинг.Ссылка ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("итОснование", ТекущийОбъект.Ссылка);
		//Запрос.УстановитьПараметр("ТоварыНаборка",Объект.Товары.Выгрузить());
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[6].Выбрать();
		
		Если  ВыборкаДетальныеЗаписи.Следующий() тогда
			Если ВыборкаДетальныеЗаписи.Ссылка.Проведен и РезультатЗапроса[5].Пустой() Тогда 
				Возврат
			ИначеЕсли НетНеобходимостиСозданияДокумента(ВыборкаДетальныеЗаписи.Ссылка, РезультатЗапроса,ТекущийОбъект) Тогда 
				Сообщить("нет данных для создания перезаписи перемещения, проверьте остатки");
				Возврат
			Иначе 
				ОбъектДанных=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			КонецЕсли;
		иначе
			ОбъектДанных=Документы.итWMSПеремещение.СоздатьДокумент();
		КонецЕсли;
		ДокументРаспределен=Ложь;
        ЗаполнениеОбщихПараметровПеремещенияВПикинг(ОбъектДанных,ТекущийОбъект,ДокументРаспределен);
		ВыборкаДанныхПеремещения=РезультатЗапроса[5].Выбрать();
		//ОбъектДанных.Товары.Очистить();
		//Если Не ДокументРаспределен Тогда 
		//	ОчиститьНеЗафиксированныеСтрокиТоваров(ОбъектДанных.Товары);
		//КонецЕсли;	
		МассивНовыхСтрок=новый Массив;
		КВыполнению=Перечисления.итWMSСостоянияЗадачТСД.КВыполнению;
		Пока  ВыборкаДанныхПеремещения.Следующий() цикл
			НоваяСтрока=ОбъектДанных.Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
			НоваяСтрока.ДатаРозлива=ВыборкаДанныхПеремещения.СерияНоменклатуры.ДатаПроизводства;
			НоваяСтрока.Качество=ВыборкаДанныхПеремещения.Качество;
			НоваяСтрока.Количество=ВыборкаДанныхПеремещения.КоличествоОстаток;
			НоваяСтрока.ИдентификаторУпаковки=ВыборкаДанныхПеремещения.ИдентификаторУпаковки;
			НоваяСтрока.ИдентификаторУпаковкиПолучатель=ВыборкаДанныхПеремещения.ИдентификаторУпаковки;
			НоваяСтрока.Номенклатура=ВыборкаДанныхПеремещения.Номенклатура;
			НоваяСтрока.СерияНоменклатуры=ВыборкаДанныхПеремещения.СерияНоменклатуры;
			НоваяСтрока.ЯчейкаОтправитель=ВыборкаДанныхПеремещения.Ячейка;
			НоваяСтрока.СостояниеЗадачи=КВыполнению;
			МассивНовыхСтрок.Добавить(Строка(НоваяСтрока.ИдентификаторСтроки));
		КонецЦикла;
		Если ДокументРаспределен Тогда 
			ОбъектДанных.МассивНовыхСтрок=МассивНовыхСтрок;
			ОбъектДанных.МассивЗадач=новый Массив;
		КонецЕсли;
		Если МассивНовыхСтрок.Количество()>0 Тогда 
			Если ДокументПеремещенияНаходитсяВКонечномСостоянии(ОбъектДанных.СтатусДокумента) Тогда 
				ОбъектДанных.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
			КонецЕсли;	
		КонецЕсли;
		ОбъектДанных.ЗаполнитьПеремещениеВПикинг();
		ОбъектДанных.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
КонецПроцедуры
Функция ДокументПеремещенияНаходитсяВКонечномСостоянии(СостояниеДокумента)
	Если СостояниеДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой или
		СостояниеДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
        СостояниеДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда 
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;

	КонецФункции
&НаСервере
Функция  НетНеобходимостиСозданияДокумента(Ссылка,РезультатЗапроса,ТекущийОбъект)
	Если РезультатЗапроса[5].Пустой() Тогда 	
		Если не Ссылка.Проведен Тогда 
			ОбъектДанных=Ссылка.ПолучитьОбъект();
			ЗаполнитьОбщиеРеквизитыДокументаПеремещенияВПикинг(ОбъектДанных,ТекущийОбъект);
			ОбъектДанных.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
&НаСервере
Процедура ЗаполнениеОбщихПараметровПеремещенияВПикинг(ОбъектДанных,ТекущийОбъект,ДокументРаспределен)
	Если не ОбъектДанных.Ссылка.Пустая() Тогда 
		БлокировкаДанных = новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.итWMSЗадачиТСД");
		ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ДокументОснование",ОбъектДанных.Ссылка);
		БлокировкаДанных.Заблокировать();
	КонецЕсли;
	ЗаполнитьОбщиеРеквизитыДокументаПеремещенияВПикинг(ОбъектДанных,ТекущийОбъект);
	Если ОбъектДанных.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен тогда
		//Отказ=Истина;
		//Сообщить("Перемещение находится в заданиях на ТСД, уберите все задания перемещения с ТСД, или додждитесь окончания перемещения.");
		//Возврат
		ДокументРаспределен=Истина;
	КонецЕсли;	
	
	//Если ОбъектДанных.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой или 
	//	ОбъектДанных.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
	//	ОбъектДанных.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен тогда
	//	ОбъектДанных.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
	//	//Отказ=Истина;
	//	//Сообщить("У данного документа уже есть завершенное перемещение");
	//	//Возврат
	//КонецЕсли;		
	Если ОбъектДанных.Ссылка.Пустая() Тогда 
		ОбъектДанных.НеРаспределятьНаТСД=ТекущийОбъект.НеРаспределятьНаТСД;
		ОбъектДанных.Ответственный=ПараметрыСеанса.ТекущийПользователь;
		ОбъектДанных.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
	КонецЕсли;
	
		
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьОбщиеРеквизитыДокументаПеремещенияВПикинг(ОбъектДанных,ТекущийОбъект)
	ОбъектДанных.Организация=Объект.Организация;
	ОбъектДанных.итОснование=ТекущийОбъект.Ссылка;
	ОбъектДанных.Дата=ТекущийОбъект.Дата-1;
	ОбъектДанных.СкладОтправитель=ТекущийОбъект.Склад;
	ОбъектДанных.СкладПолучатель=ТекущийОбъект.Склад;
	ОбъектДанных.ПеремещениеВПикинг=Истина;
	ОбъектДанных.Комментарий="Документ создан на основании наборки, для пополнения зоны пикинга";
	КонецПроцедуры

&НаСервере
Процедура ПопытатьсяПометитьНаУдалениеПеремещение(ПараметрыЗаписи,ТекущийОбъект,Отказ)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSПеремещение.Ссылка
	|ИЗ
	|	Документ.итWMSПеремещение КАК итWMSПеремещение
	|ГДЕ
	|	итWMSПеремещение.итОснование = &Ссылка
	|	И итWMSПеремещение.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если  ВыборкаДетальныеЗаписи.Ссылка.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен тогда
			Отказ=Истина;
			Сообщить("Перемещение выполняется. Завершите все задачи для отмены проведения или пометки на удаления");
			Возврат
		КонецЕсли;
		Если ВыборкаДетальныеЗаписи.Ссылка.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется или
			ВыборкаДетальныеЗаписи.Ссылка.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан или
			ВыборкаДетальныеЗаписи.Ссылка.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован тогда
			ОбъектПеремещения=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектПеремещения.ПометкаУдаления   =ТекущийОбъект.ПометкаУдаления;
			ОбъектПеремещения.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры
&НаСервере
Процедура ПроверитьРаспределениеНаТСДПеремещения(ПараметрыЗаписи,ТекущийОбъект,Отказ)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSПеремещение.Ссылка
	|ИЗ
	|	Документ.итWMSПеремещение КАК итWMSПеремещение
	|ГДЕ
	|	итWMSПеремещение.итОснование = &Ссылка
	|	И итWMSПеремещение.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если  ВыборкаДетальныеЗаписи.Ссылка.СтатусДокумента= Перечисления.итWMSСтатусыСкладскихДокументов.Создан или
			ВыборкаДетальныеЗаписи.Ссылка.СтатусДокумента= Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован или
			ВыборкаДетальныеЗаписи.Ссылка.СтатусДокумента= Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда
			ОбъектПеремещения=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектПеремещения.НеРаспределятьНаТСД=ТекущийОбъект.НеРаспределятьНаТСД;
			ОбъектПеремещения.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры
&НаКлиенте
Процедура СоздатьНаОснованииНаКлиенте(Основание)Экспорт
	Отказ=ложь;
	СтандартнаяОбработка=Истина;
	СоздатьНаОснованииНаКлиентеСервер(Основание,Отказ,СтандартнаяОбработка);
	Если Отказ тогда
		ЭтаФорма.Закрыть();
		Сообщить("ошибка создания");
	КонецЕсли;
	//ПриОткрытии(Отказ);
	//Если Отказ тогда
	//	ЭтаФорма.Закрыть();
	//	Сообщить("ошибка создания");
	//КонецЕсли;
	ЭтаФорма.Открыть();
КонецПроцедуры
&НаСервере
Процедура СоздатьНаОснованииНаКлиентеСервер(Основание,Отказ,СтандартнаяОбработка)
	Данные = РеквизитФормыВЗначение("Объект");
	Данные.ОбработкаЗаполнения(Основание,"",СтандартнаяОбработка);
	ЗначениеВРеквизитФормы(Данные,"Объект");
	ПриСозданииНаСервере(Отказ,СтандартнаяОбработка);
КонецПроцедуры
&НаСервере	
Функция  ПроверкаНаСервереПередСозданием()
	Настройки=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилища();
	Если ТипЗнч(Настройки)=Тип("Структура") Тогда 
		Если Настройки.Свойство("ИспользоватьПроверкуДляНаборок") Тогда 
			Если   Настройки.ИспользоватьПроверкуДляНаборок Тогда 
				Если не УНаборкиЕстьЗавершеннаяПроверка() Тогда 
					Сообщить("Включен режим проверки наборок, у текущей наборки нет завершенной проверки , Реализацию создать не возможно");
					Возврат Ложь;
				КонецЕсли;
				Если не ДанныеНаборкиСоответствуютПроверке() Тогда 
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Основание = &итОснование
	|	И РеализацияТоваровУслуг.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("итОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Сообщить("У документа уже есть проведенная реализация");
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	

	
КонецФункции

&НаСервере
Функция ДанныеНаборкиСоответствуютПроверке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSПроверкаитОснования.Ссылка
		|ПОМЕСТИТЬ ВтПроверка
		|ИЗ
		|	Документ.итWMSПроверка.итОснования КАК итWMSПроверкаитОснования
		|ГДЕ
		|	итWMSПроверкаитОснования.Документ = &Документ
		|	И итWMSПроверкаитОснования.Ссылка.Проведен
		|	И итWMSПроверкаитОснования.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Выполнен), ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Завершен))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSПроверкаТовары.Номенклатура,
		|	итWMSПроверкаТовары.СерияНоменклатуры,
		|	итWMSПроверкаТовары.ИдентификаторУпаковки,
		|	СУММА(итWMSПроверкаТовары.КоличествоФакт) КАК КоличествоФакт
		|ПОМЕСТИТЬ ВтДанныеПроверки
		|ИЗ
		|	ВтПроверка КАК ВтПроверка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.итWMSПроверка.Товары КАК итWMSПроверкаТовары
		|		ПО ВтПроверка.Ссылка = итWMSПроверкаТовары.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	итWMSПроверкаТовары.Номенклатура,
		|	итWMSПроверкаТовары.СерияНоменклатуры,
		|	итWMSПроверкаТовары.ИдентификаторУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.СерияНоменклатуры,
		|	Товары.ИдентификаторУпаковкиПолучатель,
		|	Товары.КоличествоФакт,
		|	Товары.ИзъятиеТовара,
		|	Товары.КоличествоИзъятия,
		|	Товары.СостояниеЗадачи
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТовары.Номенклатура,
		|	ВтТовары.СерияНоменклатуры,
		|	ВтТовары.ИдентификаторУпаковкиПолучатель,
		|	СУММА(ВЫБОР
		|			КОГДА ВтТовары.ИзъятиеТовара
		|				ТОГДА ВтТовары.КоличествоФакт - ВтТовары.КоличествоИзъятия
		|			ИНАЧЕ ВтТовары.КоличествоФакт
		|		КОНЕЦ) КАК КоличествоФакт
		|ПОМЕСТИТЬ ВтТоварыГруппировка
		|ИЗ
		|	ВтТовары КАК ВтТовары
		|ГДЕ
		|	ВтТовары.СостояниеЗадачи <> ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.Отменена)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтТовары.ИдентификаторУпаковкиПолучатель,
		|	ВтТовары.Номенклатура,
		|	ВтТовары.СерияНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыГруппировка.Номенклатура,
		|	ВтТоварыГруппировка.СерияНоменклатуры,
		|	ВтТоварыГруппировка.ИдентификаторУпаковкиПолучатель,
		|	ВтТоварыГруппировка.КоличествоФакт КАК КоличествоНаборка,
		|	0 КАК КоличествоПроверка
		|ПОМЕСТИТЬ ВтОбъединениеДанных
		|ИЗ
		|	ВтТоварыГруппировка КАК ВтТоварыГруппировка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтДанныеПроверки.Номенклатура,
		|	ВтДанныеПроверки.СерияНоменклатуры,
		|	ВтДанныеПроверки.ИдентификаторУпаковки,
		|	0,
		|	ВтДанныеПроверки.КоличествоФакт
		|ИЗ
		|	ВтДанныеПроверки КАК ВтДанныеПроверки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтОбъединениеДанных.Номенклатура,
		|	ВтОбъединениеДанных.СерияНоменклатуры,
		|	ВтОбъединениеДанных.ИдентификаторУпаковкиПолучатель,
		|	СУММА(ВтОбъединениеДанных.КоличествоНаборка) КАК КоличествоНаборка,
		|	СУММА(ВтОбъединениеДанных.КоличествоПроверка) КАК КоличествоПроверка
		|ПОМЕСТИТЬ ВтДанныеГруппировкиОбъединения
		|ИЗ
		|	ВтОбъединениеДанных КАК ВтОбъединениеДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтОбъединениеДанных.Номенклатура,
		|	ВтОбъединениеДанных.СерияНоменклатуры,
		|	ВтОбъединениеДанных.ИдентификаторУпаковкиПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеГруппировкиОбъединения.Номенклатура,
		|	ВтДанныеГруппировкиОбъединения.СерияНоменклатуры,
		|	ВтДанныеГруппировкиОбъединения.ИдентификаторУпаковкиПолучатель,
		|	ВтДанныеГруппировкиОбъединения.КоличествоНаборка,
		|	ВтДанныеГруппировкиОбъединения.КоличествоПроверка,
		|	ВЫБОР
		|		КОГДА ВтДанныеГруппировкиОбъединения.КоличествоНаборка - ВтДанныеГруппировкиОбъединения.КоличествоПроверка > 0
		|			ТОГДА ВтДанныеГруппировкиОбъединения.КоличествоНаборка - ВтДанныеГруппировкиОбъединения.КоличествоПроверка
		|		ИНАЧЕ -(ВтДанныеГруппировкиОбъединения.КоличествоНаборка - ВтДанныеГруппировкиОбъединения.КоличествоПроверка)
		|	КОНЕЦ КАК Разница
		|ИЗ
		|	ВтДанныеГруппировкиОбъединения КАК ВтДанныеГруппировкиОбъединения
		|ГДЕ
		|	ВтДанныеГруппировкиОбъединения.КоличествоНаборка <> ВтДанныеГруппировкиОбъединения.КоличествоПроверка";
	
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ДанныеСходятся=Истина;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ДанныеСходятся=Ложь;
	Сообщить("Расхождения между наборкой и проверкой по идентификатору: "+ВыборкаДетальныеЗаписи.ИдентификаторУпаковкиПолучатель+" номенклатуре: "+ВыборкаДетальныеЗаписи.Номенклатура+
	" в количестве: "+ВыборкаДетальныеЗаписи.Разница);
	КонецЦикла;
	
	Возврат ДанныеСходятся;	
	
	КонецФункции

&НаСервере
Функция УНаборкиЕстьЗавершеннаяПроверка()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSПроверкаитОснования.Ссылка
	|ИЗ
	|	Документ.итWMSПроверка.итОснования КАК итWMSПроверкаитОснования
	|ГДЕ
	|	итWMSПроверкаитОснования.Документ = &Документ
	|	И итWMSПроверкаитОснования.Ссылка.Проведен
	|	И итWMSПроверкаитОснования.Ссылка.СтатусДокумента В (ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Выполнен), ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Завершен))";
	
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
	
	
КонецФункции
&НаСервере
Процедура ОбновитьДокументНаСервере()
	ОбъектДанных=Объект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
	ПроставитьПредставлениеИдентификатора();
КонецПроцедуры
&НаСервере
Процедура ПроверкаДанныхХранилищаНаСистемнуюЯчейку(СистемнаяЯчейка,Отказ)
	Если СистемнаяЯчейка=Справочники.итСкладскиеЯчейки.ПустаяСсылка() или СистемнаяЯчейка=Неопределено Тогда 
		Сообщить("Настройте системную ячейку WMS");
		Отказ=Истина;
		Возврат
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция ПараметрыФормыМножественногоПодбораНоменклатуры()
	ПараметрыФормы=новый Структура;
	ПараметрыФормы.Вставить("Склад",Объект.Склад);
	ПараметрыФормы.Вставить("ОдиночныйВыбор",Ложь);
	ПараметрыФормы.Вставить("ОтборПоНоменклатуре",Истина);
	ПараметрыФормы.Вставить("Организация",Объект.Организация);
	ПараметрыФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Документ",Объект.Ссылка);
	Возврат  ПараметрыФормы;
КонецФункции	
&НаКлиенте
Процедура РассчитатьКоличествоПаллет()
	МассиПаллет=новый Массив;
	Ошибка=Ложь;
	Для Каждого стр из Объект.Товары цикл
		Если стр.ИдентификаторУпаковкиПолучатель="" тогда
			Ошибка=Истина;
			Прервать;
		КонецЕсли;
		Если  МассиПаллет.Найти(стр.ИдентификаторУпаковкиПолучатель)=Неопределено Тогда 
			МассиПаллет.Добавить(стр.ИдентификаторУпаковкиПолучатель);
		КонецЕсли;
	КонецЦикла;
	Если Ошибка тогда
		Элементы.КоличетсвоПаллетНадписьЗначение.Заголовок=Строка("не все строки паллетизированы");
	иначе		
		Элементы.КоличетсвоПаллетНадписьЗначение.Заголовок=Строка(МассиПаллет.Количество());
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура РассчитатьСрокГодностиИФлагОкраскиДляВсехСтрок()
	для Каждого стр из Объект.Товары цикл
		СрокиГодностиИфлагОкраски(стр);
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура СрокиГодностиИфлагОкраски(ДанныеСтроки)	
	//ДанныеСтроки=ТекущийЭлемент.ТекущиеДанные;
	Если СрокГодностиСерии(ДанныеСтроки.СерияНоменклатуры) <> Дата("00010101") Тогда 
		ПроцентОстаточногоСрокаГодности=Неопределено;
		ОкраскаСрокаГодностиСервер(ДанныеСтроки.СерияНоменклатуры,ПроцентОстаточногоСрокаГодности);	
		Если ПроцентОстаточногоСрокаГодности < ПроцентДопустимогоОстаточногоСрокаГодностиКА(Объект.Контрагент) Тогда
		ДанныеСтроки.ПроцентОСГФлагОкраски = Истина;    // цвет текста красный
	    иначе
		ДанныеСтроки.ПроцентОСГФлагОкраски = Ложь; 
	    КонецЕсли;
	Иначе
		
		ПроцентОстаточногоСрокаГодности = "Без с.г.";
		ДанныеСтроки.ПроцентОСГФлагОкраски = Ложь;
	КонецЕсли;	
	
	ДанныеСтроки.ПроцентОСГ = Формат(ПроцентОстаточногоСрокаГодности,"ЧДЦ=2");
	
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция СрокГодностиСерии(Серия)
	Возврат Серия.СрокГодности;
КонецФункции
&НаСервереБезКонтекста
Функция ПроцентДопустимогоОстаточногоСрокаГодностиКА(КА)
Возврат	КА.итПроцентДопустимогоОстаточногоСрокаГодности;
	КонецФункции

&НаСервере
Процедура ОкраскаСрокаГодностиСервер(СерияНоменклатуры,ПроцентОстаточногоСрокаГодности)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(&ДатаПроизводства, &СрокГодности, ДЕНЬ) КАК ДнейГодности,
	|	РАЗНОСТЬДАТ(&ДатаПроизводства, &ДатаДокумента, ДЕНЬ) КАК ДнейПрошло";
	
	Запрос.УстановитьПараметр("ДатаПроизводства", СерияНоменклатуры.ДатаПроизводства );
	Запрос.УстановитьПараметр("СрокГодности", СерияНоменклатуры.СрокГодности );
	Запрос.УстановитьПараметр("ДатаДокумента", ДАТА(Объект.Дата) );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	//Таб = Результат.Выгрузить();
	Выборка.Следующий();
	
	Попытка
		ПроцентОстаточногоСрокаГодности = 100 - (Выборка.ДнейПрошло / Выборка.ДнейГодности * 100);
	Исключение
		ПроцентОстаточногоСрокаГодности = "Без с.г.";
	КонецПопытки;	
	
	
КонецПроцедуры


&НаКлиенте
Процедура РассчитатьНадписиКоличестваТовара()
	Если Элементы.Товары.ТекущиеДанные<>Неопределено  Тогда 
		НМ=Элементы.Товары.ТекущиеДанные.Номенклатура;
		МассивСтрок=Объект.Товары.НайтиСтроки(новый Структура("Номенклатура",НМ));
		КоличествоНм=0;
		КоличествоНМФакт=0;
		для Каждого Строка из МассивСтрок цикл
			КоличествоНМ=КоличествоНМ+Строка.Количество;
			КоличествоНМФакт=КоличествоНМФакт+Строка.КоличествоФакт;
		КонецЦикла;
		Элементы.ДекорацияВыбраннойНМДанные.Заголовок= Строка(КоличествоНМ);
		Элементы.ДекорацияВыбраннойНМФактДанные.Заголовок= Строка(КоличествоНМФакт);
	КонецЕсли;
	
	КоличествоВсего=0;
	КоличествоВсегоФакт=0;
	для Каждого стр из Объект.Товары Цикл 
		КоличествоВсего=КоличествоВсего+стр.Количество;
		КоличествоВсегоФакт=КоличествоВсегоФакт+стр.КоличествоФакт;
	КонецЦикла;
	Элементы.ДекорацияКоличествоВсегоДанные.Заголовок=Строка(КоличествоВсего);
	Элементы.ДекорацияКоличествоВсегоФактДанные.Заголовок=Строка(КоличествоВсегоФакт);
КонецПроцедуры
&НаСервере
Функция ДокументВСтатусеПерезапуска()
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой или
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда 
		Возврат Истина
	иначе
		Возврат Ложь
	КонецЕсли;	
КонецФункции
&НаКлиенте
Процедура ПроверкаНаПерезапускДокумента(Отказ, ПараметрыЗаписи)
	Если  ЕстьНеФиксированныеСтроки() Тогда
		Отказ=Истина;
		Оповещение=новый ОписаниеОповещения("УстановитьПараметрыПерезапускаОповещение",ЭтаФорма);
		ПоказатьВопрос(Оповещение,"Обнаружены новые данные, если продолжите, документ снова будет отправлен на тсд. Продолжить?",РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура УстановитьПараметрыПерезапускаОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;
	Попытка
		СтарыйСтатус=Объект.СтатусДокумента;
		ЭтаФорма.Записать(новый Структура("РежимЗаписи,ПерезапускДокумента",РежимЗаписиДокумента.Проведение,Истина));
	Исключение
		Объект.СтатусДокумента=СтарыйСтатус;
	КонецПопытки;
КонецПроцедуры
&НаСервере	
Процедура УстановитьСтатусДокументаПерезпуска()
	Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
КонецПроцедуры
&НаСервере
Функция  ЕстьНеФиксированныеСтроки()
	ЕстьНеЗаФиксированныеСтроки=Ложь;
	Для Каждого стр из Объект.Товары цикл
		Если не стр.ФиксацияСтроки	Тогда 
			ЕстьНеЗаФиксированныеСтроки=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьНеЗаФиксированныеСтроки;
КонецФункции
&НаСервере
Процедура ОчиститьНеЗафиксированныеСтрокиТоваров(ТаблицаКОчистки)
	МассивСтрокКУдалению=новый Массив;
	Для Каждого стр из ТаблицаКОчистки цикл
		Если не стр.ФиксацияСтроки Тогда 
			МассивСтрокКУдалению.Добавить(стр);
		КонецЕсли;	
	КонецЦикла;
	Для Каждого Элемент из МассивСтрокКУдалению цикл
		ТаблицаКОчистки.Удалить(Элемент);
	КонецЦикла;
КонецПроцедуры
&НаСервере	
Процедура ПроверитьНаПредупреждение()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSПеремещение.Ссылка
	|ИЗ
	|	Документ.итWMSПеремещение КАК итWMSПеремещение
	|ГДЕ
	|	итWMSПеремещение.итОснование = &итОснование
	|	И итWMSПеремещение.Проведен
	|	И итWMSПеремещение.ПеремещениеВПикинг";
	
	Запрос.УстановитьПараметр("итОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	НеВесьПикингЗаполнен=Ложь;
	Для Каждого стр из Объект.Товары цикл
		Если стр.ЯчейкаПикинга.Пустая() Тогда
			НеВесьПикингЗаполнен=Истина;
		КонецЕсли;
	КонецЦикла;
		Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Если (ВыборкаДетальныеЗаписи.Ссылка.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
			ВыборкаДетальныеЗаписи.Ссылка.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой или
			ВыборкаДетальныеЗаписи.Ссылка.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен) и НеВесьПикингЗаполнен  Тогда
			Элементы.НадписьПредупреждения.Заголовок="Перемещение в пикинг завершено, но не все ячейки пикинга заполнены!!!";
		КонецЕсли;
	иначе
		Если НеВесьПикингЗаполнен Тогда 
			Элементы.НадписьПредупреждения.Заголовок="Нет документа перемещения в пикинг!!!";
		иначе
			 Элементы.НадписьПредупреждения.Заголовок="";
		КонецЕсли;
	КонецЕсли;
	Если Элементы.НадписьПредупреждения.Заголовок="" Тогда 
		Элементы.НадписьПредупреждения.Видимость=Ложь;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
&НаСервере			
Процедура ПереполучитьОбъектФормы()
	ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(),"Объект");
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПолучитьПеремещениеИзъятия(СсылкаОбъекта)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	итWMSПеремещение.Ссылка
	|ИЗ
	|	Документ.итWMSПеремещение КАК итWMSПеремещение
	|ГДЕ
	|	итWMSПеремещение.ИзъятиеТовараИзНаборки
	|	И итWMSПеремещение.итОснование = &итОснование
	|	И итWMSПеремещение.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("итОснование",СсылкаОбъекта);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.Ссылка;	
	КонецЕсли;
	Возврат Неопределено;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере
Процедура ЗаполнитьЗначениеОснования(Заказ)
	Если УНаборкиЕстьПеремещениеНаСклад() Тогда 
		Сообщить("Наборка размещается/размещена на склад ,не возможно привязать основание");
		Если не РольДоступна("ПолныеПрава") Тогда 
		Возврат
		КонецЕсли;
	КонецЕсли;
	Если  ЗаказУчавствуетВОтгрузке(Заказ) Тогда 
		Если не РольДоступна("ПолныеПрава") Тогда
		Сообщить("Заказ учавствует в отгрузке, не возможно привязать основание. Если отгрузка распределяется или зарезервирована - пометьте ее на удаление");
		Возврат
		КонецЕсли;
	КонецЕсли;
	Если  НаборкаУчавствуетВОтгрузке() Тогда 
		Если не РольДоступна("ПолныеПрава") Тогда
		Сообщить("Наборка учавствует в отгрузке, не возможно привязать основание. Если отгрузка распределяется или зарезервирована - пометьте ее на удаление");
		Возврат
		КонецЕсли;
	КонецЕсли;

	Если  Объект.итОснование <> Неопределено Тогда 
		Если не РольДоступна("ПолныеПрава") Тогда 
		Сообщить("у документа уже назначено основание--отказ");
		Возврат
		КонецЕсли;
	КонецЕсли;
	Объект.итОснование=Заказ;
КонецПроцедуры
&НаСервере
Функция УНаборкиЕстьПеремещениеНаСклад()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSПеремещение.Ссылка
		|ИЗ
		|	Документ.итWMSПеремещение КАК итWMSПеремещение
		|ГДЕ
		|	итWMSПеремещение.Проведен
		|	И итWMSПеремещение.итОснование = &итОснование
		|	И НЕ итWMSПеремещение.ПеремещениеВПикинг
		|	И НЕ итWMSПеремещение.ИзъятиеТовараИзНаборки";
	
	Запрос.УстановитьПараметр("итОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат Истина;
	КонецЕсли;
	    Возврат Ложь;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецФункции
&НаСервере
Функция НаборкаУчавствуетВОтгрузке()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSОтгрузкаитОснования.Ссылка
		|ИЗ
		|	Документ.итWMSОтгрузка.итОснования КАК итWMSОтгрузкаитОснования
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Документ = ЗНАЧЕНИЕ(Документ.итwmsнаборка.пустаяСсылка)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ итWMSОтгрузкаитОснования.Документ = &Документ
		|		КОНЕЦ
		|	И итWMSОтгрузкаитОснования.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат Истина;
	КонецЕсли;
	    Возврат Ложь;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере	
Функция ЗаказУчавствуетВОтгрузке(Заказ)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSОтгрузкаитОснования.Ссылка
		|ИЗ
		|	Документ.итWMSОтгрузка.итОснования КАК итWMSОтгрузкаитОснования
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Документ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.пустаяСсылка)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ итWMSОтгрузкаитОснования.Документ = &Документ
		|		КОНЕЦ
		|	И итWMSОтгрузкаитОснования.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("Документ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат Истина;
	КонецЕсли;
	    Возврат Ложь;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецФункции
	
&НаСервере
Функция  НеСоответсвуетОснованию()
Отказ=Ложь;
Если ТипЗнч(Объект.итОснование)=Тип("ДокументСсылка.ЗаказПокупателя") тогда
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ЕСТЬNULL(ЗаказПокупателяТовары.Количество, 0) * ЕСТЬNULL(ЗаказПокупателяТовары.ЕдиницаИзмерения.Коэффициент, 0)) КАК Количество
		|ПОМЕСТИТЬ ДанныеЗаказа
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателяТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Количество КАК Количество,
		|	Товары.КоличествоФакт КАК КоличествоФакт,
		|	Товары.ФиксацияСтроки КАК ФиксацияСтроки,
		|	Товары.СостояниеЗадачи КАК СостояниеЗадачи,
		|	Товары.ИзъятиеТовара КАК ИзъятиеТовара,
		|	Товары.КоличествоИзъятия КАК КоличествоИзъятия
		|ПОМЕСТИТЬ ВтТоварыДокумента
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыДокумента.Номенклатура КАК Номенклатура,
		|	СУММА(ВЫБОР
		|			КОГДА ВтТоварыДокумента.ФиксацияСтроки
		|				ТОГДА ВЫБОР
		|						КОГДА ВтТоварыДокумента.ИзъятиеТовара
		|							ТОГДА ЕСТЬNULL(ВтТоварыДокумента.КоличествоФакт, 0) - ЕСТЬNULL(ВтТоварыДокумента.КоличествоИзъятия, 0)
		|						ИНАЧЕ ВтТоварыДокумента.КоличествоФакт
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ВтТоварыДокумента.ИзъятиеТовара
		|						ТОГДА ЕСТЬNULL(ВтТоварыДокумента.Количество, 0) - ЕСТЬNULL(ВтТоварыДокумента.КоличествоИзъятия, 0)
		|					ИНАЧЕ ВтТоварыДокумента.Количество
		|				КОНЕЦ
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА ВтТоварыДокумента.ИзъятиеТовара
		|				ТОГДА ЕСТЬNULL(ВтТоварыДокумента.КоличествоФакт, 0) - ЕСТЬNULL(ВтТоварыДокумента.КоличествоИзъятия, 0)
		|			ИНАЧЕ ВтТоварыДокумента.КоличествоФакт
		|		КОНЕЦ) КАК КоличествоФакт
		|ПОМЕСТИТЬ ВтТоварыДокументаГруппировка
		|ИЗ
		|	ВтТоварыДокумента КАК ВтТоварыДокумента
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВтТоварыДокумента.ФиксацияСтроки
		|					И ВтТоварыДокумента.СостояниеЗадачи = ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.Отменена)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ВтТоварыДокумента.ИзъятиеТовара
		|				ТОГДА ЕСТЬNULL(ВтТоварыДокумента.Количество, 0) - ЕСТЬNULL(ВтТоварыДокумента.КоличествоИзъятия, 0)
		|			ИНАЧЕ ВтТоварыДокумента.Количество
		|		КОНЕЦ > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтТоварыДокумента.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
		|	ДанныеЗаказа.Количество КАК КоличествоПланЗаказа,
		|	0 КАК КоличествоФакт,
		|	0 КАК КоличествоВНаборке
		|ПОМЕСТИТЬ ОбъединениеДанных
		|ИЗ
		|	ДанныеЗаказа КАК ДанныеЗаказа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтТоварыДокументаГруппировка.Номенклатура,
		|	0,
		|	ВтТоварыДокументаГруппировка.КоличествоФакт,
		|	ВтТоварыДокументаГруппировка.Количество
		|ИЗ
		|	ВтТоварыДокументаГруппировка КАК ВтТоварыДокументаГруппировка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъединениеДанных.Номенклатура КАК Номенклатура,
		|	СУММА(ОбъединениеДанных.КоличествоПланЗаказа) КАК КоличествоПланЗаказа,
		|	СУММА(ОбъединениеДанных.КоличествоФакт) КАК КоличествоФакт,
		|	СУММА(ОбъединениеДанных.КоличествоВНаборке) КАК КоличествоВНаборке
		|ИЗ
		|	ОбъединениеДанных КАК ОбъединениеДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъединениеДанных.Номенклатура";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.итОснование);
		Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.КоличествоПланЗаказа <> ВыборкаДетальныеЗаписи.КоличествоВНаборке Тогда 
					Сообщить("Количетсво номенклатуры "+Строка(ВыборкаДетальныеЗаписи.Номенклатура) +" в заказе не равно количеству в наборке (в заказе "+Строка(ВыборкаДетальныеЗаписи.КоличествоПланЗаказа)+ 
					" в наборке " +Строка(ВыборкаДетальныеЗаписи.КоличествоВНаборке)+")");
					Отказ=Истина;
				КонецЕсли;
			
		КонецЦикла;
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
	КонецЕсли;
Возврат Отказ;
КонецФункции

&НаСервере
Процедура ОчиститьДанныеПомарочногоУчета()
	НаборЗаписей=РегистрыСведений.итWMS_АгрегацияМарок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	НаборЗаписей2=РегистрыСведений.итWMS_МаркиВОбработке.СоздатьНаборЗаписей();
	НаборЗаписей2.Отбор.ДокументОснование.Установить(Объект.Ссылка);
	НаборЗаписей2.Прочитать();
	НаборЗаписей2.Очистить();
	НаборЗаписей2.Записать();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСТСД()
Документы.итWMSНаборка.ВнестиИзменениеДанныхТСДВДокумент(Объект.Ссылка);
Данные=Объект.Ссылка.ПолучитьОбъект();
Если итWMSСлужебныеПроцедурыИФункции.ВсеЗадачиДокументаЗафиксированны(Объект.Ссылка) Тогда
	Данные.ДействияПриФиксацииЗадачДокумента();
	Данные.ОбменДанными.Загрузка=Истина;
	//Данные.ОтложенноеПроведение=Истина;
	Данные.Записать();     
	итWMSСлужебныеПроцедурыИФункции.СделатьЗаписьДопОбработкиОтложенногоПроведения(Данные.Ссылка);
КонецЕсли;
ЗначениеВРеквизитФормы(Данные,"Объект");
КонецПроцедуры

&НаСервере
Процедура ПерезапускНаСервере()
	Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
	Для Каждого стр из Объект.Товары Цикл 
		стр.ФиксацияСтроки=Ложь;
		КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Перезапуск(Команда)
	ПерезапускНаСервере();
КонецПроцедуры


	#КонецОбласти

#Область Паллетизация

&НаСервере
Процедура РазбитьПоПалетМестамНаСервере()
	Если Объект.Товары.Количество()=0 тогда
		Сообщить("заполните таблчиную часть <Товары>");
		Возврат
	КонецЕсли;
	//ПаллетМеста.ПолучитьЭлементы().Очистить();
	Товары = Объект.Товары.Выгрузить();
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтрокиПредставление КАК ИдентификаторСтрокиПредставление,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Качество КАК Качество,
	|	Товары.ДатаРозлива КАК ДатаРозлива,
	|	Товары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	Товары.СостояниеЗадачи КАК СостояниеЗадачи,
	|	Товары.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	Товары.Количество КАК Количество,
	|	Товары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	Товары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
	|	Товары.ПричинаОтменыЗадачи КАК ПричинаОтменыЗадачи,
	|	Товары.ФиксацияСтроки КАК ФиксацияСтроки
	|ПОМЕСТИТЬ ТчТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчТовары.ИдентификаторСтрокиПредставление КАК ИдентификаторСтрокиПредставление,
	|	ТчТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТчТовары.Номенклатура КАК Номенклатура,
	|	ТчТовары.Характеристика КАК Характеристика,
	|	ТчТовары.Качество КАК Качество,
	|	ТчТовары.ДатаРозлива КАК ДатаРозлива,
	|	ТчТовары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	ТчТовары.СостояниеЗадачи КАК СостояниеЗадачи,
	|	ТчТовары.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ТчТовары.Количество КАК Количество,
	|	ТчТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТчТовары.ИдентификаторУпаковкиПолучатель КАК ИдентификаторУпаковкиПолучатель,
	|	ТчТовары.ПричинаОтменыЗадачи КАК ПричинаОтменыЗадачи,
	|	ТчТовары.ФиксацияСтроки КАК ФиксацияСтроки
	|ПОМЕСТИТЬ ТчТоварыОтбор
	|ИЗ
	|	ТчТовары КАК ТчТовары
	|ГДЕ
	|	НЕ ТчТовары.ФиксацияСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итСкладскиеЯчейки.Ссылка КАК Ячейка,
	|	ЕСТЬNULL(итТерриторииСкладов.Ссылка, ЗНАЧЕНИЕ(Справочник.итТерриторииСкладов.ПустаяСсылка)) КАК ТерриторияСклада,
	|	итСкладскиеЯчейки.СкладскоеПомещение КАК СкладскоеПомещение
	|ПОМЕСТИТЬ ДанныеЯчейки
	|ИЗ
	|	Справочник.итСкладскиеЯчейки КАК итСкладскиеЯчейки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.итСкладскиеПомещения КАК итСкладскиеПомещения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.итТерриторииСкладов КАК итТерриторииСкладов
	|			ПО итСкладскиеПомещения.ТерриторияСклада = итТерриторииСкладов.Ссылка
	|		ПО итСкладскиеЯчейки.СкладскоеПомещение = итСкладскиеПомещения.Ссылка
	|ГДЕ
	|	итСкладскиеЯчейки.Ссылка В
	|			(ВЫБРАТЬ
	|				ТчТовары.ЯчейкаОтправитель
	|			ИЗ
	|				ТчТовары КАК ТчТовары
	|			СГРУППИРОВАТЬ ПО
	|				ТчТовары.ЯчейкаОтправитель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчТоварыОтбор.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТчТоварыОтбор.Номенклатура КАК Номенклатура,
	|	ТчТоварыОтбор.Характеристика КАК Характеристика,
	|	ТчТоварыОтбор.Качество КАК Качество,
	|	ТчТоварыОтбор.ДатаРозлива КАК ДатаРозлива,
	|	ТчТоварыОтбор.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ТчТоварыОтбор.Количество КАК Количество,
	|	ТчТоварыОтбор.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ЕдиницыИзмерения.итКоличествоНаПаллете КАК итКоличествоНаПаллете,
	|	0 КАК КоэффициентПрочности,
	|	ДанныеЯчейки.ТерриторияСклада КАК ТерриторияСклада
	|ПОМЕСТИТЬ ДанныеДляОбработки
	|ИЗ
	|	ТчТоварыОтбор КАК ТчТоварыОтбор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НМ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|			ПО НМ.ЕдиницаХраненияОстатков = ЕдиницыИзмерения.Ссылка
	|		ПО ТчТоварыОтбор.Номенклатура = НМ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЯчейки КАК ДанныеЯчейки
	|		ПО ТчТоварыОтбор.ЯчейкаОтправитель = ДанныеЯчейки.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ДанныеДляОбработки.Номенклатура КАК Номенклатура,
	|	ДанныеДляОбработки.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ДанныеДляОбработки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	СУММА(ДанныеДляОбработки.Количество) КАК Количество,
	|	МАКСИМУМ(ДанныеДляОбработки.итКоличествоНаПаллете) КАК итКоличествоНаПаллете,
	|	МАКСИМУМ(ДанныеДляОбработки.КоэффициентПрочности) КАК КоэффициентПрочности,
	|	МАКСИМУМ(ДанныеДляОбработки.ТерриторияСклада) КАК ТерриторияСклада,
	|	ДанныеДляОбработки.Качество КАК Качество,
	|	ДанныеДляОбработки.ДатаРозлива КАК ДатаРозлива
	|ПОМЕСТИТЬ ДДОГруппировка
	|ИЗ
	|	ДанныеДляОбработки КАК ДанныеДляОбработки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляОбработки.ИдентификаторУпаковки,
	|	ДанныеДляОбработки.Номенклатура,
	|	ДанныеДляОбработки.ЯчейкаОтправитель,
	|	ДанныеДляОбработки.СерияНоменклатуры,
	|	ДанныеДляОбработки.Качество,
	|	ДанныеДляОбработки.ДатаРозлива
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДДОГруппировка.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ДДОГруппировка.Номенклатура КАК Номенклатура,
	|	ДДОГруппировка.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ДДОГруппировка.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ДДОГруппировка.Количество >= ДДОГруппировка.итКоличествоНаПаллете
	|			ТОГДА ВЫБОР
	|					КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(ДДОГруппировка.Количество, 0) / ВЫБОР
	|								КОГДА ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1) = 0
	|									ТОГДА 1
	|								ИНАЧЕ ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1)
	|							КОНЕЦ КАК ЧИСЛО(15, 0))) - ЕСТЬNULL(ДДОГруппировка.Количество, 0) / ВЫБОР
	|							КОГДА ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1) = 0
	|								ТОГДА 1
	|							ИНАЧЕ ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1)
	|						КОНЕЦ <= 0
	|						ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ДДОГруппировка.Количество, 0) / ВЫБОР
	|									КОГДА ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1) = 0
	|										ТОГДА 1
	|									ИНАЧЕ ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1)
	|								КОНЕЦ КАК ЧИСЛО(15, 0))
	|					ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ДДОГруппировка.Количество, 0) / ВЫБОР
	|								КОГДА ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1) = 0
	|									ТОГДА 1
	|								ИНАЧЕ ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 1)
	|							КОНЕЦ - 0.5 КАК ЧИСЛО(15, 0))
	|				КОНЕЦ * ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество,
	|	ДДОГруппировка.итКоличествоНаПаллете КАК итКоличествоНаПаллете,
	|	ДДОГруппировка.КоэффициентПрочности КАК КоэффициентПрочности,
	|	ДДОГруппировка.ТерриторияСклада КАК ТерриторияСклада,
	|	ДДОГруппировка.Качество КАК Качество,
	|	ВЫБОР
	|		КОГДА ДДОГруппировка.Количество >= ДДОГруппировка.итКоличествоНаПаллете
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МожноВзятьЦелуюПаллету,
	|	ДДОГруппировка.ДатаРозлива КАК ДатаРозлива
	|ПОМЕСТИТЬ ДДОМожноВзятьЦелыеПаллеты
	|ИЗ
	|	ДДОГруппировка КАК ДДОГруппировка
	|ГДЕ
	|	ДДОГруппировка.Количество >= ДДОГруппировка.итКоличествоНаПаллете
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДДОГруппировка.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ДДОГруппировка.Номенклатура КАК Номенклатура,
	|	ДДОГруппировка.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ДДОГруппировка.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ЕСТЬNULL(ДДОГруппировка.Количество, 0) - ЕСТЬNULL(ДДОМожноВзятьЦелыеПаллеты.Количество, 0) КАК Количество,
	|	ДДОГруппировка.итКоличествоНаПаллете КАК итКоличествоНаПаллете,
	|	ДДОГруппировка.КоэффициентПрочности КАК КоэффициентПрочности,
	|	ДДОГруппировка.ТерриторияСклада КАК ТерриторияСклада,
	|	ДДОГруппировка.Качество КАК Качество,
	|	ДДОГруппировка.ДатаРозлива КАК ДатаРозлива
	|ПОМЕСТИТЬ ДДООстатокДанныхКРаспределению
	|ИЗ
	|	ДДОГруппировка КАК ДДОГруппировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДДОМожноВзятьЦелыеПаллеты КАК ДДОМожноВзятьЦелыеПаллеты
	|		ПО ДДОГруппировка.ИдентификаторУпаковки = ДДОМожноВзятьЦелыеПаллеты.ИдентификаторУпаковки
	|			И ДДОГруппировка.Номенклатура = ДДОМожноВзятьЦелыеПаллеты.Номенклатура
	|			И ДДОГруппировка.ЯчейкаОтправитель = ДДОМожноВзятьЦелыеПаллеты.ЯчейкаОтправитель
	|			И ДДОГруппировка.СерияНоменклатуры = ДДОМожноВзятьЦелыеПаллеты.СерияНоменклатуры
	|			И (ЕСТЬNULL(ДДОГруппировка.ТерриторияСклада, 1) = ЕСТЬNULL(ДДОМожноВзятьЦелыеПаллеты.ТерриторияСклада, 1))
	|			И ДДОГруппировка.Качество = ДДОМожноВзятьЦелыеПаллеты.Качество
	|ГДЕ
	|	ЕСТЬNULL(ДДОГруппировка.Количество, 0) - ЕСТЬNULL(ДДОМожноВзятьЦелыеПаллеты.Количество, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДДОМожноВзятьЦелыеПаллеты.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ДДОМожноВзятьЦелыеПаллеты.Номенклатура КАК Номенклатура,
	|	ДДОМожноВзятьЦелыеПаллеты.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ДДОМожноВзятьЦелыеПаллеты.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДДОМожноВзятьЦелыеПаллеты.Количество КАК Количество,
	|	ДДОМожноВзятьЦелыеПаллеты.итКоличествоНаПаллете КАК итКоличествоНаПаллете,
	|	ДДОМожноВзятьЦелыеПаллеты.КоэффициентПрочности КАК КоэффициентПрочности,
	|	ДДОМожноВзятьЦелыеПаллеты.ТерриторияСклада КАК ТерриторияСклада,
	|	ДДОМожноВзятьЦелыеПаллеты.Качество КАК Качество,
	|	ДДОМожноВзятьЦелыеПаллеты.ДатаРозлива КАК ДатаРозлива
	|ИЗ
	|	ДДОМожноВзятьЦелыеПаллеты КАК ДДОМожноВзятьЦелыеПаллеты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЯчейкаОтправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДДООстатокДанныхКРаспределению.ТерриторияСклада КАК ТерриторияСклада,
	|	ДДООстатокДанныхКРаспределению.Номенклатура КАК Номенклатура,
	|	СУММА(ДДООстатокДанныхКРаспределению.Количество) КАК Количество,
	|	ДДООстатокДанныхКРаспределению.итКоличествоНаПаллете КАК итКоличествоНаПаллете,
	|	ДДООстатокДанныхКРаспределению.КоэффициентПрочности КАК КоэффициентПрочности,
	|	ДДООстатокДанныхКРаспределению.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДДООстатокДанныхКРаспределению.ДатаРозлива КАК ДатаРозлива
	|ИЗ
	|	ДДООстатокДанныхКРаспределению КАК ДДООстатокДанныхКРаспределению
	|
	|СГРУППИРОВАТЬ ПО
	|	ДДООстатокДанныхКРаспределению.ТерриторияСклада,
	|	ДДООстатокДанныхКРаспределению.Номенклатура,
	|	ДДООстатокДанныхКРаспределению.итКоличествоНаПаллете,
	|	ДДООстатокДанныхКРаспределению.КоэффициентПрочности,
	|	ДДООстатокДанныхКРаспределению.СерияНоменклатуры,
	|	ДДООстатокДанныхКРаспределению.ДатаРозлива
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоэффициентПрочности УБЫВ
	|ИТОГИ
	|	СУММА(Количество),
	|	МАКСИМУМ(итКоличествоНаПаллете),
	|	МАКСИМУМ(КоэффициентПрочности)
	|ПО
	|	ТерриторияСклада,
	|	Номенклатура,
	|	СерияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДДОГруппировка.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ДДОГруппировка.Номенклатура КАК Номенклатура,
	|	ДДОГруппировка.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ДДОГруппировка.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ЕСТЬNULL(итТоварыВЯчейкахОстатки.КоличествоОстаток, 0) КАК Количество,
	|	ДДОГруппировка.итКоличествоНаПаллете КАК итКоличествоНаПаллете,
	|	ДДОГруппировка.КоэффициентПрочности КАК КоэффициентПрочности,
	|	ДДОГруппировка.ТерриторияСклада КАК ТерриторияСклада,
	|	ДДОГруппировка.Качество КАК Качество,
	|	ДДОГруппировка.ДатаРозлива КАК ДатаРозлива
	|ИЗ
	|	ДДОГруппировка КАК ДДОГруппировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.итТоварыВЯчейках.Остатки(&Период, ) КАК итТоварыВЯчейкахОстатки
	|		ПО ДДОГруппировка.ИдентификаторУпаковки = итТоварыВЯчейкахОстатки.ИдентификаторУпаковки
	|			И ДДОГруппировка.Номенклатура = итТоварыВЯчейкахОстатки.Номенклатура
	|			И ДДОГруппировка.СерияНоменклатуры = итТоварыВЯчейкахОстатки.СерияНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ЕСТЬNULL(ДДОГруппировка.Качество, ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.Качество.Новый)
	|				ИНАЧЕ ДДОГруппировка.Качество
	|			КОНЕЦ = итТоварыВЯчейкахОстатки.Качество)
	|			И ДДОГруппировка.ЯчейкаОтправитель = итТоварыВЯчейкахОстатки.Ячейка
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоэффициентПрочности УБЫВ,
	|	ЯчейкаОтправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДДОГруппировка.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, ""Нет данных"") = 0
	|				ТОГДА ""Нет данных""
	|			ИНАЧЕ ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, ""Нет данных"")
	|		КОНЕЦ) КАК НетДанныхПоКоличествуПаллет
	|ИЗ
	|	ДДОГруппировка КАК ДДОГруппировка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, ""Нет данных"") = 0
	|				ТОГДА ""Нет данных""
	|			ИНАЧЕ ЕСТЬNULL(ДДОГруппировка.итКоличествоНаПаллете, ""Нет данных"")
	|		КОНЕЦ = ""Нет данных""
	|
	|СГРУППИРОВАТЬ ПО
	|	ДДОГруппировка.Номенклатура";
	
	Запрос.УстановитьПараметр("Товары",Товары);
	Запрос.УстановитьПараметр("Период",Объект.Дата);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДанныеДляОтбораЦелыхПаллет=МассивРезультатов[7];
	ДанныеДляГуппировкиНовыхПаллет=МассивРезультатов[8];
	ТаблицаДляАнализаИдентификатора=МассивРезультатов[9].Выгрузить();
	ВыборкаНеЗаполненныхДанныхЕдИзмерения=МассивРезультатов[10].Выбрать();
	Отказ=Ложь;
	ПроверкаНаДоступтКПаллетизации(ВыборкаНеЗаполненныхДанныхЕдИзмерения,Отказ);
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	ЗаполнитьДанныеПаллет(ДанныеДляОтбораЦелыхПаллет,ДанныеДляГуппировкиНовыхПаллет,ТаблицаДляАнализаИдентификатора,МенеджерВременныхТаблиц);
КонецПроцедуры
&НаСервере
Процедура ПроверкаНаДоступтКПаллетизации(ВыборкаНеЗаполненныхДанныхЕдИзмерения,Отказ)
	Пока ВыборкаНеЗаполненныхДанныхЕдИзмерения.Следующий() цикл
		Отказ=Истина;
		Сообщить("Для номенклатуры "+ВыборкаНеЗаполненныхДанныхЕдИзмерения.Номенклатура+" не заполнены параметры базовой еденицы измерения-отказ паллетизации");
	КонецЦикла;
КонецПроцедуры
&НаСервере
Функция ЗапроситьДанныеНоменклатуры(ТерриторияСклада,Номенклатура,СерияНоменклатуры,МенеджерВременныхТаблиц)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДДООстатокДанныхКРаспределению.ИдентификаторУпаковки,
	|	ДДООстатокДанныхКРаспределению.Номенклатура,
	|	ДДООстатокДанныхКРаспределению.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ДДООстатокДанныхКРаспределению.СерияНоменклатуры,
	|	ДДООстатокДанныхКРаспределению.Количество,
	|	ДДООстатокДанныхКРаспределению.итКоличествоНаПаллете,
	|	ДДООстатокДанныхКРаспределению.КоэффициентПрочности,
	|	ДДООстатокДанныхКРаспределению.ТерриторияСклада,
	|	ДДООстатокДанныхКРаспределению.Качество,
	|	ДДООстатокДанныхКРаспределению.ДатаРозлива
	|ИЗ
	|	ДДООстатокДанныхКРаспределению КАК ДДООстатокДанныхКРаспределению
	|ГДЕ
	|	ДДООстатокДанныхКРаспределению.ТерриторияСклада = &ТерриторияСклада
	|	И ДДООстатокДанныхКРаспределению.Номенклатура = &Номенклатура
	|	И ДДООстатокДанныхКРаспределению.СерияНоменклатуры = &СерияНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЯчейкаОтправитель";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТерриторияСклада", ТерриторияСклада);
	Запрос.УстановитьПараметр("СерияНоменклатуры",СерияНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	
КонецФункции
&НаСервере
Процедура ЗаполнитьДанныеПаллет(ДанныеДляОтбораЦелыхПаллет,ДанныеДляГуппировкиНовыхПаллет,ТаблицаДляАнализаИдентификатора,МенеджерВременныхТаблиц)
	НетДанных=Ложь;
	СистемнаяЯчейка=Константы.СистемнаяЯчейка.Получить();
	ПроверкаДанныхХранилищаНаСистемнуюЯчейку(СистемнаяЯчейка,НетДанных);
	Если НетДанных Тогда 
		Возврат
	КонецЕсли;	
	
	Если Объект.КоличествоПозицийНоменклатурыНаПаллете=0 тогда
		Объект.КоличествоПозицийНоменклатурыНаПаллете=1;
	КонецЕсли;
	Если  Объект.КоличествоПозицийСерииНаПаллете=0 тогда
		Объект.КоличествоПозицийСерииНаПаллете=1;
	КонецЕсли;
	МассивСформированныхSSCC=новый Массив;
	СобратьЦелыеОднородныеПаллеты(ДанныеДляОтбораЦелыхПаллет,ТаблицаДляАнализаИдентификатора,МассивСформированныхSSCC);
	СобратьОстаткиТовараВПаллетыСогласноНастройкам(ДанныеДляГуппировкиНовыхПаллет,ТаблицаДляАнализаИдентификатора,МенеджерВременныхТаблиц,МассивСформированныхSSCC);
	//Объект.Товары.Очистить();
	ОчиститьНеЗафиксированныеСтрокиТоваров(Объект.Товары);
	для Каждого Паллет из МассивСформированныхSSCC цикл
		для Каждого стр из Паллет.Данные цикл
			НоваяСтрока=Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
			Если стр.ЯчейкаОтправитель.Зона=Перечисления.итWMSЗоныСклада.Пикинга тогда
				НоваяСтрока.ЯчейкаПикинга=стр.ЯчейкаОтправитель;
			КонецЕсли;
			НоваяСтрока.ЯчейкаПолучатель=СистемнаяЯчейка;
			НоваяСтрока.ИдентификаторУпаковкиПолучатель=Паллет.SSCC;
			НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
		КонецЦикла;
	КонецЦикла;
	УбратьВозможныеКоллизии();
	ПроставитьЯчейкиПикингаПоЗавершенномуПеремещению();
КонецПроцедуры
&НаСервере
Процедура ПроставитьЯчейкиПикингаПоЗавершенномуПеремещению()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSПеремещение.Ссылка
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.итWMSПеремещение КАК итWMSПеремещение
	|ГДЕ
	|	итWMSПеремещение.итОснование = &итОснование
	|	И итWMSПеремещение.ПеремещениеВПикинг
	|	И итWMSПеремещение.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ссылка
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	(ВТ.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Выполнен)
	|			ИЛИ ВТ.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой)
	|			ИЛИ ВТ.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.итWMSСтатусыСкладскихДокументов.Завершен))";
	
	Запрос.УстановитьПараметр("итОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		для Каждого Строка из ВыборкаДетальныеЗаписи.Ссылка.Товары цикл
			
			Если Строка.СостояниеЗадачи=Перечисления.итWMSСостоянияЗадачТСД.Выполнена Тогда 					
				МассивСтрокНаборки=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторУпаковки,ЯчейкаОтправитель",Строка.ИдентификаторУпаковки,Строка.ЯчейкаОтправитель));
				для Каждого стр из МассивСтрокНаборки цикл
					стр.ЯчейкаПикинга=Строка.ЯчейкаПолучатель;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
&НаСервере
Процедура УбратьВозможныеКоллизии()
	
	//////////// Получение данных настроек wms по филиалу
	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам("СоответствиеФилиаловИорганизация");
	Если итWMSСлужебныеПроцедурыИФункции.ТиповойОбработчикВыявленияОшибок(НастройкиWMS) Тогда
		итWMSСлужебныеПроцедурыИФункции.WMSОповещениеОТиповыхОшибках(НастройкиWMS);
		Возврат;
	КонецЕсли;
	//////////////////////////////////
	Строка=НастройкиWMS.СоответствиеФилиаловИорганизация.Найти(Объект.Организация);
	Если Строка=Неопределено Тогда
		 ВызватьИсключение "не могу найти филиал";
	КонецЕсли;
	Филиал=Строка.Филиал;

	МенеджерВременныхТаблиц=новый МенеджерВременныхТаблиц;
	Запрос=новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	             |	Товары.ИдентификаторСтрокиПредставление,
	             |	Товары.ИдентификаторУпаковки,
	             |	Товары.ЯчейкаПолучатель,
	             |	Товары.ЯчейкаОтправитель,
	             |	Товары.ИдентификаторУпаковкиПолучатель,
	             |	Товары.СерияНоменклатуры,
	             |	Товары.Количество
	             |ПОМЕСТИТЬ ТчТовары
	             |ИЗ
	             |	&Товары КАК Товары";
	
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	Запрос.Выполнить();
	//АнализОшибокИзЗаОчередностиНаборки(МенеджерВременныхТаблиц,НастройкиWMS);
	АнализОшибокПМУ(МенеджерВременныхТаблиц,Филиал);
КонецПроцедуры
&НаСервере
Процедура АнализОшибокПМУ(МенеджерВременныхТаблиц,Филиал)
	
	Запрос=новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	             |	ТчТовары.ИдентификаторУпаковки,
	             |	ТчТовары.ЯчейкаПолучатель,
	             |	ТчТовары.ЯчейкаОтправитель,
	             |	ТчТовары.ИдентификаторУпаковкиПолучатель,
	             |	ЕСТЬNULL(СерииНоменклатуры.итПризнакПомарочногоУчета, ЛОЖЬ) КАК итПризнакПомарочногоУчета,
	             |	ТчТовары.Количество
	             |ПОМЕСТИТЬ Группировка
	             |ИЗ
	             |	ТчТовары КАК ТчТовары
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	             |		ПО ТчТовары.СерияНоменклатуры = СерииНоменклатуры.Ссылка
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ТчТовары.ИдентификаторУпаковки,
	             |	ТчТовары.ЯчейкаПолучатель,
	             |	ТчТовары.ЯчейкаОтправитель,
	             |	ТчТовары.ИдентификаторУпаковкиПолучатель,
	             |	ТчТовары.Количество,
	             |	ЕСТЬNULL(СерииНоменклатуры.итПризнакПомарочногоУчета, ЛОЖЬ)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Группировка.ИдентификаторУпаковки,
	             |	СУММА(Группировка.Количество) КАК Количество
	             |ИЗ
	             |	Группировка КАК Группировка
	             |ГДЕ
	             |	Группировка.ИдентификаторУпаковки = Группировка.ИдентификаторУпаковкиПолучатель
	             |	И Группировка.итПризнакПомарочногоУчета
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Группировка.ИдентификаторУпаковки";

	
	РезультатЗапроса=Запрос.Выполнить();
	
	
	ВыборкаПаллет=РезультатЗапроса.Выбрать();
	Пока ВыборкаПаллет.Следующий() цикл
		ВыборкаДетальныхЗаписей=ПМУАнализОтдельногоИдентификатора(ВыборкаПаллет.ИдентификаторУпаковки,ВыборкаПаллет.Количество);	
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл 	
			
			МассивСтрок=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторУпаковкиПолучатель",ВыборкаДетальныхЗаписей.ИдентификаторУпаковки));
			НовоеSSCC=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(Филиал,,ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);
			Для Каждого стр из МассивСтрок цикл
				Если Стр.ФиксацияСтроки Тогда 
					Продолжить;
				КонецЕсли;
				стр.ИдентификаторУпаковкиПолучатель=НовоеSSCC;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
&НаСервере
Функция  ПМУАнализОтдельногоИдентификатора(Идентификатор,Количество)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	алкХранилищеУпаковокСрезПоследних.Упаковка,
		|	&ИдентификаторУпаковки КАК ИдентификаторУпаковки,
		|	&Количество КАК Количество
		|ПОМЕСТИТЬ ДанныеПаллетыИкоробок
		|ИЗ
		|	РегистрСведений.алкХранилищеУпаковок.СрезПоследних(, ) КАК алкХранилищеУпаковокСрезПоследних
		|ГДЕ
		|	алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки = &ИдентификаторУпаковки
		|
		|СГРУППИРОВАТЬ ПО
		|	алкХранилищеУпаковокСрезПоследних.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПаллетыИкоробок.ИдентификаторУпаковки,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ алкХранилищеАкцизныхМарокСрезПоследних.Марка) КАК КоличествоМарок,
		|	МАКСИМУМ(ДанныеПаллетыИкоробок.Количество) КАК КоличествоПоДокументу
		|ПОМЕСТИТЬ ВтИтоговыеДанныеОшибок
		|ИЗ
		|	ДанныеПаллетыИкоробок КАК ДанныеПаллетыИкоробок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних(, ) КАК алкХранилищеАкцизныхМарокСрезПоследних
		|		ПО ДанныеПаллетыИкоробок.Упаковка = алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
		|ГДЕ
		|	НЕ алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПаллетыИкоробок.ИдентификаторУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтИтоговыеДанныеОшибок.ИдентификаторУпаковки
		|ИЗ
		|	ВтИтоговыеДанныеОшибок КАК ВтИтоговыеДанныеОшибок
		|ГДЕ
		|	ВтИтоговыеДанныеОшибок.КоличествоМарок <> ВтИтоговыеДанныеОшибок.КоличествоПоДокументу";
	
	Запрос.УстановитьПараметр("ИдентификаторУпаковки", Идентификатор);
	Запрос.УстановитьПараметр("Количество", Количество);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
	КонецФункции

&НаСервере
Процедура СобратьОстаткиТовараВПаллетыСогласноНастройкам(ДанныеДляГуппировкиНовыхПаллет,ТаблицаДляАнализаИдентификатора,МенеджерВременныхТаблиц,МассивСформированныхSSCC)
	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам("СоответствиеФилиаловИорганизация");
	СтрокаФилиал=НастройкиWMS.СоответствиеФилиаловИорганизация.Найти(Объект.Организация);
	Если СтрокаФилиал=Неопределено Тогда
		ВызватьИсключение "нет соответсвия организации и филиала";
	КонецЕсли;
	Филиал=СтрокаФилиал.Филиал;
	ВыборкаСкладов=ДанныеДляГуппировкиНовыхПаллет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	пока ВыборкаСкладов.Следующий() цикл
		//получаем описание таблицы значений, путем получения пустого результата запроса.
		ТаблицаОсколковНоменклатуры=ЗапроситьДанныеНоменклатуры(null,null,null,МенеджерВременныхТаблиц);
		ВыборкаНоменклатуры = ВыборкаСкладов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатуры.Следующий() цикл
			ВыборкаПоСерии=ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСерии.Следующий() цикл
				ДанныеОбхода=ЗапроситьДанныеНоменклатуры(ВыборкаПоСерии.ТерриторияСклада,ВыборкаПоСерии.Номенклатура,ВыборкаПоСерии.СерияНоменклатуры,МенеджерВременныхТаблиц);
				КоличествоНоменклатуры=ВыборкаПоСерии.Количество;
				Если КоличествоНоменклатуры<ВыборкаПоСерии.итКоличествоНаПаллете тогда
					для Каждого СтрокаТаблицы из ДанныеОбхода цикл
						НоваяЗаписьОсколков=ТаблицаОсколковНоменклатуры.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗаписьОсколков,СтрокаТаблицы);
					КонецЦикла;
					Продолжить;
				КонецЕсли;
				
				ДополнительныеПараметры=новый Структура;
				ДополнительныеПараметры.Вставить("Филиал",Филиал);
				ДополнительныеПараметры.Вставить("КоличествоНоменклатуры",КоличествоНоменклатуры);
				ДополнительныеПараметры.Вставить("МасствСтрокКудалению",новый Массив);
				//СобратьПоСерии(ДанныеОбхода,КонтейнерSSCC,МассивСформированныхSSCC,ТаблицаДляАнализаИдентификатора,ДополнительныеПараметры);
				Пока ДополнительныеПараметры.КоличествоНоменклатуры>=ВыборкаПоСерии.итКоличествоНаПаллете цикл
					СобратьПоСерии(ДанныеОбхода,МассивСформированныхSSCC,ТаблицаДляАнализаИдентификатора,ДополнительныеПараметры);
					для Каждого стр из ДополнительныеПараметры.МасствСтрокКудалению цикл
						ДанныеОбхода.Удалить(стр);
					КонецЦикла;
					ДополнительныеПараметры.МасствСтрокКудалению.Очистить();
				КонецЦикла;
				для Каждого СтрокаТаблицы из ДанныеОбхода цикл
					НоваяЗаписьОсколков=ТаблицаОсколковНоменклатуры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗаписьОсколков,СтрокаТаблицы);
				КонецЦикла;
				
				
			КонецЦикла;
		КонецЦикла;
		ПаллетизацияОсколковНоменклатуры(ТаблицаОсколковНоменклатуры,ТаблицаДляАнализаИдентификатора,МассивСформированныхSSCC,Филиал);
	КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура ПаллетизацияОсколковНоменклатуры(ТаблицаОсколковНоменклатуры,ТаблицаДляАнализаИдентификатора,МассивСформированныхSSCC,Филиал)

	ДополнительныеПараметры=новый Структура;
	ДополнительныеПараметры.Вставить("Филиал",Филиал);
	ДополнительныеПараметры.Вставить("МасствСтрокКудалению",новый Массив);
	
	Пока ТаблицаОсколковНоменклатуры.Количество()>0 цикл
		СобратьПоОсколкам(ТаблицаОсколковНоменклатуры,ТаблицаДляАнализаИдентификатора,МассивСформированныхSSCC,ДополнительныеПараметры);
		для Каждого стр из ДополнительныеПараметры.МасствСтрокКудалению цикл
			ТаблицаОсколковНоменклатуры.Удалить(стр);
		КонецЦикла;
		ДополнительныеПараметры.МасствСтрокКудалению.Очистить();
	КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура СобратьПоОсколкам(ТаблицаОсколковНоменклатуры,ТаблицаДляАнализаИдентификатора,МассивСформированныхSSCC,ДополнительныеПараметры)
	МассивВариантовSSCC=новый Массив;
	МассивПозицийНоменклатурыНаПаллете=новый Массив;
	МассивСерийНаПаллете=новый Массив;
	КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
	Шаг=0;
	для Каждого стр из ТаблицаОсколковНоменклатуры цикл
		Если Окр(КонтейнерSSCC.КоэфициентЗаполнения,3)=1 тогда
			Если МассивВариантовSSCC.Количество()=0 тогда
				КонтейнерSSCC.SSCC=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(ДополнительныеПараметры.Филиал,,ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);
				КонтейнерSSCC.НовыйSSCC=Истина;
			иначе
				КонтейнерSSCC.SSCC=МассивВариантовSSCC[0];
			КонецЕсли;
			МассивВариантовSSCC.Очистить();
			МассивСформированныхSSCC.Добавить(КонтейнерSSCC);
			//КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
			Возврат;
		КонецЕсли;
		Если (стр.Количество/стр.итКоличествоНаПаллете)+КонтейнерSSCC.КоэфициентЗаполнения >1 Тогда 
			Продолжить;
		КонецЕсли;
		СтруктураПоиска=новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторУпаковки",стр.ИдентификаторУпаковки);
		СтруктураПоиска.Вставить("Номенклатура",стр.Номенклатура);
		СтруктураПоиска.Вставить("СерияНоменклатуры",стр.СерияНоменклатуры);
		СтруктураПоиска.Вставить("ТерриторияСклада",стр.ТерриторияСклада);
		Если МассивПозицийНоменклатурыНаПаллете.Найти(стр.Номенклатура)=Неопределено и (МассивПозицийНоменклатурыНаПаллете.Количество()+1)>Объект.КоличествоПозицийНоменклатурыНаПаллете тогда
			Продолжить;
		КонецЕсли;
		Если МассивСерийНаПаллете.Найти(стр.СерияНоменклатуры)=Неопределено и (МассивСерийНаПаллете.Количество()+1)>Объект.КоличествоПозицийСерииНаПаллете тогда
			Продолжить;
		КонецЕсли;
		Если ПроверитьНаВозможностьЗабратьSSCC(ТаблицаДляАнализаИдентификатора,СтруктураПоиска,стр.ИдентификаторУпаковки,стр.Количество) и КонтейнерSSCC.SSCC=""  и Шаг=0 тогда
			МассивВариантовSSCC.Добавить(стр.ИдентификаторУпаковки);
		КонецЕсли;
		
		СтрокаSSCC=ПолучитьСтруктуруРезультатаЗапроса(ТаблицаОсколковНоменклатуры);
		ЗаполнитьЗначенияСвойств(СтрокаSSCC,стр);
		КонтейнерSSCC.Данные.Добавить(СтрокаSSCC);
		КонтейнерSSCC.КоэфициентЗаполнения=КонтейнерSSCC.КоэфициентЗаполнения+(СтрокаSSCC.Количество/СтрокаSSCC.итКоличествоНаПаллете);
		//ДополнительныеПараметры.КоличествоНоменклатуры=ДополнительныеПараметры.КоличествоНоменклатуры-стр.Количество;
		МассивПозицийНоменклатурыНаПаллете.Добавить(стр.Номенклатура);
		МассивСерийНаПаллете.Добавить(стр.СерияНоменклатуры);
		ДополнительныеПараметры.МасствСтрокКудалению.Добавить(стр);
		Шаг=Шаг+1;
	КонецЦикла;
	Если Окр(КонтейнерSSCC.КоэфициентЗаполнения,3)<=1 тогда
		Если МассивВариантовSSCC.Количество()=0 тогда
			КонтейнерSSCC.SSCC=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(ДополнительныеПараметры.Филиал,,ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);
			КонтейнерSSCC.НовыйSSCC=Истина;
		иначе
			КонтейнерSSCC.SSCC=МассивВариантовSSCC[0];
		КонецЕсли;
		МассивВариантовSSCC.Очистить();
		МассивСформированныхSSCC.Добавить(КонтейнерSSCC);
		//КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура СобратьПоСерии(ДанныеОбхода,МассивСформированныхSSCC,ТаблицаДляАнализаИдентификатора,ДополнительныеПараметры)
	МассивВариантовSSCC=новый Массив;	
	КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
	Шаг=0; // переменная для отсчитывая шагов, если шаг первый, и можно забрать sscc из ячейки то берем, в противном случае новое   sscc
	для Каждого стр из ДанныеОбхода цикл
		Если Окр(КонтейнерSSCC.КоэфициентЗаполнения,3)=1 тогда
			Если МассивВариантовSSCC.Количество()=0 тогда
				КонтейнерSSCC.SSCC=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(ДополнительныеПараметры.Филиал,,ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);
				КонтейнерSSCC.НовыйSSCC=Истина;
			иначе
				КонтейнерSSCC.SSCC=МассивВариантовSSCC[0];
			КонецЕсли;
			МассивВариантовSSCC.Очистить();
			МассивСформированныхSSCC.Добавить(КонтейнерSSCC);
			//КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
			Возврат;
		КонецЕсли;
		Если (стр.Количество/стр.итКоличествоНаПаллете)+КонтейнерSSCC.КоэфициентЗаполнения >1 Тогда 
			КоэфициентДляДозаполнения=1-КонтейнерSSCC.КоэфициентЗаполнения;	
			КоличествоКСписаниюИзПаллеты=Окр(КоэфициентДляДозаполнения*стр.итКоличествоНаПаллете);
		иначе
			КоличествоКСписаниюИзПаллеты=стр.Количество
		КонецЕсли;
		СтруктураПоиска=новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторУпаковки",стр.ИдентификаторУпаковки);
		СтруктураПоиска.Вставить("Номенклатура",стр.Номенклатура);
		СтруктураПоиска.Вставить("СерияНоменклатуры",стр.СерияНоменклатуры);
		СтруктураПоиска.Вставить("ТерриторияСклада",стр.ТерриторияСклада);
		
		Если ПроверитьНаВозможностьЗабратьSSCC(ТаблицаДляАнализаИдентификатора,СтруктураПоиска,стр.ИдентификаторУпаковки,КоличествоКСписаниюИзПаллеты) и КонтейнерSSCC.SSCC="" и Шаг=0 тогда
			МассивВариантовSSCC.Добавить(стр.ИдентификаторУпаковки);
		КонецЕсли;
		
		СтрокаSSCC=ПолучитьСтруктуруРезультатаЗапроса(ДанныеОбхода);
		ЗаполнитьЗначенияСвойств(СтрокаSSCC,стр);
		СтрокаSSCC.Количество=КоличествоКСписаниюИзПаллеты;
		КонтейнерSSCC.Данные.Добавить(СтрокаSSCC);
		КонтейнерSSCC.КоэфициентЗаполнения=КонтейнерSSCC.КоэфициентЗаполнения+(СтрокаSSCC.Количество/СтрокаSSCC.итКоличествоНаПаллете);
		ДополнительныеПараметры.КоличествоНоменклатуры=ДополнительныеПараметры.КоличествоНоменклатуры-КоличествоКСписаниюИзПаллеты;
		стр.Количество=стр.Количество-КоличествоКСписаниюИзПаллеты;
		Если стр.Количество=0 тогда
			ДополнительныеПараметры.МасствСтрокКудалению.Добавить(стр);	
		КонецЕсли;
		Шаг=Шаг+1;
	КонецЦикла;
	Если Окр(КонтейнерSSCC.КоэфициентЗаполнения,3)<=1 тогда
		Если МассивВариантовSSCC.Количество()=0 тогда
			КонтейнерSSCC.SSCC=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(ДополнительныеПараметры.Филиал,,ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);
			КонтейнерSSCC.НовыйSSCC=Истина;
		иначе
			КонтейнерSSCC.SSCC=МассивВариантовSSCC[0];
		КонецЕсли;
		МассивВариантовSSCC.Очистить();
		МассивСформированныхSSCC.Добавить(КонтейнерSSCC);
		//КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура СобратьЦелыеОднородныеПаллеты(ДанныеДляОтбораЦелыхПаллет,ТаблицаДляАнализаИдентификатора,МассивСформированныхSSCC);

	НастройкиWMS=итWMSПривилегированныйМодуль.ПолучитьНастройкиИзХранилищаПоСвойствам("СоответствиеФилиаловИорганизация");
	СтрокаФилиал=НастройкиWMS.СоответствиеФилиаловИорганизация.Найти(Объект.Организация);
	Если СтрокаФилиал=Неопределено Тогда
		ВызватьИсключение "нет соответсвия организации и филиала";
	КонецЕсли;
	Филиал=СтрокаФилиал.Филиал;
	
	ВыборкаДетльныхЗаписей=ДанныеДляОтбораЦелыхПаллет.Выбрать();
	пока ВыборкаДетльныхЗаписей.Следующий() цикл
		КоличествоНоменклатуры=ВыборкаДетльныхЗаписей.Количество;
		пока КоличествоНоменклатуры>0 цикл
			КонтейнерSSCC=СоздатьВиртуальныйКонтейнерSSCC();
			СтруктураПоиска=новый Структура;
			СтруктураПоиска.Вставить("ИдентификаторУпаковки",ВыборкаДетльныхЗаписей.ИдентификаторУпаковки);
			СтруктураПоиска.Вставить("Номенклатура",ВыборкаДетльныхЗаписей.Номенклатура);
			СтруктураПоиска.Вставить("СерияНоменклатуры",ВыборкаДетльныхЗаписей.СерияНоменклатуры);
			СтруктураПоиска.Вставить("ТерриторияСклада",ВыборкаДетльныхЗаписей.ТерриторияСклада);
			Если ПроверитьНаВозможностьЗабратьSSCC(ТаблицаДляАнализаИдентификатора,СтруктураПоиска,ВыборкаДетльныхЗаписей.ИдентификаторУпаковки,ВыборкаДетльныхЗаписей.итКоличествоНаПаллете) тогда
				КонтейнерSSCC.SSCC=ВыборкаДетльныхЗаписей.ИдентификаторУпаковки;
			иначе
				КонтейнерSSCC.SSCC=итWMSОбработчикSSCC.ПолучитьНовыйSSCC(Филиал,,ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);
				КонтейнерSSCC.НовыйSSCC=Истина;
			КонецЕсли;
			СтрокаSSCC=ПолучитьСтруктуруРезультатаЗапроса(ДанныеДляОтбораЦелыхПаллет);
			ЗаполнитьЗначенияСвойств(СтрокаSSCC,ВыборкаДетльныхЗаписей);
			СтрокаSSCC.Количество=ВыборкаДетльныхЗаписей.итКоличествоНаПаллете;
			КонтейнерSSCC.Данные.Добавить(СтрокаSSCC); 
			КонтейнерSSCC.КоэфициентЗаполнения=1;
			КоличествоНоменклатуры=КоличествоНоменклатуры-ВыборкаДетльныхЗаписей.итКоличествоНаПаллете;
			МассивСформированныхSSCC.Добавить(КонтейнерSSCC);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
&НаСервере
Функция СоздатьВиртуальныйКонтейнерSSCC()
	СтруктураКонтейнера=новый Структура;
	СтруктураКонтейнера.Вставить("SSCC","");
	СтруктураКонтейнера.Вставить("Данные",новый Массив);
	СтруктураКонтейнера.Вставить("КоэфициентЗаполнения",0);
	СтруктураКонтейнера.Вставить("НовыйSSCC",Ложь);
	Возврат СтруктураКонтейнера;
КонецФункции
&НаСервере
Функция ПроверитьНаВозможностьЗабратьSSCC(ТаблицаДляАнализаИдентификатора,СтруктураПоиска,ИдентификаторУпаковки,Количество)
	МассивСтрок=ТаблицаДляАнализаИдентификатора.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество()=0 тогда
		ВызватьИсключение "ошибка в расчетах паллета "+СтруктураПоиска.ИдентификаторУпаковки;
	КонецЕсли;	
	для Каждого стр из МассивСтрок цикл
		стр.Количество=стр.Количество-Количество;
		Если стр.Количество<=0 тогда
			ТаблицаДляАнализаИдентификатора.Удалить(стр);
		КонецЕсли;
	КонецЦикла;
	МассивСтрок=ТаблицаДляАнализаИдентификатора.НайтиСтроки(новый Структура("ИдентификаторУпаковки",ИдентификаторУпаковки));
	Если МассивСтрок.Количество()=0 тогда
		Возврат Истина;
	иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции
&НаСервере
Функция ПолучитьСтруктуруРезультатаЗапроса(РезультатВыборки);
	СтруктураДанных=Новый Структура;
	для Каждого Колонка из РезультатВыборки.Колонки цикл
		СтруктураДанных.Вставить(Колонка.Имя);
	КонецЦикла;
	Возврат СтруктураДанных;
КонецФункции

&НаКлиенте
Процедура Паллетизация(Команда)
	РазбитьПоПалетМестамНаСервере();
	РассчитатьКоличествоПаллет();
	РассчитатьСрокГодностиИФлагОкраскиДляВсехСтрок();
	ПроставитьПредставлениеИдентификатора();
КонецПроцедуры










#КонецОбласти
