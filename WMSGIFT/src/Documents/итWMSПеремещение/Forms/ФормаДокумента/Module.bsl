

#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен Тогда
		ОбновитьДанныеСТСД();
	КонецЕсли;
	Если Параметры.Ключ.Пустая() тогда
		Объект.итОснование=Неопределено;
		Если Объект.Товары.Количество()>0 тогда
			для Каждого стр из Объект.Товары цикл
				стр.ИдентификаторСтроки=новый УникальныйИдентификатор;
				стр.ИдентификаторУпаковкиПолучатель="";
				стр.КоличествоФакт=0;
				стр.ФиксацияСтроки=Ложь;
			КонецЦикла;
		КонецЕсли;	
		Объект.Дата=ТекущаяДата();
		Если Объект.Организация.Пустая() Тогда
		ОбщегоНазначения.УстановитьОрганизациюВДокументе(Объект);
		КонецЕсли;
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		Объект.Ответственный=ПараметрыСеанса.ТекущийПользователь;
		Если Параметры.Свойство("ИтОснованиеДокумента") тогда
			Данные=РеквизитФормыВЗначение("Объект");
			Если Параметры.Свойство("ДополнительныеПараметры") Тогда 
				Данные.ЗаполнитьНаОсновании(Параметры.ИтОснованиеДокумента,Параметры.ДополнительныеПараметры);
			иначе
				Данные.ЗаполнитьНаОсновании(Параметры.ИтОснованиеДокумента);
			КонецЕсли;
			ЗначениеВРеквизитФормы(Данные,"Объект");
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Свойство("ИтОснованиеДокумента") и Параметры.Свойство("ДополнительныеПараметры") тогда
		Данные.ЗаполнитьНаОсновании(Параметры.ИтОснованиеДокумента,Параметры.ДополнительныеПараметры);
	КонецЕсли;
	ВосстановитьДанныеПараметровСтратегииСервер();
	ПроставитьПредставлениеИдентификатора();	  
КонецПроцедуры
&НаКлиенте
Процедура ТоварыСостояниеЗадачиПриИзменении(Элемент)
	ГрупповоеИзменениеСпискаПоИдУпаковки("СостояниеЗадачи",Элемент.Родитель.ТекущиеДанные.СостояниеЗадачи,Элемент.Родитель.ТекущиеДанные.ИдентификаторУпаковки);
КонецПроцедуры



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Картинка = новый Картинка(ПолучитьКартинкуИзБиблиотеки());
	АдресКартинкиКуба=ПоместитьВоВременноеХранилище(Картинка,ЭтаФорма.УникальныйИдентификатор);
	ВидимостьДоступностьЭлементов();
	ВариантОтображенияПользователя();
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоНоменклатураПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоХарактеристикаПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоКачествоПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоДатаРозливаПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры


&НаКлиенте
Процедура ТоварыДеревоКоличествоПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
	РассчетКоличестваВУпаковкеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоСостояниеЗадачиПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].СостояниеЗадачи=Элемент.Родитель.ТекущиеДанные.СостояниеЗадачи;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоЯчейкаПолучательПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].ЯчейкаПолучатель=Элемент.Родитель.ТекущиеДанные.ЯчейкаПолучатель;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
КонецПроцедуры
&НаКлиенте
Процедура ТоварыДеревоЯчейкаОтправительПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].ЯчейкаОтправитель=Элемент.Родитель.ТекущиеДанные.ЯчейкаОтправитель;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоСерияНоменклатурыПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоПередУдалением(Элемент, Отказ)
	Если Элемент.ВыделенныеСтроки.Количество()>1 тогда
		Сообщить("В режиме дерева можно удалять 1 любую строку за раз");
		Отказ=Истина;
		Возврат
	КонецЕсли;	
	Если Элемент.ТекущиеДанные.СтрокаУпаковки тогда
		Оповещение = новый ОписаниеОповещения("ОбработчикДиалогов",ЭтаФорма," ОбработчикУдалениеУпаковки();");
		ПоказатьВопрос(Оповещение,"Если удалить паллету, то все строки в ней так же будут удалены",РежимДиалогаВопрос.ДаНет);
		Отказ=Истина;
		Возврат
	иначе
		МассивСтроки=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",Элемент.ТекущиеДанные.ИдентификаторСтрокиПредставление));
		Строка=МассивСтроки[0];
		Объект.Товары.Удалить(Строка);
	КонецЕсли;
	ЭтаФорма.Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтрокаПеретаскиванияКуда=Элементы.ТоварыДерево.ДанныеСтроки(Строка);
	Если не СтрокаПеретаскиванияКуда.СтрокаУпаковки тогда
		пока не СтрокаПеретаскиванияКуда.СтрокаУпаковки цикл
			СтрокаПеретаскиванияКуда=СтрокаПеретаскиванияКуда.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	СтандартнаяОбработка=Ложь;
	для Каждого стр из ПараметрыПеретаскивания.Значение цикл
		ТекущаяСтрокаОбработки=Элементы.ТоварыДерево.ДанныеСтроки(стр);
		Если ТекущаяСтрокаОбработки.СтрокаУпаковки тогда
			Продолжить;
		КонецЕсли;	
		ТекущаяСтрокаОбработки.ИдентификаторУпаковки=СтрокаПеретаскиванияКуда.ИдентификаторУпаковки;
		НоваяСтрока=СтрокаПеретаскиванияКуда.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрокаОбработки);
		НоваяСтрока.ЯчейкаПолучатель=СтрокаПеретаскиванияКуда.ЯчейкаПолучатель;
		НоваяСтрока.ЯчейкаОтправитель=СтрокаПеретаскиванияКуда.ЯчейкаОтправитель;
		СтарыйРодитель=ТекущаяСтрокаОбработки.ПолучитьРодителя();
		СтарыйРодитель.ПолучитьЭлементы().Удалить(ТекущаяСтрокаОбработки);
		
		/////Обработчики Изменения
		СтрукрутраДляИзменения=новый Структура;
		СтрукрутраДляИзменения.Вставить("Имя","ИдентификаторУпаковки");
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		ОбработчикТрансляцииПриИзменении(СтрукрутраДляИзменения);
		СтрукрутраДляИзменения.Вставить("Имя","ЯчейкаПолучатель");
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		ОбработчикТрансляцииПриИзменении(СтрукрутраДляИзменения);
		
		СтрукрутраДляИзменения.Вставить("Имя","ЯчейкаОтправитель");
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		ОбработчикТрансляцииПриИзменении(СтрукрутраДляИзменения);
		
		
		СтрукрутраДляИзменения.Имя="Количество";
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		РассчетКоличестваВУпаковкеПриИзменении(СтрукрутраДляИзменения) ;
		
		СтрукрутраДляИзменения.Имя="Количество";
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",СтарыйРодитель));
		РассчетКоличестваВУпаковкеПриИзменении(СтрукрутраДляИзменения) ;
		
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПоследнийРежимЗаписиДокумента=ПараметрыЗаписи.РежимЗаписи;
	ПодключитьОбработчикОжидания("ОбработчикОжиданийПослеЗаписи",0.1,Истина);
		//Если не ПроверкаНаЗавершенностьПриемкиОснования(Объект.итОснование) тогда
		//	ЗавершитьПримкуНаСервере(Объект.итОснование);
		//	Оповестить("WMSЗавршениеПриемки",Объект.итОснование,Объект.Ссылка);	
		//КонецЕсли;
    ПодключитьОбработчикОжидания("ВосстановитьДанныеПараметровСтратегии",0.1,Истина);
КонецПроцедуры
&НаКлиенте
Процедура ОбработчикОжиданийПослеЗаписи() Экспорт 
	ВидимостьДоступностьЭлементов();
	ПроставитьПредставлениеИдентификатора();
	Если Объект.Проведен тогда
		Если Объект.итОснование=Неопределено тогда
			Возврат
		КонецЕсли;
		Если ТипЗнч(Объект.итОснование)=тип("ДокументСсылка.итWMSНаборка") Тогда 
		Если ПоследнийРежимЗаписиДокумента=РежимЗаписиДокумента.Проведение Тогда
			Оповестить("WMSПроведениеОтменаПроведенияСвязанныхДокументовНаборки",Объект.итОснование,Объект.Ссылка);
		КонецЕсли;
		Если ПоследнийРежимЗаписиДокумента=РежимЗаписиДокумента.ОтменаПроведения Тогда
			Оповестить("WMSПроведениеОтменаПроведенияСвязанныхДокументовНаборки",Объект.итОснование,Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	КонецЕсли;

	КонецПроцедуры
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПроверкаНаЗаполненностьЯчейкиПолучателя(Отказ, ПараметрыЗаписи);
	ПроверкаНаПересчениеЯчейкиОтправителяПолучателя(Отказ, ПараметрыЗаписи);
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	Если ДокументВСтатусеПерезапуска() и не ПараметрыЗаписи.Свойство("ПерезапускДокумента") и ПараметрыЗаписи.РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
	//Если Объект.Дата>'20190211'Тогда 	
	ПроверкаНаПерезапускДокумента(Отказ, ПараметрыЗаписи);
	//КонецЕсли;
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
    ИначеЕсли ПараметрыЗаписи.Свойство("ПерезапускДокумента") Тогда 
	   УстановитьСтатусДокументаПерезпуска();
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		Если ИсточникВыбора.ИмяФормы="ОбщаяФорма.ФормаПодбораНоменклатуры" Тогда 
			Если ТипЗнч(ВыбранноеЗначение)=Тип("Массив") Тогда
				ЗаполнениеВыбораПодбора(ВыбранноеЗначение)
			КонецЕсли;
		КонецЕсли;
		Если ИсточникВыбора.ИмяФормы="ОбщаяФорма.итWMSФормаПараметровСтратегии" тогда
			ПоместитьВоВременноеХранилище(ВыбранноеЗначение,Объект.АдресХраненияПараметров);
		КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнениеВыбораПодбора(ВыбранноеЗначение)
	Для Каждого стр из ВыбранноеЗначение цикл
		НоваяСтрока=Объект.Товары.Добавить();
		НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
		НоваяСтрока.ЯчейкаОтправитель=стр.Ячейка;
		НоваяСтрока.ДатаРозлива =итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементДанныхНаСервере(стр.СерияНоменклатуры,"ДатаПроизводства"); 
	КонецЦикла;
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры
&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
КонецПроцедуры
&НаКлиенте
Процедура ТоварыХарактеристикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКачествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыКачествоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыЯчейкаОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыЯчейкаОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыКоличествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//ОткрытьФорму("Документ.итWMSПеремещение.Форма.ФормаПодбораНоменклатуры",,Элемент);
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент);
	ОткрытьФормуПодбора(Элемент,ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыКоличествоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
		СтандартнаяОбработка=Ложь;
		ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтратегияПеремещенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.итWMSСтратегии.ФормаВыбора",новый Структура("ОтборИерархии",ПолучитьИерархиюСтратегииРазмещенияДляПеремещения()),Элемент);
КонецПроцедуры


&НаСервере
Процедура ПередЗакрытиемНаСервере()
	НаборЗаписей=РегистрыСведений.итWMSКорзинаНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КлючДанных.Установить(ЭтаФорма.УникальныйИдентификатор);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если не ЗавершениеРаботы Тогда 
	ПередЗакрытиемНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура ВВидеДерева(Команда)
	ВВидеДереваНаСервере();
	Элементы.ТоварыДерево.Видимость=Истина;
	Элементы.Товары.Видимость=Ложь;
	ТригерОтображения=Истина;
КонецПроцедуры
&НаСервере
Процедура ВВидеДереваНаСервере()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	ТоварыДерево.ПолучитьЭлементы().Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтрокиПредставление,
	|	Товары.ИдентификаторУпаковки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Качество,
	|	Товары.ДатаРозлива,
	|	Товары.ЯчейкаПолучатель,
	|	Товары.СостояниеЗадачи,
	|	Товары.ЯчейкаОтправитель,
	|	Товары.Количество,
	|	Товары.СерияНоменклатуры,
	|	Товары.ПричинаОтменыЗадачи
	|ПОМЕСТИТЬ ТчТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчТовары.ИдентификаторСтрокиПредставление,
	|	ТчТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТчТовары.Номенклатура,
	|	ТчТовары.Характеристика,
	|	ТчТовары.Качество,
	|	ТчТовары.ДатаРозлива,
	|	ТчТовары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	ТчТовары.СостояниеЗадачи КАК СостояниеЗадачи,
	|	ТчТовары.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ТчТовары.Количество КАК Количество,
	|	ТчТовары.СерияНоменклатуры,
	|	ТчТовары.ПричинаОтменыЗадачи КАК ПричинаОтменыЗадачи
	|ИЗ
	|	ТчТовары КАК ТчТовары
	|ИТОГИ
	|	МАКСИМУМ(ЯчейкаПолучатель),
	|	МАКСИМУМ(СостояниеЗадачи),
	|	МАКСИМУМ(ЯчейкаОтправитель),
	|	СУММА(Количество),
	|	МАКСИМУМ(ПричинаОтменыЗадачи)
	|ПО
	|	ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаУпаковка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	пока ВыборкаУпаковка.Следующий() цикл
		НоваяСтрокаУпаковкаДерево = ТоварыДерево.ПолучитьЭлементы().Добавить();
		НоваяСтрокаУпаковкаДерево.ИдентификаторУпаковки= ВыборкаУпаковка.ИдентификаторУпаковки;
		НоваяСтрокаУпаковкаДерево.ЯчейкаПолучатель = ВыборкаУпаковка.ЯчейкаПолучатель;
		НоваяСтрокаУпаковкаДерево.ЯчейкаОтправитель = ВыборкаУпаковка.ЯчейкаОтправитель;
		НоваяСтрокаУпаковкаДерево.Количество=ВыборкаУпаковка.Количество;
		НоваяСтрокаУпаковкаДерево.СостояниеЗадачи=ВыборкаУпаковка.СостояниеЗадачи;
		НоваяСтрокаУпаковкаДерево.Картинка=АдресКартинкиКуба;
		НоваяСтрокаУпаковкаДерево.ПричинаОтменыЗадачи=ВыборкаУпаковка.ПричинаОтменыЗадачи;
		НоваяСтрокаУпаковкаДерево.СтрокаУпаковки=Истина;
		
		ВыборкаДетальныеЗаписи=ВыборкаУпаковка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрокаНоменклатуры = НоваяСтрокаУпаковкаДерево.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатуры,ВыборкаДетальныеЗаписи);
			НоваяСтрокаНоменклатуры.ЯчейкаПолучатель=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
			НоваяСтрокаНоменклатуры.ЯчейкаОтправитель=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
		КонецЦикла;
	КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
&НаКлиенте
Процедура ВВидеСписка(Команда)
	Элементы.ТоварыДерево.Видимость=Ложь;
	Элементы.Товары.Видимость=Истина;
	ТригерОтображения=Ложь;
КонецПроцедуры
&НаКлиенте
Процедура СкопироватьТовары(Команда)
	Если  Элементы.ГруппаТовары.ТолькоПросмотр тогда
		Возврат
	КонецЕсли;	
	Если ТекущийЭлемент.Имя="Товары" тогда
		НоваяСтрока=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущийЭлемент.ТекущиеДанные);
		НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
		НоваяСтрока.ИдентификаторСтрокиПредставление=Строка(НоваяСтрока.ИдентификаторСтроки);
		НоваяСтрока.Количество=0;
		НоваяСтрока.ЯчейкаОтправитель=ПустаяСсылкаЯчейки();
		НоваяСтрока.ЯчейкаПолучатель=ПустаяСсылкаЯчейки();
		НоваяСтрока.ФиксацияСтроки=Ложь;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ДобавитьТовары(Команда)
	Если  Элементы.ГруппаТовары.ТолькоПросмотр тогда
		Возврат
	КонецЕсли;	
	НоваяСтрока=Объект.Товары.Добавить();
	НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
	НоваяСтрока.ИдентификаторСтрокиПредставление= Строка(НоваяСтрока.ИдентификаторСтроки);
КонецПроцедуры
&НаКлиенте
Процедура Развернуть(Команда)
	//СтрокиПаллет=ПаллетМеста.ПолучитьЭлементы();
	//для Каждого Паллета из СтрокиПаллет цикл
	//	Элементы.ПаллетМеста.Развернуть(Паллета.ПолучитьИдентификатор());
	//КонецЦикла;
	Строки=ТоварыДерево.ПолучитьЭлементы();
	Если Строки.Количество()>0 тогда
		РазвернутьДанные(Строки);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура РазвернутьДанные(Строки)
	для Каждого Строка из Строки цикл
		Элементы.ТоварыДерево.Развернуть(Строка.ПолучитьИдентификатор());
		ПодчиненныеСтроки= Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество()>0 тогда
			РазвернутьДанные(ПодчиненныеСтроки);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура Свернуть(Команда)
	Строки=ТоварыДерево.ПолучитьЭлементы();
	Если Строки.Количество()>0 тогда
		СвернутьДанные(Строки);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте	
Процедура СвернутьДанные(Строки)
	для Каждого Строка из Строки цикл
		ПодчиненныеСтроки= Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество()>0 тогда
			СвернутьДанные(ПодчиненныеСтроки);
		КонецЕсли;	
		Элементы.ТоварыДерево.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;	
КонецПроцедуры
&НаСервере
Процедура РазместитьПаллетыНаСервере()
	для Каждого стр из Объект.Товары цикл
		Если стр.ФиксацияСтроки Тогда 
			Продолжить;
		КонецЕсли;	
		стр.ЯчейкаПолучатель=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
	КонецЦикла;	
	Данные=РеквизитФормыВЗначение("Объект");
	Данные.ВыборСтратегииРазмещения();
	ЗначениеВРеквизитФормы(Данные,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура РазместитьПаллеты(Команда)
	РазместитьПаллетыНаСервере();
	ПроставитьПредставлениеИдентификатора();
	ВариантОтображенияПользователя();	
КонецПроцедуры

#Область ГИФТ

#КонецОбласти


&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыФормы=ПараметрыФормыМножественногоПодбораНоменклатуры();
	ОткрытьФормуПодбора(ЭтаФорма,ПараметрыФормы);
КонецПроцедуры
&НаСервере
Процедура ЗавершитьДокументНаСервере()
	Если  КоличествоПланНеРавноФакту() Тогда 
		Сообщить("Статус не может быть изменен, т.к не во всех выполенных задачах плановое количетсво равно фактическому");
		Возврат
	КонецЕсли;
	Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен;
КонецПроцедуры
&НаКлиенте
Процедура ЗавершитьДокументОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;	
	ЗавершитьДокументНаСервере();
	ВидимостьДоступностьЭлементов();
	КонецПроцедуры
&НаКлиенте
Процедура ЗавершитьДокумент(Команда)
Оповещение=новый ОписаниеОповещения("ЗавершитьДокументОповещение",ЭтаФорма);
ПоказатьВопрос(Оповещение,"Документ перейдет в состояние завершен, а так же будут отправлены соответствующие сообщения на почту. Продолжить ?",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры
&НаКлиенте
Процедура ЗаменитьСтроку(Команда)
	Если ТекущийЭлемент.Имя="Товары" Тогда 
	МассивОтвета=ДанныеЗадачиПоСтроке(ТекущийЭлемент.ТекущиеДанные.ИдентификаторСтроки);
	Если МассивОтвета.Количество()=0 Тогда 
		Сообщить("нет данных задачи");
		Возврат
	КонецЕсли;
	Если МассивОтвета[0].Состояние Тогда 
		Сообщить("Задача находится в обработке");
		Возврат
	КонецЕсли;
	Если ТекущийЭлемент.ТекущиеДанные.ФиксацияСтроки Тогда 
		Сообщить("Фиксированные данные заменить не возможно");
		Возврат
	КонецЕсли;	
	ПараметрыФормы=ПараметрыФормыОдиночногоОтбораНоменклатуры(ТекущийЭлемент.ТекущиеДанные);
	ПараметрыФормы.Вставить("ВернутьИдентификаторСтроки",Истина);
	ОткрытьФормуПодбора(ЭтаФорма,ПараметрыФормы);
    КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура ОтвязатьОтНаборкиНаСервере()
	Объект.ПеремещениеВПикинг=Ложь;
	Объект.итОснование=Неопределено;
КонецПроцедуры
&НаКлиенте
Процедура ОтвязатьОтНаборкиОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;
	ОтвязатьОтНаборкиНаСервере();
	КонецПроцедуры
&НаКлиенте
Процедура ОтвязатьОтНаборки(Команда)
	Оповещение=новый ОписаниеОповещения("ОтвязатьОтНаборкиОповещение",ЭтаФорма);
	ПоказатьВопрос(Оповещение,"Вы уверены, что хотите отвязать перемещение от наборки ?",РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры
&НаКлиенте
Процедура ПараметрыСтратегии(Команда)
Если Объект.СтратегияПеремещения.Пустая() Тогда 
	Сообщить("Укажите стратегию перемещения");
	Возврат
КонецЕсли;	
Данные=ПолучитьИзВременногоХранилища(Объект.АдресХраненияПараметров);
ОткрытьФорму("ОбщаяФорма.итWMSФормаПараметровСтратегии",новый Структура("Стратегия,ДанныеПараметров",Объект.СтратегияПеремещения,Данные),ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура РучнойЗапускПереупаковкиНаСервере()
	Отказ=Ложь;
	итWMSСлужебныеПроцедурыИФункции.СоздатьДокументПереупаковкиПМУ(Объект.Ссылка,Отказ);
	Если не Отказ Тогда 
    ОчиститьДанныеПомарочногоУчета();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РучнойЗапускПереупаковки(Команда)
	РучнойЗапускПереупаковкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрЗначения(Команда)
	Если ТекущийЭлемент.Имя="Товары" Тогда
		Если ТипЗнч(ТекущийЭлемент.ТекущийЭлемент)=Тип("ПолеФормы") Тогда
			ИмяПоля=ТекущийЭлемент.ТекущийЭлемент.Имя;
			ДлинаСтроки=СтрДлина(ИмяПоля);
			ДлинаТовары=СтрДлина("Товары");
			ПутьКДанным=Прав(ИмяПоля,ДлинаСтроки-ДлинаТовары);
			//	#Если не ВебКлиент Тогда
			//	ОткрытьЗначение(ТекущийЭлемент.ТекущиеДанные[ПутьКДанным]);
			//#КонецЕсли	
			ПоказатьЗначение(,ТекущийЭлемент.ТекущиеДанные[ПутьКДанным]);
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервереБезКонтекста
Функция ПолучитьКартинкуИзБиблиотеки()
Возврат	БиблиотекаКартинок.ВнешнийИсточникДанныхКуб.ПолучитьДвоичныеДанные();
	КонецФункции


&НаСервере
Процедура ОбновитьДанныеСТСД()
Документы.итWMSПеремещение.ВнестиИзменениеДанныхТСДВДокумент(Объект.Ссылка);
Данные=Объект.Ссылка.ПолучитьОбъект();
Если итWMSСлужебныеПроцедурыИФункции.ВсеЗадачиДокументаЗафиксированны(Объект.Ссылка) Тогда
	Данные.ДействияПриФиксацииЗадачДокумента();
	Данные.ОбменДанными.Загрузка=Истина;
	//Данные.ОтложенноеПроведение=Истина;
	Данные.Записать();
	итWMSСлужебныеПроцедурыИФункции.СделатьЗаписьДопОбработкиОтложенногоПроведения(Данные.Ссылка);
КонецЕсли;
ЗначениеВРеквизитФормы(Данные,"Объект");
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыОдиночногоОтбораНоменклатуры(Элемент)
	ПараметрыФормы=новый Структура;
	ПараметрыФормы.Вставить("Склад",Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("ОдиночныйВыбор",Истина);
	ПараметрыФормы.Вставить("Организация",Объект.Организация);
	ПараметрыФормы.Вставить("ОтборПоНоменклатуре",Истина);
	Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда 
		ПараметрыФормы.Вставить("ПараметрПоискаНоменклатура",Элемент.Родитель.ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("ИдентификаторСтроки",Элемент.Родитель.ТекущиеДанные.ИдентификаторСтроки);
	ИначеЕсли ТипЗнч(Элемент)=Тип("ДанныеФормыЭлементКоллекции") Тогда 
		ПараметрыФормы.Вставить("ПараметрПоискаНоменклатура",Элемент.Номенклатура);
		ПараметрыФормы.Вставить("ИдентификаторСтроки",Элемент.ИдентификаторСтроки);
	КонецЕсли;
	ПараметрыФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Документ",Объект.Ссылка);
	Возврат  ПараметрыФормы;
КонецФункции
&НаКлиенте
Функция ПараметрыФормыМножественногоПодбораНоменклатуры()
	ПараметрыФормы=новый Структура;
	ПараметрыФормы.Вставить("Склад",Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("ОдиночныйВыбор",Ложь);
	ПараметрыФормы.Вставить("ОтборПоНоменклатуре",Истина);
	ПараметрыФормы.Вставить("Организация",Объект.Организация);
	ПараметрыФормы.Вставить("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Документ",Объект.Ссылка);
	Возврат  ПараметрыФормы;
КонецФункции
&НаКлиенте
Процедура ОткрытьФормуПодбора(ЭлементОповещенияВыбора,ПараметрыФормы=Неопределено)
	Если ПараметрыФормы = Неопределено тогда
		ПараметрыФормы=новый Структура;
	КонецЕсли;
	СделатьСнимокТабличнойЧастиДляДинамическогоПодбора();	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораНоменклатуры",ПараметрыФормы,ЭлементОповещенияВыбора);
	
КонецПроцедуры
&НаСервере
Процедура ПроставитьПредставлениеИдентификатора()
	для Каждого  стр из Объект.Товары цикл
		стр.ИдентификаторСтрокиПредставление=Строка(стр.ИдентификаторСтроки);
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура ВариантОтображенияПользователя()
	Если ТригерОтображения тогда
		ВВидеДерева("");
	иначе
		ВВидеСписка("");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикДиалогов(Результат,Параметры)Экспорт 
	Если Результат=КодВозвратаДиалога.Да тогда
		Выполнить(Параметры);
	иначе
		Возврат
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьЭлементов()
	//Элементы.Филиал.Видимость=Объект.ПриемкаИзТранзита;
	//Элементы.НомерВходящегоДокумента.Видимость=Объект.ПриемкаИзТранзита;
	//Элементы.ДатаВходящегоДокумента.Видимость=Объект.ПриемкаИзТранзита;
	//Элементы.ГруппаДанныеФизическогоНосителя.Видимость=не Объект.ПриемкаИзТранзита;
	ВидимостьДоступностьЭлементовНаСервере();
КонецПроцедуры
&НаСервере
Процедура ВидимостьДоступностьЭлементовНаСервере()
	Если  Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределен или Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Распределяется тогда
		Элементы.ГруппаТовары.ТолькоПросмотр=Истина;
		Элементы.ТоварыПодбор.Видимость=Ложь;
		Элементы.ТоварыРазместитьПаллеты.Видимость=Ложь;
		Элементы.ТоварыКонтекстноеМенюЗаменитьСтроку.Видимость=Истина;
		//Элементы.ГруппаДанныеФизическогоНосителя.ТолькоПросмотр=Истина;
	иначе
		Если Объект.ПеремещениеВПикинг Тогда 
			Элементы.ТоварыРазместитьПаллеты.Видимость=Ложь;
		иначе
			Элементы.ТоварыРазместитьПаллеты.Видимость=Истина;
		КонецЕсли;
		Элементы.ГруппаТовары.ТолькоПросмотр=Ложь;
		Элементы.ТоварыПодбор.Видимость=Истина;
		Элементы.ТоварыКонтекстноеМенюЗаменитьСтроку.Видимость=Ложь;
		//Элементы.ГруппаДанныеФизическогоНосителя.ТолькоПросмотр=Ложь;
	КонецЕсли;
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан или Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Зарезервирован тогда
		Элементы.НеРаспределятьНаТСД.Видимость=Истина;	
	иначе
		Элементы.НеРаспределятьНаТСД.Видимость=Ложь;	
	КонецЕсли;
	Если  Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой Тогда 
		Элементы.ФормаЗавершитьДокумент.Видимость=Истина;
		Элементы.ФормаРучнойЗапускПереупаковки.Видимость=Истина;
	иначе
		Элементы.ФормаЗавершитьДокумент.Видимость=Ложь;
		Элементы.ФормаРучнойЗапускПереупаковки.Видимость=Ложь
	КонецЕсли;
	Если ТипЗнч(Объект.итОснование)=Тип("ДокументСсылка.итWMSНаборка") Тогда 
		Если Объект.ПеремещениеВПикинг Тогда 
			Элементы.ФормаОтвязатьОтНаборки.Видимость=Истина;
		иначе
			Элементы.ФормаОтвязатьОтНаборки.Видимость=Ложь;
			Элементы.СкладОтправитель.Видимость=Ложь;
		КонецЕсли;
	иначе
		Элементы.ФормаОтвязатьОтНаборки.Видимость=Ложь;
	КонецЕсли;
	КонецПроцедуры

&НаКлиенте
Процедура ОбработчикТрансляцииПриИзменении(Элемент)
	СтрокаДерева=Элемент.Родитель.ТекущиеДанные;
	ПолеИзменения=СтрЗаменить(Элемент.Имя,"ТоварыДерево","");
	Если ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтрокиПредставление) тогда
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",СтрокаДерева.ИдентификаторСтрокиПредставление));
		Строка[0][ПолеИзменения]=Элемент.Родитель.ТекущиеДанные[ПолеИзменения];
		ЭтаФорма.Модифицированность=Истина;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура РассчетКоличестваВУпаковкеПриИзменении(Элемент)
	СтрокаИзменения=Элемент.Родитель.ТекущиеДанные;
	ПолеИзменения=СтрЗаменить(Элемент.Имя,"ТоварыДерево","");
	Если не СтрокаИзменения.СтрокаУпаковки тогда
		РодительСтрокиИзменения=СтрокаИзменения.ПолучитьРодителя();
	иначе
		РодительСтрокиИзменения=СтрокаИзменения;
	КонецЕсли;
	РодительСтрокиИзменения[ПолеИзменения]=0;
	СтрокиДляПересчета=РодительСтрокиИзменения.ПолучитьЭлементы();
	для Каждого стр из СтрокиДляПересчета цикл
		РодительСтрокиИзменения[ПолеИзменения]=РодительСтрокиИзменения[ПолеИзменения]+ стр[ПолеИзменения];
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ГрупповоеИзменениеСпискаПоИдУпаковки(ПолеИзменения,Значение,ИдентификаторУпаковки)
	МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторУпаковки",ИдентификаторУпаковки));
	для Каждого стр из МассивСтрок цикл
		стр[ПолеИзменения]=Значение;
	КонецЦикла;	
КонецПроцедуры
&НаСервере
Процедура ПроверкаНаЗаполненностьЯчейкиПолучателя(Отказ, ПараметрыЗаписи)
	Если Объект.СтатусДокумента	<> Перечисления.итWMSСтатусыСкладскихДокументов.Создан  или (Объект.СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Создан и ПараметрыЗаписи.РежимЗаписи=РежимЗаписиДокумента.Проведение )тогда
		для Каждого стр из Объект.Товары цикл
			Если стр.ЯчейкаПолучатель=Справочники.итСкладскиеЯчейки.ПустаяСсылка() тогда
				Сообщить(" для паллеты "+стр.ИдентификаторУпаковки+" не назначенна ячейка");
				Отказ=Истина;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнениеПриОдиночномПодбореПоНоменклатуре(Элемент,Структура)
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные,Структура);
	Элемент.Родитель.ТекущиеДанные.ЯчейкаОтправитель=Структура.Ячейка;
	Элемент.Родитель.ТекущиеДанные.ДатаРозлива =  итWMSСлужебныеПроцедурыИФункции.ПолучитьЭлементДанныхНаСервере(Структура.СерияНоменклатуры,"ДатаПроизводства");
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры
&НаСервере
Процедура СделатьСнимокТабличнойЧастиДляДинамическогоПодбора()
	НовыйНабораЗаписей= РегистрыСведений.итWMSКорзинаНоменклатуры.СоздатьНаборЗаписей();
	НовыйНабораЗаписей.Отбор.КлючДанных.Установить(ЭтаФорма.УникальныйИдентификатор);
	НовыйНабораЗаписей.Прочитать();
	НовыйНабораЗаписей.Очистить();
	Отменена=Перечисления.итWMSСостоянияЗадачТСД.Отменена;
	для Каждого стр из Объект.Товары цикл
		Если стр.ФиксацияСтроки и стр.СостояниеЗадачи=Отменена Тогда 
			Продолжить;
		КонецЕсли;
		НоваяЗапись=НовыйНабораЗаписей.Добавить();
		НоваяЗапись.ДатаЗаписи=ТекущаяДата();
		НоваяЗапись.Номенклатура=стр.Номенклатура;
		НоваяЗапись.СерияНоменклатуры=стр.СерияНоменклатуры;
		НоваяЗапись.КлючДанных=ЭтаФорма.УникальныйИдентификатор;
		НоваяЗапись.Ячейка = стр.ЯчейкаОтправитель;
		НоваяЗапись.Качество=стр.Качество;
		НоваяЗапись.ИдентификаторСтроки=стр.ИдентификаторСтроки;
		НоваяЗапись.Количество=стр.Количество;
		НоваяЗапись.ИдентификаторУпаковки=стр.ИдентификаторУпаковки;
	КонецЦикла;
	НовыйНабораЗаписей.Записать();
КонецПроцедуры
&НаСервере
Процедура ПроверкаНаПересчениеЯчейкиОтправителяПолучателя(Отказ, ПараметрыЗаписи)
	Если не ПараметрыЗаписи.РежимЗаписи=РежимЗаписиДокумента.Проведение тогда
		Возврат
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтрокиПредставление,
	|	Товары.ИдентификаторУпаковки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Качество,
	|	Товары.ДатаРозлива,
	|	Товары.ЯчейкаПолучатель,
	|	Товары.СостояниеЗадачи,
	|	Товары.ЯчейкаОтправитель,
	|	Товары.Количество,
	|	Товары.СерияНоменклатуры,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ ТчТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчТоварыЯчейкаОтправитель.ИдентификаторСтрокиПредставление КАК ИдентификаторСтрокиПредставлениеОтправителя,
	|	ТчТоварыЯчейкаОтправитель.ЯчейкаОтправитель КАК Ячейка,
	|	ТчТоварыЯчейкаПолучатель.ИдентификаторСтрокиПредставление КАК ИдентификаторСтрокиПредставлениеПолучателя,
	|	ТчТоварыЯчейкаОтправитель.НомерСтроки КАК НомерСтрокиОтправитель,
	|	ТчТоварыЯчейкаПолучатель.НомерСтроки КАК НомерСтрокиПолучатель
	|ИЗ
	|	ТчТовары КАК ТчТоварыЯчейкаОтправитель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТчТовары КАК ТчТоварыЯчейкаПолучатель
	|		ПО ТчТоварыЯчейкаОтправитель.ЯчейкаОтправитель = ТчТоварыЯчейкаПолучатель.ЯчейкаПолучатель
	|
	|СГРУППИРОВАТЬ ПО
	|	ТчТоварыЯчейкаОтправитель.ИдентификаторСтрокиПредставление,
	|	ТчТоварыЯчейкаОтправитель.ЯчейкаОтправитель,
	|	ТчТоварыЯчейкаПолучатель.ИдентификаторСтрокиПредставление,
	|	ТчТоварыЯчейкаОтправитель.НомерСтроки,
	|	ТчТоварыЯчейкаПолучатель.НомерСтроки";
	
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		Возврат
	КонецЕсли;	
	ВыборкаДетальнойЗаписи = РезультатЗапроса.Выбрать();
	пока ВыборкаДетальнойЗаписи.Следующий() цикл
		Отказ=Истина;
		Сообщить( "в строке "+ВыборкаДетальнойЗаписи.НомерСтрокиОтправитель +" ячейка отправитель "+ВыборкаДетальнойЗаписи.Ячейка+ " пересекается с ячейкой получателем в строке "+ВыборкаДетальнойЗаписи.НомерСтрокиПолучатель);
	КонецЦикла;	
КонецПроцедуры
&НаСервере
Процедура ПроверканаНаличиеСуществующегоПеремещения(Отказ)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Основание = &Основание
	|	И ПеремещениеТоваров.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Сообщить("У документа есть перемещение "+ВыборкаДетальныеЗаписи.Ссылка);
		Отказ=Истина;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИерархиюСтратегииРазмещенияДляПеремещения()
	Возврат Справочники.итWMSСтратегии.Перемещение;
КонецФункции

&НаКлиенте
Процедура РассчитатьНадписиКоличестваТовара()
	Если Элементы.Товары.ТекущиеДанные<>Неопределено  Тогда 
		НМ=Элементы.Товары.ТекущиеДанные.Номенклатура;
		МассивСтрок=Объект.Товары.НайтиСтроки(новый Структура("Номенклатура",НМ));
		КоличествоНм=0;
		КоличествоНМФакт=0;
		для Каждого Строка из МассивСтрок цикл
			КоличествоНМ=КоличествоНМ+Строка.Количество;
			КоличествоНМФакт=КоличествоНМФакт+Строка.КоличествоФакт;
		КонецЦикла;
		Элементы.ДекорацияВыбраннойНМДанные.Заголовок= Строка(КоличествоНМ);
		Элементы.ДекорацияВыбраннойНМФактДанные.Заголовок= Строка(КоличествоНМФакт);
	КонецЕсли;
	
	КоличествоВсего=0;
	КоличествоВсегоФакт=0;
	для Каждого стр из Объект.Товары Цикл 
		КоличествоВсего=КоличествоВсего+стр.Количество;
		КоличествоВсегоФакт=КоличествоВсегоФакт+стр.КоличествоФакт;
	КонецЦикла;
	Элементы.ДекорацияКоличествоВсегоДанные.Заголовок=Строка(КоличествоВсего);
	Элементы.ДекорацияКоличествоВсегоФактДанные.Заголовок=Строка(КоличествоВсегоФакт);
КонецПроцедуры
&НаСервере
Функция ДокументВСтатусеПерезапуска()
	Если Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Выполнен или
		 Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.ВыполненСОшибкой или
		 Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен Тогда 
		Возврат Истина
	иначе
		Возврат Ложь
	КонецЕсли;	
КонецФункции

&НаСервере
Функция КоличествоПланНеРавноФакту()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSПеремещениеТовары.Количество КАК Количество,
		|	итWMSПеремещениеТовары.КоличествоФакт КАК КоличествоФакт,
		|	итWMSПеремещениеТовары.СостояниеЗадачи
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Товары КАК итWMSПеремещениеТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВТ.Количество) КАК Количество,
		|	СУММА(ВТ.КоличествоФакт) КАК КоличествоФакт
		|ИЗ
		|	ВТ КАК ВТ
		|ГДЕ
		|	ВТ.СостояниеЗадачи <> ЗНАЧЕНИЕ(Перечисление.итwmsСостоянияЗадачТСД.Отменена)";
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Если ВыборкаДетальныеЗаписи.Количество<>ВыборкаДетальныеЗаписи.КоличествоФакт Тогда 
			Возврат Истина;
		иначе
			Возврат Ложь
		КонецЕсли;	
	иначе
		Возврат Ложь;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецФункции
&НаКлиенте
Процедура ПроверкаНаПерезапускДокумента(Отказ, ПараметрыЗаписи)
	Если  ЕстьНеФиксированныеСтроки() Тогда
		Отказ=Истина;
		Оповещение=новый ОписаниеОповещения("УстановитьПараметрыПерезапускаОповещение",ЭтаФорма);
		ПоказатьВопрос(Оповещение,"Обнаружены новые данные, если продолжите, документ снова будет отправлен на тсд. Продолжить?",РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура УстановитьПараметрыПерезапускаОповещение(Результат,Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Нет Тогда 
		Возврат
	КонецЕсли;
	Попытка
		СтарыйСтатус=Объект.СтатусДокумента;
		ЭтаФорма.Записать(новый Структура("РежимЗаписи,ПерезапускДокумента",РежимЗаписиДокумента.Проведение,Истина));
	Исключение
		Объект.СтатусДокумента=СтарыйСтатус;
	КонецПопытки;
	КонецПроцедуры
&НаСервере
Функция  ЕстьНеФиксированныеСтроки()
	ЕстьНеЗаФиксированныеСтроки=Ложь;
	Для Каждого стр из Объект.Товары цикл
		Если не стр.ФиксацияСтроки	Тогда 
			ЕстьНеЗаФиксированныеСтроки=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьНеЗаФиксированныеСтроки;
	КонецФункции
&НаСервере	
Процедура УстановитьСтатусДокументаПерезпуска()
	Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
КонецПроцедуры
&НаСервере	
Функция ДанныеЗадачиПоСтроке(ИдентификаторСтроки)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	итWMSСтрокиЗадачТСД.ИдЗадачи
		|ПОМЕСТИТЬ ВтИдЗадач
		|ИЗ
		|	РегистрСведений.итWMSСтрокиЗадачТСД КАК итWMSСтрокиЗадачТСД
		|ГДЕ
		|	итWMSСтрокиЗадачТСД.идСтроки = &идСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	итWMSЗадачиТСД.ТСД,
		|	итWMSЗадачиТСД.ДокументОснование,
		|	итWMSЗадачиТСД.ТипЗадачи,
		|	итWMSЗадачиТСД.ИдЗадачи,
		|	итWMSЗадачиТСД.ИдЗадачиРодителя,
		|	итWMSЗадачиТСД.ИдентификаторУпаковки,
		|	итWMSЗадачиТСД.ЯчейкаОтправитель,
		|	итWMSЗадачиТСД.ЯчейкаПолучатель,
		|	итWMSЗадачиТСД.ДополнительныеДанные,
		|	итWMSЗадачиТСД.ДатаНачала,
		|	итWMSЗадачиТСД.ДатаОкончания,
		|	итWMSЗадачиТСД.Состояние,
		|	итWMSЗадачиТСД.ФиксацияЗадачи
		|ПОМЕСТИТЬ ВтДанныеЗадач
		|ИЗ
		|	ВтИдЗадач КАК ВтИдЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.итWMSЗадачиТСД КАК итWMSЗадачиТСД
		|		ПО ВтИдЗадач.ИдЗадачи = итWMSЗадачиТСД.ИдЗадачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеЗадач.ТСД,
		|	ВтДанныеЗадач.ДокументОснование,
		|	ВтДанныеЗадач.ТипЗадачи,
		|	ВтДанныеЗадач.ИдЗадачи,
		|	ВтДанныеЗадач.ИдЗадачиРодителя,
		|	ВтДанныеЗадач.ИдентификаторУпаковки,
		|	ВтДанныеЗадач.ЯчейкаОтправитель,
		|	ВтДанныеЗадач.ЯчейкаПолучатель,
		|	ВтДанныеЗадач.ДатаНачала,
		|	ВтДанныеЗадач.ДатаОкончания,
		|	ВтДанныеЗадач.Состояние,
		|	ВтДанныеЗадач.ФиксацияЗадачи
		|ИЗ
		|	ВтДанныеЗадач КАК ВтДанныеЗадач
		|ГДЕ
		|	ВтДанныеЗадач.ДокументОснование = &ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанныеЗадач.ТСД,
		|	ВтДанныеЗадач.ДокументОснование,
		|	ВтДанныеЗадач.ТипЗадачи,
		|	ВтДанныеЗадач.ИдЗадачи,
		|	ВтДанныеЗадач.ИдЗадачиРодителя,
		|	ВтДанныеЗадач.ИдентификаторУпаковки,
		|	ВтДанныеЗадач.ЯчейкаОтправитель,
		|	ВтДанныеЗадач.ЯчейкаПолучатель,
		|	ВтДанныеЗадач.ДатаНачала,
		|	ВтДанныеЗадач.ДатаОкончания,
		|	ВтДанныеЗадач.Состояние,
		|	ВтДанныеЗадач.ФиксацияЗадачи";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("идСтроки", ИдентификаторСтроки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВОбработке=Ложь;
	МассивЗадач=новый Массив;
	Пока   ВыборкаДетальныеЗаписи.Следующий() Цикл  
		МассивЗадач.Добавить(новый Структура("ИдЗадачи,Состояние",ВыборкаДетальныеЗаписи.ИдЗадачи));
		Если ВыборкаДетальныеЗаписи.Состояние <>Перечисления.итWMSСостоянияЗадачТСД.КВыполнению Тогда 
			Если ВыборкаДетальныеЗаписи.Состояние <>Перечисления.итWMSСостоянияЗадачТСД.ОжидаетРазрешения Тогда 
				ВОбработке=Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	для Каждого стр из МассивЗадач цикл
		стр.Состояние=ВОбработке;
	КонецЦикла;

	Возврат МассивЗадач;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КонецФункции
&НаКлиенте	
Процедура ИзменениеРаспределенныхДанных(СтруктураДанных) Экспорт 
	Если не СтруктураДанных.Свойство("ИдентификаторТекущейСтрокиДокумента") Тогда 
		Сообщить("Ошибка данных");
		Возврат
	КонецЕсли;
	Если СтруктураДанных.ИдентификаторТекущейСтрокиДокумента=новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда 
		Сообщить("Ошибка данных не верный формат ключа");
		Возврат
	КонецЕсли;
	Отказ=Ложь;
	ИзменениеРаспределенныхДанныхНаСервере(Отказ,СтруктураДанных);
	ПроставитьПредставлениеИдентификатора();
	ВидимостьДоступностьЭлементов();
	РассчитатьНадписиКоличестваТовара();
КонецПроцедуры
&НаСервере
Процедура ИзменениеРаспределенныхДанныхНаСервере(Отказ,СтруктураДанных)
ИдентификаторыИзменяемыхЗадач=ДанныеЗадачиПоСтроке(СтруктураДанных.ИдентификаторТекущейСтрокиДокумента);
Если ИдентификаторыИзменяемыхЗадач.Количество()=0 Тогда 
	Отказ=Истина;
	Сообщить("нет данных для изменения");
	Возврат
КонецЕсли;
Если ИдентификаторыИзменяемыхЗадач[0].Состояние Тогда 
	Отказ=Истина;
	Сообщить("Задача в обработке");
	Возврат
КонецЕсли;	
Попытка
ТаблицаДанныхСтрокДоИзменения=Объект.Товары.Выгрузить();
МассивСтрокиДанных=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",СтруктураДанных.ИдентификаторТекущейСтрокиДокумента));
для Каждого Элемент из МассивСтрокиДанных цикл
    ЗаполнитьЗначенияСвойств(Элемент,СтруктураДанных);
	Элемент.ЯчейкаОтправитель=СтруктураДанных.Ячейка;
	Элемент.ЯчейкаПолучатель=СтруктураДанных.ЯчейкаПолучательИзменение;
	Элемент.ДатаРозлива =  ?(ЗначениеЗаполнено(СтруктураДанных.СерияНоменклатуры.алкДатаНачалаРозлива),СтруктураДанных.СерияНоменклатуры.алкДатаНачалаРозлива,СтруктураДанных.СерияНоменклатуры.алкДатаКонцаРозлива);
КонецЦикла;
Данные=РеквизитФормыВЗначение("Объект");
//Данные.ИзменяемаяСтрока=СтруктураДанных.ИдентификаторТекущейСтрокиДокумента;
Данные.МассивЗадач=ИдентификаторыИзменяемыхЗадач;
Данные.Записать();
Исключение
Объект.Товары.Загрузить(ТаблицаДанныхСтрокДоИзменения);
КонецПопытки;
ЗначениеВРеквизитФормы(Данные,"Объект");
КонецПроцедуры
&НаКлиенте
Процедура ВосстановитьДанныеПараметровСтратегии() Экспорт 
	ВосстановитьДанныеПараметровСтратегииСервер();
КонецПроцедуры
&НаСервере
Процедура ВосстановитьДанныеПараметровСтратегииСервер()
	Данные=РеквизитФормыВЗначение("Объект");
	Объект.АдресХраненияПараметров=ПоместитьВоВременноеХранилище(Данные.ПараметрыСтратегии.Получить(),ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры

Процедура ОчиститьДанныеПомарочногоУчета()
	НаборЗаписей=РегистрыСведений.итWMS_АгрегацияМарок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	НаборЗаписей2=РегистрыСведений.итWMS_МаркиВОбработке.СоздатьНаборЗаписей();
	НаборЗаписей2.Отбор.ДокументОснование.Установить(Объект.Ссылка);
	НаборЗаписей2.Прочитать();
	НаборЗаписей2.Очистить();
	НаборЗаписей2.Записать();
КонецПроцедуры

&НаСервере
Функция ПустаяСсылкаЯчейки()
Возврат  Справочники.итСкладскиеЯчейки.ПустаяСсылка();	
КонецФункции



#КонецОбласти
