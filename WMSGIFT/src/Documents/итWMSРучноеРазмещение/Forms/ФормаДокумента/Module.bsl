

#Область ОбработчикиСобытий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Ключ.Пустая() тогда
		Объект.итОснование=Неопределено;
		Если Объект.Товары.Количество()>0 тогда
			для Каждого стр из Объект.Товары цикл
				стр.ИдентификаторСтроки=новый УникальныйИдентификатор;
			КонецЦикла;
		КонецЕсли;	
	    Если Объект.Организация.Пустая() Тогда
		ОбщегоНазначения.УстановитьОрганизациюВДокументе(Объект);
		КонецЕсли;
		Объект.Дата=ТекущаяДата();
		Объект.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Создан;
		Объект.Ответственный=ПараметрыСеанса.ТекущийПользователь;
		
	КонецЕсли;	
	ВосстановитьДанныеПараметровСтратегииСервер();
	ПроставитьПредставлениеИдентификатора();	  
КонецПроцедуры
&НаКлиенте
Процедура ТоварыЯчейкаПолучательПриИзменении(Элемент)
	ГрупповоеИзменениеСпискаПоИдУпаковки("ЯчейкаПолучатель",Элемент.Родитель.ТекущиеДанные.ЯчейкаПолучатель,Элемент.Родитель.ТекущиеДанные.ИдентификаторУпаковки);
КонецПроцедуры
&НаКлиенте
Процедура ТоварыКомментарийПриИзменении(Элемент)
	ГрупповоеИзменениеСпискаПоИдУпаковки("Комментарий",Элемент.Родитель.ТекущиеДанные.Комментарий,Элемент.Родитель.ТекущиеДанные.ИдентификаторУпаковки);
КонецПроцедуры
&НаСервереБезКонтекста
Процедура ТоварыИдентификаторУпаковкиНачалоВыбораНаСервере(Основание,СтруктураДанных,Отказ)
	Если ТипЗнч(Основание)<>Тип("ДокументСсылка.итWMSПриемка") тогда
		Сообщить("не верный формат основания");
		Отказ=Истина;
		Возврат
	КонецЕсли;	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSПриемкаТовары.ИдентификаторУпаковки
	|ИЗ
	|	Документ.итWMSПриемка.Товары КАК итWMSПриемкаТовары
	|ГДЕ
	|	итWMSПриемкаТовары.Ссылка = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	итWMSПриемкаТовары.ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("Основание", Основание);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураДанных.Вставить("СписокИдентификаторУпаковки",РезультатЗапроса.ВыгрузитьКолонку("ИдентификаторУпаковки"));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИдентификаторУпаковкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Отказ=ложь;
	СтруктураДанных=новый Структура("СписокИдентификаторУпаковки,Организация,Ответственный",Неопределено,Объект.Организация,ПолучитьТекущегоПользователя());
	ТоварыИдентификаторУпаковкиНачалоВыбораНаСервере(Объект.итОснование,СтруктураДанных,Отказ);
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	ОткрытьФорму("Документ.итWMSРучноеРазмещение.Форма.ФормаЗапросаИдентификатораУпаковки",СтруктураДанных,Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИдентификаторУпаковкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Элемент.Родитель.ТекущиеДанные.ИдентификаторУпаковки= ВыбранноеЗначение;
	
КонецПроцедуры




&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	ГрупповоеИзменениеСпискаПоИдУпаковки("Склад",Элемент.Родитель.ТекущиеДанные.Склад,Элемент.Родитель.ТекущиеДанные.ИдентификаторУпаковки);
КонецПроцедуры



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Картинка = новый Картинка(БиблиотекаКартинок.ВнешнийИсточникДанныхКуб.ПолучитьДвоичныеДанные());
	АдресКартинкиКуба=ПоместитьВоВременноеХранилище(Картинка,ЭтаФорма.УникальныйИдентификатор);
	ВидимостьДоступностьЭлементов();
	ВариантОтображенияПользователя();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоНоменклатураПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоХарактеристикаПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоКачествоПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоДатаРозливаПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры


&НаКлиенте
Процедура ТоварыДеревоКоличествоПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
	РассчетКоличестваВУпаковкеПриИзменении(Элемент);
КонецПроцедуры


&НаКлиенте
Процедура ТоварыДеревоЯчейкаПолучательПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].ЯчейкаПолучатель=Элемент.Родитель.ТекущиеДанные.ЯчейкаПолучатель;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
КонецПроцедуры
&НаКлиенте
Процедура ТоварыДеревоСкладПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].Склад=Элемент.Родитель.ТекущиеДанные.Склад;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыДеревоКомментарийПриИзменении(Элемент)
	СписокЭлементовДерева=Элемент.Родитель.ТекущиеДанные.ПолучитьЭлементы();
	для Каждого  стр из СписокЭлементовДерева цикл
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",стр.ИдентификаторСтрокиПредставление));
		Строка[0].Комментарий=Элемент.Родитель.ТекущиеДанные.Комментарий;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоСерияНоменклатурыПриИзменении(Элемент)
	ОбработчикТрансляцииПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоПередУдалением(Элемент, Отказ)
	Если Элемент.ВыделенныеСтроки.Количество()>1 тогда
		Сообщить("В режиме дерева можно удалять 1 любую строку за раз");
		Отказ=Истина;
		Возврат
	КонецЕсли;	
	Если Элемент.ТекущиеДанные.СтрокаУпаковки тогда
		Оповещение = новый ОписаниеОповещения("ОбработчикДиалогов",ЭтаФорма," ОбработчикУдалениеУпаковки();");
		ПоказатьВопрос(Оповещение,"Если удалить паллету, то все строки в ней так же будут удалены",РежимДиалогаВопрос.ДаНет);
		Отказ=Истина;
		Возврат
	иначе
		МассивСтроки=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",Элемент.ТекущиеДанные.ИдентификаторСтрокиПредставление));
		Строка=МассивСтроки[0];
		Объект.Товары.Удалить(Строка);
	КонецЕсли;
	ЭтаФорма.Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтрокаПеретаскиванияКуда=Элементы.ТоварыДерево.ДанныеСтроки(Строка);
	Если не СтрокаПеретаскиванияКуда.СтрокаУпаковки тогда
		пока не СтрокаПеретаскиванияКуда.СтрокаУпаковки цикл
			СтрокаПеретаскиванияКуда=СтрокаПеретаскиванияКуда.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	СтандартнаяОбработка=Ложь;
	для Каждого стр из ПараметрыПеретаскивания.Значение цикл
		ТекущаяСтрокаОбработки=Элементы.ТоварыДерево.ДанныеСтроки(стр);
		Если ТекущаяСтрокаОбработки.СтрокаУпаковки тогда
			Продолжить;
		КонецЕсли;	
		ТекущаяСтрокаОбработки.ИдентификаторУпаковки=СтрокаПеретаскиванияКуда.ИдентификаторУпаковки;
		НоваяСтрока=СтрокаПеретаскиванияКуда.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрокаОбработки);
		НоваяСтрока.ЯчейкаПолучатель=СтрокаПеретаскиванияКуда.ЯчейкаПолучатель;
		СтарыйРодитель=ТекущаяСтрокаОбработки.ПолучитьРодителя();
		СтарыйРодитель.ПолучитьЭлементы().Удалить(ТекущаяСтрокаОбработки);
		
		/////Обработчики Изменения
		СтрукрутраДляИзменения=новый Структура;
		СтрукрутраДляИзменения.Вставить("Имя","ИдентификаторУпаковки");
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		ОбработчикТрансляцииПриИзменении(СтрукрутраДляИзменения);
		СтрукрутраДляИзменения.Вставить("Имя","ЯчейкаПолучатель");
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		ОбработчикТрансляцииПриИзменении(СтрукрутраДляИзменения);
		
				
		
		СтрукрутраДляИзменения.Имя="Количество";
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",НоваяСтрока));
		РассчетКоличестваВУпаковкеПриИзменении(СтрукрутраДляИзменения) ;
		
		СтрукрутраДляИзменения.Имя="Количество";
		СтрукрутраДляИзменения.Вставить("Родитель",новый Структура("ТекущиеДанные",СтарыйРодитель));
		РассчетКоличестваВУпаковкеПриИзменении(СтрукрутраДляИзменения) ;
		
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ВидимостьДоступностьЭлементов();
	ПроставитьПредставлениеИдентификатора();
	Если Объект.Проведен тогда
		Если Объект.итОснование.Пустая() тогда
			Возврат
		КонецЕсли;	
		Если не ПроверкаНаЗавершенностьПриемкиОснования(Объект.итОснование) тогда
			ЗавершитьПримкуНаСервере(Объект.итОснование);
			Оповестить("WMSЗавршениеПриемки",Объект.итОснование,Объект.Ссылка);	
		КонецЕсли;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ВосстановитьДанныеПараметровСтратегии",0.1,Истина);	
КонецПроцедуры
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПроверкаНаЗаполненностьЯчейкиПолучателя(Отказ, ПараметрыЗаписи);	
КонецПроцедуры

&НаКлиенте
Процедура СтратегияРазмещенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.итWMSСтратегии.ФормаВыбора",новый Структура("ОтборИерархии",ПолучитьИерархиюСтратегииРазмещения()),Элемент);
КонецПроцедуры
&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	для Каждого  стр из Объект.Товары цикл
		стр.Склад=Объект.Склад;
	КонецЦикла;
	ВариантОтображенияПользователя();	
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		Если ИсточникВыбора.ИмяФормы="Документ.итWMSРучноеРазмещение.Форма.ФормаЗапросаГИФТ" тогда
			ОбработкаДанныхБазыГифт(ВыбранноеЗначение);
		КонецЕсли;
       	Если ИсточникВыбора.ИмяФормы="ОбщаяФорма.итWMSФормаПараметровСтратегии" тогда
			ПоместитьВоВременноеХранилище(ВыбранноеЗначение,Объект.АдресХраненияПараметров);
		КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
&НаКлиенте
Процедура ВВидеДерева(Команда)
	ВВидеДереваНаСервере();
	Элементы.ТоварыДерево.Видимость=Истина;
	Элементы.Товары.Видимость=Ложь;
	ТригерОтображения=Истина;
КонецПроцедуры
&НаСервере
Процедура ВВидеДереваНаСервере()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	ТоварыДерево.ПолучитьЭлементы().Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтрокиПредставление,
	|	Товары.ИдентификаторУпаковки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Качество,
	|	Товары.ДатаРозлива,
	|	Товары.ЯчейкаПолучатель,
	|	Товары.Количество,
	|	Товары.СерияНоменклатуры,
	|	Товары.Склад,
	|	Товары.Комментарий
	|ПОМЕСТИТЬ ТчТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчТовары.ИдентификаторСтрокиПредставление,
	|	ТчТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТчТовары.Номенклатура,
	|	ТчТовары.Характеристика,
	|	ТчТовары.Качество,
	|	ТчТовары.ДатаРозлива,
	|	ТчТовары.ЯчейкаПолучатель КАК ЯчейкаПолучатель,
	|	ТчТовары.Количество КАК Количество,
	|	ТчТовары.СерияНоменклатуры,
	|	ТчТовары.Склад КАК Склад,
	|	ТчТовары.Комментарий КАК Комментарий
	|ИЗ
	|	ТчТовары КАК ТчТовары
	|ИТОГИ
	|	МАКСИМУМ(ЯчейкаПолучатель),
	|	СУММА(Количество),
	|	МАКСИМУМ(Склад),
	|	МАКСИМУМ(Комментарий)
	|ПО
	|	ИдентификаторУпаковки";
	
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаУпаковка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	пока ВыборкаУпаковка.Следующий() цикл
		НоваяСтрокаУпаковкаДерево = ТоварыДерево.ПолучитьЭлементы().Добавить();
		НоваяСтрокаУпаковкаДерево.ИдентификаторУпаковки= ВыборкаУпаковка.ИдентификаторУпаковки;
		НоваяСтрокаУпаковкаДерево.ЯчейкаПолучатель = ВыборкаУпаковка.ЯчейкаПолучатель;
		НоваяСтрокаУпаковкаДерево.Количество=ВыборкаУпаковка.Количество;
		НоваяСтрокаУпаковкаДерево.Картинка=АдресКартинкиКуба;
		НоваяСтрокаУпаковкаДерево.СтрокаУпаковки=Истина;
		НоваяСтрокаУпаковкаДерево.Склад=ВыборкаУпаковка.Склад;
		НоваяСтрокаУпаковкаДерево.Комментарий=ВыборкаУпаковка.Комментарий;
 
		
		ВыборкаДетальныеЗаписи=ВыборкаУпаковка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрокаНоменклатуры = НоваяСтрокаУпаковкаДерево.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатуры,ВыборкаДетальныеЗаписи);
			НоваяСтрокаНоменклатуры.ЯчейкаПолучатель=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
			НоваяСтрокаНоменклатуры.Склад=Справочники.Склады.ПустаяСсылка();
			НоваяСтрокаНоменклатуры.Комментарий="";
		КонецЦикла;
	КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры
&НаКлиенте
Процедура ВВидеСписка(Команда)
	Элементы.ТоварыДерево.Видимость=Ложь;
	Элементы.Товары.Видимость=Истина;
	ТригерОтображения=Ложь;
КонецПроцедуры
&НаКлиенте
Процедура СкопироватьТовары(Команда)
	Если  Элементы.ГруппаТовары.ТолькоПросмотр тогда
		Возврат
	КонецЕсли;	
	Если ТекущийЭлемент.Имя="Товары" тогда
		НоваяСтрока=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущийЭлемент.ТекущиеДанные);
		НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
		НоваяСтрока.ИдентификаторСтрокиПредставление=Строка(НоваяСтрока.ИдентификаторСтроки);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ДобавитьТовары(Команда)
	Если  Элементы.ГруппаТовары.ТолькоПросмотр тогда
		Возврат
	КонецЕсли;	
	НоваяСтрока=Объект.Товары.Добавить();
	НоваяСтрока.ИдентификаторСтроки=новый УникальныйИдентификатор;
	НоваяСтрока.ИдентификаторСтрокиПредставление= Строка(НоваяСтрока.ИдентификаторСтроки);
КонецПроцедуры
&НаКлиенте
Процедура Развернуть(Команда)
	//СтрокиПаллет=ПаллетМеста.ПолучитьЭлементы();
	//для Каждого Паллета из СтрокиПаллет цикл
	//	Элементы.ПаллетМеста.Развернуть(Паллета.ПолучитьИдентификатор());
	//КонецЦикла;
	Строки=ТоварыДерево.ПолучитьЭлементы();
	Если Строки.Количество()>0 тогда
		РазвернутьДанные(Строки);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура РазвернутьДанные(Строки)
	для Каждого Строка из Строки цикл
		Элементы.ТоварыДерево.Развернуть(Строка.ПолучитьИдентификатор());
		ПодчиненныеСтроки= Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество()>0 тогда
			РазвернутьДанные(ПодчиненныеСтроки);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура Свернуть(Команда)
	Строки=ТоварыДерево.ПолучитьЭлементы();
	Если Строки.Количество()>0 тогда
		СвернутьДанные(Строки);
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте	
Процедура СвернутьДанные(Строки)
	для Каждого Строка из Строки цикл
		ПодчиненныеСтроки= Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество()>0 тогда
			СвернутьДанные(ПодчиненныеСтроки);
		КонецЕсли;	
		Элементы.ТоварыДерево.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;	
КонецПроцедуры
&НаСервере
Процедура РазместитьПаллетыНаСервере()
	для Каждого стр из Объект.Товары цикл
		стр.ЯчейкаПолучатель=Справочники.итСкладскиеЯчейки.ПустаяСсылка();
	КонецЦикла;	
	Данные=РеквизитФормыВЗначение("Объект");
	Данные.ВыборСтратегииРазмещения();
	ЗначениеВРеквизитФормы(Данные,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура РазместитьПаллеты(Команда)	
	РазместитьПаллетыНаСервере();
	ПроставитьПредставлениеИдентификатора();
	ВариантОтображенияПользователя();	
КонецПроцедуры

&НаСервере
Процедура ПечатьЯчеекНаСервере(ТабличныйДокумент)
	Данные = РеквизитФормыВЗначение("Объект");
	Данные.ПечатьЭтикетокЯчеекНаПаллеты(ТабличныйДокумент,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЯчеек(Команда)
	Если Объект.Ссылка.Пустая() тогда
		Сообщить("Запишите документ");
		Возврат
	КонецЕсли;	
	ТабличныйДокумент= новый ТабличныйДокумент;
	ПечатьЯчеекНаСервере(ТабличныйДокумент);
	ТабличныйДокумент.Показать();
КонецПроцедуры
&НаСервере
Процедура ПечатьРеестрРазмещенияНаСервере(ТабличныйДокумент)
	Данные = РеквизитФормыВЗначение("Объект");
	Данные.ПечатьМакетВсеНаОдномЛисте(ТабличныйДокумент,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРеестрРазмещения(Команда)
	Если Объект.Ссылка.Пустая() тогда
		Сообщить("Запишите документ");
		Возврат
	КонецЕсли;	
	ТабличныйДокумент= новый ТабличныйДокумент;
	ПечатьРеестрРазмещенияНаСервере(ТабличныйДокумент);
	ТабличныйДокумент.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСтратегии(Команда)
	Если Объект.СтратегияРазмещения.Пустая() Тогда 
		Сообщить("Укажите стратегию размещения");
		Возврат
	КонецЕсли;	
	Данные=ПолучитьИзВременногоХранилища(Объект.АдресХраненияПараметров);
	ОткрытьФорму("ОбщаяФорма.итWMSФормаПараметровСтратегии",новый Структура("Стратегия,ДанныеПараметров",Объект.СтратегияРазмещения,Данные),ЭтаФорма);
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ПроставитьПредставлениеИдентификатора()
	для Каждого  стр из Объект.Товары цикл
		стр.ИдентификаторСтрокиПредставление=Строка(стр.ИдентификаторСтроки);
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура ВариантОтображенияПользователя()
	Если ТригерОтображения тогда
		ВВидеДерева("");
	иначе
		ВВидеСписка("");
	КонецЕсли;
КонецПроцедуры
&НаСервере
Функция ПолучитьТекущегоПользователя()
	Возврат	ПараметрыСеанса.ТекущийПользователь;
КонецФункции
&НаКлиенте
Процедура ОбработчикДиалогов(Результат,Параметры)Экспорт 
	Если Результат=КодВозвратаДиалога.Да тогда
		Выполнить(Параметры);
	иначе
		Возврат
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьЭлементов()
	ВидимостьДоступностьЭлементовНаСервере();
КонецПроцедуры
&НаСервере
Процедура ВидимостьДоступностьЭлементовНаСервере()
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикТрансляцииПриИзменении(Элемент)
	СтрокаДерева=Элемент.Родитель.ТекущиеДанные;
	ПолеИзменения=СтрЗаменить(Элемент.Имя,"ТоварыДерево","");
	Если ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтрокиПредставление) тогда
		Строка=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтрокиПредставление",СтрокаДерева.ИдентификаторСтрокиПредставление));
		Строка[0][ПолеИзменения]=Элемент.Родитель.ТекущиеДанные[ПолеИзменения];
		ЭтаФорма.Модифицированность=Истина;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура РассчетКоличестваВУпаковкеПриИзменении(Элемент)
	СтрокаИзменения=Элемент.Родитель.ТекущиеДанные;
	ПолеИзменения=СтрЗаменить(Элемент.Имя,"ТоварыДерево","");
	Если не СтрокаИзменения.СтрокаУпаковки тогда
		РодительСтрокиИзменения=СтрокаИзменения.ПолучитьРодителя();
	иначе
		РодительСтрокиИзменения=СтрокаИзменения;
	КонецЕсли;
	РодительСтрокиИзменения[ПолеИзменения]=0;
	СтрокиДляПересчета=РодительСтрокиИзменения.ПолучитьЭлементы();
	для Каждого стр из СтрокиДляПересчета цикл
		РодительСтрокиИзменения[ПолеИзменения]=РодительСтрокиИзменения[ПолеИзменения]+ стр[ПолеИзменения];
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ГрупповоеИзменениеСпискаПоИдУпаковки(ПолеИзменения,Значение,ИдентификаторУпаковки)
	МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторУпаковки",ИдентификаторУпаковки));
	для Каждого стр из МассивСтрок цикл
		стр[ПолеИзменения]=Значение;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПроверкаНаЗавершенностьПриемкиОснования(Ссылка)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	итWMSПриемка.Ссылка
	|ИЗ
	|	Документ.итWMSПриемка КАК итWMSПриемка
	|ГДЕ
	|	итWMSПриемка.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Если ВыборкаДетальныеЗаписи.Ссылка.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен тогда
			Возврат Истина;
		иначе
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	Возврат Ложь;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
&НаСервере
Процедура ЗавершитьПримкуНаСервере(Ссылка)
	ДокументПриемки=Ссылка.ПолучитьОбъект();
	ДокументПриемки.СтатусДокумента=Перечисления.итWMSСтатусыСкладскихДокументов.Завершен;
	ДокументПриемки.Записать();
КонецПроцедуры
&НаСервере
Процедура ПроверкаНаЗаполненностьЯчейкиПолучателя(Отказ, ПараметрыЗаписи)
	Если Объект.СтатусДокумента	<> Перечисления.итWMSСтатусыСкладскихДокументов.Создан  или (Объект.СтатусДокумента = Перечисления.итWMSСтатусыСкладскихДокументов.Создан и ПараметрыЗаписи.РежимЗаписи=РежимЗаписиДокумента.Проведение )тогда
		для Каждого стр из Объект.Товары цикл
			Если стр.ЯчейкаПолучатель=Справочники.итСкладскиеЯчейки.ПустаяСсылка() тогда
				Сообщить(" для паллеты "+стр.ИдентификаторУпаковки+" не назначенна ячейка");
				Отказ=Истина;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры
&НаСервере
Функция ПолучитьИерархиюСтратегииРазмещения()
	Возврат Справочники.итWMSСтратегии.Размещение;
КонецФункции
&НаКлиенте
Процедура ВосстановитьДанныеПараметровСтратегии() Экспорт 
	ВосстановитьДанныеПараметровСтратегииСервер();
КонецПроцедуры
&НаСервере
Процедура ВосстановитьДанныеПараметровСтратегииСервер()
	Данные=РеквизитФормыВЗначение("Объект");
	Объект.АдресХраненияПараметров=ПоместитьВоВременноеХранилище(Данные.ПараметрыСтратегии.Получить(),ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры
#КонецОбласти

#Область ГИФТ
&НаКлиенте
Процедура ГИФТ_СоздатьПТУ(Команда)
	Если ПроверкаНаСвязанноеПоступление() тогда
		Сообщить("у данного размещения есть поступление, если хотите создать новое, то предыдущее необходимо пометить на удаление");
		Возврат;
	КонецЕсли;	
	Форма=ПолучитьФорму("Обработка.итОбработкаТансляторУпрОбычноеПриложение.Форма.Форма");
	Форма.ДокументОснование=Объект.Ссылка;
	Форма.ДокументТрансляции="ПТУ";
	Форма.открыть();
	
КонецПроцедуры
&НаСервере
Функция ПроверкаНаСвязанноеПоступление()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.итОснование = &итОснование
	|	И ПоступлениеТоваровУслуг.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("итОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции
&НаСервере
Процедура ОбработкаИзмененияРаспределенныхДанных(СтруктураДанных)
	НачатьТранзакцию();
	Попытка
		для Каждого Строка из СтруктураДанных.СписокСтрок цикл
			МассивСтрок=Объект.Товары.НайтиСтроки(новый Структура("ИдентификаторСтроки",Строка.Значение));
			для Каждого стр из МассивСтрок цикл
				стр.ЯчейкаПолучатель=СтруктураДанных.ЯчейкаПолучатель;
				стр.Склад=СтруктураДанных.Склад;
			КонецЦикла;
		КонецЦикла;
		ЭтаФорма.Записать();
		НаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдЗадачи.Установить(СтруктураДанных.ИдЗадачи);
		НаборЗаписей.Отбор.ДокументОснование.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		Для Каждого Запись из НаборЗаписей цикл
			Запись.ЯчейкаПолучатель=СтруктураДанных.ЯчейкаПолучатель;
			Если Запись.ТСД<>Справочники.итWMSСправочникТСД.ПустаяСсылка() тогда
				НовыйНаборЗаписей=РегистрыСведений.итWMSЗадачиТСД.СоздатьНаборЗаписей();
				НовыйНаборЗаписей.Отбор.ИдЗадачи.Установить(Запись.ИдЗадачи);
				НовыйНаборЗаписей.Отбор.ДокументОснование.Установить(Запись.ДокументОснование);
				НовыйНаборЗаписей.Отбор.ТСД.Установить(Запись.ТСД);
				НовыйНаборЗаписей.Отбор.ТипЗадачи.Установить(Запись.ТипЗадачи);
				НовыйНаборЗаписей.Отбор.ИдЗадачиРодителя.Установить(Запись.ИдЗадачиРодителя);
				ПланыОбмена.ЗарегистрироватьИзменения(Запись.ТСД.УзелПланаОбмена,НовыйНаборЗаписей);	
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьДанныеГИФТ(Команда)	
	ОткрытьФорму("Документ.итWMSРучноеРазмещение.Форма.ФормаЗапросаГИФТ",,ЭтаФорма);
КонецПроцедуры
&НаСервере
Процедура ОбработкаДанныхБазыГифт(МассивДанных)
	Для Каждого стр из МассивДанных цикл
		НоваяСтрока=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
		НоваяСтрока.ЯчейкаПолучатель=стр.Ячейка;
		НоваяСтрока.Склад=Объект.Склад;
	КонецЦикла;
	КонецПроцедуры
#КонецОбласти


